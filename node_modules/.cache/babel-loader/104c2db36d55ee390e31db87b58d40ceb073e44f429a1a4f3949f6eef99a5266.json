{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_EXTENSIONS = void 0;\nObject.defineProperty(exports, \"File\", {\n  enumerable: true,\n  get: function () {\n    return _file.default;\n  }\n});\nexports.OptionManager = void 0;\nexports.Plugin = Plugin;\nObject.defineProperty(exports, \"buildExternalHelpers\", {\n  enumerable: true,\n  get: function () {\n    return _buildExternalHelpers.default;\n  }\n});\nObject.defineProperty(exports, \"createConfigItem\", {\n  enumerable: true,\n  get: function () {\n    return _config.createConfigItem;\n  }\n});\nObject.defineProperty(exports, \"createConfigItemAsync\", {\n  enumerable: true,\n  get: function () {\n    return _config.createConfigItemAsync;\n  }\n});\nObject.defineProperty(exports, \"createConfigItemSync\", {\n  enumerable: true,\n  get: function () {\n    return _config.createConfigItemSync;\n  }\n});\nObject.defineProperty(exports, \"getEnv\", {\n  enumerable: true,\n  get: function () {\n    return _environment.getEnv;\n  }\n});\nObject.defineProperty(exports, \"loadOptions\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadOptions;\n  }\n});\nObject.defineProperty(exports, \"loadOptionsAsync\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadOptionsAsync;\n  }\n});\nObject.defineProperty(exports, \"loadOptionsSync\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadOptionsSync;\n  }\n});\nObject.defineProperty(exports, \"loadPartialConfig\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadPartialConfig;\n  }\n});\nObject.defineProperty(exports, \"loadPartialConfigAsync\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadPartialConfigAsync;\n  }\n});\nObject.defineProperty(exports, \"loadPartialConfigSync\", {\n  enumerable: true,\n  get: function () {\n    return _config.loadPartialConfigSync;\n  }\n});\nObject.defineProperty(exports, \"parse\", {\n  enumerable: true,\n  get: function () {\n    return _parse.parse;\n  }\n});\nObject.defineProperty(exports, \"parseAsync\", {\n  enumerable: true,\n  get: function () {\n    return _parse.parseAsync;\n  }\n});\nObject.defineProperty(exports, \"parseSync\", {\n  enumerable: true,\n  get: function () {\n    return _parse.parseSync;\n  }\n});\nObject.defineProperty(exports, \"resolvePlugin\", {\n  enumerable: true,\n  get: function () {\n    return _files.resolvePlugin;\n  }\n});\nObject.defineProperty(exports, \"resolvePreset\", {\n  enumerable: true,\n  get: function () {\n    return _files.resolvePreset;\n  }\n});\nObject.defineProperty((0, exports), \"template\", {\n  enumerable: true,\n  get: function () {\n    return _template().default;\n  }\n});\nObject.defineProperty((0, exports), \"tokTypes\", {\n  enumerable: true,\n  get: function () {\n    return _parser().tokTypes;\n  }\n});\nObject.defineProperty(exports, \"transform\", {\n  enumerable: true,\n  get: function () {\n    return _transform.transform;\n  }\n});\nObject.defineProperty(exports, \"transformAsync\", {\n  enumerable: true,\n  get: function () {\n    return _transform.transformAsync;\n  }\n});\nObject.defineProperty(exports, \"transformFile\", {\n  enumerable: true,\n  get: function () {\n    return _transformFile.transformFile;\n  }\n});\nObject.defineProperty(exports, \"transformFileAsync\", {\n  enumerable: true,\n  get: function () {\n    return _transformFile.transformFileAsync;\n  }\n});\nObject.defineProperty(exports, \"transformFileSync\", {\n  enumerable: true,\n  get: function () {\n    return _transformFile.transformFileSync;\n  }\n});\nObject.defineProperty(exports, \"transformFromAst\", {\n  enumerable: true,\n  get: function () {\n    return _transformAst.transformFromAst;\n  }\n});\nObject.defineProperty(exports, \"transformFromAstAsync\", {\n  enumerable: true,\n  get: function () {\n    return _transformAst.transformFromAstAsync;\n  }\n});\nObject.defineProperty(exports, \"transformFromAstSync\", {\n  enumerable: true,\n  get: function () {\n    return _transformAst.transformFromAstSync;\n  }\n});\nObject.defineProperty(exports, \"transformSync\", {\n  enumerable: true,\n  get: function () {\n    return _transform.transformSync;\n  }\n});\nObject.defineProperty((0, exports), \"traverse\", {\n  enumerable: true,\n  get: function () {\n    return _traverse().default;\n  }\n});\nexports.version = exports.types = void 0;\nvar _file = require(\"./transformation/file/file\");\nvar _buildExternalHelpers = require(\"./tools/build-external-helpers\");\nvar _files = require(\"./config/files\");\nvar _environment = require(\"./config/helpers/environment\");\nfunction _types() {\n  const data = require(\"@babel/types\");\n  _types = function () {\n    return data;\n  };\n  return data;\n}\nObject.defineProperty((0, exports), \"types\", {\n  enumerable: true,\n  get: function () {\n    return _types();\n  }\n});\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n  _parser = function () {\n    return data;\n  };\n  return data;\n}\nfunction _traverse() {\n  const data = require(\"@babel/traverse\");\n  _traverse = function () {\n    return data;\n  };\n  return data;\n}\nfunction _template() {\n  const data = require(\"@babel/template\");\n  _template = function () {\n    return data;\n  };\n  return data;\n}\nvar _config = require(\"./config\");\nvar _transform = require(\"./transform\");\nvar _transformFile = require(\"./transform-file\");\nvar _transformAst = require(\"./transform-ast\");\nvar _parse = require(\"./parse\");\nconst version = \"7.20.12\";\nexports.version = version;\nconst DEFAULT_EXTENSIONS = Object.freeze([\".js\", \".jsx\", \".es6\", \".es\", \".mjs\", \".cjs\"]);\nexports.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS;\nclass OptionManager {\n  init(opts) {\n    return (0, _config.loadOptionsSync)(opts);\n  }\n}\nexports.OptionManager = OptionManager;\nfunction Plugin(alias) {\n  throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);\n}\n0 && (exports.types = exports.traverse = exports.tokTypes = exports.template = 0);","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AAEA;AACA;AAEA;AAAsD;EAAA;EAAAA;IAAA;EAAA;EAAA;AAAA;AAAAC;EAAAC;EAAAC;IAAA;EAAA;AAAA;AAMtD;EAAA;EAAAC;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAAC;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAAC;IAAA;EAAA;EAAA;AAAA;AAEA;AAwBA;AAMA;AAKA;AAKA;AAzDO,MAAMC,OAAO,YAAuB;AAACC;AA+DrC,MAAMC,kBAAkB,GAAGR,MAAM,CAACS,MAAM,CAAC,CAC9C,KAAK,EACL,MAAM,EACN,MAAM,EACN,KAAK,EACL,MAAM,EACN,MAAM,CACP,CAAU;AAACF;AAIL,MAAMG,aAAa,CAAC;EACzBC,IAAI,CAACC,IAAQ,EAAE;IACb,OAAO,2BAAe,EAACA,IAAI,CAAC;EAC9B;AACF;AAACL;AAEM,SAASM,MAAM,CAACC,KAAa,EAAE;EACpC,MAAM,IAAIC,KAAK,CACZ,QAAOD,KAAM,kEAAiE,CAChF;AACH;AAAC","names":["_types","Object","enumerable","get","_parser","_traverse","_template","version","exports","DEFAULT_EXTENSIONS","freeze","OptionManager","init","opts","Plugin","alias","Error"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/core/src/index.ts"],"sourcesContent":["declare const PACKAGE_JSON: { name: string; version: string };\nexport const version = PACKAGE_JSON.version;\n\nexport { default as File } from \"./transformation/file/file\";\nexport type { default as PluginPass } from \"./transformation/plugin-pass\";\nexport { default as buildExternalHelpers } from \"./tools/build-external-helpers\";\nexport { resolvePlugin, resolvePreset } from \"./config/files\";\n\nexport { getEnv } from \"./config/helpers/environment\";\n\n// NOTE: Lazy re-exports aren't detected by the Node.js CJS-ESM interop.\n// These are handled by pluginInjectNodeReexportsHints in our babel.config.js\n// so that they can work well.\nexport * as types from \"@babel/types\";\nexport { tokTypes } from \"@babel/parser\";\nexport { default as traverse } from \"@babel/traverse\";\nexport { default as template } from \"@babel/template\";\n\nexport {\n  createConfigItem,\n  createConfigItemSync,\n  createConfigItemAsync,\n} from \"./config\";\n\nexport {\n  loadPartialConfig,\n  loadPartialConfigSync,\n  loadPartialConfigAsync,\n  loadOptions,\n  loadOptionsSync,\n  loadOptionsAsync,\n} from \"./config\";\n\nexport type {\n  CallerMetadata,\n  InputOptions,\n  PluginAPI,\n  PluginObject,\n  PresetAPI,\n  PresetObject,\n} from \"./config\";\n\nexport {\n  transform,\n  transformSync,\n  transformAsync,\n  type FileResult,\n} from \"./transform\";\nexport {\n  transformFile,\n  transformFileSync,\n  transformFileAsync,\n} from \"./transform-file\";\nexport {\n  transformFromAst,\n  transformFromAstSync,\n  transformFromAstAsync,\n} from \"./transform-ast\";\nexport { parse, parseSync, parseAsync } from \"./parse\";\n\n/**\n * Recommended set of compilable extensions. Not used in @babel/core directly, but meant as\n * as an easy source for tooling making use of @babel/core.\n */\nexport const DEFAULT_EXTENSIONS = Object.freeze([\n  \".js\",\n  \".jsx\",\n  \".es6\",\n  \".es\",\n  \".mjs\",\n  \".cjs\",\n] as const);\n\n// For easier backward-compatibility, provide an API like the one we exposed in Babel 6.\nimport { loadOptionsSync } from \"./config\";\nexport class OptionManager {\n  init(opts: {}) {\n    return loadOptionsSync(opts);\n  }\n}\n\nexport function Plugin(alias: string) {\n  throw new Error(\n    `The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`,\n  );\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}