{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInclusionReasons = getInclusionReasons;\nvar _semver = require(\"semver\");\nvar _pretty = require(\"./pretty\");\nvar _utils = require(\"./utils\");\nfunction getInclusionReasons(item, targetVersions, list) {\n  const minVersions = list[item] || {};\n  return Object.keys(targetVersions).reduce((result, env) => {\n    const minVersion = (0, _utils.getLowestImplementedVersion)(minVersions, env);\n    const targetVersion = targetVersions[env];\n    if (!minVersion) {\n      result[env] = (0, _pretty.prettifyVersion)(targetVersion);\n    } else {\n      const minIsUnreleased = (0, _utils.isUnreleasedVersion)(minVersion, env);\n      const targetIsUnreleased = (0, _utils.isUnreleasedVersion)(targetVersion, env);\n      if (!targetIsUnreleased && (minIsUnreleased || _semver.lt(targetVersion.toString(), (0, _utils.semverify)(minVersion)))) {\n        result[env] = (0, _pretty.prettifyVersion)(targetVersion);\n      }\n    }\n    return result;\n  }, {});\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAOO,SAASA,mBAAmB,CACjCC,IAAY,EACZC,cAAuB,EACvBC,IAAgC,EAChC;EACA,MAAMC,WAAW,GAAGD,IAAI,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;EAEpC,OAAQI,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAAcK,MAAM,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;IACvE,MAAMC,UAAU,GAAG,sCAA2B,EAACN,WAAW,EAAEK,GAAG,CAAC;IAChE,MAAME,aAAa,GAAGT,cAAc,CAACO,GAAG,CAAC;IAEzC,IAAI,CAACC,UAAU,EAAE;MACfF,MAAM,CAACC,GAAG,CAAC,GAAG,2BAAe,EAACE,aAAa,CAAC;IAC9C,CAAC,MAAM;MACL,MAAMC,eAAe,GAAG,8BAAmB,EAACF,UAAU,EAAED,GAAG,CAAC;MAC5D,MAAMI,kBAAkB,GAAG,8BAAmB,EAACF,aAAa,EAAEF,GAAG,CAAC;MAElE,IACE,CAACI,kBAAkB,KAClBD,eAAe,IACdE,OAAM,CAACC,EAAE,CAACJ,aAAa,CAACK,QAAQ,EAAE,EAAE,oBAAS,EAACN,UAAU,CAAC,CAAC,CAAC,EAC7D;QACAF,MAAM,CAACC,GAAG,CAAC,GAAG,2BAAe,EAACE,aAAa,CAAC;MAC9C;IACF;IAEA,OAAOH,MAAM;EACf,CAAC,EAAE,CAAC,CAAC,CAAoC;AAC3C","names":["getInclusionReasons","item","targetVersions","list","minVersions","Object","keys","reduce","result","env","minVersion","targetVersion","minIsUnreleased","targetIsUnreleased","semver","lt","toString"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/helper-compilation-targets/src/debug.ts"],"sourcesContent":["import semver from \"semver\";\nimport { prettifyVersion } from \"./pretty\";\nimport {\n  semverify,\n  isUnreleasedVersion,\n  getLowestImplementedVersion,\n} from \"./utils\";\nimport type { Target, Targets } from \"./types\";\n\nexport function getInclusionReasons(\n  item: string,\n  targetVersions: Targets,\n  list: { [key: string]: Targets },\n) {\n  const minVersions = list[item] || {};\n\n  return (Object.keys(targetVersions) as Target[]).reduce((result, env) => {\n    const minVersion = getLowestImplementedVersion(minVersions, env);\n    const targetVersion = targetVersions[env];\n\n    if (!minVersion) {\n      result[env] = prettifyVersion(targetVersion);\n    } else {\n      const minIsUnreleased = isUnreleasedVersion(minVersion, env);\n      const targetIsUnreleased = isUnreleasedVersion(targetVersion, env);\n\n      if (\n        !targetIsUnreleased &&\n        (minIsUnreleased ||\n          semver.lt(targetVersion.toString(), semverify(minVersion)))\n      ) {\n        result[env] = prettifyVersion(targetVersion);\n      }\n    }\n\n    return result;\n  }, {} as Partial<Record<Target, string>>);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}