{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _genMapping = require(\"@jridgewell/gen-mapping\");\nclass SourceMap {\n  constructor(opts, code) {\n    var _opts$sourceFileName;\n    this._map = void 0;\n    this._rawMappings = void 0;\n    this._sourceFileName = void 0;\n    this._lastGenLine = 0;\n    this._lastSourceLine = 0;\n    this._lastSourceColumn = 0;\n    const map = this._map = new _genMapping.GenMapping({\n      sourceRoot: opts.sourceRoot\n    });\n    this._sourceFileName = (_opts$sourceFileName = opts.sourceFileName) == null ? void 0 : _opts$sourceFileName.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n    if (typeof code === \"string\") {\n      (0, _genMapping.setSourceContent)(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      Object.keys(code).forEach(sourceFileName => {\n        (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\\\/g, \"/\"), code[sourceFileName]);\n      });\n    }\n  }\n  get() {\n    return (0, _genMapping.toEncodedMap)(this._map);\n  }\n  getDecoded() {\n    return (0, _genMapping.toDecodedMap)(this._map);\n  }\n  getRawMappings() {\n    return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));\n  }\n  mark(generated, line, column, identifierName, filename) {\n    this._rawMappings = undefined;\n    (0, _genMapping.maybeAddMapping)(this._map, {\n      name: identifierName,\n      generated,\n      source: line == null ? undefined : (filename == null ? void 0 : filename.replace(/\\\\/g, \"/\")) || this._sourceFileName,\n      original: line == null ? undefined : {\n        line: line,\n        column: column\n      }\n    });\n  }\n}\nexports.default = SourceMap;","map":{"version":3,"mappings":";;;;;;AAAA;AAmBe,MAAMA,SAAS,CAAC;EAa7BC,WAAW,CACTC,IAAsD,EACtDC,IAAmD,EACnD;IAAA;IAAA,KAfMC,IAAI;IAAA,KACJC,YAAY;IAAA,KACZC,eAAe;IAAA,KAGfC,YAAY,GAAG,CAAC;IAAA,KAChBC,eAAe,GAAG,CAAC;IAAA,KAInBC,iBAAiB,GAAG,CAAC;IAM3B,MAAMC,GAAG,GAAI,IAAI,CAACN,IAAI,GAAG,IAAIO,sBAAU,CAAC;MAAEC,UAAU,EAAEV,IAAI,CAACU;IAAW,CAAC,CAAE;IACzE,IAAI,CAACN,eAAe,2BAAGJ,IAAI,CAACW,cAAc,qBAAnBC,qBAAqBC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;IAC/D,IAAI,CAACV,YAAY,GAAGW,SAAS;IAE7B,IAAI,OAAOb,IAAI,KAAK,QAAQ,EAAE;MAC5B,gCAAgB,EAACO,GAAG,EAAE,IAAI,CAACJ,eAAe,EAAEH,IAAI,CAAC;IACnD,CAAC,MAAM,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;MACnCc,MAAM,CAACC,IAAI,CAACf,IAAI,CAAC,CAACgB,OAAO,CAACN,cAAc,IAAI;QAC1C,gCAAgB,EACdH,GAAG,EACHG,cAAc,CAACE,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAClCZ,IAAI,CAACU,cAAc,CAAC,CACrB;MACH,CAAC,CAAC;IACJ;EACF;EAKAO,GAAG,GAAqB;IACtB,OAAO,4BAAY,EAAC,IAAI,CAAChB,IAAI,CAAC;EAChC;EAEAiB,UAAU,GAAqB;IAC7B,OAAO,4BAAY,EAAC,IAAI,CAACjB,IAAI,CAAC;EAChC;EAEAkB,cAAc,GAAc;IAC1B,OAAQ,IAAI,CAACjB,YAAY,KAAjB,IAAI,CAACA,YAAY,GAAK,2BAAW,EAAC,IAAI,CAACD,IAAI,CAAC;EACtD;EAOAmB,IAAI,CACFC,SAA2C,EAC3CC,IAAY,EACZC,MAAc,EACdC,cAA8B,EAC9BC,QAAwB,EACxB;IACA,IAAI,CAACvB,YAAY,GAAGW,SAAS;IAE7B,+BAAe,EAAC,IAAI,CAACZ,IAAI,EAAE;MACzByB,IAAI,EAAEF,cAAc;MACpBH,SAAS;MACTM,MAAM,EACJL,IAAI,IAAI,IAAI,GACRT,SAAS,GACT,SAAQ,oBAARY,QAAQ,CAAEb,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,KAAI,IAAI,CAACT,eAAe;MAC3DyB,QAAQ,EACNN,IAAI,IAAI,IAAI,GACRT,SAAS,GACT;QACES,IAAI,EAAEA,IAAI;QACVC,MAAM,EAAEA;MACV;IACR,CAAC,CAAC;EACJ;AACF;AAACM","names":["SourceMap","constructor","opts","code","_map","_rawMappings","_sourceFileName","_lastGenLine","_lastSourceLine","_lastSourceColumn","map","GenMapping","sourceRoot","sourceFileName","_opts$sourceFileName","replace","undefined","Object","keys","forEach","get","getDecoded","getRawMappings","mark","generated","line","column","identifierName","filename","name","source","original","exports"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/generator/src/source-map.ts"],"sourcesContent":["import {\n  GenMapping,\n  maybeAddMapping,\n  setSourceContent,\n  allMappings,\n  toEncodedMap,\n  toDecodedMap,\n} from \"@jridgewell/gen-mapping\";\n\nimport type {\n  EncodedSourceMap,\n  DecodedSourceMap,\n  Mapping,\n} from \"@jridgewell/gen-mapping\";\n\n/**\n * Build a sourcemap.\n */\n\nexport default class SourceMap {\n  private _map: GenMapping;\n  private _rawMappings: Mapping[] | undefined;\n  private _sourceFileName: string | undefined;\n\n  // Any real line is > 0, so init to 0 is fine.\n  private _lastGenLine = 0;\n  private _lastSourceLine = 0;\n\n  // Source columns can be 0, but we ony check in unison with sourceLine, which\n  // inits to an impossible value. So init to 0 is fine.\n  private _lastSourceColumn = 0;\n\n  constructor(\n    opts: { sourceFileName?: string; sourceRoot?: string },\n    code: string | { [sourceFileName: string]: string },\n  ) {\n    const map = (this._map = new GenMapping({ sourceRoot: opts.sourceRoot }));\n    this._sourceFileName = opts.sourceFileName?.replace(/\\\\/g, \"/\");\n    this._rawMappings = undefined;\n\n    if (typeof code === \"string\") {\n      setSourceContent(map, this._sourceFileName, code);\n    } else if (typeof code === \"object\") {\n      Object.keys(code).forEach(sourceFileName => {\n        setSourceContent(\n          map,\n          sourceFileName.replace(/\\\\/g, \"/\"),\n          code[sourceFileName],\n        );\n      });\n    }\n  }\n\n  /**\n   * Get the sourcemap.\n   */\n  get(): EncodedSourceMap {\n    return toEncodedMap(this._map);\n  }\n\n  getDecoded(): DecodedSourceMap {\n    return toDecodedMap(this._map);\n  }\n\n  getRawMappings(): Mapping[] {\n    return (this._rawMappings ||= allMappings(this._map));\n  }\n\n  /**\n   * Mark the current generated position with a source position. May also be passed null line/column\n   * values to insert a mapping to nothing.\n   */\n\n  mark(\n    generated: { line: number; column: number },\n    line: number,\n    column: number,\n    identifierName?: string | null,\n    filename?: string | null,\n  ) {\n    this._rawMappings = undefined;\n\n    maybeAddMapping(this._map, {\n      name: identifierName,\n      generated,\n      source:\n        line == null\n          ? undefined\n          : filename?.replace(/\\\\/g, \"/\") || this._sourceFileName,\n      original:\n        line == null\n          ? undefined\n          : {\n              line: line,\n              column: column,\n            },\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}