{"ast":null,"code":"import * as Serialize from \"./serialize\";\nconst StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\nconst createEnumParam = enumValues => ({\n  encode: Serialize.encodeString,\n  decode: input => Serialize.decodeEnum(input, enumValues)\n});\nconst createEnumArrayParam = enumValues => ({\n  encode: text => Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: input => Serialize.decodeArrayEnum(input, enumValues)\n});\nconst createEnumDelimitedArrayParam = function (enumValues) {\n  let entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  return {\n    encode: text => Serialize.encodeDelimitedArray(text == null || Array.isArray(text) ? text : [text], entrySeparator),\n    decode: input => Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator)\n  };\n};\nconst NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\nconst ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\nconst ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\nconst NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\nconst JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\nconst DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n    return valueA.getFullYear() === valueB.getFullYear() && valueA.getMonth() === valueB.getMonth() && valueA.getDate() === valueB.getDate();\n  }\n};\nconst DateTimeParam = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (valueA, valueB) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n    return valueA.valueOf() === valueB.valueOf();\n  }\n};\nconst BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\nconst NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\nconst DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\nconst DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};\nexport { ArrayParam, BooleanParam, DateParam, DateTimeParam, DelimitedArrayParam, DelimitedNumericArrayParam, JsonParam, NumberParam, NumericArrayParam, NumericObjectParam, ObjectParam, StringParam, createEnumArrayParam, createEnumDelimitedArrayParam, createEnumParam };","map":{"version":3,"mappings":"AAAA,YAAYA,eAAe;AAMpB,MAAMC,cAGT;EACFC,QAAQF,UAAUG;EAClBC,QAAQJ,UAAUK;AACpB;AAKO,MAAMC,kBACXC,eACkE;EAClEL,QAAQF,UAAUG;EAClBC,QAASI,SAAUR,UAAUS,WAAWD,OAAOD,UAAU;AAC3D;AAKO,MAAMG,uBACXH,eACsE;EACtEL,QAASS,QACPX,UAAUY,YAAYD,QAAQ,QAAQE,MAAMC,QAAQH,IAAI,IAAIA,OAAO,CAACA,IAAI,CAAC;EAC3EP,QAASI,SAAUR,UAAUe,gBAAgBP,OAAOD,UAAU;AAChE;AAKO,MAAMS,gCAAgC,UAC3CT;EAAA,IACAU,qFAAiB;EAAA,OACqD;IACtEf,QAASS,QACPX,UAAUkB,qBACRP,QAAQ,QAAQE,MAAMC,QAAQH,IAAI,IAAIA,OAAO,CAACA,IAAI,GAClDM,eACF;IACFb,QAASI,SACPR,UAAUmB,yBAAyBX,OAAOD,YAAYU,cAAc;EACxE;AAAA;AAKO,MAAMG,cAGT;EACFlB,QAAQF,UAAUqB;EAClBjB,QAAQJ,UAAUsB;AACpB;AAKO,MAAMC,cAGT;EACFrB,QAAQF,UAAUwB;EAClBpB,QAAQJ,UAAUyB;AACpB;AAKO,MAAMC,aAGT;EACFxB,QAAQF,UAAUY;EAClBR,QAAQJ,UAAU2B;AACpB;AAKO,MAAMC,oBAGT;EACF1B,QAAQF,UAAU6B;EAClBzB,QAAQJ,UAAU8B;AACpB;AAKO,MAAMC,YAAwC;EACnD7B,QAAQF,UAAUgC;EAClB5B,QAAQJ,UAAUiC;AACpB;AAKO,MAAMC,YAGT;EACFhC,QAAQF,UAAUmC;EAClB/B,QAAQJ,UAAUoC;EAClBC,QAAQ,CACNC,QACAC,WACG;IACH,IAAID,WAAWC,QAAQ,OAAO;IAC9B,IAAID,UAAU,QAAQC,UAAU,MAAM,OAAOD,WAAWC;IAGxD,OACED,OAAOE,aAAY,KAAMD,OAAOC,aAAY,IAC5CF,OAAOG,UAAS,KAAMF,OAAOE,UAAS,IACtCH,OAAOI,SAAQ,KAAMH,OAAOG,SAAQ;EAExC;AACF;AAKO,MAAMC,gBAGT;EACFzC,QAAQF,UAAU4C;EAClBxC,QAAQJ,UAAU6C;EAClBR,QAAQ,CACNC,QACAC,WACG;IACH,IAAID,WAAWC,QAAQ,OAAO;IAC9B,IAAID,UAAU,QAAQC,UAAU,MAAM,OAAOD,WAAWC;IAExD,OAAOD,OAAOQ,SAAQ,KAAMP,OAAOO,SAAQ;EAC7C;AACF;AAKO,MAAMC,eAGT;EACF7C,QAAQF,UAAUgD;EAClB5C,QAAQJ,UAAUiD;AACpB;AAKO,MAAMC,qBAGT;EACFhD,QAAQF,UAAUmD;EAClB/C,QAAQJ,UAAUoD;AACpB;AAKO,MAAMC,sBAGT;EACFnD,QAAQF,UAAUkB;EAClBd,QAAQJ,UAAUsD;AACpB;AAKO,MAAMC,6BAGT;EACFrD,QAAQF,UAAUwD;EAClBpD,QAAQJ,UAAUyD;AACpB","names":["Serialize","StringParam","encode","encodeString","decode","decodeString","createEnumParam","enumValues","input","decodeEnum","createEnumArrayParam","text","encodeArray","Array","isArray","decodeArrayEnum","createEnumDelimitedArrayParam","entrySeparator","encodeDelimitedArray","decodeDelimitedArrayEnum","NumberParam","encodeNumber","decodeNumber","ObjectParam","encodeObject","decodeObject","ArrayParam","decodeArray","NumericArrayParam","encodeNumericArray","decodeNumericArray","JsonParam","encodeJson","decodeJson","DateParam","encodeDate","decodeDate","equals","valueA","valueB","getFullYear","getMonth","getDate","DateTimeParam","encodeDateTime","decodeDateTime","valueOf","BooleanParam","encodeBoolean","decodeBoolean","NumericObjectParam","encodeNumericObject","decodeNumericObject","DelimitedArrayParam","decodeDelimitedArray","DelimitedNumericArrayParam","encodeDelimitedNumericArray","decodeDelimitedNumericArray"],"sources":["/Users/elahehaslani/Documents/GitHub/movie-ticket-booking/node_modules/serialize-query-params/src/params.ts"],"sourcesContent":["import * as Serialize from './serialize';\nimport { QueryParamConfig } from './types';\n\n/**\n * String values\n */\nexport const StringParam: QueryParamConfig<\n  string | null | undefined,\n  string | null | undefined\n> = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString,\n};\n\n/**\n * String enum\n */\nexport const createEnumParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T | null | undefined, T | null | undefined> => ({\n  encode: Serialize.encodeString,\n  decode: (input) => Serialize.decodeEnum(input, enumValues),\n});\n\n/**\n * Array enum\n */\nexport const createEnumArrayParam = <T extends string>(\n  enumValues: T[]\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeArray(text == null || Array.isArray(text) ? text : [text]),\n  decode: (input) => Serialize.decodeArrayEnum(input, enumValues),\n});\n\n/**\n * Array delimited enum\n */\nexport const createEnumDelimitedArrayParam = <T extends string>(\n  enumValues: T[],\n  entrySeparator = '_'\n): QueryParamConfig<T[] | null | undefined, T[] | null | undefined> => ({\n  encode: (text) =>\n    Serialize.encodeDelimitedArray(\n      text == null || Array.isArray(text) ? text : [text],\n      entrySeparator\n    ),\n  decode: (input) =>\n    Serialize.decodeDelimitedArrayEnum(input, enumValues, entrySeparator),\n});\n\n/**\n * Numbers (integers or floats)\n */\nexport const NumberParam: QueryParamConfig<\n  number | null | undefined,\n  number | null | undefined\n> = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber,\n};\n\n/**\n * For flat objects where values are strings\n */\nexport const ObjectParam: QueryParamConfig<\n  { [key: string]: string | undefined } | null | undefined,\n  { [key: string]: string | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const ArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const NumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray,\n};\n\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport const JsonParam: QueryParamConfig<any, any> = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson,\n};\n\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport const DateParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    // ignore time of day\n    return (\n      valueA.getFullYear() === valueB.getFullYear() &&\n      valueA.getMonth() === valueB.getMonth() &&\n      valueA.getDate() === valueB.getDate()\n    );\n  },\n};\n\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or Â±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport const DateTimeParam: QueryParamConfig<\n  Date | null | undefined,\n  Date | null | undefined\n> = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime,\n  equals: (\n    valueA: Date | null | undefined,\n    valueB: Date | null | undefined\n  ) => {\n    if (valueA === valueB) return true;\n    if (valueA == null || valueB == null) return valueA === valueB;\n\n    return valueA.valueOf() === valueB.valueOf();\n  },\n};\n\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport const BooleanParam: QueryParamConfig<\n  boolean | null | undefined,\n  boolean | null | undefined\n> = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean,\n};\n\n/**\n * For flat objects where the values are numbers\n */\nexport const NumericObjectParam: QueryParamConfig<\n  { [key: string]: number | null | undefined } | null | undefined,\n  { [key: string]: number | null | undefined } | null | undefined\n> = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject,\n};\n\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport const DelimitedArrayParam: QueryParamConfig<\n  (string | null)[] | null | undefined,\n  (string | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray,\n};\n\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport const DelimitedNumericArrayParam: QueryParamConfig<\n  (number | null)[] | null | undefined,\n  (number | null)[] | null | undefined\n> = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray,\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}