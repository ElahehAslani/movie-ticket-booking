{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nclass Buffer {\n  constructor(map) {\n    this._map = null;\n    this._buf = \"\";\n    this._str = \"\";\n    this._appendCount = 0;\n    this._last = 0;\n    this._queue = [];\n    this._queueCursor = 0;\n    this._position = {\n      line: 1,\n      column: 0\n    };\n    this._sourcePosition = {\n      identifierName: undefined,\n      line: undefined,\n      column: undefined,\n      filename: undefined\n    };\n    this._map = map;\n    this._allocQueue();\n  }\n  _allocQueue() {\n    const queue = this._queue;\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        filename: \"\"\n      });\n    }\n  }\n  _pushQueue(char, repeat, line, column, identifierName, filename) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.identifierName = identifierName;\n    item.filename = filename;\n    this._queueCursor++;\n  }\n  _popQueue() {\n    if (this._queueCursor === 0) {\n      throw new Error(\"Cannot pop from empty queue\");\n    }\n    return this._queue[--this._queueCursor];\n  }\n  get() {\n    this._flush();\n    const map = this._map;\n    const result = {\n      code: (this._buf + this._str).trimRight(),\n      decodedMap: map == null ? void 0 : map.getDecoded(),\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, \"map\", {\n          value,\n          writable: true\n        });\n      },\n      get rawMappings() {\n        const mappings = map == null ? void 0 : map.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, \"rawMappings\", {\n          value,\n          writable: true\n        });\n      }\n    };\n    return result;\n  }\n  append(str, maybeNewline) {\n    this._flush();\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n  appendChar(char) {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n  queue(char) {\n    if (char === 10) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== 32 && char !== 9) {\n          break;\n        }\n        this._queueCursor--;\n      }\n    }\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.identifierName, sourcePosition.filename);\n  }\n  queueIndentation(char, repeat) {\n    this._pushQueue(char, repeat, undefined, undefined, undefined, undefined);\n  }\n  _flush() {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n  _appendChar(char, repeat, sourcePos) {\n    this._last = char;\n    this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char);\n    if (char !== 10) {\n      this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.filename);\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n  }\n  _append(str, sourcePos, maybeNewline) {\n    const len = str.length;\n    const position = this._position;\n    this._last = str.charCodeAt(len - 1);\n    if (++this._appendCount > 4096) {\n      +this._str;\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n    const {\n      column,\n      identifierName,\n      filename\n    } = sourcePos;\n    let line = sourcePos.line;\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n    if (i !== 0) {\n      this._mark(line, column, identifierName, filename);\n    }\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n      if (last < len) {\n        this._mark(++line, 0, identifierName, filename);\n      }\n      i = str.indexOf(\"\\n\", last);\n    }\n    position.column += len - last;\n  }\n  _mark(line, column, identifierName, filename) {\n    var _this$_map;\n    (_this$_map = this._map) == null ? void 0 : _this$_map.mark(this._position, line, column, identifierName, filename);\n  }\n  removeTrailingNewline() {\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 10) {\n      this._queueCursor--;\n    }\n  }\n  removeLastSemicolon() {\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0 && this._queue[queueCursor - 1].char === 59) {\n      this._queueCursor--;\n    }\n  }\n  getLastChar() {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n  getNewlineCount() {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === 10 ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== 10) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === 10 ? count + 1 : count;\n  }\n  endsWithCharAndNewline() {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== 10) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n  }\n  hasContent() {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n  exactSource(loc, cb) {\n    if (!this._map) return cb();\n    this.source(\"start\", loc);\n    cb();\n    this.source(\"end\", loc);\n  }\n  source(prop, loc) {\n    if (!this._map) return;\n    this._normalizePosition(prop, loc, 0, 0);\n  }\n  sourceWithOffset(prop, loc, lineOffset, columnOffset) {\n    if (!this._map) return;\n    this._normalizePosition(prop, loc, lineOffset, columnOffset);\n  }\n  withSource(prop, loc, cb) {\n    if (!this._map) return cb();\n    this.source(prop, loc);\n    cb();\n  }\n  _normalizePosition(prop, loc, lineOffset, columnOffset) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n    target.identifierName = prop === \"start\" && loc.identifierName || undefined;\n    if (pos) {\n      target.line = pos.line + lineOffset;\n      target.column = pos.column + columnOffset;\n      target.filename = loc.filename;\n    }\n  }\n  getCurrentColumn() {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === 10) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n  getCurrentLine() {\n    let count = 0;\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === 10) {\n        count++;\n      }\n    }\n    return this._position.line + count;\n  }\n}\nexports.default = Buffer;","map":{"version":3,"mappings":";;;;;;AA6Be,MAAMA,MAAM,CAAC;EAC1BC,WAAW,CAACC,GAAsB,EAAE;IAAA,KAMpCC,IAAI,GAAc,IAAI;IAAA,KACtBC,IAAI,GAAG,EAAE;IAAA,KACTC,IAAI,GAAG,EAAE;IAAA,KACTC,YAAY,GAAG,CAAC;IAAA,KAChBC,KAAK,GAAG,CAAC;IAAA,KACTC,MAAM,GAAgB,EAAE;IAAA,KACxBC,YAAY,GAAG,CAAC;IAAA,KAEhBC,SAAS,GAAG;MACVC,IAAI,EAAE,CAAC;MACPC,MAAM,EAAE;IACV,CAAC;IAAA,KACDC,eAAe,GAAc;MAC3BC,cAAc,EAAEC,SAAS;MACzBJ,IAAI,EAAEI,SAAS;MACfH,MAAM,EAAEG,SAAS;MACjBC,QAAQ,EAAED;IACZ,CAAC;IAtBC,IAAI,CAACZ,IAAI,GAAGD,GAAG;IAEf,IAAI,CAACe,WAAW,EAAE;EACpB;EAqBAA,WAAW,GAAG;IACZ,MAAMC,KAAK,GAAG,IAAI,CAACV,MAAM;IAEzB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BD,KAAK,CAACE,IAAI,CAAC;QACTC,IAAI,EAAE,CAAC;QACPC,MAAM,EAAE,CAAC;QACTX,IAAI,EAAEI,SAAS;QACfH,MAAM,EAAEG,SAAS;QACjBD,cAAc,EAAEC,SAAS;QACzBC,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ;EACF;EAEAO,UAAU,CACRF,IAAY,EACZC,MAAc,EACdX,IAAwB,EACxBC,MAA0B,EAC1BE,cAAkC,EAClCE,QAA4B,EAC5B;IACA,MAAMQ,MAAM,GAAG,IAAI,CAACf,YAAY;IAChC,IAAIe,MAAM,KAAK,IAAI,CAAChB,MAAM,CAACiB,MAAM,EAAE;MACjC,IAAI,CAACR,WAAW,EAAE;IACpB;IACA,MAAMS,IAAI,GAAG,IAAI,CAAClB,MAAM,CAACgB,MAAM,CAAC;IAChCE,IAAI,CAACL,IAAI,GAAGA,IAAI;IAChBK,IAAI,CAACJ,MAAM,GAAGA,MAAM;IACpBI,IAAI,CAACf,IAAI,GAAGA,IAAI;IAChBe,IAAI,CAACd,MAAM,GAAGA,MAAM;IACpBc,IAAI,CAACZ,cAAc,GAAGA,cAAc;IACpCY,IAAI,CAACV,QAAQ,GAAGA,QAAQ;IAExB,IAAI,CAACP,YAAY,EAAE;EACrB;EAEAkB,SAAS,GAAc;IACrB,IAAI,IAAI,CAAClB,YAAY,KAAK,CAAC,EAAE;MAC3B,MAAM,IAAImB,KAAK,CAAC,6BAA6B,CAAC;IAChD;IACA,OAAO,IAAI,CAACpB,MAAM,CAAC,EAAE,IAAI,CAACC,YAAY,CAAC;EACzC;EAMAoB,GAAG,GAAG;IACJ,IAAI,CAACC,MAAM,EAAE;IAEb,MAAM5B,GAAG,GAAG,IAAI,CAACC,IAAI;IACrB,MAAM4B,MAAM,GAAG;MAGbC,IAAI,EAAE,CAAC,IAAI,CAAC5B,IAAI,GAAG,IAAI,CAACC,IAAI,EAAE4B,SAAS,EAAE;MAEzCC,UAAU,EAAEhC,GAAG,oBAAHA,GAAG,CAAEiC,UAAU,EAAE;MAG7B,IAAIjC,GAAG,GAAG;QACR,MAAMkC,SAAS,GAAGlC,GAAG,GAAGA,GAAG,CAAC2B,GAAG,EAAE,GAAG,IAAI;QACxCE,MAAM,CAAC7B,GAAG,GAAGkC,SAAS;QACtB,OAAOA,SAAS;MAClB,CAAC;MACD,IAAIlC,GAAG,CAACmC,KAAK,EAAE;QACbC,MAAM,CAACC,cAAc,CAACR,MAAM,EAAE,KAAK,EAAE;UAAEM,KAAK;UAAEG,QAAQ,EAAE;QAAK,CAAC,CAAC;MACjE,CAAC;MAED,IAAIC,WAAW,GAAG;QAChB,MAAMC,QAAQ,GAAGxC,GAAG,oBAAHA,GAAG,CAAEyC,cAAc,EAAE;QACtCZ,MAAM,CAACU,WAAW,GAAGC,QAAQ;QAC7B,OAAOA,QAAQ;MACjB,CAAC;MACD,IAAID,WAAW,CAACJ,KAAK,EAAE;QACrBC,MAAM,CAACC,cAAc,CAACR,MAAM,EAAE,aAAa,EAAE;UAAEM,KAAK;UAAEG,QAAQ,EAAE;QAAK,CAAC,CAAC;MACzE;IACF,CAAC;IAED,OAAOT,MAAM;EACf;EAMAa,MAAM,CAACC,GAAW,EAAEC,YAAqB,EAAQ;IAC/C,IAAI,CAAChB,MAAM,EAAE;IAEb,IAAI,CAACiB,OAAO,CAACF,GAAG,EAAE,IAAI,CAAChC,eAAe,EAAEiC,YAAY,CAAC;EACvD;EAEAE,UAAU,CAAC3B,IAAY,EAAQ;IAC7B,IAAI,CAACS,MAAM,EAAE;IACb,IAAI,CAACmB,WAAW,CAAC5B,IAAI,EAAE,CAAC,EAAE,IAAI,CAACR,eAAe,CAAC;EACjD;EAKAK,KAAK,CAACG,IAAY,EAAQ;IAExB,IAAIA,IAAI,OAAuB,EAAE;MAC/B,OAAO,IAAI,CAACZ,YAAY,KAAK,CAAC,EAAE;QAC9B,MAAMY,IAAI,GAAG,IAAI,CAACb,MAAM,CAAC,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC,CAACY,IAAI;QACpD,IAAIA,IAAI,OAAoB,IAAIA,IAAI,MAAkB,EAAE;UACtD;QACF;QAEA,IAAI,CAACZ,YAAY,EAAE;MACrB;IACF;IAEA,MAAMyC,cAAc,GAAG,IAAI,CAACrC,eAAe;IAC3C,IAAI,CAACU,UAAU,CACbF,IAAI,EACJ,CAAC,EACD6B,cAAc,CAACvC,IAAI,EACnBuC,cAAc,CAACtC,MAAM,EACrBsC,cAAc,CAACpC,cAAc,EAC7BoC,cAAc,CAAClC,QAAQ,CACxB;EACH;EAKAmC,gBAAgB,CAAC9B,IAAY,EAAEC,MAAc,EAAQ;IACnD,IAAI,CAACC,UAAU,CAACF,IAAI,EAAEC,MAAM,EAAEP,SAAS,EAAEA,SAAS,EAAEA,SAAS,EAAEA,SAAS,CAAC;EAC3E;EAEAe,MAAM,GAAS;IACb,MAAMsB,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,MAAMS,KAAK,GAAG,IAAI,CAACV,MAAM;IACzB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,WAAW,EAAEjC,CAAC,EAAE,EAAE;MACpC,MAAMO,IAAe,GAAGR,KAAK,CAACC,CAAC,CAAC;MAChC,IAAI,CAAC8B,WAAW,CAACvB,IAAI,CAACL,IAAI,EAAEK,IAAI,CAACJ,MAAM,EAAEI,IAAI,CAAC;IAChD;IACA,IAAI,CAACjB,YAAY,GAAG,CAAC;EACvB;EAEAwC,WAAW,CAAC5B,IAAY,EAAEC,MAAc,EAAE+B,SAAoB,EAAQ;IACpE,IAAI,CAAC9C,KAAK,GAAGc,IAAI;IAEjB,IAAI,CAAChB,IAAI,IACPiB,MAAM,GAAG,CAAC,GACNgC,MAAM,CAACC,YAAY,CAAClC,IAAI,CAAC,CAACC,MAAM,CAACA,MAAM,CAAC,GACxCgC,MAAM,CAACC,YAAY,CAAClC,IAAI,CAAC;IAE/B,IAAIA,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAACmC,KAAK,CACRH,SAAS,CAAC1C,IAAI,EACd0C,SAAS,CAACzC,MAAM,EAChByC,SAAS,CAACvC,cAAc,EACxBuC,SAAS,CAACrC,QAAQ,CACnB;MACD,IAAI,CAACN,SAAS,CAACE,MAAM,IAAIU,MAAM;IACjC,CAAC,MAAM;MACL,IAAI,CAACZ,SAAS,CAACC,IAAI,EAAE;MACrB,IAAI,CAACD,SAAS,CAACE,MAAM,GAAG,CAAC;IAC3B;EACF;EAEAmC,OAAO,CAACF,GAAW,EAAEQ,SAAoB,EAAEP,YAAqB,EAAQ;IACtE,MAAMW,GAAG,GAAGZ,GAAG,CAACpB,MAAM;IACtB,MAAMiC,QAAQ,GAAG,IAAI,CAAChD,SAAS;IAE/B,IAAI,CAACH,KAAK,GAAGsC,GAAG,CAACc,UAAU,CAACF,GAAG,GAAG,CAAC,CAAC;IAEpC,IAAI,EAAE,IAAI,CAACnD,YAAY,GAAG,IAAI,EAAE;MAC9B,CAAC,IAAI,CAACD,IAAI;MACV,IAAI,CAACD,IAAI,IAAI,IAAI,CAACC,IAAI;MACtB,IAAI,CAACA,IAAI,GAAGwC,GAAG;MACf,IAAI,CAACvC,YAAY,GAAG,CAAC;IACvB,CAAC,MAAM;MACL,IAAI,CAACD,IAAI,IAAIwC,GAAG;IAClB;IAEA,IAAI,CAACC,YAAY,IAAI,CAAC,IAAI,CAAC3C,IAAI,EAAE;MAC/BuD,QAAQ,CAAC9C,MAAM,IAAI6C,GAAG;MACtB;IACF;IAEA,MAAM;MAAE7C,MAAM;MAAEE,cAAc;MAAEE;IAAS,CAAC,GAAGqC,SAAS;IACtD,IAAI1C,IAAI,GAAG0C,SAAS,CAAC1C,IAAI;IAMzB,IAAIQ,CAAC,GAAG0B,GAAG,CAACe,OAAO,CAAC,IAAI,CAAC;IACzB,IAAIC,IAAI,GAAG,CAAC;IAIZ,IAAI1C,CAAC,KAAK,CAAC,EAAE;MACX,IAAI,CAACqC,KAAK,CAAC7C,IAAI,EAAEC,MAAM,EAAEE,cAAc,EAAEE,QAAQ,CAAC;IACpD;IAGA,OAAOG,CAAC,KAAK,CAAC,CAAC,EAAE;MACfuC,QAAQ,CAAC/C,IAAI,EAAE;MACf+C,QAAQ,CAAC9C,MAAM,GAAG,CAAC;MACnBiD,IAAI,GAAG1C,CAAC,GAAG,CAAC;MAIZ,IAAI0C,IAAI,GAAGJ,GAAG,EAAE;QACd,IAAI,CAACD,KAAK,CAAC,EAAE7C,IAAI,EAAE,CAAC,EAAEG,cAAc,EAAEE,QAAQ,CAAC;MACjD;MACAG,CAAC,GAAG0B,GAAG,CAACe,OAAO,CAAC,IAAI,EAAEC,IAAI,CAAC;IAC7B;IACAH,QAAQ,CAAC9C,MAAM,IAAI6C,GAAG,GAAGI,IAAI;EAC/B;EAEAL,KAAK,CACH7C,IAAwB,EACxBC,MAA0B,EAC1BE,cAAkC,EAClCE,QAA4B,EACtB;IAAA;IACN,kBAAI,CAACb,IAAI,qBAAT2D,WAAWC,IAAI,CAAC,IAAI,CAACrD,SAAS,EAAEC,IAAI,EAAEC,MAAM,EAAEE,cAAc,EAAEE,QAAQ,CAAC;EACzE;EAEAgD,qBAAqB,GAAS;IAC5B,MAAMZ,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,IACE2C,WAAW,KAAK,CAAC,IACjB,IAAI,CAAC5C,MAAM,CAAC4C,WAAW,GAAG,CAAC,CAAC,CAAC/B,IAAI,OAAuB,EACxD;MACA,IAAI,CAACZ,YAAY,EAAE;IACrB;EACF;EAEAwD,mBAAmB,GAAS;IAC1B,MAAMb,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,IACE2C,WAAW,KAAK,CAAC,IACjB,IAAI,CAAC5C,MAAM,CAAC4C,WAAW,GAAG,CAAC,CAAC,CAAC/B,IAAI,OAAwB,EACzD;MACA,IAAI,CAACZ,YAAY,EAAE;IACrB;EACF;EAEAyD,WAAW,GAAW;IACpB,MAAMd,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,OAAO2C,WAAW,KAAK,CAAC,GAAG,IAAI,CAAC5C,MAAM,CAAC4C,WAAW,GAAG,CAAC,CAAC,CAAC/B,IAAI,GAAG,IAAI,CAACd,KAAK;EAC3E;EAMA4D,eAAe,GAAW;IACxB,MAAMf,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,IAAI2D,KAAK,GAAG,CAAC;IACb,IAAIhB,WAAW,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC7C,KAAK,OAAuB,GAAG,CAAC,GAAG,CAAC;IACvE,KAAK,IAAIY,CAAC,GAAGiC,WAAW,GAAG,CAAC,EAAEjC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,IAAI,IAAI,CAACX,MAAM,CAACW,CAAC,CAAC,CAACE,IAAI,OAAuB,EAAE;QAC9C;MACF;MACA+C,KAAK,EAAE;IACT;IACA,OAAOA,KAAK,KAAKhB,WAAW,IAAI,IAAI,CAAC7C,KAAK,OAAuB,GAC7D6D,KAAK,GAAG,CAAC,GACTA,KAAK;EACX;EAQAC,sBAAsB,GAAW;IAC/B,MAAMnD,KAAK,GAAG,IAAI,CAACV,MAAM;IACzB,MAAM4C,WAAW,GAAG,IAAI,CAAC3C,YAAY;IACrC,IAAI2C,WAAW,KAAK,CAAC,EAAE;MAErB,MAAMkB,MAAM,GAAGpD,KAAK,CAACkC,WAAW,GAAG,CAAC,CAAC,CAAC/B,IAAI;MAC1C,IAAIiD,MAAM,OAAuB,EAAE;MACnC,IAAIlB,WAAW,GAAG,CAAC,EAAE;QACnB,OAAOlC,KAAK,CAACkC,WAAW,GAAG,CAAC,CAAC,CAAC/B,IAAI;MACpC,CAAC,MAAM;QACL,OAAO,IAAI,CAACd,KAAK;MACnB;IACF;EAGF;EAEAgE,UAAU,GAAY;IACpB,OAAO,IAAI,CAAC9D,YAAY,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,CAACF,KAAK;EAChD;EAyBAiE,WAAW,CAACC,GAAoB,EAAEC,EAAc,EAAE;IAChD,IAAI,CAAC,IAAI,CAACvE,IAAI,EAAE,OAAOuE,EAAE,EAAE;IAE3B,IAAI,CAACC,MAAM,CAAC,OAAO,EAAEF,GAAG,CAAC;IAEzBC,EAAE,EAAE;IAEJ,IAAI,CAACC,MAAM,CAAC,KAAK,EAAEF,GAAG,CAAC;EACzB;EAOAE,MAAM,CAACC,IAAqB,EAAEH,GAAoB,EAAQ;IACxD,IAAI,CAAC,IAAI,CAACtE,IAAI,EAAE;IAIhB,IAAI,CAAC0E,kBAAkB,CAACD,IAAI,EAAEH,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC;EAC1C;EAEAK,gBAAgB,CACdF,IAAqB,EACrBH,GAAoB,EACpBM,UAAkB,EAClBC,YAAoB,EACd;IACN,IAAI,CAAC,IAAI,CAAC7E,IAAI,EAAE;IAEhB,IAAI,CAAC0E,kBAAkB,CAACD,IAAI,EAAEH,GAAG,EAAEM,UAAU,EAAEC,YAAY,CAAC;EAC9D;EAMAC,UAAU,CAACL,IAAqB,EAAEH,GAAQ,EAAEC,EAAc,EAAQ;IAChE,IAAI,CAAC,IAAI,CAACvE,IAAI,EAAE,OAAOuE,EAAE,EAAE;IAE3B,IAAI,CAACC,MAAM,CAACC,IAAI,EAAEH,GAAG,CAAC;IAEtBC,EAAE,EAAE;EACN;EAEAG,kBAAkB,CAChBD,IAAqB,EACrBH,GAAQ,EACRM,UAAkB,EAClBC,YAAoB,EACpB;IACA,MAAME,GAAG,GAAGT,GAAG,CAACG,IAAI,CAAC;IACrB,MAAMO,MAAM,GAAG,IAAI,CAACtE,eAAe;IAEnCsE,MAAM,CAACrE,cAAc,GAClB8D,IAAI,KAAK,OAAO,IAAIH,GAAG,CAAC3D,cAAc,IAAKC,SAAS;IACvD,IAAImE,GAAG,EAAE;MACPC,MAAM,CAACxE,IAAI,GAAGuE,GAAG,CAACvE,IAAI,GAAGoE,UAAU;MACnCI,MAAM,CAACvE,MAAM,GAAGsE,GAAG,CAACtE,MAAM,GAAGoE,YAAY;MACzCG,MAAM,CAACnE,QAAQ,GAAGyD,GAAG,CAACzD,QAAQ;IAChC;EACF;EAEAoE,gBAAgB,GAAW;IACzB,MAAMlE,KAAK,GAAG,IAAI,CAACV,MAAM;IACzB,MAAM4C,WAAW,GAAG,IAAI,CAAC3C,YAAY;IAErC,IAAI4E,SAAS,GAAG,CAAC,CAAC;IAClB,IAAI5B,GAAG,GAAG,CAAC;IACX,KAAK,IAAItC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiC,WAAW,EAAEjC,CAAC,EAAE,EAAE;MACpC,MAAMO,IAAI,GAAGR,KAAK,CAACC,CAAC,CAAC;MACrB,IAAIO,IAAI,CAACL,IAAI,OAAuB,EAAE;QACpCgE,SAAS,GAAG5B,GAAG;MACjB;MACAA,GAAG,IAAI/B,IAAI,CAACJ,MAAM;IACpB;IAEA,OAAO+D,SAAS,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC3E,SAAS,CAACE,MAAM,GAAG6C,GAAG,GAAGA,GAAG,GAAG,CAAC,GAAG4B,SAAS;EAC7E;EAEAC,cAAc,GAAW;IACvB,IAAIlB,KAAK,GAAG,CAAC;IAEb,MAAMlD,KAAK,GAAG,IAAI,CAACV,MAAM;IACzB,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,YAAY,EAAEU,CAAC,EAAE,EAAE;MAC1C,IAAID,KAAK,CAACC,CAAC,CAAC,CAACE,IAAI,OAAuB,EAAE;QACxC+C,KAAK,EAAE;MACT;IACF;IAEA,OAAO,IAAI,CAAC1D,SAAS,CAACC,IAAI,GAAGyD,KAAK;EACpC;AACF;AAACmB","names":["Buffer","constructor","map","_map","_buf","_str","_appendCount","_last","_queue","_queueCursor","_position","line","column","_sourcePosition","identifierName","undefined","filename","_allocQueue","queue","i","push","char","repeat","_pushQueue","cursor","length","item","_popQueue","Error","get","_flush","result","code","trimRight","decodedMap","getDecoded","resultMap","value","Object","defineProperty","writable","rawMappings","mappings","getRawMappings","append","str","maybeNewline","_append","appendChar","_appendChar","sourcePosition","queueIndentation","queueCursor","sourcePos","String","fromCharCode","_mark","len","position","charCodeAt","indexOf","last","_this$_map","mark","removeTrailingNewline","removeLastSemicolon","getLastChar","getNewlineCount","count","endsWithCharAndNewline","lastCp","hasContent","exactSource","loc","cb","source","prop","_normalizePosition","sourceWithOffset","lineOffset","columnOffset","withSource","pos","target","getCurrentColumn","lastIndex","getCurrentLine","exports"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/generator/src/buffer.ts"],"sourcesContent":["import type SourceMap from \"./source-map\";\nimport * as charcodes from \"charcodes\";\n\nexport type Pos = {\n  line: number;\n  column: number;\n};\nexport type Loc = {\n  start?: Pos;\n  end?: Pos;\n  identifierName?: string;\n  filename?: string;\n};\ntype SourcePos = {\n  identifierName: string | undefined;\n  line: number | undefined;\n  column: number | undefined;\n  filename: string | undefined;\n};\n\ntype QueueItem = {\n  char: number;\n  repeat: number;\n  line: number | undefined;\n  column: number | undefined;\n  identifierName: string | undefined;\n  filename: string | undefined;\n};\n\nexport default class Buffer {\n  constructor(map?: SourceMap | null) {\n    this._map = map;\n\n    this._allocQueue();\n  }\n\n  _map: SourceMap = null;\n  _buf = \"\";\n  _str = \"\";\n  _appendCount = 0;\n  _last = 0;\n  _queue: QueueItem[] = [];\n  _queueCursor = 0;\n\n  _position = {\n    line: 1,\n    column: 0,\n  };\n  _sourcePosition: SourcePos = {\n    identifierName: undefined,\n    line: undefined,\n    column: undefined,\n    filename: undefined,\n  };\n\n  _allocQueue() {\n    const queue = this._queue;\n\n    for (let i = 0; i < 16; i++) {\n      queue.push({\n        char: 0,\n        repeat: 1,\n        line: undefined,\n        column: undefined,\n        identifierName: undefined,\n        filename: \"\",\n      });\n    }\n  }\n\n  _pushQueue(\n    char: number,\n    repeat: number,\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    filename: string | undefined,\n  ) {\n    const cursor = this._queueCursor;\n    if (cursor === this._queue.length) {\n      this._allocQueue();\n    }\n    const item = this._queue[cursor];\n    item.char = char;\n    item.repeat = repeat;\n    item.line = line;\n    item.column = column;\n    item.identifierName = identifierName;\n    item.filename = filename;\n\n    this._queueCursor++;\n  }\n\n  _popQueue(): QueueItem {\n    if (this._queueCursor === 0) {\n      throw new Error(\"Cannot pop from empty queue\");\n    }\n    return this._queue[--this._queueCursor];\n  }\n\n  /**\n   * Get the final string output from the buffer, along with the sourcemap if one exists.\n   */\n\n  get() {\n    this._flush();\n\n    const map = this._map;\n    const result = {\n      // Whatever trim is used here should not execute a regex against the\n      // source string since it may be arbitrarily large after all transformations\n      code: (this._buf + this._str).trimRight(),\n      // Decoded sourcemap is free to generate.\n      decodedMap: map?.getDecoded(),\n\n      // Encoding the sourcemap is moderately CPU expensive.\n      get map() {\n        const resultMap = map ? map.get() : null;\n        result.map = resultMap;\n        return resultMap;\n      },\n      set map(value) {\n        Object.defineProperty(result, \"map\", { value, writable: true });\n      },\n      // Retrieving the raw mappings is very memory intensive.\n      get rawMappings() {\n        const mappings = map?.getRawMappings();\n        result.rawMappings = mappings;\n        return mappings;\n      },\n      set rawMappings(value) {\n        Object.defineProperty(result, \"rawMappings\", { value, writable: true });\n      },\n    };\n\n    return result;\n  }\n\n  /**\n   * Add a string to the buffer that cannot be reverted.\n   */\n\n  append(str: string, maybeNewline: boolean): void {\n    this._flush();\n\n    this._append(str, this._sourcePosition, maybeNewline);\n  }\n\n  appendChar(char: number): void {\n    this._flush();\n    this._appendChar(char, 1, this._sourcePosition);\n  }\n\n  /**\n   * Add a string to the buffer than can be reverted.\n   */\n  queue(char: number): void {\n    // Drop trailing spaces when a newline is inserted.\n    if (char === charcodes.lineFeed) {\n      while (this._queueCursor !== 0) {\n        const char = this._queue[this._queueCursor - 1].char;\n        if (char !== charcodes.space && char !== charcodes.tab) {\n          break;\n        }\n\n        this._queueCursor--;\n      }\n    }\n\n    const sourcePosition = this._sourcePosition;\n    this._pushQueue(\n      char,\n      1,\n      sourcePosition.line,\n      sourcePosition.column,\n      sourcePosition.identifierName,\n      sourcePosition.filename,\n    );\n  }\n\n  /**\n   * Same as queue, but this indentation will never have a sourcmap marker.\n   */\n  queueIndentation(char: number, repeat: number): void {\n    this._pushQueue(char, repeat, undefined, undefined, undefined, undefined);\n  }\n\n  _flush(): void {\n    const queueCursor = this._queueCursor;\n    const queue = this._queue;\n    for (let i = 0; i < queueCursor; i++) {\n      const item: QueueItem = queue[i];\n      this._appendChar(item.char, item.repeat, item);\n    }\n    this._queueCursor = 0;\n  }\n\n  _appendChar(char: number, repeat: number, sourcePos: SourcePos): void {\n    this._last = char;\n\n    this._str +=\n      repeat > 1\n        ? String.fromCharCode(char).repeat(repeat)\n        : String.fromCharCode(char);\n\n    if (char !== charcodes.lineFeed) {\n      this._mark(\n        sourcePos.line,\n        sourcePos.column,\n        sourcePos.identifierName,\n        sourcePos.filename,\n      );\n      this._position.column += repeat;\n    } else {\n      this._position.line++;\n      this._position.column = 0;\n    }\n  }\n\n  _append(str: string, sourcePos: SourcePos, maybeNewline: boolean): void {\n    const len = str.length;\n    const position = this._position;\n\n    this._last = str.charCodeAt(len - 1);\n\n    if (++this._appendCount > 4096) {\n      +this._str; // Unexplainable huge performance boost. Ref: https://github.com/davidmarkclements/flatstr License: MIT\n      this._buf += this._str;\n      this._str = str;\n      this._appendCount = 0;\n    } else {\n      this._str += str;\n    }\n\n    if (!maybeNewline && !this._map) {\n      position.column += len;\n      return;\n    }\n\n    const { column, identifierName, filename } = sourcePos;\n    let line = sourcePos.line;\n\n    // Search for newline chars. We search only for `\\n`, since both `\\r` and\n    // `\\r\\n` are normalized to `\\n` during parse. We exclude `\\u2028` and\n    // `\\u2029` for performance reasons, they're so uncommon that it's probably\n    // ok. It's also unclear how other sourcemap utilities handle them...\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n\n    // If the string starts with a newline char, then adding a mark is redundant.\n    // This catches both \"no newlines\" and \"newline after several chars\".\n    if (i !== 0) {\n      this._mark(line, column, identifierName, filename);\n    }\n\n    // Now, find each reamining newline char in the string.\n    while (i !== -1) {\n      position.line++;\n      position.column = 0;\n      last = i + 1;\n\n      // We mark the start of each line, which happens directly after this newline char\n      // unless this is the last char.\n      if (last < len) {\n        this._mark(++line, 0, identifierName, filename);\n      }\n      i = str.indexOf(\"\\n\", last);\n    }\n    position.column += len - last;\n  }\n\n  _mark(\n    line: number | undefined,\n    column: number | undefined,\n    identifierName: string | undefined,\n    filename: string | undefined,\n  ): void {\n    this._map?.mark(this._position, line, column, identifierName, filename);\n  }\n\n  removeTrailingNewline(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.lineFeed\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  removeLastSemicolon(): void {\n    const queueCursor = this._queueCursor;\n    if (\n      queueCursor !== 0 &&\n      this._queue[queueCursor - 1].char === charcodes.semicolon\n    ) {\n      this._queueCursor--;\n    }\n  }\n\n  getLastChar(): number {\n    const queueCursor = this._queueCursor;\n    return queueCursor !== 0 ? this._queue[queueCursor - 1].char : this._last;\n  }\n\n  /**\n   * This will only detect at most 1 newline after a call to `flush()`,\n   * but this has not been found so far, and an accurate count can be achieved if needed later.\n   */\n  getNewlineCount(): number {\n    const queueCursor = this._queueCursor;\n    let count = 0;\n    if (queueCursor === 0) return this._last === charcodes.lineFeed ? 1 : 0;\n    for (let i = queueCursor - 1; i >= 0; i--) {\n      if (this._queue[i].char !== charcodes.lineFeed) {\n        break;\n      }\n      count++;\n    }\n    return count === queueCursor && this._last === charcodes.lineFeed\n      ? count + 1\n      : count;\n  }\n\n  /**\n   * check if current _last + queue ends with newline, return the character before newline\n   *\n   * @param {*} ch\n   * @memberof Buffer\n   */\n  endsWithCharAndNewline(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n    if (queueCursor !== 0) {\n      // every element in queue is one-length whitespace string\n      const lastCp = queue[queueCursor - 1].char;\n      if (lastCp !== charcodes.lineFeed) return;\n      if (queueCursor > 1) {\n        return queue[queueCursor - 2].char;\n      } else {\n        return this._last;\n      }\n    }\n    // We assume that everything being matched is at most a single token plus some whitespace,\n    // which everything currently is, but otherwise we'd have to expand _last or check _buf.\n  }\n\n  hasContent(): boolean {\n    return this._queueCursor !== 0 || !!this._last;\n  }\n\n  /**\n   * Certain sourcemap usecases expect mappings to be more accurate than\n   * Babel's generic sourcemap handling allows. For now, we special-case\n   * identifiers to allow for the primary cases to work.\n   * The goal of this line is to ensure that the map output from Babel will\n   * have an exact range on identifiers in the output code. Without this\n   * line, Babel would potentially include some number of trailing tokens\n   * that are printed after the identifier, but before another location has\n   * been assigned.\n   * This allows tooling like Rollup and Webpack to more accurately perform\n   * their own transformations. Most importantly, this allows the import/export\n   * transformations performed by those tools to loose less information when\n   * applying their own transformations on top of the code and map results\n   * generated by Babel itself.\n   *\n   * The primary example of this is the snippet:\n   *\n   *   import mod from \"mod\";\n   *   mod();\n   *\n   * With this line, there will be one mapping range over \"mod\" and another\n   * over \"();\", where previously it would have been a single mapping.\n   */\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    if (!this._map) return cb();\n\n    this.source(\"start\", loc);\n\n    cb();\n\n    this.source(\"end\", loc);\n  }\n\n  /**\n   * Sets a given position as the current source location so generated code after this call\n   * will be given this position in the sourcemap.\n   */\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    if (!this._map) return;\n\n    // Since this is called extremely often, we re-use the same _sourcePosition\n    // object for the whole lifetime of the buffer.\n    this._normalizePosition(prop, loc, 0, 0);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    lineOffset: number,\n    columnOffset: number,\n  ): void {\n    if (!this._map) return;\n\n    this._normalizePosition(prop, loc, lineOffset, columnOffset);\n  }\n\n  /**\n   * Call a callback with a specific source location\n   */\n\n  withSource(prop: \"start\" | \"end\", loc: Loc, cb: () => void): void {\n    if (!this._map) return cb();\n\n    this.source(prop, loc);\n\n    cb();\n  }\n\n  _normalizePosition(\n    prop: \"start\" | \"end\",\n    loc: Loc,\n    lineOffset: number,\n    columnOffset: number,\n  ) {\n    const pos = loc[prop];\n    const target = this._sourcePosition;\n\n    target.identifierName =\n      (prop === \"start\" && loc.identifierName) || undefined;\n    if (pos) {\n      target.line = pos.line + lineOffset;\n      target.column = pos.column + columnOffset;\n      target.filename = loc.filename;\n    }\n  }\n\n  getCurrentColumn(): number {\n    const queue = this._queue;\n    const queueCursor = this._queueCursor;\n\n    let lastIndex = -1;\n    let len = 0;\n    for (let i = 0; i < queueCursor; i++) {\n      const item = queue[i];\n      if (item.char === charcodes.lineFeed) {\n        lastIndex = len;\n      }\n      len += item.repeat;\n    }\n\n    return lastIndex === -1 ? this._position.column + len : len - 1 - lastIndex;\n  }\n\n  getCurrentLine(): number {\n    let count = 0;\n\n    const queue = this._queue;\n    for (let i = 0; i < this._queueCursor; i++) {\n      if (queue[i].char === charcodes.lineFeed) {\n        count++;\n      }\n    }\n\n    return this._position.line + count;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}