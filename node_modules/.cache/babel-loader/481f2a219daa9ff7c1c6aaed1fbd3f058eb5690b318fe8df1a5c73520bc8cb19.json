{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = literalTemplate;\nvar _options = require(\"./options\");\nvar _parse = require(\"./parse\");\nvar _populate = require(\"./populate\");\nfunction literalTemplate(formatter, tpl, opts) {\n  const {\n    metadata,\n    names\n  } = buildLiteralData(formatter, tpl, opts);\n  return arg => {\n    const defaultReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n    return arg => {\n      const replacements = (0, _options.normalizeReplacements)(arg);\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n      return formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));\n    };\n  };\n}\nfunction buildLiteralData(formatter, tpl, opts) {\n  let names;\n  let nameSet;\n  let metadata;\n  let prefix = \"\";\n  do {\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = (0, _parse.default)(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n      placeholderWhitelist: new Set(result.names.concat(opts.placeholderWhitelist ? Array.from(opts.placeholderWhitelist) : [])),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders\n    });\n  } while (metadata.placeholders.some(placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name)));\n  return {\n    metadata,\n    names\n  };\n}\nfunction buildTemplateCode(tpl, prefix) {\n  const names = [];\n  let code = tpl[0];\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n    code += value + tpl[i];\n  }\n  return {\n    names,\n    code\n  };\n}","map":{"version":3,"mappings":"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","names":["literalTemplate","formatter","tpl","opts","metadata","names","buildLiteralData","arg","defaultReplacements","forEach","replacement","i","replacements","Object","keys","key","prototype","hasOwnProperty","call","Error","unwrap","assign","nameSet","prefix","result","buildTemplateCode","Set","code","parser","placeholderWhitelist","concat","Array","from","placeholderPattern","preserveComments","syntacticPlaceholders","placeholders","some","placeholder","isDuplicate","has","name","length","value","push"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/template/src/literal.ts"],"sourcesContent":["import type { Formatter } from \"./formatters\";\nimport type { TemplateReplacements, TemplateOpts } from \"./options\";\nimport { normalizeReplacements } from \"./options\";\nimport parseAndBuildMetadata from \"./parse\";\nimport populatePlaceholders from \"./populate\";\n\nexport default function literalTemplate<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n): (_: Array<unknown>) => (_: unknown) => T {\n  const { metadata, names } = buildLiteralData(formatter, tpl, opts);\n\n  return arg => {\n    const defaultReplacements: TemplateReplacements = {};\n    arg.forEach((replacement, i) => {\n      defaultReplacements[names[i]] = replacement;\n    });\n\n    return (arg: unknown) => {\n      const replacements = normalizeReplacements(arg);\n\n      if (replacements) {\n        Object.keys(replacements).forEach(key => {\n          if (Object.prototype.hasOwnProperty.call(defaultReplacements, key)) {\n            throw new Error(\"Unexpected replacement overlap.\");\n          }\n        });\n      }\n\n      return formatter.unwrap(\n        populatePlaceholders(\n          metadata,\n          replacements\n            ? Object.assign(replacements, defaultReplacements)\n            : defaultReplacements,\n        ),\n      );\n    };\n  };\n}\n\nfunction buildLiteralData<T>(\n  formatter: Formatter<T>,\n  tpl: Array<string>,\n  opts: TemplateOpts,\n) {\n  let names;\n  let nameSet: Set<string>;\n  let metadata;\n  let prefix = \"\";\n\n  do {\n    // If there are cases where the template already contains $0 or any other\n    // matching pattern, we keep adding \"$\" characters until a unique prefix\n    // is found.\n    prefix += \"$\";\n    const result = buildTemplateCode(tpl, prefix);\n\n    names = result.names;\n    nameSet = new Set(names);\n    metadata = parseAndBuildMetadata(formatter, formatter.code(result.code), {\n      parser: opts.parser,\n\n      // Explicitly include our generated names in the whitelist so users never\n      // have to think about whether their placeholder pattern will match.\n      placeholderWhitelist: new Set(\n        result.names.concat(\n          opts.placeholderWhitelist\n            ? Array.from(opts.placeholderWhitelist)\n            : [],\n        ),\n      ),\n      placeholderPattern: opts.placeholderPattern,\n      preserveComments: opts.preserveComments,\n      syntacticPlaceholders: opts.syntacticPlaceholders,\n    });\n  } while (\n    metadata.placeholders.some(\n      placeholder => placeholder.isDuplicate && nameSet.has(placeholder.name),\n    )\n  );\n\n  return { metadata, names };\n}\n\nfunction buildTemplateCode(\n  tpl: Array<string>,\n  prefix: string,\n): { names: Array<string>; code: string } {\n  const names = [];\n\n  let code = tpl[0];\n\n  for (let i = 1; i < tpl.length; i++) {\n    const value = `${prefix}${i - 1}`;\n    names.push(value);\n\n    code += value + tpl[i];\n  }\n\n  return { names, code };\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}