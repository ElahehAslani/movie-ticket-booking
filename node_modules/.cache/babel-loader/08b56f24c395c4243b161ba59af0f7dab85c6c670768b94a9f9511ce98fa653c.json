{"ast":null,"code":"function withDefault(param, defaultValue) {\n  let includeNull = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const decodeWithDefault = function () {\n    const decodedValue = param.decode(...arguments);\n    if (decodedValue === void 0) {\n      return defaultValue;\n    }\n    if (includeNull) {\n      if (decodedValue === null) {\n        return defaultValue;\n      } else {\n        return decodedValue;\n      }\n    }\n    return decodedValue;\n  };\n  return {\n    ...param,\n    default: defaultValue,\n    decode: decodeWithDefault\n  };\n}\nvar withDefault_default = withDefault;\nexport { withDefault_default as default, withDefault };","map":{"version":3,"mappings":"AAkBO,SAASA,YACdC,OACAC,cAEwC;EAAA,IADxCC,kFAAuB;EAEvB,MAAMC,oBAAoB,YAEiD;IACzE,MAAMC,eAAeJ,MAAMK,OAAO,YAAO;IAEzC,IAAID,iBAAiB,QAAW;MAC9B,OAAOH;IACT;IACA,IAAIC,aAAa;MACf,IAAIE,iBAAiB,MAAM;QACzB,OAAOH;MACT,OAAO;QACL,OAAOG;MACT;IACF;IAEA,OAAOA;EACT;EAGA,OAAO;IAAE,GAAGJ;IAAOM,SAASL;IAAcI,QAAQF;EAAkB;AACtE;AACA,IAAOI,sBAAQR","names":["withDefault","param","defaultValue","includeNull","decodeWithDefault","decodedValue","decode","default","withDefault_default"],"sources":["/Users/elahehaslani/Documents/GitHub/movie-ticket-booking/node_modules/serialize-query-params/src/withDefault.ts"],"sourcesContent":["import { QueryParamConfig } from './types';\n\n/**\n * Wrap a given parameter with a default value when undefined or null (optionally, default includes null)\n * @param param QueryParamConfig - { encode, decode} to serialize a parameter\n * @param defaultValue A default value\n * @param includeNull\n */\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull?: false | undefined\n): QueryParamConfig<D, Exclude<D2, undefined> | DefaultType>;\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull?: true\n): QueryParamConfig<D, Exclude<D2, null | undefined> | DefaultType>;\nexport function withDefault<D, DefaultType extends D2, D2 = D>(\n  param: QueryParamConfig<D, D2>,\n  defaultValue: DefaultType,\n  includeNull: boolean = true\n): QueryParamConfig<D, any | DefaultType> {\n  const decodeWithDefault = (\n    ...args: Parameters<typeof param.decode>\n  ): Exclude<D2, null | undefined> | Exclude<D2, undefined> | DefaultType => {\n    const decodedValue = param.decode(...args);\n\n    if (decodedValue === undefined) {\n      return defaultValue;\n    }\n    if (includeNull) {\n      if (decodedValue === null) {\n        return defaultValue;\n      } else {\n        return decodedValue as Exclude<D2, undefined>;\n      }\n    }\n\n    return decodedValue as Exclude<D2, undefined | null>;\n  };\n\n  // note we add `default` into the param for other tools to introspect\n  return { ...param, default: defaultValue, decode: decodeWithDefault };\n}\nexport default withDefault;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}