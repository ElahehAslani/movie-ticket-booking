{"ast":null,"code":"import * as React from \"react\";\nimport useQueryParams from \"./useQueryParams\";\nfunction withQueryParams(paramConfigMap, WrappedComponent) {\n  const Component = props => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    return /* @__PURE__ */React.createElement(WrappedComponent, {\n      query,\n      setQuery,\n      ...props\n    });\n  };\n  Component.displayName = `withQueryParams(${WrappedComponent.displayName || WrappedComponent.name || \"Component\"})`;\n  return Component;\n}\nvar withQueryParams_default = withQueryParams;\nfunction withQueryParamsMapped(paramConfigMap, mapToProps, WrappedComponent) {\n  const Component = props => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    const propsToAdd = mapToProps(query, setQuery, props);\n    return /* @__PURE__ */React.createElement(WrappedComponent, {\n      ...propsToAdd,\n      ...props\n    });\n  };\n  Component.displayName = `withQueryParams(${WrappedComponent.displayName || WrappedComponent.name || \"Component\"})`;\n  return Component;\n}\nexport { withQueryParams_default as default, withQueryParams, withQueryParamsMapped };","map":{"version":3,"mappings":"AAAA,YAAYA,WAAW;AAEvB,OAAOC,oBAAoB;AAkBpB,SAASC,gBAGdC,gBAAwBC,kBAA0C;EAElE,MAAMC,YAA4DC,SAAU;IAC1E,MAAM,CAACC,OAAOC,QAAQ,IAAIP,eAAeE,cAAc;IAGvD,OACE,mCAACC;MAAiBG;MAAcC;MAAqB,GAAIF;IAAA,CAAe;EAE5E;EACAD,UAAUI,cAAc,mBACtBL,iBAAiBK,eAAeL,iBAAiBM,QAAQ;EAG3D,OAAOL;AACT;AAEA,IAAOM,0BAAQT;AAUR,SAASU,sBAKdT,gBACAU,YAKAT,kBACA;EAEA,MAAMC,YAA6CC,SAAU;IAC3D,MAAM,CAACC,OAAOC,QAAQ,IAAIP,eAAeE,cAAc;IACvD,MAAMW,aAAaD,WAAWN,OAAOC,UAAUF,KAAK;IAGpD,OAAO,mCAACF;MAAkB,GAAGU;MAAa,GAAIR;IAAA,CAAa;EAC7D;EACAD,UAAUI,cAAc,mBACtBL,iBAAiBK,eAAeL,iBAAiBM,QAAQ;EAG3D,OAAOL;AACT","names":["React","useQueryParams","withQueryParams","paramConfigMap","WrappedComponent","Component","props","query","setQuery","displayName","name","withQueryParams_default","withQueryParamsMapped","mapToProps","propsToAdd"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/use-query-params/src/withQueryParams.tsx"],"sourcesContent":["import * as React from 'react';\nimport { QueryParamConfigMap, DecodedValueMap } from 'serialize-query-params';\nimport useQueryParams from './useQueryParams';\nimport { SetQuery } from './types';\n\ntype Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\ntype Diff<T, K> = Omit<T, keyof K>;\n\nexport interface InjectedQueryProps<QPCMap extends QueryParamConfigMap> {\n  query: DecodedValueMap<QPCMap>;\n  setQuery: SetQuery<QPCMap>;\n}\n\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParams<\n  QPCMap extends QueryParamConfigMap,\n  P extends InjectedQueryProps<QPCMap>\n>(paramConfigMap: QPCMap, WrappedComponent: React.ComponentType<P>) {\n  // return a FC that takes props excluding query and setQuery\n  const Component: React.FC<Diff<P, InjectedQueryProps<QPCMap>>> = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n\n    // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n    return (\n      <WrappedComponent query={query} setQuery={setQuery} {...(props as any)} />\n    );\n  };\n  Component.displayName = `withQueryParams(${\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\n  })`;\n\n  return Component;\n}\n\nexport default withQueryParams;\n\n/**\n * HOC to provide query parameters via props mapToProps (similar to\n * react-redux connect style mapStateToProps)\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\nexport function withQueryParamsMapped<\n  QPCMap extends QueryParamConfigMap,\n  MappedProps extends object,\n  P extends MappedProps\n>(\n  paramConfigMap: QPCMap,\n  mapToProps: (\n    query: DecodedValueMap<QPCMap>,\n    setQuery: SetQuery<QPCMap>,\n    props: Diff<P, MappedProps>\n  ) => MappedProps,\n  WrappedComponent: React.ComponentType<P>\n) {\n  // return a FC that takes props excluding query and setQuery\n  const Component: React.FC<Diff<P, MappedProps>> = (props) => {\n    const [query, setQuery] = useQueryParams(paramConfigMap);\n    const propsToAdd = mapToProps(query, setQuery, props);\n\n    // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n    return <WrappedComponent {...propsToAdd} {...(props as P)} />;\n  };\n  Component.displayName = `withQueryParams(${\n    WrappedComponent.displayName || WrappedComponent.name || 'Component'\n  })`;\n\n  return Component;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}