{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nclass Position {\n  constructor(line, col, index) {\n    this.line = void 0;\n    this.column = void 0;\n    this.index = void 0;\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column,\n    index\n  } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\nvar ParseErrorCode = {\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n};\nconst reflect = function (keys) {\n  let last = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : keys.length - 1;\n  return {\n    get() {\n      return keys.reduce((object, key) => object[key], this);\n    },\n    set(value) {\n      keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);\n    }\n  };\n};\nconst instantiate = (constructor, properties, descriptors) => Object.keys(descriptors).map(key => [key, descriptors[key]]).filter(_ref3 => {\n  let [, descriptor] = _ref3;\n  return !!descriptor;\n}).map(_ref4 => {\n  let [key, descriptor] = _ref4;\n  return [key, typeof descriptor === \"function\" ? {\n    value: descriptor,\n    enumerable: false\n  } : typeof descriptor.reflect === \"string\" ? Object.assign({}, descriptor, reflect(descriptor.reflect.split(\".\"))) : descriptor];\n}).reduce((instance, _ref5) => {\n  let [key, descriptor] = _ref5;\n  return Object.defineProperty(instance, key, Object.assign({\n    configurable: true\n  }, descriptor));\n}, Object.assign(new constructor(), properties));\nvar ModuleErrors = {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError\n  }\n};\nconst NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\"\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\"\n};\nconst toNodeDescription = _ref6 => {\n  let {\n    type,\n    prefix\n  } = _ref6;\n  return type === \"UpdateExpression\" ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];\n};\nvar StandardErrors = {\n  AccessorIsGenerator: _ref7 => {\n    let {\n      kind\n    } = _ref7;\n    return `A ${kind}ter cannot be a generator.`;\n  },\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: _ref8 => {\n    let {\n      kind\n    } = _ref8;\n    return `Missing initializer in ${kind} declaration.`;\n  },\n  DecoratorArgumentsOutsideParentheses: \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: _ref9 => {\n    let {\n      exportName\n    } = _ref9;\n    return `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`;\n  },\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: _ref10 => {\n    let {\n      localName,\n      exportName\n    } = _ref10;\n    return `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`;\n  },\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: _ref11 => {\n    let {\n      type\n    } = _ref11;\n    return `'${type === \"ForInStatement\" ? \"for-in\" : \"for-of\"}' loop variable declaration may not have an initializer.`;\n  },\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: _ref12 => {\n    let {\n      type\n    } = _ref12;\n    return `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`;\n  },\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: _ref13 => {\n    let {\n      importName\n    } = _ref13;\n    return `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`;\n  },\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: _ref14 => {\n    let {\n      maxArgumentCount\n    } = _ref14;\n    return `\\`import()\\` requires exactly ${maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"}.`;\n  },\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault: \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding: 'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags: \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: _ref15 => {\n    let {\n      radix\n    } = _ref15;\n    return `Expected number in radix ${radix}.`;\n  },\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: _ref16 => {\n    let {\n      reservedWord\n    } = _ref16;\n    return `Escape sequence in keyword ${reservedWord}.`;\n  },\n  InvalidIdentifier: _ref17 => {\n    let {\n      identifierName\n    } = _ref17;\n    return `Invalid identifier ${identifierName}.`;\n  },\n  InvalidLhs: _ref18 => {\n    let {\n      ancestor\n    } = _ref18;\n    return `Invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  },\n  InvalidLhsBinding: _ref19 => {\n    let {\n      ancestor\n    } = _ref19;\n    return `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`;\n  },\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: _ref20 => {\n    let {\n      unexpected\n    } = _ref20;\n    return `Unexpected character '${unexpected}'.`;\n  },\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: _ref21 => {\n    let {\n      identifierName\n    } = _ref21;\n    return `Private name #${identifierName} is not defined.`;\n  },\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: _ref22 => {\n    let {\n      labelName\n    } = _ref22;\n    return `Label '${labelName}' is already declared.`;\n  },\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: _ref23 => {\n    let {\n      missingPlugin\n    } = _ref23;\n    return `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  },\n  MissingOneOfPlugins: _ref24 => {\n    let {\n      missingPlugin\n    } = _ref24;\n    return `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map(name => JSON.stringify(name)).join(\", \")}.`;\n  },\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: _ref25 => {\n    let {\n      key\n    } = _ref25;\n    return `Duplicate key \"${key}\" is not allowed in module attributes.`;\n  },\n  ModuleExportNameHasLoneSurrogate: _ref26 => {\n    let {\n      surrogateCharCode\n    } = _ref26;\n    return `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(16)}'.`;\n  },\n  ModuleExportUndefined: _ref27 => {\n    let {\n      localName\n    } = _ref27;\n    return `Export '${localName}' is not defined.`;\n  },\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: _ref28 => {\n    let {\n      identifierName\n    } = _ref28;\n    return `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`;\n  },\n  PrivateNameRedeclaration: _ref29 => {\n    let {\n      identifierName\n    } = _ref29;\n    return `Duplicate private name #${identifierName}.`;\n  },\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: _ref30 => {\n    let {\n      keyword\n    } = _ref30;\n    return `Unexpected keyword '${keyword}'.`;\n  },\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: _ref31 => {\n    let {\n      reservedWord\n    } = _ref31;\n    return `Unexpected reserved word '${reservedWord}'.`;\n  },\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: _ref32 => {\n    let {\n      expected,\n      unexpected\n    } = _ref32;\n    return `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${expected ? `, expected \"${expected}\"` : \"\"}`;\n  },\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration: \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: _ref33 => {\n    let {\n      target,\n      onlyValidPropertyName\n    } = _ref33;\n    return `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`;\n  },\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern: \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: _ref34 => {\n    let {\n      identifierName\n    } = _ref34;\n    return `Identifier '${identifierName}' has already been declared.`;\n  },\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n};\nvar StrictModeErrors = {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: _ref35 => {\n    let {\n      referenceName\n    } = _ref35;\n    return `Assigning to '${referenceName}' in strict mode.`;\n  },\n  StrictEvalArgumentsBinding: _ref36 => {\n    let {\n      bindingName\n    } = _ref36;\n    return `Binding '${bindingName}' in strict mode.`;\n  },\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\"\n};\nconst UnparenthesizedPipeBodyDescriptions = new Set([\"ArrowFunctionExpression\", \"AssignmentExpression\", \"ConditionalExpression\", \"YieldExpression\"]);\nvar PipelineOperatorErrors = {\n  PipeBodyIsTighter: \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: _ref37 => {\n    let {\n      token\n    } = _ref37;\n    return `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`;\n  },\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: _ref38 => {\n    let {\n      type\n    } = _ref38;\n    return `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type\n    })}; please wrap it in parentheses.`;\n  },\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.'\n};\nconst _excluded$1 = [\"toMessage\"],\n  _excluded2$1 = [\"message\"];\nfunction toParseErrorConstructor(_ref) {\n  let {\n      toMessage\n    } = _ref,\n    properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);\n  return function constructor(_ref39) {\n    let {\n      loc,\n      details\n    } = _ref39;\n    return instantiate(SyntaxError, Object.assign({}, properties, {\n      loc\n    }), {\n      clone() {\n        let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const loc = overrides.loc || {};\n        return constructor({\n          loc: new Position(\"line\" in loc ? loc.line : this.loc.line, \"column\" in loc ? loc.column : this.loc.column, \"index\" in loc ? loc.index : this.loc.index),\n          details: Object.assign({}, this.details, overrides.details)\n        });\n      },\n      details: {\n        value: details,\n        enumerable: false\n      },\n      message: {\n        get() {\n          return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;\n        },\n        set(value) {\n          Object.defineProperty(this, \"message\", {\n            value\n          });\n        }\n      },\n      pos: {\n        reflect: \"loc.index\",\n        enumerable: true\n      },\n      missingPlugin: \"missingPlugin\" in details && {\n        reflect: \"details.missingPlugin\",\n        enumerable: true\n      }\n    });\n  };\n}\nfunction ParseErrorEnum(argument, syntaxPlugin) {\n  if (Array.isArray(argument)) {\n    return parseErrorTemplates => ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n  const ParseErrorConstructors = {};\n  for (const reasonCode of Object.keys(argument)) {\n    const template = argument[reasonCode];\n    const _ref2 = typeof template === \"string\" ? {\n        message: () => template\n      } : typeof template === \"function\" ? {\n        message: template\n      } : template,\n      {\n        message\n      } = _ref2,\n      rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1);\n    const toMessage = typeof message === \"string\" ? () => message : message;\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage\n    }, syntaxPlugin ? {\n      syntaxPlugin\n    } : {}, rest));\n  }\n  return ParseErrorConstructors;\n}\nconst Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum(StrictModeErrors), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors));\nconst {\n  defineProperty\n} = Object;\nconst toUnenumerable = (object, key) => defineProperty(object, key, {\n  enumerable: false,\n  value: object[key]\n});\nfunction toESTreeLocation(node) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n  return node;\n}\nvar estree = superClass => class ESTreeParserMixin extends superClass {\n  parse() {\n    const file = toESTreeLocation(super.parse());\n    if (this.options.tokens) {\n      file.tokens = file.tokens.map(toESTreeLocation);\n    }\n    return file;\n  }\n  parseRegExpLiteral(_ref40) {\n    let {\n      pattern,\n      flags\n    } = _ref40;\n    let regex = null;\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n  parseBigIntLiteral(value) {\n    let bigInt;\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n  directiveToStmt(directive) {\n    const expression = directive.value;\n    delete directive.value;\n    expression.type = \"Literal\";\n    expression.raw = expression.extra.raw;\n    expression.value = expression.extra.expressionValue;\n    const stmt = directive;\n    stmt.type = \"ExpressionStatement\";\n    stmt.expression = expression;\n    stmt.directive = expression.extra.rawValue;\n    delete expression.extra;\n    return stmt;\n  }\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n    classBody.body.push(method);\n  }\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n    return this.finishNode(node, \"MethodDefinition\");\n  }\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") {\n        node.kind = \"init\";\n      }\n      node.shorthand = false;\n    }\n    return node;\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n    return node;\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return type === \"Property\" ? \"value\" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n    return super.isAssignable(node, isBinding);\n  }\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (node != null && this.isObjectProperty(node)) {\n      const {\n        key,\n        value\n      } = node;\n      if (this.isPrivateName(key)) {\n        this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n      }\n      this.toAssignable(value, isLHS);\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(Errors.PatternHasAccessor, {\n        at: prop.key\n      });\n    } else if (prop.method) {\n      this.raise(Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else {\n      super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n    }\n  }\n  finishCallExpression(unfinished, optional) {\n    const node = super.finishCallExpression(unfinished, optional);\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n      delete node.arguments;\n      delete node.callee;\n    }\n    return node;\n  }\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n    super.toReferencedArguments(node);\n  }\n  parseExport(unfinished, decorators) {\n    const exportStartLoc = this.state.lastTokStartLoc;\n    const node = super.parseExport(unfinished, decorators);\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n      case \"ExportDefaultDeclaration\":\n        {\n          var _declaration$decorato;\n          const {\n            declaration\n          } = node;\n          if ((declaration == null ? void 0 : declaration.type) === \"ClassDeclaration\" && ((_declaration$decorato = declaration.decorators) == null ? void 0 : _declaration$decorato.length) > 0 && declaration.start === node.start) {\n            this.resetStartLocation(node, exportStartLoc);\n          }\n        }\n        break;\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startLoc, noCalls, state);\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n    return node;\n  }\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n    return super.hasPropertyAsPrivateName(node);\n  }\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n  finishNodeAt(node, type, endLoc) {\n    return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n  }\n  resetStartLocation(node, startLoc) {\n    super.resetStartLocation(node, startLoc);\n    toESTreeLocation(node);\n  }\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    super.resetEndLocation(node, endLoc);\n    toESTreeLocation(node);\n  }\n};\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n}\nconst keywords$1 = new Map();\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  doubleCaret: createToken(\"^^\", {\n    startsExpr\n  }),\n  doubleAt: createToken(\"@@\", {\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _using: createKeywordLike(\"using\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _satisfies: createKeywordLike(\"satisfies\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 93 && token <= 130;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 92;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 58 && token <= 130;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 58 && token <= 134;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 127 && token <= 129;\n}\nfunction tokenIsLoop(token) {\n  return token >= 90 && token <= 92;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 58 && token <= 92;\n}\nfunction tokenIsOperator(token) {\n  return token >= 39 && token <= 59;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 119 && token <= 121;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 122 && token <= 128;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 57;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n  tokenTypes[140].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\nfunction isIteratorStart(current, next, next2) {\n  return current === 64 && next === 64 && isIdentifierStart(next2);\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\nconst SCOPE_OTHER = 0b000000000,\n  SCOPE_PROGRAM = 0b000000001,\n  SCOPE_FUNCTION = 0b000000010,\n  SCOPE_ARROW = 0b000000100,\n  SCOPE_SIMPLE_CATCH = 0b000001000,\n  SCOPE_SUPER = 0b000010000,\n  SCOPE_DIRECT_SUPER = 0b000100000,\n  SCOPE_CLASS = 0b001000000,\n  SCOPE_STATIC_BLOCK = 0b010000000,\n  SCOPE_TS_MODULE = 0b100000000,\n  SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n  BIND_KIND_TYPE = 0b000000000010,\n  BIND_SCOPE_VAR = 0b000000000100,\n  BIND_SCOPE_LEXICAL = 0b000000001000,\n  BIND_SCOPE_FUNCTION = 0b000000010000,\n  BIND_FLAGS_NONE = 0b0000001000000,\n  BIND_FLAGS_CLASS = 0b0000010000000,\n  BIND_FLAGS_TS_ENUM = 0b0000100000000,\n  BIND_FLAGS_TS_CONST_ENUM = 0b0001000000000,\n  BIND_FLAGS_TS_EXPORT_ONLY = 0b0010000000000,\n  BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000000000,\n  BIND_FLAGS_TS_IMPORT = 0b1000000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n  BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n  BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n  BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n  BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n  BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n  BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n  BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n  BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n  BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_TS_TYPE_IMPORT = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_TS_IMPORT,\n  BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n  CLASS_ELEMENT_KIND_GETTER = 0b010,\n  CLASS_ELEMENT_KIND_SETTER = 0b001,\n  CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n  CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n  CLASS_ELEMENT_OTHER = 0;\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n}\nclass ScopeHandler {\n  constructor(parser, inModule) {\n    this.parser = void 0;\n    this.scopeStack = [];\n    this.inModule = void 0;\n    this.undefinedExports = new Map();\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n  createScope(flags) {\n    return new Scope(flags);\n  }\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n  exit() {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) || !this.parser.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n  declareName(name, bindingType, loc) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  maybeExportDefined(scope, name) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n  checkRedeclarationInScope(scope, name, bindingType, loc) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n}\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n  declareName(name, bindingType, loc) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n    return false;\n  }\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n}\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n    const {\n      start: nodeStart\n    } = node;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        break;\n      }\n    }\n  }\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n    default:\n      return false;\n  }\n}\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.inDisallowConditionalTypesContext = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 137;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.firstInvalidTemplateEscapePos = null;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n  init(_ref41) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref41;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n      state[key] = val;\n    }\n    return state;\n  }\n}\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set([46, 66, 69, 79, 95, 98, 101, 111]),\n  hex: new Set([46, 88, 95, 120])\n};\nconst isAllowedNumericSeparatorSibling = {\n  bin: ch => ch === 48 || ch === 49,\n  oct: ch => ch >= 48 && ch <= 55,\n  dec: ch => ch >= 48 && ch <= 57,\n  hex: ch => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102\n};\nfunction readStringContents(type, input, pos, lineStart, curLine, errors) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const {\n    length\n  } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === 92) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(input, pos, lineStart, curLine, type === \"template\", errors);\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = {\n          pos,\n          lineStart,\n          curLine\n        };\n      } else {\n        out += res.ch;\n      }\n      ({\n        pos,\n        lineStart,\n        curLine\n      } = res);\n      chunkStart = pos;\n    } else if (ch === 8232 || ch === 8233) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === 10 || ch === 13) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (ch === 13 && input.charCodeAt(pos) === 10) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n    containsInvalid: !!firstInvalidLoc\n  };\n}\nfunction isStringEnd(type, ch, input, pos) {\n  if (type === \"template\") {\n    return ch === 96 || ch === 36 && input.charCodeAt(pos + 1) === 123;\n  }\n  return ch === (type === \"double\" ? 34 : 39);\n}\nfunction readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {\n  const throwOnInvalid = !inTemplate;\n  pos++;\n  const res = ch => ({\n    pos,\n    ch,\n    lineStart,\n    curLine\n  });\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case 110:\n      return res(\"\\n\");\n    case 114:\n      return res(\"\\r\");\n    case 120:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCharCode(code));\n      }\n    case 117:\n      {\n        let code;\n        ({\n          code,\n          pos\n        } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors));\n        return res(code === null ? null : String.fromCodePoint(code));\n      }\n    case 116:\n      return res(\"\\t\");\n    case 98:\n      return res(\"\\b\");\n    case 118:\n      return res(\"\\u000b\");\n    case 102:\n      return res(\"\\f\");\n    case 13:\n      if (input.charCodeAt(pos) === 10) {\n        ++pos;\n      }\n    case 10:\n      lineStart = pos;\n      ++curLine;\n    case 8232:\n    case 8233:\n      return res(\"\");\n    case 56:\n    case 57:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    default:\n      if (ch >= 48 && ch <= 55) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/);\n        let octalStr = match[0];\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (octalStr !== \"0\" || next === 56 || next === 57) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n        return res(String.fromCharCode(octal));\n      }\n      return res(String.fromCharCode(ch));\n  }\n}\nfunction readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {\n  const initialPos = pos;\n  let n;\n  ({\n    n,\n    pos\n  } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors, !throwOnInvalid));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return {\n    code: n,\n    pos\n  };\n}\nfunction readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors, bailOnError) {\n  const start = pos;\n  const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling = radix === 16 ? isAllowedNumericSeparatorSibling.hex : radix === 10 ? isAllowedNumericSeparatorSibling.dec : radix === 8 ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;\n  let invalid = false;\n  let total = 0;\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n    if (code === 95 && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n      if (!allowNumSeparator) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) {\n        if (bailOnError) return {\n          n: null,\n          pos\n        };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n      ++pos;\n      continue;\n    }\n    if (code >= 97) {\n      val = code - 97 + 10;\n    } else if (code >= 65) {\n      val = code - 65 + 10;\n    } else if (_isDigit(code)) {\n      val = code - 48;\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      if (val <= 9 && bailOnError) {\n        return {\n          n: null,\n          pos\n        };\n      } else if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix)) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || len != null && pos - start !== len || invalid) {\n    return {\n      n: null,\n      pos\n    };\n  }\n  return {\n    n: total,\n    pos\n  };\n}\nfunction readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {\n  const ch = input.charCodeAt(pos);\n  let code;\n  if (ch === 123) {\n    ++pos;\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, input.indexOf(\"}\", pos) - pos, true, throwOnInvalid, errors));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return {\n          code: null,\n          pos\n        };\n      }\n    }\n  } else {\n    ({\n      code,\n      pos\n    } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));\n  }\n  return {\n    code,\n    pos\n  };\n}\nconst _excluded = [\"at\"],\n  _excluded2 = [\"at\"];\nfunction buildPosition(pos, lineStart, curLine) {\n  return new Position(curLine, pos - lineStart, pos);\n}\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100, 118]);\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n}\nclass Tokenizer extends CommentsParser {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.errorHandlers_readInt = {\n      invalidDigit: (pos, lineStart, curLine, radix) => {\n        if (!this.options.errorRecovery) return false;\n        this.raise(Errors.InvalidDigit, {\n          at: buildPosition(pos, lineStart, curLine),\n          radix\n        });\n        return true;\n      },\n      numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence),\n      unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator)\n    };\n    this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, {\n      invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n      invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint)\n    });\n    this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: (pos, lineStart, curLine) => {\n        this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      },\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedString, {\n          at: buildPosition(pos - 1, lineStart, curLine)\n        });\n      }\n    });\n    this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, {\n      strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n      unterminated: (pos, lineStart, curLine) => {\n        throw this.raise(Errors.UnterminatedTemplate, {\n          at: buildPosition(pos, lineStart, curLine)\n        });\n      }\n    });\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n  next() {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n  match(type) {\n    return this.state.type === type;\n  }\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition\n    };\n  }\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n  setStrict(strict) {\n    this.state.strict = strict;\n    if (strict) {\n      this.state.strictErrors.forEach(_ref42 => {\n        let [toParseError, at] = _ref42;\n        return this.raise(toParseError, {\n          at\n        });\n      });\n      this.state.strictErrors.clear();\n    }\n  }\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(137);\n      return;\n    }\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n  skipBlockComment(commentEnd) {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment(\"*/\");\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n                break;\n              }\n            default:\n              break loop;\n          }\n          break;\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= 48 && next <= 57) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition()\n      });\n    }\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(next === 123 ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, {\n          at: this.state.curPosition()\n        });\n      }\n      this.state.pos += 2;\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(136, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(56, 1);\n    }\n  }\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 55 : 54;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 57;\n    }\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n    this.finishOp(type, width);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 41 : 42, 2);\n      }\n      return;\n    }\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(39, 2);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition()\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n    this.finishOp(code === 124 ? 43 : 45, 1);\n  }\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else if (next === 94 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"^^\"\n    }])) {\n      this.finishOp(37, 2);\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === 94) {\n        throw this.unexpected();\n      }\n    } else {\n      this.finishOp(44, 1);\n    }\n  }\n  readToken_atSign() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 64 && this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"hack\",\n      topicToken: \"@@\"\n    }])) {\n      this.finishOp(38, 2);\n    } else {\n      this.finishOp(26, 1);\n    }\n  }\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(53, 1);\n    }\n  }\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n      this.finishOp(51, 2);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(47, 1);\n  }\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n      this.finishOp(52, size);\n      return;\n    }\n    if (next === 61) {\n      this.finishOp(49, 2);\n      return;\n    }\n    this.finishOp(48, 1);\n  }\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === 61) {\n      this.finishOp(46, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(40, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n        return;\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, {\n              at: this.state.curPosition()\n            });\n          }\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n        return;\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n        return;\n      case 63:\n        this.readToken_question();\n        return;\n      case 96:\n        this.readTemplateToken();\n        return;\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n      case 47:\n        this.readToken_slash();\n        return;\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n      case 94:\n        this.readToken_caret();\n        return;\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n      case 60:\n        this.readToken_lt();\n        return;\n      case 62:\n        this.readToken_gt();\n        return;\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n      case 126:\n        this.finishOp(36, 1);\n        return;\n      case 64:\n        this.readToken_atSign();\n        return;\n      case 35:\n        this.readToken_numberSign();\n        return;\n      case 92:\n        this.readWord();\n        return;\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code)\n    });\n  }\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n  readRegexp() {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1)\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n        escaped = ch === 92;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n    const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === 118) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        } else if (cp === 117) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, {\n              at: nextPos()\n            });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, {\n            at: nextPos()\n          });\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(Errors.MalformedRegExpFlags, {\n          at: nextPos()\n        });\n      } else {\n        break;\n      }\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n    this.finishToken(135, {\n      pattern: content,\n      flags: mods\n    });\n  }\n  readInt(radix, len) {\n    let forceLen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const {\n      n,\n      pos\n    } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt, false);\n    this.state.pos = pos;\n    return n;\n  }\n  readRadixNumber(radix) {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(Errors.InvalidDecimal, {\n        at: startLoc\n      });\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    if (isBigInt) {\n      const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(133, str);\n      return;\n    }\n    this.finishToken(132, val);\n  }\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, {\n        at: this.state.curPosition()\n      });\n    }\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, {\n        at: startLoc\n      });\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos)\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, {\n          at: startLoc\n        });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, {\n          at: startLoc\n        });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition()\n      });\n    }\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n    if (isBigInt) {\n      this.finishToken(133, str);\n      return;\n    }\n    if (isDecimal) {\n      this.finishToken(134, str);\n      return;\n    }\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(132, val);\n  }\n  readCodePoint(throwOnInvalid) {\n    const {\n      code,\n      pos\n    } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);\n    this.state.pos = pos;\n    return code;\n  }\n  readString(quote) {\n    const {\n      str,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(quote === 34 ? \"double\" : \"single\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(131, str);\n  }\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(null, 8);\n    }\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n  readTemplateToken() {\n    const opening = this.input[this.state.pos];\n    const {\n      str,\n      firstInvalidLoc,\n      pos,\n      curLine,\n      lineStart\n    } = readStringContents(\"template\", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);\n    this.state.pos = pos + 1;\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(firstInvalidLoc.curLine, firstInvalidLoc.pos - firstInvalidLoc.lineStart, firstInvalidLoc.pos);\n    }\n    if (this.input.codePointAt(pos) === 96) {\n      this.finishToken(24, firstInvalidLoc ? null : opening + str + \"`\");\n    } else {\n      this.state.pos++;\n      this.finishToken(25, firstInvalidLoc ? null : opening + str + \"${\");\n    }\n  }\n  recordStrictModeErrors(toParseError, _ref43) {\n    let {\n      at\n    } = _ref43;\n    const index = at.index;\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, {\n        at\n      });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition()\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, {\n              at: escStart\n            });\n          }\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(130, word);\n    }\n  }\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type)\n      });\n    }\n  }\n  raise(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const error = toParseError({\n      loc,\n      details\n    });\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n    return error;\n  }\n  raiseOverwrite(toParseError, raiseProperties) {\n    const {\n        at\n      } = raiseProperties,\n      details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2);\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        return errors[i] = toParseError({\n          loc,\n          details\n        });\n      }\n      if (error.loc.index < pos) break;\n    }\n    return this.raise(toParseError, raiseProperties);\n  }\n  updateContext(prevType) {}\n  unexpected(loc, type) {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc\n    });\n  }\n  expectPlugin(pluginName, loc) {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName]\n    });\n  }\n  expectOnePlugin(pluginNames) {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames\n      });\n    }\n  }\n  errorBuilder(error) {\n    return (pos, lineStart, curLine) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine)\n      });\n    };\n  }\n}\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n}\nclass ClassScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.parser = parser;\n  }\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name\n        });\n      }\n    }\n  }\n  declarePrivateName(name, elementType, loc) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name\n      });\n    }\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n  usePrivateName(name, loc) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name\n      });\n    }\n  }\n}\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.declarationErrors = new Map();\n  }\n  recordDeclarationError(ParsingErrorClass, _ref44) {\n    let {\n      at\n    } = _ref44;\n    const index = at.index;\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(iterator) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\nclass ExpressionScopeHandler {\n  constructor(parser) {\n    this.parser = void 0;\n    this.stack = [new ExpressionScope()];\n    this.parser = parser;\n  }\n  enter(scope) {\n    this.stack.push(scope);\n  }\n  exit() {\n    this.stack.pop();\n  }\n  recordParameterInitializerError(toParseError, _ref45) {\n    let {\n      at: node\n    } = _ref45;\n    const origin = {\n      at: node.loc.start\n    };\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n  recordArrowParameterBindingError(error, _ref46) {\n    let {\n      at: node\n    } = _ref46;\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n    const origin = {\n      at: node.loc.start\n    };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n  recordAsyncArrowParametersError(_ref47) {\n    let {\n      at\n    } = _ref47;\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, {\n          at\n        });\n      }\n      scope = stack[--i];\n    }\n  }\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(_ref48 => {\n      let [toParseError, loc] = _ref48;\n      this.parser.raise(toParseError, {\n        at: loc\n      });\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\nconst PARAM = 0b0000,\n  PARAM_YIELD = 0b0001,\n  PARAM_AWAIT = 0b0010,\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n  exit() {\n    this.stacks.pop();\n  }\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, value) {\n    let enumerable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, {\n        enumerable,\n        value\n      });\n    }\n  }\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n    return false;\n  }\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  expectContextual(token, toParseError) {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, {\n          at: this.state.startLoc\n        });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n  canInsertSemicolon() {\n    return this.match(137) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));\n  }\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(Errors.MissingSemicolon, {\n      at: this.state.lastTokEndLoc\n    });\n  }\n  expect(type, loc) {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n      throw error;\n    }\n  }\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc\n    } = refExpressionErrors;\n    const hasErrors = !!shorthandAssignLoc || !!doubleProtoLoc || !!optionalParametersLoc || !!privateKeyLoc;\n    if (!andThrow) {\n      return hasErrors;\n    }\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc\n      });\n    }\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, {\n        at: doubleProtoLoc\n      });\n    }\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, {\n        at: privateKeyLoc\n      });\n    }\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n  checkDestructuringPrivate(refExpressionErrors) {\n    const {\n      privateKeyLoc\n    } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssignLoc = null;\n    this.doubleProtoLoc = null;\n    this.privateKeyLoc = null;\n    this.optionalParametersLoc = null;\n  }\n}\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n}\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n    return newNode;\n  };\n}\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n  startNodeAt(loc) {\n    return new Node(this, loc.index, loc);\n  }\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.loc.start);\n  }\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n  finishNodeAt(node, type, endLoc) {\n    node.type = type;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n  resetStartLocation(node, startLoc) {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n  resetEndLocation(node) {\n    let endLoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEndLoc;\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: _ref49 => {\n    let {\n      reservedType\n    } = _ref49;\n    return `Cannot overwrite reserved type ${reservedType}.`;\n  },\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: _ref50 => {\n    let {\n      memberName,\n      enumName\n    } = _ref50;\n    return `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumDuplicateMemberName: _ref51 => {\n    let {\n      memberName,\n      enumName\n    } = _ref51;\n    return `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`;\n  },\n  EnumInconsistentMemberValues: _ref52 => {\n    let {\n      enumName\n    } = _ref52;\n    return `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`;\n  },\n  EnumInvalidExplicitType: _ref53 => {\n    let {\n      invalidEnumType,\n      enumName\n    } = _ref53;\n    return `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidExplicitTypeUnknownSupplied: _ref54 => {\n    let {\n      enumName\n    } = _ref54;\n    return `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberInitializerPrimaryType: _ref55 => {\n    let {\n      enumName,\n      memberName,\n      explicitType\n    } = _ref55;\n    return `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`;\n  },\n  EnumInvalidMemberInitializerSymbolType: _ref56 => {\n    let {\n      enumName,\n      memberName\n    } = _ref56;\n    return `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberInitializerUnknownType: _ref57 => {\n    let {\n      enumName,\n      memberName\n    } = _ref57;\n    return `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`;\n  },\n  EnumInvalidMemberName: _ref58 => {\n    let {\n      enumName,\n      memberName,\n      suggestion\n    } = _ref58;\n    return `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`;\n  },\n  EnumNumberMemberNotInitialized: _ref59 => {\n    let {\n      enumName,\n      memberName\n    } = _ref59;\n    return `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`;\n  },\n  EnumStringMemberInconsistentlyInitailized: _ref60 => {\n    let {\n      enumName\n    } = _ref60;\n    return `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`;\n  },\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: Object.assign({\n    message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n  }, {\n    reasonCode: \"OptionalBindingPattern\"\n  }),\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: _ref61 => {\n    let {\n      reservedType\n    } = _ref61;\n    return `Unexpected reserved type ${reservedType}.`;\n  },\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: _ref62 => {\n    let {\n      unsupportedExportKind,\n      suggestion\n    } = _ref62;\n    return `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`;\n  },\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n});\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 97;\n}\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = superClass => class FlowParserMixin extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n  finishToken(type, val) {\n    if (type !== 131 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n    return super.finishToken(type, val);\n  }\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n    return super.addComment(comment);\n  }\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloLoc = this.state.startLoc;\n    this.next();\n    this.expectContextual(108);\n    if (this.state.lastTokStart > moduloLoc.index + 1) {\n      this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n        at: moduloLoc\n      });\n    }\n    if (this.eat(10)) {\n      node.value = super.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n    if (this.match(54)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n      if (this.match(54)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n    return [type, predicate];\n  }\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n    if (this.match(47)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.loc.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n  flowParseDeclare(node, insideModule) {\n    if (this.match(80)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(68)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(74)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(125)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(FlowErrors.NestedDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(128)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(129)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(127)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(82)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n    if (this.match(131)) {\n      node.id = super.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n      if (this.match(83)) {\n        this.next();\n        if (!this.isContextual(128) && !this.match(87)) {\n          this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        super.parseImport(bodyNode);\n      } else {\n        this.expectContextual(123, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n      body.push(bodyNode);\n    }\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n            at: bodyElement\n          });\n        }\n        if (kind === \"ES\") {\n          this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n            at: bodyElement\n          });\n        }\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(82);\n    if (this.eat(65)) {\n      if (this.match(68) || this.match(80)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(75) || this.isLet() || (this.isContextual(128) || this.isContextual(127)) && !insideModule) {\n        const label = this.state.value;\n        throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n          at: this.state.startLoc,\n          unsupportedExportKind: label,\n          suggestion: exportSuggestions[label]\n        });\n      }\n      if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(129)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(55) || this.match(5) || this.isContextual(127) || this.isContextual(128) || this.isContextual(129)) {\n        node = this.parseExport(node, null);\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n    throw this.unexpected();\n  }\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(109);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    const finished = this.flowParseTypeAlias(node);\n    finished.type = \"DeclareTypeAlias\";\n    return finished;\n  }\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    const finished = this.flowParseOpaqueType(node, true);\n    finished.type = \"DeclareOpaqueType\";\n    return finished;\n  }\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n    if (this.isContextual(115)) {\n      this.next();\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    if (this.isContextual(111)) {\n      this.next();\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n        at: this.state.startLoc\n      });\n    }\n  }\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, {\n      at: startLoc,\n      reservedType: word\n    });\n  }\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.startLoc, declaration);\n    return this.parseIdentifier(liberal);\n  }\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(128);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n    node.supertype = null;\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n    node.impltype = null;\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStartLoc = this.state.startLoc;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(FlowErrors.MissingTypeParamDefault, {\n          at: nodeStartLoc\n        });\n      }\n    }\n    return this.finishNode(node, \"TypeParameter\");\n  }\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    let defaultRequired = false;\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    } while (!this.match(48));\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n    while (!this.match(48)) {\n      node.params.push(this.flowParseType());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(47);\n    while (!this.match(48)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n      if (!this.match(48)) {\n        this.expect(12);\n      }\n    }\n    this.expect(48);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(127);\n    node.extends = [];\n    if (this.eat(81)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n  flowParseObjectPropertyKey() {\n    return this.match(132) || this.match(131) ? super.parseExprAtom() : this.parseIdentifier(true);\n  }\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n    if (this.match(47) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n    } else {\n      node.method = false;\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n      node.value = this.flowParseTypeInitialiser();\n    }\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    this.expect(10);\n    if (this.match(78)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n  flowParseObjectType(_ref63) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref63;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n    nodeStart.exact = exact;\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStartLoc = null;\n      let inexactStartLoc = null;\n      const node = this.startNode();\n      if (allowProto && this.isContextual(116)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStartLoc = this.state.startLoc;\n          allowStatic = false;\n        }\n      }\n      if (allowStatic && this.isContextual(104)) {\n        const lookahead = this.lookahead();\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n      const variance = this.flowParseVariance();\n      if (this.eat(0)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(47)) {\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n        if (this.isContextual(98) || this.isContextual(103)) {\n          const lookahead = this.lookahead();\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStartLoc = this.state.lastTokStartLoc;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n      this.flowObjectTypeSemicolon();\n      if (inexactStartLoc && !this.match(8) && !this.match(9)) {\n        this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n          at: inexactStartLoc\n        });\n      }\n    }\n    this.expect(endDelim);\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n  flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(FlowErrors.InexactInsideNonObject, {\n            at: this.state.lastTokStartLoc\n          });\n        } else if (!allowInexact) {\n          this.raise(FlowErrors.InexactInsideExact, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        if (variance) {\n          this.raise(FlowErrors.InexactVariance, {\n            at: variance\n          });\n        }\n        return null;\n      }\n      if (!allowSpread) {\n        this.raise(FlowErrors.UnexpectedSpreadType, {\n          at: this.state.lastTokStartLoc\n        });\n      }\n      if (protoStartLoc != null) {\n        this.unexpected(protoStartLoc);\n      }\n      if (variance) {\n        this.raise(FlowErrors.SpreadVariance, {\n          at: variance\n        });\n      }\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStartLoc != null;\n      node.kind = kind;\n      let optional = false;\n      if (this.match(47) || this.match(10)) {\n        node.method = true;\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.unexpected(variance.loc.start);\n        }\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.loc.start));\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, {\n            at: node.value.this\n          });\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n        if (this.eat(17)) {\n          optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n    if (property.value.this) {\n      this.raise(property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, {\n        at: property.value.this\n      });\n    }\n    if (length !== paramCount) {\n      this.raise(property.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: property\n      });\n    }\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: property\n      });\n    }\n  }\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n  flowParseQualifiedTypeIdentifier(startLoc, id) {\n    var _startLoc;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n    return node;\n  }\n  flowParseGenericType(startLoc, id) {\n    const node = this.startNodeAt(startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(87);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 78;\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node\n        });\n      }\n      name = this.parseIdentifier(isThis);\n      if (this.eat(17)) {\n        optional = true;\n        if (isThis) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n            at: node\n          });\n        }\n      }\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n    if (this.match(78)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n  flowIdentToTypeAnnotation(startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startLoc, id);\n    }\n  }\n  flowParsePrimaryType() {\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n      case 47:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 10:\n        this.next();\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      case 131:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n      case 85:\n      case 86:\n        node.value = this.match(85);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n      case 53:\n        if (this.state.value === \"-\") {\n          this.next();\n          if (this.match(132)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n          if (this.match(133)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n          throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n            at: this.state.startLoc\n          });\n        }\n        throw this.unexpected();\n      case 132:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n      case 133:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n      case 88:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n      case 84:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n      case 78:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n      case 55:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n      case 87:\n        return this.flowParseTypeofType();\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(127)) {\n            return this.flowParseInterfaceType();\n          }\n          return this.flowIdentToTypeAnnotation(startLoc, node, this.parseIdentifier());\n        }\n    }\n    throw this.unexpected();\n  }\n  flowParsePostfixType() {\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n    return type;\n  }\n  flowParsePrefixType() {\n    const node = this.startNode();\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n    return param;\n  }\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(45);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n    while (this.eat(45)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n    while (this.eat(43)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 130 && this.state.value === \"_\") {\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n    return ident;\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  flowParseVariance() {\n    let variance = null;\n    if (this.match(53)) {\n      variance = this.startNode();\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n      this.next();\n      return this.finishNode(variance, \"Variance\");\n    }\n    return variance;\n  }\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  parseStatementLike(flags) {\n    if (this.state.strict && this.isContextual(127)) {\n      const lookahead = this.lookahead();\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    const stmt = super.parseStatementLike(flags);\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n    return stmt;\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n    return super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return !this.state.containsEsc;\n    }\n    return super.shouldParseExportDeclaration();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 124) {\n      return this.state.containsEsc;\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(124)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n      if (failed && valid.length > 1) {\n        this.raise(FlowErrors.AmbiguousConditionalArrow, {\n          at: state.startLoc\n        });\n      }\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n    while (stack.length !== 0) {\n      const node = stack.pop();\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n  finishArrowValidation(node) {\n    var _node$extra;\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingCommaLoc, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n    return result;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n    return node;\n  }\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n    super.assertModuleNodeAllowed(node);\n  }\n  parseExport(node, decorators) {\n    const decl = super.parseExport(node, decorators);\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n    return decl;\n  }\n  parseExportDeclaration(node) {\n    if (this.isContextual(128)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        super.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(129)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(127)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(124)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n  eatExportStar(node) {\n    if (super.eatExportStar(node)) return true;\n    if (this.isContextual(128) && this.lookahead().type === 55) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    const {\n      startLoc\n    } = this.state;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(startLoc);\n    }\n    return hasNamespace;\n  }\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n    if (this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n  parseClassMember(classBody, member, state) {\n    const {\n      startLoc\n    } = this.state;\n    if (this.isContextual(123)) {\n      if (super.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      member.declare = true;\n    }\n    super.parseClassMember(classBody, member, state);\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(FlowErrors.DeclareClassElement, {\n          at: startLoc\n        });\n      } else if (member.value) {\n        this.raise(FlowErrors.DeclareClassFieldInitializer, {\n          at: member.value\n        });\n      }\n    }\n  }\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(Errors.InvalidIdentifier, {\n        at: this.state.curPosition(),\n        identifierName: fullWord\n      });\n    }\n    this.finishToken(130, fullWord);\n  }\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 48 : 47, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!isLHS && node.type === \"AssignmentExpression\" && node.left.type === \"TypeCastExpression\") {\n      node.left = this.typeCastToParameter(node.left);\n    }\n    super.toAssignable(node, isLHS);\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n      const expr = exprList[i];\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(FlowErrors.TypeCastInPattern, {\n          at: expr.typeAnnotation\n        });\n      }\n    }\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n    return node;\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"TypeCastExpression\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n    return super.parseClassPrivateProperty(node);\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n    if (method.params && isConstructor) {\n      const params = method.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(FlowErrors.ThisParamBannedInConstructor, {\n          at: method\n        });\n      }\n    }\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.loc.start);\n    }\n    delete method.variance;\n    if (this.match(47)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && this.match(47)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n    if (this.isContextual(111)) {\n      this.next();\n      const implemented = node.implements = [];\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n        if (this.match(47)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length > 0) {\n      const param = params[0];\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(FlowErrors.GetterMayNotHaveThisParam, {\n          at: param\n        });\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.SetterMayNotHaveThisParam, {\n          at: param\n        });\n      }\n    }\n  }\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.loc.start);\n    }\n    delete prop.variance;\n    let typeParameters;\n    if (this.match(47) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n    const result = super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n    if (typeParameters) {\n      (result.value || result).typeParameters = typeParameters;\n    }\n    return result;\n  }\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(FlowErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n      if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamMayNotBeOptional, {\n          at: param\n        });\n      }\n      param.optional = true;\n    }\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamAnnotationRequired, {\n        at: param\n      });\n    }\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(FlowErrors.ThisParamNoDefault, {\n        at: param\n      });\n    }\n    this.resetEndLocation(param);\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(FlowErrors.TypeBeforeInitializer, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n    return isMaybeDefaultImport(this.state.type);\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(FlowErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n    if (this.match(87)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(128)) {\n      kind = \"type\";\n    }\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n      if (kind === \"type\" && type === 55) {\n        this.unexpected(null, lh.type);\n      }\n      if (isMaybeDefaultImport(type) || type === 5 || type === 55) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n    let isBinding = false;\n    if (this.isContextual(93) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(Errors.ImportBindingIsString, {\n            at: specifier,\n            importName: firstIdent.value\n          });\n        }\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n      if (this.eatContextual(93)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n        at: specifier\n      });\n    }\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.loc.start, true);\n    }\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true);\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n    if (kind !== \"get\" && kind !== \"set\" && this.match(47)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n    super.parseFunctionParams(node, allowModifiers);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n    let state = null;\n    let jsx;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if ((_jsx = jsx) != null && _jsx.error || this.match(47)) {\n      var _jsx2, _jsx3;\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, {\n              at: typeParameters\n            });\n          }\n          return arrow.node;\n        }\n        arrowExpression = arrow.node;\n      }\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n        at: typeParameters\n      });\n    }\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n    return super.parseArrow(node);\n  }\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(FlowErrors.ThisParamMustBeFirst, {\n          at: node.params[i]\n        });\n      }\n    }\n    return super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startLoc.index) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.arguments = super.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(47)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n      throw arrow.error || result.error;\n    }\n    return super.parseSubscripts(base, startLoc, noCalls);\n  }\n  parseSubscript(base, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n      this.next();\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(47)) {\n      const node = this.startNodeAt(startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = super.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) {\n          node.optional = false;\n        }\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, subscriptState);\n  }\n  parseNewCallee(node) {\n    super.parseNewCallee(node);\n    let targs = null;\n    if (this.shouldParseTypes() && this.match(47)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n    node.typeArguments = targs;\n  }\n  parseAsyncArrowWithTypeParameters(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return super.parseArrowExpression(node, undefined, true);\n  }\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n    super.readToken_mult_modulo(code);\n  }\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n    super.readToken_pipe_amp(code);\n  }\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n    if (this.state.hasFlowComment) {\n      this.raise(FlowErrors.UnterminatedFlowComment, {\n        at: this.state.curPosition()\n      });\n    }\n    return fileNode;\n  }\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        throw this.raise(FlowErrors.NestedFlowComment, {\n          at: this.state.startLoc\n        });\n      }\n      this.hasFlowCommentCompletion();\n      const commentSkip = this.skipFlowComment();\n      if (commentSkip) {\n        this.state.pos += commentSkip;\n        this.state.hasFlowComment = true;\n      }\n      return;\n    }\n    return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n  }\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n    return false;\n  }\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n    if (end === -1) {\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition()\n      });\n    }\n  }\n  flowEnumErrorBooleanMemberNotInitialized(loc, _ref64) {\n    let {\n      enumName,\n      memberName\n    } = _ref64;\n    this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n      at: loc,\n      memberName,\n      enumName\n    });\n  }\n  flowEnumErrorInvalidMemberInitializer(loc, enumContext) {\n    return this.raise(!enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerUnknownType : enumContext.explicitType === \"symbol\" ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType, Object.assign({\n      at: loc\n    }, enumContext));\n  }\n  flowEnumErrorNumberMemberNotInitialized(loc, _ref65) {\n    let {\n      enumName,\n      memberName\n    } = _ref65;\n    this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n      at: loc,\n      enumName,\n      memberName\n    });\n  }\n  flowEnumErrorStringMemberInconsistentlyInitailized(node, _ref66) {\n    let {\n      enumName\n    } = _ref66;\n    this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n      at: node,\n      enumName\n    });\n  }\n  flowEnumMemberInit() {\n    const startLoc = this.state.startLoc;\n    const endOfInit = () => this.match(12) || this.match(8);\n    switch (this.state.type) {\n      case 132:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 131:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      case 85:\n      case 86:\n        {\n          const literal = this.parseBooleanLiteral(this.match(85));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal\n            };\n          }\n          return {\n            type: \"invalid\",\n            loc: startLoc\n          };\n        }\n      default:\n        return {\n          type: \"invalid\",\n          loc: startLoc\n        };\n    }\n  }\n  flowEnumMemberRaw() {\n    const loc = this.state.startLoc;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      loc\n    };\n    return {\n      id,\n      init\n    };\n  }\n  flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n    if (explicitType === null) {\n      return;\n    }\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(loc, context);\n    }\n  }\n  flowEnumMembers(_ref67) {\n    let {\n      enumName,\n      explicitType\n    } = _ref67;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n      if (memberName === \"\") {\n        continue;\n      }\n      if (/^[a-z]/.test(memberName)) {\n        this.raise(FlowErrors.EnumInvalidMemberName, {\n          at: id,\n          memberName,\n          suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n          enumName\n        });\n      }\n      if (seenNames.has(memberName)) {\n        this.raise(FlowErrors.EnumDuplicateMemberName, {\n          at: id,\n          memberName,\n          enumName\n        });\n      }\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref68) {\n    let {\n      enumName\n    } = _ref68;\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n          enumName\n        });\n      }\n      return initializedMembers;\n    }\n  }\n  flowEnumParseExplicitType(_ref69) {\n    let {\n      enumName\n    } = _ref69;\n    if (!this.eatContextual(101)) return null;\n    if (!tokenIsIdentifier(this.state.type)) {\n      throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n        at: this.state.startLoc,\n        enumName\n      });\n    }\n    const {\n      value\n    } = this.state;\n    this.next();\n    if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n      this.raise(FlowErrors.EnumInvalidExplicitType, {\n        at: this.state.startLoc,\n        enumName,\n        invalidEnumType: value\n      });\n    }\n    return value;\n  }\n  flowEnumBody(node, id) {\n    const enumName = id.name;\n    const nameLoc = id.loc.start;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), id);\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n    return false;\n  }\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n};\nconst entities = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: _ref70 => {\n    let {\n      openingTagName\n    } = _ref70;\n    return `Expected corresponding JSX closing tag for <${openingTagName}>.`;\n  },\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnexpectedToken: _ref71 => {\n    let {\n      unexpected,\n      HTMLEntity\n    } = _ref71;\n    return `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`;\n  },\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n});\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\nvar jsx = superClass => class JSXParserMixin extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(JsxErrors.UnterminatedJsxContent, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(140);\n            }\n            return super.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(139, out);\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n      }\n    }\n  }\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(Errors.UnterminatedString, {\n          at: this.state.startLoc\n        });\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(131, out);\n  }\n  jsxReadEntity() {\n    const startPos = ++this.state.pos;\n    if (this.codePointAtPos(this.state.pos) === 35) {\n      ++this.state.pos;\n      let radix = 10;\n      if (this.codePointAtPos(this.state.pos) === 120) {\n        radix = 16;\n        ++this.state.pos;\n      }\n      const codePoint = this.readInt(radix, undefined, false, \"bail\");\n      if (codePoint !== null && this.codePointAtPos(this.state.pos) === 59) {\n        ++this.state.pos;\n        return String.fromCodePoint(codePoint);\n      }\n    } else {\n      let count = 0;\n      let semi = false;\n      while (count++ < 10 && this.state.pos < this.length && !(semi = this.codePointAtPos(this.state.pos) == 59)) {\n        ++this.state.pos;\n      }\n      if (semi) {\n        const desc = this.input.slice(startPos, this.state.pos);\n        const entity = entities[desc];\n        ++this.state.pos;\n        if (entity) {\n          return entity;\n        }\n      }\n    }\n    this.state.pos = startPos;\n    return \"&\";\n  }\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n    return this.finishToken(138, this.input.slice(start, this.state.pos));\n  }\n  jsxParseIdentifier() {\n    const node = this.startNode();\n    if (this.match(138)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n  jsxParseNamespacedName() {\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n  jsxParseElementName() {\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n    return node;\n  }\n  jsxParseAttributeValue() {\n    let node;\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(JsxErrors.AttributeIsEmpty, {\n            at: node\n          });\n        }\n        return node;\n      case 140:\n      case 131:\n        return this.parseExprAtom();\n      default:\n        throw this.raise(JsxErrors.UnsupportedJsxValue, {\n          at: this.state.startLoc\n        });\n    }\n  }\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n  }\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_expr);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n    this.setContext(previousContext);\n    this.state.canStartJSXElement = true;\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n  jsxParseAttribute() {\n    const node = this.startNode();\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.state.canStartJSXElement = true;\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n  jsxParseOpeningElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n    while (!this.match(56) && !this.match(141)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n    node.attributes = attributes;\n    node.selfClosing = this.eat(56);\n    this.expect(141);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n  jsxParseClosingElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    if (this.eat(141)) {\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n    node.name = this.jsxParseElementName();\n    this.expect(141);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n  jsxParseElementAt(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startLoc);\n    let closingElement = null;\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 140:\n            startLoc = this.state.startLoc;\n            this.next();\n            if (this.eat(56)) {\n              closingElement = this.jsxParseClosingElementAt(startLoc);\n              break contents;\n            }\n            children.push(this.jsxParseElementAt(startLoc));\n            break;\n          case 139:\n            children.push(this.parseExprAtom());\n            break;\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n              break;\n            }\n          default:\n            throw this.unexpected();\n        }\n      }\n      if (isFragment(openingElement) && !isFragment(closingElement) && closingElement !== null) {\n        this.raise(JsxErrors.MissingClosingTagFragment, {\n          at: closingElement\n        });\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(JsxErrors.MissingClosingTagElement, {\n          at: closingElement,\n          openingTagName: getQualifiedJSXName(openingElement.name)\n        });\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name)\n          });\n        }\n      }\n    }\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n    node.children = children;\n    if (this.match(47)) {\n      throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n        at: this.state.startLoc\n      });\n    }\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n  jsxParseElement() {\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startLoc);\n  }\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(139)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(140)) {\n      return this.jsxParseElement();\n    } else if (this.match(47) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(140);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n  getTokenFromCode(code) {\n    const context = this.curContext();\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(141);\n      }\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(140);\n    }\n    return super.getTokenFromCode(code);\n  }\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n    if (type === 56 && prevType === 140) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 140) {\n      context.push(types.j_oTag);\n    } else if (type === 141) {\n      const out = context[context.length - 1];\n      if (out === types.j_oTag && prevType === 56 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n};\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n}\nclass TypeScriptScopeHandler extends ScopeHandler {\n  constructor() {\n    super(...arguments);\n    this.importsStack = [];\n  }\n  createScope(flags) {\n    this.importsStack.push(new Set());\n    return new TypeScriptScope(flags);\n  }\n  enter(flags) {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n    super.enter(flags);\n  }\n  exit() {\n    const flags = super.exit();\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n    return flags;\n  }\n  hasImport(name, allowShadow) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n  declareName(name, bindingType, loc) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n    super.declareName(name, bindingType, loc);\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    if (this.hasImport(name)) return;\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n    super.checkLocalExport(id);\n  }\n}\nconst getOwn$1 = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: _ref72 => {\n    let {\n      methodName\n    } = _ref72;\n    return `Method '${methodName}' cannot have an implementation because it is marked abstract.`;\n  },\n  AbstractPropertyHasInitializer: _ref73 => {\n    let {\n      propertyName\n    } = _ref73;\n    return `Property '${propertyName}' cannot have an initializer because it is marked abstract.`;\n  },\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional: \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: _ref74 => {\n    let {\n      kind\n    } = _ref74;\n    return `'declare' is not allowed in ${kind}ters.`;\n  },\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: _ref75 => {\n    let {\n      modifier\n    } = _ref75;\n    return `Accessibility modifier already seen.`;\n  },\n  DuplicateModifier: _ref76 => {\n    let {\n      modifier\n    } = _ref76;\n    return `Duplicate modifier: '${modifier}'.`;\n  },\n  EmptyHeritageClauseType: _ref77 => {\n    let {\n      token\n    } = _ref77;\n    return `'${token}' list cannot be empty.`;\n  },\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType: \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: _ref78 => {\n    let {\n      modifiers\n    } = _ref78;\n    return `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`;\n  },\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: _ref79 => {\n    let {\n      modifier\n    } = _ref79;\n    return `Index signatures cannot have an accessibility modifier ('${modifier}').`;\n  },\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext: \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: _ref80 => {\n    let {\n      modifier\n    } = _ref80;\n    return `'${modifier}' modifier cannot appear on a type member.`;\n  },\n  InvalidModifierOnTypeParameter: _ref81 => {\n    let {\n      modifier\n    } = _ref81;\n    return `'${modifier}' modifier cannot appear on a type parameter.`;\n  },\n  InvalidModifierOnTypeParameterPositions: _ref82 => {\n    let {\n      modifier\n    } = _ref82;\n    return `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`;\n  },\n  InvalidModifiersOrder: _ref83 => {\n    let {\n      orderedModifiers\n    } = _ref83;\n    return `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`;\n  },\n  InvalidPropertyAccessAfterInstantiationExpression: \"Invalid property access after an instantiation expression. \" + \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: _ref84 => {\n    let {\n      modifier\n    } = _ref84;\n    return `Private elements cannot have an accessibility modifier ('${modifier}').`;\n  },\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: _ref85 => {\n    let {\n      typeParameterName\n    } = _ref85;\n    return `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`;\n  },\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: _ref86 => {\n    let {\n      type\n    } = _ref86;\n    return `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`;\n  }\n});\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\nfunction tsIsVarianceAnnotations(modifier) {\n  return modifier === \"in\" || modifier === \"out\";\n}\nvar typescript = superClass => class TypeScriptParserMixin extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(136) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type) && this.state.type !== 58) {\n      return undefined;\n    }\n    const modifier = this.state.value;\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n    return undefined;\n  }\n  tsParseModifiers(_ref87) {\n    let {\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember\n    } = _ref87;\n    const enforceOrder = (loc, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(TSErrors.InvalidModifiersOrder, {\n          at: loc,\n          orderedModifiers: [before, after]\n        });\n      }\n    };\n    const incompatible = (loc, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(TSErrors.IncompatibleModifiers, {\n          at: loc,\n          modifiers: [mod1, mod2]\n        });\n      }\n    };\n    for (;;) {\n      const {\n        startLoc\n      } = this.state;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(TSErrors.DuplicateAccessibilityModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, modifier, \"override\");\n          enforceOrder(startLoc, modifier, modifier, \"static\");\n          enforceOrder(startLoc, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else if (tsIsVarianceAnnotations(modifier)) {\n        if (modified[modifier]) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        }\n        modified[modifier] = true;\n        enforceOrder(startLoc, modifier, \"in\", \"out\");\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(TSErrors.DuplicateModifier, {\n            at: startLoc,\n            modifier\n          });\n        } else {\n          enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"static\", \"override\");\n          enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n          enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n          incompatible(startLoc, modifier, \"declare\", \"override\");\n          incompatible(startLoc, modifier, \"static\", \"abstract\");\n        }\n        modified[modifier] = true;\n      }\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(errorTemplate, {\n          at: startLoc,\n          modifier\n        });\n      }\n    }\n  }\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n      case \"HeritageClauseElement\":\n        return this.match(5);\n      case \"TupleElementTypes\":\n        return this.match(3);\n      case \"TypeParametersOrArguments\":\n        return this.match(48);\n    }\n    throw new Error(\"Unreachable\");\n  }\n  tsParseList(kind, parseElement) {\n    const result = [];\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n    return result;\n  }\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      trailingCommaPos = -1;\n      const element = parseElement();\n      if (element == null) {\n        return undefined;\n      }\n      result.push(element);\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n      if (expectSuccess) {\n        this.expect(12);\n      }\n      return undefined;\n    }\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n    return result;\n  }\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(47);\n      }\n    }\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(48);\n    }\n    return result;\n  }\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(83);\n    this.expect(10);\n    if (!this.match(131)) {\n      this.raise(TSErrors.UnsupportedImportTypeArgument, {\n        at: this.state.startLoc\n      });\n    }\n    node.argument = super.parseExprAtom();\n    this.expect(11);\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName();\n    }\n    if (this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSImportType\");\n  }\n  tsParseEntityName() {\n    let allowReservedWords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let entity = this.parseIdentifier(allowReservedWords);\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n    return entity;\n  }\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName();\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(87);\n    if (this.match(83)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName();\n    }\n    if (!this.hasPrecedingLineBreak() && this.match(47)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n  tsParseInOutModifiers(node) {\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"in\", \"out\"],\n      disallowedModifiers: [\"public\", \"private\", \"protected\", \"readonly\", \"declare\", \"abstract\", \"override\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameter\n    });\n  }\n  tsParseNoneModifiers(node) {\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [],\n      disallowedModifiers: [\"in\", \"out\"],\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n  }\n  tsParseTypeParameter() {\n    let parseModifiers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.tsParseNoneModifiers.bind(this);\n    const node = this.startNode();\n    parseModifiers(node);\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(81);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsTryParseTypeParameters(parseModifiers) {\n    if (this.match(47)) {\n      return this.tsParseTypeParameters(parseModifiers);\n    }\n  }\n  tsParseTypeParameters(parseModifiers) {\n    const node = this.startNode();\n    if (this.match(47) || this.match(140)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos);\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeParameters, {\n        at: node\n      });\n    }\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    const paramsKey = \"parameters\";\n    const returnTypeKey = \"typeAnnotation\";\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature[paramsKey] = this.tsParseBindingListForSignature();\n    if (returnTokenRequired) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature[returnTypeKey] = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n  tsParseBindingListForSignature() {\n    return super.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n          at: pattern,\n          type: pattern.type\n        });\n      }\n      return pattern;\n    });\n  }\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n    return false;\n  }\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n    if (this.match(10) || this.match(47)) {\n      if (readonly) {\n        this.raise(TSErrors.ReadonlyForMethodSignature, {\n          at: node\n        });\n      }\n      const method = nodeAny;\n      if (method.kind && this.match(47)) {\n        this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n          at: this.state.curPosition()\n        });\n      }\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n      const paramsKey = \"parameters\";\n      const returnTypeKey = \"typeAnnotation\";\n      if (method.kind === \"get\") {\n        if (method[paramsKey].length > 0) {\n          this.raise(Errors.BadGetterArity, {\n            at: this.state.curPosition()\n          });\n          if (this.isThisParam(method[paramsKey][0])) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method[paramsKey].length !== 1) {\n          this.raise(Errors.BadSetterArity, {\n            at: this.state.curPosition()\n          });\n        } else {\n          const firstParameter = method[paramsKey][0];\n          if (this.isThisParam(firstParameter)) {\n            this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n              at: this.state.curPosition()\n            });\n          }\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n              at: this.state.curPosition()\n            });\n          }\n        }\n        if (method[returnTypeKey]) {\n          this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n            at: method[returnTypeKey]\n          });\n        }\n      } else {\n        method.kind = \"method\";\n      }\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n  tsParseTypeMember() {\n    const node = this.startNode();\n    if (this.match(10) || this.match(47)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n    if (this.match(77)) {\n      const id = this.startNode();\n      this.next();\n      if (this.match(10) || this.match(47)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n    this.tsParseModifiers({\n      modified: node,\n      allowedModifiers: [\"readonly\"],\n      disallowedModifiers: [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"]\n    });\n    const idx = this.tsTryParseIndexSignature(node);\n    if (idx) {\n      return idx;\n    }\n    super.parsePropertyName(node);\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      super.parsePropertyName(node);\n    }\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n  tsIsStartOfMappedType() {\n    this.next();\n    if (this.eat(53)) {\n      return this.isContextual(120);\n    }\n    if (this.isContextual(120)) {\n      this.next();\n    }\n    if (!this.match(0)) {\n      return false;\n    }\n    this.next();\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n    this.next();\n    return this.match(58);\n  }\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(58);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n    if (this.match(53)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(120);\n    } else if (this.eatContextual(120)) {\n      node.readonly = true;\n    }\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(93) ? this.tsParseType() : null;\n    this.expect(3);\n    if (this.match(53)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n      const {\n        type\n      } = elementNode;\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(TSErrors.OptionalTypeBeforeRequired, {\n          at: elementNode\n        });\n      }\n      seenOptionalElement || (seenOptionalElement = type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\");\n      let checkType = type;\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        checkType = elementNode.type;\n      }\n      const isLabeled = checkType === \"TSNamedTupleMember\";\n      (_labeledElements = labeledElements) != null ? _labeledElements : labeledElements = isLabeled;\n      if (labeledElements !== isLabeled) {\n        this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n          at: elementNode\n        });\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n  tsParseTupleElementType() {\n    const {\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(TSErrors.InvalidTupleMemberLabel, {\n          at: type\n        });\n        labeledNode.label = type;\n      }\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n    if (rest) {\n      const restNode = this.startNodeAt(startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n    return type;\n  }\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n    this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node));\n    return this.finishNode(node, type);\n  }\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 132:\n        case 133:\n        case 131:\n        case 85:\n        case 86:\n          return super.parseExprAtom();\n        default:\n          throw this.unexpected();\n      }\n    })();\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = super.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 131:\n      case 132:\n      case 133:\n      case 85:\n      case 86:\n        return this.tsParseLiteralTypeNode();\n      case 53:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n          if (nextToken.type !== 132 && nextToken.type !== 133) {\n            throw this.unexpected();\n          }\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n        break;\n      case 78:\n        return this.tsParseThisTypeOrThisTypePredicate();\n      case 87:\n        return this.tsParseTypeQuery();\n      case 83:\n        return this.tsParseImportType();\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n      case 0:\n        return this.tsParseTupleType();\n      case 10:\n        return this.tsParseParenthesizedType();\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n      default:\n        {\n          const {\n            type\n          } = this.state;\n          if (tokenIsIdentifier(type) || type === 88 || type === 84) {\n            const nodeType = type === 88 ? \"TSVoidKeyword\" : type === 84 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n    throw this.unexpected();\n  }\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n    return type;\n  }\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n      default:\n        this.raise(TSErrors.UnexpectedReadonly, {\n          at: node\n        });\n    }\n  }\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(113);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType());\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n  tsParseConstraintForInferType() {\n    if (this.eat(81)) {\n      const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());\n      if (this.state.inDisallowConditionalTypesContext || !this.match(17)) {\n        return constraint;\n      }\n    }\n  }\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(113) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());\n  }\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 45);\n  }\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 43);\n  }\n  tsIsStartOfFunctionType() {\n    if (this.match(47)) {\n      return true;\n    }\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(78)) {\n      this.next();\n      return true;\n    }\n    if (this.match(5)) {\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        this.parseObjectLike(8, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused) {\n        return false;\n      }\n    }\n    if (this.match(0)) {\n      this.next();\n      const {\n        errors\n      } = this.state;\n      const previousErrorCount = errors.length;\n      try {\n        super.parseBindingList(3, 93, true);\n        return errors.length === previousErrorCount;\n      } catch (_unused2) {\n        return false;\n      }\n    }\n    return false;\n  }\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n      if (this.match(11)) {\n        this.next();\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n      if (asserts && this.match(78)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n    if (this.isContextual(114) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 107) {\n      return false;\n    }\n    const containsEsc = this.state.containsEsc;\n    this.next();\n    if (!tokenIsIdentifier(this.state.type) && !this.match(78)) {\n      return false;\n    }\n    if (containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.lastTokStartLoc,\n        reservedWord: \"asserts\"\n      });\n    }\n    return true;\n  }\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n    if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81)) {\n      return type;\n    }\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType());\n    this.expect(17);\n    node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    this.expect(14);\n    node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType());\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n  isAbstractConstructorSignature() {\n    return this.isContextual(122) && this.lookahead().type === 77;\n  }\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n    if (this.match(77)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n    return this.tsParseUnionTypeOrHigher();\n  }\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedTypeAssertion, {\n        at: this.state.startLoc\n      });\n    }\n    const node = this.startNode();\n    node.typeAnnotation = this.tsInType(() => {\n      this.next();\n      return this.match(75) ? this.tsParseTypeReference() : this.tsParseType();\n    });\n    this.expect(48);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n  tsParseHeritageClause(token) {\n    const originalStartLoc = this.state.startLoc;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", () => {\n      const node = this.startNode();\n      node.expression = this.tsParseEntityName();\n      if (this.match(47)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    });\n    if (!delimitedList.length) {\n      this.raise(TSErrors.EmptyHeritageClauseType, {\n        at: originalStartLoc,\n        token\n      });\n    }\n    return delimitedList;\n  }\n  tsParseInterfaceDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (this.hasFollowingLineBreak()) return null;\n    this.expectContextual(127);\n    if (properties.declare) node.declare = true;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(TSErrors.MissingInterfaceName, {\n        at: this.state.startLoc\n      });\n    }\n    node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n    if (this.eat(81)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_TS_TYPE);\n    node.typeAnnotation = this.tsInType(() => {\n      node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n      this.expect(29);\n      if (this.isContextual(112) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n  tsInDisallowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsInAllowConditionalTypesContext(cb) {\n    const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;\n    this.state.inDisallowConditionalTypesContext = false;\n    try {\n      return cb();\n    } finally {\n      this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;\n    }\n  }\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(131) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true);\n    if (this.eat(29)) {\n      node.initializer = super.parseMaybeAssignAllowIn();\n    }\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n  tsParseEnumDeclaration(node) {\n    let properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (properties.const) node.const = true;\n    if (properties.declare) node.declare = true;\n    this.expectContextual(124);\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    super.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n    if (!nested) {\n      this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n    }\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(110)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(131)) {\n      node.id = super.parseStringLiteral(this.state.value);\n    } else {\n      this.unexpected();\n    }\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(TSErrors.ImportAliasHasImportType, {\n        at: moduleReference\n      });\n    }\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n  tsIsExternalModuleReference() {\n    return this.isContextual(117) && this.lookaheadCharCode() === 40;\n  }\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(117);\n    this.expect(10);\n    if (!this.match(131)) {\n      throw this.unexpected();\n    }\n    node.expression = super.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n    let starttype = this.state.type;\n    let kind;\n    if (this.isContextual(99)) {\n      starttype = 74;\n      kind = \"let\";\n    }\n    return this.tsInAmbientContext(() => {\n      if (starttype === 68) {\n        nany.declare = true;\n        return super.parseFunctionStatement(nany, false, false);\n      }\n      if (starttype === 80) {\n        nany.declare = true;\n        return this.parseClass(nany, true, false);\n      }\n      if (starttype === 124) {\n        return this.tsParseEnumDeclaration(nany, {\n          declare: true\n        });\n      }\n      if (starttype === 110) {\n        return this.tsParseAmbientExternalModuleDeclaration(nany);\n      }\n      if (starttype === 75 || starttype === 74) {\n        if (!this.match(75) || !this.isLookaheadContextual(\"enum\")) {\n          nany.declare = true;\n          return this.parseVarStatement(nany, kind || this.state.value, true);\n        }\n        this.expect(75);\n        return this.tsParseEnumDeclaration(nany, {\n          const: true,\n          declare: true\n        });\n      }\n      if (starttype === 127) {\n        const result = this.tsParseInterfaceDeclaration(nany, {\n          declare: true\n        });\n        if (result) return result;\n      }\n      if (tokenIsIdentifier(starttype)) {\n        return this.tsParseDeclaration(nany, this.state.value, true, null);\n      }\n    });\n  }\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true, null);\n  }\n  tsParseExpressionStatement(node, expr, decorators) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n        break;\n      default:\n        return this.tsParseDeclaration(node, expr.name, false, decorators);\n    }\n  }\n  tsParseDeclaration(node, value, next, decorators) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node, decorators);\n        }\n        break;\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(131)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n        break;\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n        break;\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n        break;\n    }\n  }\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n    return !this.isLineTerminator();\n  }\n  tsTryParseGenericAsyncArrowFunction(startLoc) {\n    if (!this.match(47)) {\n      return undefined;\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    if (!res) {\n      return undefined;\n    }\n    return super.parseArrowExpression(res, null, true);\n  }\n  tsParseTypeArgumentsInExpression() {\n    if (this.reScan_lt() !== 47) {\n      return undefined;\n    }\n    return this.tsParseTypeArguments();\n  }\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(47);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n    if (node.params.length === 0) {\n      this.raise(TSErrors.EmptyTypeArguments, {\n        at: node\n      });\n    }\n    this.expect(48);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers({\n        modified,\n        allowedModifiers: [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]\n      });\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(TSErrors.UnexpectedParameterModifier, {\n          at: startLoc\n        });\n      }\n    }\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startLoc);\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(TSErrors.UnsupportedParameterPropertyKind, {\n          at: pp\n        });\n      }\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  isSimpleParameter(node) {\n    return node.type === \"TSParameterProperty\" && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);\n  }\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      return this.finishNode(node, bodilessType);\n    }\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(TSErrors.DeclareFunctionHasImplementation, {\n        at: node\n      });\n      if (node.declare) {\n        return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n      }\n    }\n    return super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(node);\n    }\n  }\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(TSErrors.UnexpectedTypeAnnotation, {\n          at: node.typeAnnotation\n        });\n      }\n    });\n  }\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n    return node;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n    let isOptionalCall = false;\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n    if (this.match(47) || this.match(51)) {\n      let missingParenErrorLoc;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startLoc);\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n        if (!typeArguments) return;\n        if (isOptionalCall && !this.match(10)) {\n          missingParenErrorLoc = this.state.curPosition();\n          return;\n        }\n        if (tokenIsTemplate(this.state.type)) {\n          const result = super.parseTaggedTemplateExpression(base, startLoc, state);\n          result.typeParameters = typeArguments;\n          return result;\n        }\n        if (!noCalls && this.eat(10)) {\n          const node = this.startNodeAt(startLoc);\n          node.callee = base;\n          node.arguments = this.parseCallExpressionArguments(11, false);\n          this.tsCheckForInvalidTypeCasts(node.arguments);\n          node.typeParameters = typeArguments;\n          if (state.optionalChainMember) {\n            node.optional = isOptionalCall;\n          }\n          return this.finishCallExpression(node, state.optionalChainMember);\n        }\n        const tokenType = this.state.type;\n        if (tokenType === 48 || tokenType === 52 || tokenType !== 10 && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak()) {\n          return;\n        }\n        const node = this.startNodeAt(startLoc);\n        node.expression = base;\n        node.typeParameters = typeArguments;\n        return this.finishNode(node, \"TSInstantiationExpression\");\n      });\n      if (missingParenErrorLoc) {\n        this.unexpected(missingParenErrorLoc, 10);\n      }\n      if (result) {\n        if (result.type === \"TSInstantiationExpression\" && (this.match(16) || this.match(18) && this.lookaheadCharCode() !== 40)) {\n          this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, {\n            at: this.state.startLoc\n          });\n        }\n        return result;\n      }\n    }\n    return super.parseSubscript(base, startLoc, noCalls, state);\n  }\n  parseNewCallee(node) {\n    var _callee$extra;\n    super.parseNewCallee(node);\n    const {\n      callee\n    } = node;\n    if (callee.type === \"TSInstantiationExpression\" && !((_callee$extra = callee.extra) != null && _callee$extra.parenthesized)) {\n      node.typeParameters = callee.typeParameters;\n      node.callee = callee.expression;\n    }\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    let isSatisfies;\n    if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && (this.isContextual(93) || (isSatisfies = this.isContextual(118)))) {\n      const node = this.startNodeAt(leftStartLoc);\n      node.expression = left;\n      node.typeAnnotation = this.tsInType(() => {\n        this.next();\n        if (this.match(75)) {\n          if (isSatisfies) {\n            this.raise(Errors.UnexpectedKeyword, {\n              at: this.state.startLoc,\n              keyword: \"const\"\n            });\n          }\n          return this.tsParseTypeReference();\n        }\n        return this.tsParseType();\n      });\n      this.finishNode(node, isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartLoc, minPrec);\n    }\n    return super.parseExprOp(left, leftStartLoc, minPrec);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (!this.state.isAmbientContext) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  checkImportReflection(node) {\n    super.checkImportReflection(node);\n    if (node.module && node.importKind !== \"value\") {\n      this.raise(TSErrors.ImportReflectionHasImportType, {\n        at: node.specifiers[0].loc.start\n      });\n    }\n  }\n  checkDuplicateExports() {}\n  parseImport(node) {\n    node.importKind = \"value\";\n    if (tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {\n      let ahead = this.lookahead();\n      if (this.isContextual(128) && ahead.type !== 12 && ahead.type !== 97 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n    const importNode = super.parseImport(node);\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n        at: importNode\n      });\n    }\n    return importNode;\n  }\n  parseExport(node, decorators) {\n    if (this.match(83)) {\n      this.next();\n      if (this.isContextual(128) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = super.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(93)) {\n      const decl = node;\n      this.expectContextual(126);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(128) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n      return super.parseExport(node, decorators);\n    }\n  }\n  isAbstractClass() {\n    return this.isContextual(122) && this.lookahead().type === 80;\n  }\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      return this.parseClass(cls, true, true);\n    }\n    if (this.match(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseExportDefaultExpression();\n  }\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const {\n      isAmbientContext\n    } = this.state;\n    const declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);\n    if (!isAmbientContext) return declaration;\n    for (const {\n      id,\n      init\n    } of declaration.declarations) {\n      if (!init) continue;\n      if (kind !== \"const\" || !!id.typeAnnotation) {\n        this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n          at: init\n        });\n      } else if (!isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))) {\n        this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, {\n          at: init\n        });\n      }\n    }\n    return declaration;\n  }\n  parseStatementContent(flags, decorators) {\n    if (this.match(75) && this.isLookaheadContextual(\"enum\")) {\n      const node = this.startNode();\n      this.expect(75);\n      return this.tsParseEnumDeclaration(node, {\n        const: true\n      });\n    }\n    if (this.isContextual(124)) {\n      return this.tsParseEnumDeclaration(this.startNode());\n    }\n    if (this.isContextual(127)) {\n      const result = this.tsParseInterfaceDeclaration(this.startNode());\n      if (result) return result;\n    }\n    return super.parseStatementContent(flags, decorators);\n  }\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n      return !!member[modifier];\n    });\n  }\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(104) && this.lookaheadCharCode() === 123;\n  }\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers({\n      modified: member,\n      allowedModifiers: modifiers,\n      disallowedModifiers: [\"in\", \"out\"],\n      stopOnStartOfClassStaticBlock: true,\n      errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions\n    });\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n            at: this.state.curPosition()\n          });\n        }\n        super.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n    if (idx) {\n      classBody.body.push(idx);\n      if (member.abstract) {\n        this.raise(TSErrors.IndexSignatureHasAbstract, {\n          at: member\n        });\n      }\n      if (member.accessibility) {\n        this.raise(TSErrors.IndexSignatureHasAccessibility, {\n          at: member,\n          modifier: member.accessibility\n        });\n      }\n      if (member.declare) {\n        this.raise(TSErrors.IndexSignatureHasDeclare, {\n          at: member\n        });\n      }\n      if (member.override) {\n        this.raise(TSErrors.IndexSignatureHasOverride, {\n          at: member\n        });\n      }\n      return;\n    }\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n        at: member\n      });\n    }\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(TSErrors.OverrideNotInSubClass, {\n          at: member\n        });\n      }\n    }\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasReadonly, {\n        at: methodOrProp\n      });\n    }\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(TSErrors.ClassMethodHasDeclare, {\n        at: methodOrProp\n      });\n    }\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr, decorators) : undefined;\n    return decl || super.parseExpressionStatement(node, expr, decorators);\n  }\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startLoc, refExpressionErrors);\n    }\n    const result = this.tryParse(() => super.parseConditional(expr, startLoc));\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n      return expr;\n    }\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n  parseParenItem(node, startLoc) {\n    node = super.parseParenItem(node, startLoc);\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n    return node;\n  }\n  parseExportDeclaration(node) {\n    if (!this.state.isAmbientContext && this.isContextual(123)) {\n      return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n    }\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(123);\n    if (isDeclare && (this.isContextual(123) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n        at: this.state.startLoc\n      });\n    }\n    const isIdentifier = tokenIsIdentifier(this.state.type);\n    const declaration = isIdentifier && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);\n    if (!declaration) return null;\n    if (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare) {\n      node.exportKind = \"type\";\n    }\n    if (isDeclare) {\n      this.resetStartLocation(declaration, startLoc);\n      declaration.declare = true;\n    }\n    return declaration;\n  }\n  parseClassId(node, isStatement, optionalId, bindingType) {\n    if ((!isStatement || optionalId) && this.isContextual(111)) {\n      return;\n    }\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional) {\n      if (this.eat(35)) {\n        node.definite = true;\n      } else if (this.eat(17)) {\n        node.optional = true;\n      }\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (this.state.isAmbientContext && !(node.readonly && !node.typeAnnotation) && this.match(29)) {\n      this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n        at: this.state.startLoc\n      });\n    }\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(TSErrors.AbstractPropertyHasInitializer, {\n        at: this.state.startLoc,\n        propertyName: key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n      });\n    }\n    return super.parseClassProperty(node);\n  }\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(TSErrors.PrivateElementHasAbstract, {\n        at: node\n      });\n    }\n    if (node.accessibility) {\n      this.raise(TSErrors.PrivateElementHasAccessibility, {\n        at: node,\n        modifier: node.accessibility\n      });\n    }\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n  parseClassAccessorProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n    if (node.optional) {\n      this.raise(TSErrors.AccessorCannotBeOptional, {\n        at: node\n      });\n    }\n    return super.parseClassAccessorProperty(node);\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters && isConstructor) {\n      this.raise(TSErrors.ConstructorHasTypeParameters, {\n        at: typeParameters\n      });\n    }\n    const {\n      declare = false,\n      kind\n    } = method;\n    if (declare && (kind === \"get\" || kind === \"set\")) {\n      this.raise(TSErrors.DeclareAccessor, {\n        at: method,\n        kind\n      });\n    }\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n    if (node.superClass && (this.match(47) || this.match(51))) {\n      node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n    }\n    if (this.eatContextual(111)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    return super.parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n  }\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n    if (decl.id.type === \"Identifier\" && !this.hasPrecedingLineBreak() && this.eat(35)) {\n      decl.definite = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n    let state;\n    let jsx;\n    let typeCast;\n    if (this.hasPlugin(\"jsx\") && (this.match(140) || this.match(47))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(47)) {\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n    if (!state || state === this.state) state = this.state.clone();\n    let typeParameters;\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(TSErrors.ReservedArrowTypeParam, {\n        at: node\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    if (!this.hasPlugin(\"jsx\") && this.match(47)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n    }\n  }\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n    return super.parseArrow(node);\n  }\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(TSErrors.PatternIsOptional, {\n          at: param\n        });\n      }\n      param.optional = true;\n    }\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n      case \"TSParameterProperty\":\n        return true;\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.toAssignableParenthesizedExpression(node, isLHS);\n        break;\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        if (isLHS) {\n          this.expressionScope.recordArrowParameterBindingError(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        } else {\n          this.raise(TSErrors.UnexpectedTypeCastInParameter, {\n            at: node\n          });\n        }\n        this.toAssignable(node.expression, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n          node.left = this.typeCastToParameter(node.left);\n        }\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        this.toAssignable(node.expression, isLHS);\n        break;\n      default:\n        super.toAssignable(node, isLHS);\n    }\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"TSAsExpression\":\n      case \"TSSatisfiesExpression\":\n      case \"TSTypeAssertion\":\n      case \"TSNonNullExpression\":\n        this.checkToRestConversion(node.expression, false);\n        break;\n      default:\n        super.checkToRestConversion(node, allowPattern);\n    }\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn$1({\n      TSTypeCastExpression: true,\n      TSParameterProperty: \"parameter\",\n      TSNonNullExpression: \"expression\",\n      TSAsExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSSatisfiesExpression: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true],\n      TSTypeAssertion: (binding !== BIND_NONE || !isUnparenthesizedInAssign) && [\"expression\", true]\n    }, type) || super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 78:\n        return this.parseIdentifier(true);\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsParseTypeArgumentsInExpression();\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n      this.unexpected(null, 10);\n    }\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n      return false;\n    } else {\n      return super.checkCommaAfterRest(close);\n    }\n  }\n  isClassMethod() {\n    return this.match(47) || super.isClassMethod();\n  }\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n  parseMaybeDefault(startLoc, left) {\n    const node = super.parseMaybeDefault(startLoc, left);\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(TSErrors.TypeAnnotationAfterAssign, {\n        at: node.typeAnnotation\n      });\n    }\n    return node;\n  }\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(48, 1);\n      }\n      if (code === 60) {\n        return this.finishOp(47, 1);\n      }\n    }\n    return super.getTokenFromCode(code);\n  }\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n    if (type === 47) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 48) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n  reScan_lt() {\n    const {\n      type\n    } = this.state;\n    if (type === 51) {\n      this.state.pos -= 2;\n      this.finishOp(47, 1);\n      return 47;\n    }\n    return type;\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if ((expr == null ? void 0 : expr.type) === \"TSTypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n    super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n  }\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n    return super.shouldParseArrow(params);\n  }\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(47) || this.match(51)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n    return param;\n  }\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n  parseClass(node, isStatement, optionalId) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n    try {\n      return super.parseClass(node, isStatement, optionalId);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n  tsParseAbstractDeclaration(node, decorators) {\n    if (this.match(80)) {\n      node.abstract = true;\n      return this.maybeTakeDecorators(decorators, this.parseClass(node, true, false));\n    } else if (this.isContextual(127)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n          at: node\n        });\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 80);\n    }\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {\n    const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(TSErrors.AbstractMethodHasImplementation, {\n          at: method,\n          methodName: key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`\n        });\n      }\n    }\n    return method;\n  }\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.parse();\n  }\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n    return super.getExpression();\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n  }\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const loc = leftOfAs.loc.start;\n    if (this.isContextual(93)) {\n      const firstAs = this.parseIdentifier();\n      if (this.isContextual(93)) {\n        const secondAs = this.parseIdentifier();\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      if (isImport) {\n        leftOfAs = this.parseIdentifier(true);\n        if (!this.isContextual(93)) {\n          this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true);\n        }\n      } else {\n        leftOfAs = this.parseModuleExportName();\n      }\n    }\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, {\n        at: loc\n      });\n    }\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n    if (canParseAsKeyword && this.eatContextual(93)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n    if (isImport) {\n      this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT);\n    }\n  }\n};\nfunction isPossiblyLiteralEnum(expression) {\n  if (expression.type !== \"MemberExpression\") return false;\n  const {\n    computed,\n    property\n  } = expression;\n  if (computed && property.type !== \"StringLiteral\" && (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)) {\n    return false;\n  }\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nfunction isValidAmbientConstInitializer(expression, estree) {\n  var _expression$extra;\n  const {\n    type\n  } = expression;\n  if ((_expression$extra = expression.extra) != null && _expression$extra.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const {\n        value\n      } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\nfunction isNumber(expression, estree) {\n  if (estree) {\n    return expression.type === \"Literal\" && (typeof expression.value === \"number\" || \"bigint\" in expression);\n  } else {\n    return expression.type === \"NumericLiteral\" || expression.type === \"BigIntLiteral\";\n  }\n}\nfunction isNegativeNumber(expression, estree) {\n  if (expression.type === \"UnaryExpression\") {\n    const {\n      operator,\n      argument\n    } = expression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction isUncomputedMemberExpressionChain(expression) {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n  return isUncomputedMemberExpressionChain(expression.object);\n}\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\"\n});\nvar placeholders = superClass => class PlaceholdersParserMixin extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(142)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace();\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace();\n      this.expect(142);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(142, 2);\n    }\n    return super.getTokenFromCode(code);\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(refExpressionErrors);\n  }\n  parseIdentifier(liberal) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal);\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word !== undefined) {\n      super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n    }\n  }\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n  }\n  isValidLVal(type, isParenthesized, binding) {\n    return type === \"Placeholder\" || super.isValidLVal(type, isParenthesized, binding);\n  }\n  toAssignable(node, isLHS) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n    } else {\n      super.toAssignable(node, isLHS);\n    }\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (super.chStartsBindingIdentifier(ch, pos)) {\n      return true;\n    }\n    const nextToken = this.lookahead();\n    if (nextToken.type === 142) {\n      return true;\n    }\n    return false;\n  }\n  verifyBreakContinue(node, isBreak) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(node, isBreak);\n  }\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(node, expr);\n    }\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = super.parseStatementOrFunctionDeclaration(false);\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n  parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);\n  }\n  parseFunctionId(requireId) {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId);\n  }\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (placeholder) {\n      if (this.match(81) || this.match(142) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n          at: this.state.startLoc\n        });\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n    super.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || super.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n  parseExport(node, decorators) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(node, decorators);\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node, decorators);\n  }\n  isExportDefaultSpecifier() {\n    if (this.match(65)) {\n      const next = this.nextTokenStart();\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(142), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n    return super.isExportDefaultSpecifier();\n  }\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n    return super.maybeParseExportDefaultSpecifier(node);\n  }\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(node);\n    node.specifiers = [];\n    if (!this.isContextual(97) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    node.specifiers.push(this.finishNode(specifier, \"ImportDefaultSpecifier\"));\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n    this.expectContextual(97);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource();\n  }\n  assertNoSpace() {\n    if (this.state.start > this.state.lastTokEndLoc.index) {\n      this.raise(PlaceholderErrors.UnexpectedSpace, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n  }\n};\nvar v8intrinsic = superClass => class V8IntrinsicMixin extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(54)) {\n      const v8IntrinsicStartLoc = this.state.startLoc;\n      const node = this.startNode();\n      this.next();\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName();\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n      this.unexpected(v8IntrinsicStartLoc);\n    }\n  }\n  parseExprAtom(refExpressionErrors) {\n    return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);\n  }\n};\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return plugin[1][option];\n  }\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n    if (decoratorsBeforeExport != null && typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n    const allowCallParenthesized = getPluginOption(plugins, \"decorators\", \"allowCallParenthesized\");\n    if (allowCallParenthesized != null && typeof allowCallParenthesized !== \"boolean\") {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n  if (hasPlugin(plugins, \"recordAndTuple\") && getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\nconst getOwn = (object, key) => Object.hasOwnProperty.call(object, key) && object[key];\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var _node$extra, _node$extra3;\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(Errors.InvalidParenthesizedAssignment, {\n            at: node\n          });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, {\n          at: node\n        });\n      }\n    }\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingCommaLoc) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc\n            });\n          }\n        }\n        break;\n      case \"ObjectProperty\":\n        {\n          const {\n            key,\n            value\n          } = node;\n          if (this.isPrivateName(key)) {\n            this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start);\n          }\n          this.toAssignable(value, isLHS);\n          break;\n        }\n      case \"SpreadElement\":\n        {\n          throw new Error(\"Internal @babel/parser error (this is a bug, please report it).\" + \" SpreadElement should be converted by .toAssignable's caller.\");\n        }\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingCommaLoc, isLHS);\n        break;\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, {\n            at: node.left.loc.end\n          });\n        }\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n  }\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(prop.kind === \"get\" || prop.kind === \"set\" ? Errors.PatternHasAccessor : Errors.PatternHasMethod, {\n        at: prop.key\n      });\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, false);\n      this.toAssignable(arg, isLHS);\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, {\n          at: prop\n        });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n  toAssignableList(exprList, trailingCommaLoc, isLHS) {\n    const end = exprList.length - 1;\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, {\n            at: elt\n          });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, {\n            at: trailingCommaLoc\n          });\n        }\n      }\n    }\n  }\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n      default:\n        return false;\n    }\n  }\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n  parseSpread(refExpressionErrors) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n    return this.parseIdentifier();\n  }\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc\n          });\n        }\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      startLoc\n    } = this.state;\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else if (type === 136) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      prop.key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    return this.parseObjPropValue(prop, startLoc, false, false, true, false);\n  }\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n  parseMaybeDefault(startLoc, left) {\n    var _startLoc, _left;\n    (_startLoc = startLoc) != null ? _startLoc : startLoc = this.state.startLoc;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  isValidLVal(type, isUnparenthesizedInAssign, binding) {\n    return getOwn({\n      AssignmentPattern: \"left\",\n      RestElement: \"argument\",\n      ObjectProperty: \"value\",\n      ParenthesizedExpression: \"expression\",\n      ArrayPattern: \"elements\",\n      ObjectPattern: \"properties\"\n    }, type);\n  }\n  checkLVal(expression, _ref88) {\n    let {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false\n    } = _ref88;\n    var _expression$extra;\n    const type = expression.type;\n    if (this.isObjectMethod(expression)) return;\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, {\n          at: expression\n        });\n      }\n      return;\n    }\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);\n      const {\n        name\n      } = expression;\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, {\n            at: expression\n          });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n      return;\n    }\n    const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || (_expression$extra = expression.extra) != null && _expression$extra.parenthesized) && ancestor.type === \"AssignmentExpression\", binding);\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass = binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor: ancestor.type === \"UpdateExpression\" ? {\n          type: \"UpdateExpression\",\n          prefix: ancestor.prefix\n        } : {\n          type: ancestor.type\n        }\n      });\n      return;\n    }\n    const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor = expression.type === \"ArrayPattern\" || expression.type === \"ObjectPattern\" || expression.type === \"ParenthesizedExpression\" ? expression : ancestor;\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression\n        });\n      }\n    }\n  }\n  checkIdentifier(at, bindingType) {\n    let strictModeChanged = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let allowLetBinding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !(bindingType & BIND_SCOPE_LEXICAL);\n    if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at.name, this.inModule) : isStrictBindOnlyReservedWord(at.name))) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, {\n          at,\n          referenceName: at.name\n        });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name\n        });\n      }\n    }\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, {\n        at\n      });\n    }\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n  declareNameFromIdentifier(identifier, binding) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n  checkToRestConversion(node, allowPattern) {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, {\n          at: node\n        });\n    }\n  }\n  checkCommaAfterRest(close) {\n    if (!this.match(12)) {\n      return false;\n    }\n    this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, {\n      at: this.state.startLoc\n    });\n    return true;\n  }\n}\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, {\n          at: key\n        });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, {\n            at: key\n          });\n        }\n      }\n      protoRef.used = true;\n    }\n  }\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(137)) {\n      this.unexpected();\n    }\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n  parseExpressionBase(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(12)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$loc;\n    refExpressionErrors.optionalParametersLoc = (_resultError$loc = resultError == null ? void 0 : resultError.loc) != null ? _resultError$loc : this.state.startLoc;\n  }\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(106)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const {\n      type\n    } = this.state;\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n      if (this.match(29)) {\n        this.toAssignable(left, true);\n        node.left = left;\n        const startIndex = startLoc.index;\n        if (refExpressionErrors.doubleProtoLoc != null && refExpressionErrors.doubleProtoLoc.index >= startIndex) {\n          refExpressionErrors.doubleProtoLoc = null;\n        }\n        if (refExpressionErrors.shorthandAssignLoc != null && refExpressionErrors.shorthandAssignLoc.index >= startIndex) {\n          refExpressionErrors.shorthandAssignLoc = null;\n        }\n        if (refExpressionErrors.privateKeyLoc != null && refExpressionErrors.privateKeyLoc.index >= startIndex) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null;\n        }\n      } else {\n        node.left = left;\n      }\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\")\n      });\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    return left;\n  }\n  parseMaybeConditional(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n  parseConditional(expr, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(136) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n  parseExprOps(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n  parseExprOp(left, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      if (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value\n        });\n      }\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(58))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === 39) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt(leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 41 || op === 42;\n        const coalesce = op === 40;\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(42);\n        }\n        this.next();\n        if (op === 39 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 96 && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc\n            });\n          }\n        }\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n        if (coalesce && (nextOp === 41 || nextOp === 42) || logical && nextOp === 40) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n  parseExprOpRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case 39:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(106)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startLoc);\n            });\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n  parseExprOpBaseRightExpr(op, prec) {\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n  parseHackPipeBody() {\n    var _body$extra;\n    const {\n      startLoc\n    } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(body.type);\n    if (requiredParentheses && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        type: body.type\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipeTopicUnused, {\n        at: startLoc\n      });\n    }\n    return body;\n  }\n  checkExponentialAfterUnary(node) {\n    if (this.match(57)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument\n      });\n    }\n  }\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(96);\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(34);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n      if (this.match(72)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(89);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, {\n            at: node\n          });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, {\n            at: node\n          });\n        }\n      }\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, {\n          at: startLoc\n        });\n        return this.parseAwait(startLoc);\n      }\n    }\n    return expr;\n  }\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      const updateExpressionNode = node;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\")\n      });\n      return node;\n    }\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: expr = this.finishNode(node, \"UpdateExpression\")\n      });\n    }\n    return expr;\n  }\n  parseExprSubscripts(refExpressionErrors) {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n    return this.parseSubscripts(expr, startLoc);\n  }\n  parseSubscripts(base, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n  parseSubscript(base, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n    let optional = false;\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n  parseMember(base, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(136)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, {\n          at: startLoc\n        });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n  parseBind(base, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startLoc, noCalls);\n  }\n  parseCoverCallAndAsyncArrowHead(base, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    const node = this.startNodeAt(startLoc);\n    node.callee = base;\n    const {\n      maybeAsyncArrow,\n      optionalChainMember\n    } = state;\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n    if (optionalChainMember) {\n      node.optional = optional;\n    }\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n    let finishedNode = this.finishCallExpression(node, optionalChainMember);\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startLoc), finishedNode);\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return finishedNode;\n  }\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n  parseTaggedTemplateExpression(base, startLoc, state) {\n    const node = this.startNodeAt(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, {\n        at: startLoc\n      });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount: this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? 2 : 1\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, {\n              at: arg\n            });\n          }\n        }\n      }\n    }\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingCommaLoc);\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n  parseNoCallExpr() {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    let decorators = null;\n    const {\n      type\n    } = this.state;\n    switch (type) {\n      case 79:\n        return this.parseSuper();\n      case 83:\n        node = this.startNode();\n        this.next();\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n        if (!this.match(10)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case 78:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n      case 90:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n      case 56:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n      case 132:\n        return this.parseNumericLiteral(this.state.value);\n      case 133:\n        return this.parseBigIntLiteral(this.state.value);\n      case 134:\n        return this.parseDecimalLiteral(this.state.value);\n      case 131:\n        return this.parseStringLiteral(this.state.value);\n      case 84:\n        return this.parseNullLiteral();\n      case 85:\n        return this.parseBooleanLiteral(true);\n      case 86:\n        return this.parseBooleanLiteral(false);\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n      case 68:\n        return this.parseFunctionOrFunctionSent();\n      case 26:\n        decorators = this.parseDecorators();\n      case 80:\n        return this.parseClass(this.maybeTakeDecorators(decorators, this.startNode()), false);\n      case 77:\n        return this.parseNewOrNewTarget();\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(Errors.UnsupportedBind, {\n              at: callee\n            });\n          }\n        }\n      case 136:\n        {\n          this.raise(Errors.PrivateInExpectedIn, {\n            at: this.state.startLoc,\n            identifierName: this.state.value\n          });\n          return this.parsePrivateName();\n        }\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(54, \"%\");\n        }\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(44, \"^\");\n        }\n      case 37:\n      case 38:\n        {\n          return this.parseTopicReference(\"hack\");\n        }\n      case 44:\n      case 54:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n      case 47:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(125) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n            if (type === 68) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(this.startNodeAtNode(id));\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 90) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n  finishTopicReference(node, startLoc, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {\n      const nodeType = pipeProposal === \"smart\" ? \"PipelinePrimaryTopicReference\" : \"TopicReference\";\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(pipeProposal === \"smart\" ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, {\n          at: startLoc\n        });\n      }\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType)\n      });\n    }\n  }\n  testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n      case \"smart\":\n        return tokenType === 27;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, {\n          at: startLoc\n        });\n    }\n  }\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition()\n      });\n    }\n    this.expect(19);\n    return this.parseArrowExpression(node, params, true);\n  }\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.SuperNotAllowed, {\n        at: node\n      });\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(Errors.UnexpectedSuper, {\n        at: node\n      });\n    }\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(Errors.UnsupportedSuper, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"Super\");\n  }\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(createPositionWithColumnOffset(this.state.startLoc, 1));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n      if (this.match(102)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName\n      });\n    }\n    return this.finishNode(node, \"MetaProperty\");\n  }\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n    if (this.isContextual(100)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, {\n          at: id\n        });\n      }\n      this.sawUnambiguousESM = true;\n    }\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParametersLoc === null ? null : refExpressionErrors.optionalParametersLoc);\n        if (this.match(11)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n      if (this.match(21)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc));\n        if (!this.checkCommaAfterRest(41)) {\n          break;\n        }\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startLoc);\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n    return this.wrapParenthesis(startLoc, val);\n  }\n  wrapParenthesis(startLoc, expression) {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n      this.takeSurroundingComments(expression, startLoc.index, this.state.lastTokEndLoc.index);\n      return expression;\n    }\n    const parenExpression = this.startNodeAt(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n  parseParenItem(node, startLoc) {\n    return node;\n  }\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, {\n          at: metaProp\n        });\n      }\n      return metaProp;\n    }\n    return this.parseNew(node);\n  }\n  parseNew(node) {\n    this.parseNewCallee(node);\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n    return this.finishNode(node, \"NewExpression\");\n  }\n  parseNewCallee(node) {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, {\n        at: node.callee\n      });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc\n      });\n    } else if (this.eat(18)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc\n      });\n    }\n  }\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      startLoc,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(createPositionWithColumnOffset(startLoc, 1));\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          at: createPositionWithColumnOffset(this.state.firstInvalidTemplateEscapePos, 1)\n        });\n      }\n    }\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return finishedNode;\n  }\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(node);\n          break;\n        }\n      }\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(Errors.InvalidRecordProperty, {\n          at: prop\n        });\n      }\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n      node.properties.push(prop);\n    }\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n  addTrailingCommaExtraToNode(node) {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(55));\n  }\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc\n        });\n      }\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n    prop.method = false;\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n    let isGenerator = this.eat(55);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(55);\n        this.parsePropertyName(prop);\n      }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(55)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n    return this.parseObjPropValue(prop, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n  }\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n  checkGetterSetterParams(method) {\n    var _params;\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    if (params.length !== paramCount) {\n      this.raise(method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity, {\n        at: method\n      });\n    }\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(Errors.BadSetterRestParameter, {\n        at: method\n      });\n    }\n  }\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n  parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc\n          });\n        }\n        prop.value = this.parseMaybeDefault(startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n  parseObjPropValue(prop, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n  parsePropertyName(prop, refExpressionErrors) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 132:\n            key = this.parseNumericLiteral(value);\n            break;\n          case 131:\n            key = this.parseStringLiteral(value);\n            break;\n          case 133:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case 134:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case 136:\n            {\n              const privateKeyLoc = this.state.startLoc;\n              if (refExpressionErrors != null) {\n                if (refExpressionErrors.privateKeyLoc === null) {\n                  refExpressionErrors.privateKeyLoc = privateKeyLoc;\n                }\n              } else {\n                this.raise(Errors.UnexpectedPrivateField, {\n                  at: privateKeyLoc\n                });\n              }\n              key = this.parsePrivateName();\n              break;\n            }\n          default:\n            throw this.unexpected();\n        }\n      }\n      prop.key = key;\n      if (type !== 136) {\n        prop.computed = false;\n      }\n    }\n    return prop.key;\n  }\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return finishedNode;\n  }\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n  parseArrowExpression(node, params, isAsync, trailingCommaLoc) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    if (!this.match(5) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n  setArrowFunctionParameters(node, params, trailingCommaLoc) {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params;\n  }\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n        if (hasStrictModeDirective && nonSimple) {\n          this.raise(Errors.IllegalLanguageModeDirective, {\n            at: (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.loc.end : node\n          });\n        }\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n        if (this.state.strict && node.id) {\n          this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n  isSimpleParameter(node) {\n    return node.type === \"Identifier\";\n  }\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = !allowDuplicates && new Set();\n    const formalParameters = {\n      type: \"FormalParameters\"\n    };\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged\n      });\n    }\n  }\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\"\n        });\n      }\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n    return elt;\n  }\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(liberal);\n    return this.createIdentifier(node, name);\n  }\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n  parseIdentifierName(liberal) {\n    let name;\n    const {\n      startLoc,\n      type\n    } = this.state;\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(130);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n    this.next();\n    return name;\n  }\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, {\n          at: startLoc\n        });\n        return;\n      }\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc\n        });\n        return;\n      }\n      this.expressionScope.recordAsyncArrowParametersError({\n        at: startLoc\n      });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, {\n          at: startLoc\n        });\n        return;\n      }\n    }\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word\n      });\n      return;\n    }\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word\n      });\n    }\n  }\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n  parseAwait(startLoc) {\n    const node = this.startNodeAt(startLoc);\n    this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, {\n      at: node\n    });\n    if (this.eat(55)) {\n      this.raise(Errors.ObsoleteAwaitStar, {\n        at: node\n      });\n    }\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 53 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 101 && !this.state.containsEsc || type === 135 || type === 56 || this.hasPlugin(\"v8intrinsic\") && type === 54;\n  }\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, {\n      at: node\n    });\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(55);\n      switch (this.state.type) {\n        case 13:\n        case 137:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n  checkPipelineAtInfixOperator(left, leftStartLoc) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc\n        });\n      }\n    }\n  }\n  parseSmartPipelineBodyInStyle(childExpr, startLoc) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  checkSmartPipeTopicBodyEarlyErrors(startLoc) {\n    if (this.match(19)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, {\n        at: this.state.startLoc\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, {\n        at: startLoc\n      });\n    }\n  }\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n  parseFSharpPipelineBody(prec) {\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    if (!this.match(5)) {\n      this.unexpected(null, 5);\n    }\n    const program = this.startNodeAt(this.state.endLoc);\n    this.next();\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n  parsePropertyNamePrefixOperator(prop) {}\n}\nconst loopLabel = {\n    kind: \"loop\"\n  },\n  switchLabel = {\n    kind: \"switch\"\n  };\nvar ParseFunctionFlag = {\n  Expression: 0,\n  Declaration: 1,\n  HangingDeclaration: 2,\n  NullableId: 4,\n  Async: 8\n};\nvar ParseStatementFlag = {\n  StatementOnly: 0,\n  AllowImportExport: 1,\n  AllowDeclaration: 2,\n  AllowFunctionDeclaration: 4,\n  AllowLabeledFunction: 8\n};\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n    if (typeof type === \"number\") {\n      {\n        if (type === 136) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(130),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n    return this.finishNode(file, \"File\");\n  }\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 137;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, {\n          at,\n          localName\n        });\n      }\n    }\n    let finishedProgram;\n    if (end === 137) {\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      finishedProgram = this.finishNodeAt(program, \"Program\", createPositionWithColumnOffset(this.state.startLoc, -1));\n    }\n    return finishedProgram;\n  }\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n  isLet() {\n    if (!this.isContextual(99)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n  chStartsBindingIdentifier(ch, pos) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === 92) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  chStartsBindingPattern(ch) {\n    return ch === 91 || ch === 123;\n  }\n  hasFollowingBindingAtom() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingPattern(nextCh) || this.chStartsBindingIdentifier(nextCh, next);\n  }\n  hasFollowingBindingIdentifier() {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n  startsUsingForOf() {\n    const lookahead = this.lookahead();\n    if (lookahead.type === 101 && !lookahead.containsEsc) {\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n  parseModuleItem() {\n    return this.parseStatementLike(ParseStatementFlag.AllowImportExport | ParseStatementFlag.AllowDeclaration | ParseStatementFlag.AllowFunctionDeclaration | ParseStatementFlag.AllowLabeledFunction);\n  }\n  parseStatementListItem() {\n    return this.parseStatementLike(ParseStatementFlag.AllowDeclaration | ParseStatementFlag.AllowFunctionDeclaration | ParseStatementFlag.AllowLabeledFunction);\n  }\n  parseStatementOrFunctionDeclaration(disallowLabeledFunction) {\n    return this.parseStatementLike(ParseStatementFlag.AllowFunctionDeclaration | (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction));\n  }\n  parseStatement() {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n  parseStatementLike(flags) {\n    let decorators = null;\n    if (this.match(26)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n  parseStatementContent(flags, decorators) {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(flags & ParseStatementFlag.AllowFunctionDeclaration);\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n    switch (starttype) {\n      case 60:\n        return this.parseBreakContinueStatement(node, true);\n      case 63:\n        return this.parseBreakContinueStatement(node, false);\n      case 64:\n        return this.parseDebuggerStatement(node);\n      case 90:\n        return this.parseDoWhileStatement(node);\n      case 91:\n        return this.parseForStatement(node);\n      case 68:\n        if (this.lookaheadCharCode() === 46) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, {\n              at: this.state.startLoc\n            });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, {\n              at: this.state.startLoc\n            });\n          }\n        }\n        return this.parseFunctionStatement(node, false, !allowDeclaration && allowFunctionDeclaration);\n      case 80:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(this.maybeTakeDecorators(decorators, node), true);\n      case 69:\n        return this.parseIfStatement(node);\n      case 70:\n        return this.parseReturnStatement(node);\n      case 71:\n        return this.parseSwitchStatement(node);\n      case 72:\n        return this.parseThrowStatement(node);\n      case 73:\n        return this.parseTryStatement(node);\n      case 105:\n        if (this.hasFollowingLineBreak() || this.state.containsEsc || !this.hasFollowingBindingIdentifier()) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc\n          });\n        }\n        return this.parseVarStatement(node, \"using\");\n      case 99:\n        {\n          if (this.state.containsEsc) {\n            break;\n          }\n          const next = this.nextTokenStart();\n          const nextCh = this.codePointAtPos(next);\n          if (nextCh !== 91) {\n            if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n            if (!this.chStartsBindingIdentifier(nextCh, next) && nextCh !== 123) {\n              break;\n            }\n          }\n        }\n      case 75:\n        {\n          if (!allowDeclaration) {\n            this.raise(Errors.UnexpectedLexicalDeclaration, {\n              at: this.state.startLoc\n            });\n          }\n        }\n      case 74:\n        {\n          const kind = this.state.value;\n          return this.parseVarStatement(node, kind);\n        }\n      case 92:\n        return this.parseWhileStatement(node);\n      case 76:\n        return this.parseWithStatement(node);\n      case 5:\n        return this.parseBlock();\n      case 13:\n        return this.parseEmptyStatement(node);\n      case 83:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n      case 82:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(Errors.UnexpectedImportExport, {\n              at: this.state.startLoc\n            });\n          }\n          this.next();\n          let result;\n          if (starttype === 83) {\n            result = this.parseImport(node);\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node, decorators);\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n          this.assertModuleNodeAllowed(result);\n          return result;\n        }\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (!allowDeclaration) {\n              this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n                at: this.state.startLoc\n              });\n            }\n            this.next();\n            return this.parseFunctionStatement(node, true, !allowDeclaration && allowFunctionDeclaration);\n          }\n        }\n    }\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, flags);\n    } else {\n      return this.parseExpressionStatement(node, expr, decorators);\n    }\n  }\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, {\n        at: node\n      });\n    }\n  }\n  decoratorsEnabledBeforeExport() {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return this.hasPlugin(\"decorators\") && !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\");\n  }\n  maybeTakeDecorators(maybeDecorators, classNode, exportNode) {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n  canHaveLeadingDecorator() {\n    return this.match(80);\n  }\n  parseDecorators(allowExport) {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(26));\n    if (this.match(82)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, {\n          at: this.state.startLoc\n        });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    return decorators;\n  }\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n    const node = this.startNode();\n    this.next();\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr;\n      if (this.match(10)) {\n        const startLoc = this.state.startLoc;\n        this.next();\n        expr = this.parseExpression();\n        this.expect(11);\n        expr = this.wrapParenthesis(startLoc, expr);\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (this.getPluginOption(\"decorators\", \"allowCallParenthesized\") === false && node.expression !== expr) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(136)) {\n            this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n    return expr;\n  }\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n  verifyBreakContinue(node, isBreak) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, {\n        at: node,\n        type\n      });\n    }\n  }\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n  parseDoWhileStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    this.expect(92);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = null;\n    if (this.isAwaitAllowed() && this.eatContextual(96)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n    if (this.match(13)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n    const startsWithLet = this.isContextual(99);\n    const startsWithUsing = this.isContextual(105) && !this.hasFollowingLineBreak();\n    const isLetOrUsing = startsWithLet && this.hasFollowingBindingAtom() || startsWithUsing && this.hasFollowingBindingIdentifier() && this.startsUsingForOf();\n    if (this.match(74) || this.match(75) || isLetOrUsing) {\n      const initNode = this.startNode();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n      const isForIn = this.match(58);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, {\n          at: init\n        });\n      }\n      if ((isForIn || this.isContextual(101)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n    const startsWithAsync = this.isContextual(95);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(101);\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, {\n          at: init\n        });\n      }\n      if (awaitAt === null && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(Errors.ForOfAsync, {\n          at: init\n        });\n      }\n    }\n    if (isForOf || this.match(58)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, {\n        in: {\n          type\n        }\n      });\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n  parseFunctionStatement(node, isAsync, isHangingDeclaration) {\n    this.next();\n    return this.parseFunction(node, ParseFunctionFlag.Declaration | (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) | (isAsync ? ParseFunctionFlag.Async : 0));\n  }\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatementOrFunctionDeclaration(true);\n    node.alternate = this.eat(66) ? this.parseStatementOrFunctionDeclaration(true) : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(61) || this.match(65)) {\n        const isCase = this.match(61);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n  parseThrowStatement(node) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, {\n        at: this.state.lastTokEndLoc\n      });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: {\n        type: \"CatchClause\"\n      },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true\n    });\n    return param;\n  }\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n    if (this.match(62)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n    node.finalizer = this.eat(67) ? this.parseBlock() : null;\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, {\n        at: node\n      });\n    }\n    return this.finishNode(node, \"TryStatement\");\n  }\n  parseVarStatement(node, kind) {\n    let allowMissingInitializer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, {\n        at: this.state.startLoc\n      });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    return this.finishNode(node, \"WithStatement\");\n  }\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n  parseLabeledStatement(node, maybeName, expr, flags) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName\n        });\n      }\n    }\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(71) ? \"switch\" : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = flags & ParseStatementFlag.AllowLabeledFunction ? this.parseStatementOrFunctionDeclaration(false) : this.parseStatement();\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n  parseExpressionStatement(node, expr, decorators) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(5);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n    while (!this.match(end)) {\n      const stmt = topLevel ? this.parseModuleItem() : this.parseStatementListItem();\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n          continue;\n        }\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n    this.next();\n  }\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(58);\n    this.next();\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\"\n      });\n    }\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: {\n          type: \"ForStatement\"\n        }\n      });\n    }\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement());\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n  parseVar(node, isFor, kind) {\n    let allowMissingInitializer = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const declarations = node.declarations = [];\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(29) ? null : isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      if (decl.init === null && !allowMissingInitializer) {\n        if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(58) || this.isContextual(101)))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\"\n          });\n        } else if (kind === \"const\" && !(this.match(58) || this.isContextual(101))) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\"\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n    return node;\n  }\n  parseVarId(decl, kind) {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: {\n        type: \"VariableDeclarator\"\n      },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL\n    });\n    decl.id = id;\n  }\n  parseAsyncFunctionExpression(node) {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n  parseFunction(node) {\n    let flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ParseFunctionFlag.Expression;\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n    this.initFunction(node, isAsync);\n    if (this.match(55)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc\n        });\n      }\n      this.next();\n      node.generator = true;\n    }\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n    if (isDeclaration && !hangingDeclaration) {\n      this.registerFunctionStatementId(node);\n    }\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.loc.start);\n  }\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n  isClassMethod() {\n    return this.match(10);\n  }\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc\n            });\n          }\n          continue;\n        }\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n        const member = this.startNode();\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n        this.parseClassMember(classBody, member, state);\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(Errors.DecoratorConstructor, {\n            at: member\n          });\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, {\n        at: this.state.startLoc\n      });\n    }\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(104);\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const accessorProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n    if (this.eat(55)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(136);\n      this.parseClassElementName(method);\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key\n        });\n      }\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(136);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n    this.parsePostMemberNameModifiers(publicMember);\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, {\n            at: key\n          });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, {\n            at: key\n          });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(55);\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n      method.kind = \"method\";\n      const isPrivate = this.match(136);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(55) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicMethod);\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, {\n            at: publicMethod.key\n          });\n        }\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n      this.checkGetterSetterParams(publicMethod);\n    } else if (isContextual && key.name === \"accessor\" && !this.isLineTerminator()) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n      const isPrivate = this.match(136);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n  parseClassElementName(member) {\n    const {\n      type,\n      value\n    } = this.state;\n    if ((type === 130 || type === 131) && member.static && value === \"prototype\") {\n      this.raise(Errors.StaticPrototype, {\n        at: this.state.startLoc\n      });\n    }\n    if (type === 136) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n    return this.parsePropertyName(member);\n  }\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(Errors.DecoratorStaticBlock, {\n        at: member\n      });\n    }\n  }\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(Errors.ConstructorClassField, {\n        at: prop.key\n      });\n    }\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n  }\n  pushClassAccessorProperty(classBody, prop, isPrivate) {\n    if (!isPrivate && !prop.computed) {\n      const key = prop.key;\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        this.raise(Errors.ConstructorClassField, {\n          at: key\n        });\n      }\n    }\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n    if (isPrivate) {\n      this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.loc.start);\n    }\n  }\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);\n  }\n  parsePostMemberNameModifiers(methodOrProp) {}\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n  parseClassAccessorProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, {\n          at: this.state.startLoc\n        });\n      }\n    }\n  }\n  parseClassSuper(node) {\n    node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;\n  }\n  parseExport(node, decorators) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      var _node2$declaration;\n      const node2 = node;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (((_node2$declaration = node2.declaration) == null ? void 0 : _node2$declaration.type) === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n    if (this.eat(65)) {\n      const node2 = node;\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, {\n          at: node\n        });\n      }\n      this.checkExport(node2, true, true);\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n    throw this.unexpected(null, 5);\n  }\n  eatExportStar(node) {\n    return this.eat(55);\n  }\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(93)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      return true;\n    }\n    return false;\n  }\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n  isAsyncFunction() {\n    if (!this.isContextual(95)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    if (this.match(68)) {\n      this.next();\n      return this.parseFunction(expr, ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId);\n    } else if (this.isAsyncFunction()) {\n      this.next();\n      this.next();\n      return this.parseFunction(expr, ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId | ParseFunctionFlag.Async);\n    }\n    if (this.match(80)) {\n      return this.parseClass(expr, true, true);\n    }\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(Errors.DecoratorBeforeExport, {\n          at: this.state.startLoc\n        });\n      }\n      return this.parseClass(this.maybeTakeDecorators(this.parseDecorators(false), this.startNode()), true, true);\n    }\n    if (this.match(75) || this.match(74) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc\n      });\n    }\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n  parseExportDeclaration(node) {\n    if (this.match(80)) {\n      const node = this.parseClass(this.startNode(), true, false);\n      return node;\n    }\n    return this.parseStatementListItem();\n  }\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if (type === 95 && !this.state.containsEsc || type === 99) {\n        return false;\n      }\n      if ((type === 128 || type === 127) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n        if (tokenIsIdentifier(nextType) && nextType !== 97 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(65)) {\n      return false;\n    }\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n    if (this.match(65) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n    return false;\n  }\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(97)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n    this.semicolon();\n  }\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc\n          });\n        }\n        return true;\n      }\n    }\n    return type === 74 || type === 75 || type === 68 || type === 80 || this.isLet() || this.isAsyncFunction();\n  }\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n          const declaration = node.declaration;\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration\n            });\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName\n              });\n            } else {\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n  checkDuplicateExports(node, exportName) {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, {\n          at: node\n        });\n      } else {\n        this.raise(Errors.DuplicateExport, {\n          at: node,\n          exportName\n        });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(128);\n      const isString = this.match(131);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n    return nodes;\n  }\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(93)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n  parseModuleExportName() {\n    if (this.match(131)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0)\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n  isJSONModuleImport(node) {\n    if (node.assertions != null) {\n      return node.assertions.some(_ref89 => {\n        let {\n          key,\n          value\n        } = _ref89;\n        return value.value === \"json\" && (key.type === \"Identifier\" ? key.name === \"type\" : key.value === \"type\");\n      });\n    }\n    return false;\n  }\n  checkImportReflection(node) {\n    if (node.module) {\n      var _node$assertions;\n      if (node.specifiers.length !== 1 || node.specifiers[0].type !== \"ImportDefaultSpecifier\") {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n      if (((_node$assertions = node.assertions) == null ? void 0 : _node$assertions.length) > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start\n        });\n      }\n    }\n  }\n  checkJSONModuleImport(node) {\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      const {\n        specifiers\n      } = node;\n      if (specifiers != null) {\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\" ? imported.name !== \"default\" : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start\n          });\n        }\n      }\n    }\n  }\n  parseMaybeImportReflection(node) {\n    let isImportReflection = false;\n    if (this.isContextual(125)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== 97) {\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(this.nextTokenStartSince(lookahead.end));\n          if (nextNextTokenFirstChar === 102) {\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== 12) {\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next();\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n  parseImport(node) {\n    node.specifiers = [];\n    if (!this.match(131)) {\n      this.parseMaybeImportReflection(node);\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(97);\n    }\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n  parseImportSource() {\n    if (!this.match(131)) this.unexpected();\n    return this.parseExprAtom();\n  }\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n  parseImportSpecifierLocal(node, specifier, type) {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n  finishImportSpecifier(specifier, type) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_LEXICAL;\n    this.checkLVal(specifier.local, {\n      in: specifier,\n      binding: bindingType\n    });\n    return this.finishNode(specifier, type);\n  }\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n    do {\n      if (this.match(8)) {\n        break;\n      }\n      const node = this.startNode();\n      const keyName = this.state.value;\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(131)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseModuleAttributes() {\n    if (this.match(76) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key\n        });\n      }\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(14);\n      if (!this.match(131)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n    return attrs;\n  }\n  maybeParseImportAssertions() {\n    if (this.isContextual(94) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(55)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(93);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\");\n      return true;\n    }\n    return false;\n  }\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc\n          });\n        }\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n      const specifier = this.startNode();\n      const importedIsString = this.match(131);\n      const isMaybeTypeOnly = this.isContextual(128);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly, undefined);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {\n    if (this.eatContextual(93)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: imported.value\n        });\n      }\n      this.checkReservedWord(imported.name, specifier.loc.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(specifier, \"ImportSpecifier\", bindingType);\n  }\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\nfunction parse(input, options) {\n  var _options;\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\nconst tokTypes = generateExportedTokenTypes(tt);\nfunction getParser(options, input) {\n  let cls = Parser;\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n  return new cls(options, input);\n}\nconst parserClassCache = {};\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"mappings":"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C,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,GAAG,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,IAAI,EAAC,EAAE,EAAC,EAAE,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,IAAI,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,KAAK,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,IAAI,EAAC,IAAI,EAAC,GAAG,EAAC,IAAI,EAAC,IAAI,EAAC,CAAC,EAAC,IAAI,CAAC;AAEj+C,MAAMC,qBAAqB,GAAG,CAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,KAAK,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,KAAK,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,IAAI,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,IAAI,EAAC,CAAC,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,EAAE,EAAC,EAAE,EAAC,GAAG,EAAC,EAAE,EAAC,GAAG,EAAC,CAAC,EAAC,GAAG,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,IAAI,EAAC,CAAC,EAAC,MAAM,EAAC,GAAG,CAAC;AAKjwB,SAASC,aAAa,CAAChkB,IAAY,EAAEnB,GAAsB,EAAW;EACpE,IAAIqP,GAAG,GAAG,OAAO;EACjB,KAAK,IAAIlP,CAAC,GAAG,CAAC,EAAER,MAAM,GAAGK,GAAG,CAACL,MAAM,EAAEQ,CAAC,GAAGR,MAAM,EAAEQ,CAAC,IAAI,CAAC,EAAE;IACvDkP,GAAG,IAAIrP,GAAG,CAACG,CAAC,CAAC;IACb,IAAIkP,GAAG,GAAGlO,IAAI,EAAE,OAAO,KAAK;IAE5BkO,GAAG,IAAIrP,GAAG,CAACG,CAAC,GAAG,CAAC,CAAC;IACjB,IAAIkP,GAAG,IAAIlO,IAAI,EAAE,OAAO,IAAI;EAC9B;EACA,OAAO,KAAK;AACd;AAIO,SAASikB,iBAAiB,CAACjkB,IAAY,EAAW;EACvD,IAAIA,IAAI,KAAuB,EAAE,OAAOA,IAAI,KAAyB;EACrE,IAAIA,IAAI,MAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,KAAuB,EAAE,OAAOA,IAAI,KAAyB;EACrE,IAAIA,IAAI,OAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,IAAI,MAAM,EAAE;IAClB,OACEA,IAAI,IAAI,IAAI,IAAI4jB,uBAAuB,CAACM,IAAI,CAACtiB,MAAM,CAACuiB,YAAY,CAACnkB,IAAI,CAAC,CAAC;EAE3E;EACA,OAAOgkB,aAAa,CAAChkB,IAAI,EAAE8jB,0BAA0B,CAAC;AACxD;AAIO,SAASM,gBAAgB,CAACpkB,IAAY,EAAW;EACtD,IAAIA,IAAI,KAAmB,EAAE,OAAOA,IAAI,KAAyB;EACjE,IAAIA,IAAI,KAAkB,EAAE,OAAO,IAAI;EACvC,IAAIA,IAAI,KAAuB,EAAE,OAAO,KAAK;EAC7C,IAAIA,IAAI,MAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,KAAuB,EAAE,OAAOA,IAAI,KAAyB;EACrE,IAAIA,IAAI,OAAwB,EAAE,OAAO,IAAI;EAC7C,IAAIA,IAAI,IAAI,MAAM,EAAE;IAClB,OAAOA,IAAI,IAAI,IAAI,IAAI6jB,kBAAkB,CAACK,IAAI,CAACtiB,MAAM,CAACuiB,YAAY,CAACnkB,IAAI,CAAC,CAAC;EAC3E;EACA,OACEgkB,aAAa,CAAChkB,IAAI,EAAE8jB,0BAA0B,CAAC,IAC/CE,aAAa,CAAChkB,IAAI,EAAE+jB,qBAAqB,CAAC;AAE9C;AChFA,MAAMM,aAAa,GAAG;EACpBja,OAAO,EAAE,CACP,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,MAAM,EACN,SAAS,EACT,KAAK,EACL,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,QAAQ,CACT;EACDka,MAAM,EAAE,CACN,YAAY,EACZ,WAAW,EACX,KAAK,EACL,SAAS,EACT,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,CACR;EACDC,UAAU,EAAE,CAAC,MAAM,EAAE,WAAW;AAClC,CAAC;AACD,MAAM3L,QAAQ,GAAG,IAAI/L,GAAG,CAACwX,aAAa,CAACja,OAAO,CAAC;AAC/C,MAAMoa,sBAAsB,GAAG,IAAI3X,GAAG,CAACwX,aAAa,CAACC,MAAM,CAAC;AAC5D,MAAMG,0BAA0B,GAAG,IAAI5X,GAAG,CAACwX,aAAa,CAACE,UAAU,CAAC;AAK7D,SAASG,cAAc,CAACC,IAAY,EAAEC,QAAiB,EAAW;EACvE,OAAQA,QAAQ,IAAID,IAAI,KAAK,OAAO,IAAKA,IAAI,KAAK,MAAM;AAC1D;AAOO,SAASE,oBAAoB,CAACF,IAAY,EAAEC,QAAiB,EAAW;EAC7E,OAAOF,cAAc,CAACC,IAAI,EAAEC,QAAQ,CAAC,IAAIJ,sBAAsB,CAACM,GAAG,CAACH,IAAI,CAAC;AAC3E;AAMO,SAASI,4BAA4B,CAACJ,IAAY,EAAW;EAClE,OAAOF,0BAA0B,CAACK,GAAG,CAACH,IAAI,CAAC;AAC7C;AAOO,SAASK,wBAAwB,CACtCL,IAAY,EACZC,QAAiB,EACR;EACT,OACEC,oBAAoB,CAACF,IAAI,EAAEC,QAAQ,CAAC,IAAIG,4BAA4B,CAACJ,IAAI,CAAC;AAE9E;AAEO,SAASM,SAAS,CAACN,IAAY,EAAW;EAC/C,OAAO/L,QAAQ,CAACkM,GAAG,CAACH,IAAI,CAAC;AAC3B;AC5EO,SAASO,eAAe,CAC7BC,OAAe,EACfC,IAAY,EACZC,KAAa,EACJ;EACT,OACEF,OAAO,OAAqB,IAC5BC,IAAI,OAAqB,IACzBnB,iBAAiB,CAACoB,KAAK,CAAC;AAE5B;AAOA,MAAMC,mBAAmB,GAAG,IAAIzY,GAAG,CAAC,CAClC,OAAO,EACP,MAAM,EACN,OAAO,EACP,UAAU,EACV,UAAU,EACV,SAAS,EACT,IAAI,EACJ,MAAM,EACN,SAAS,EACT,KAAK,EACL,UAAU,EACV,IAAI,EACJ,QAAQ,EACR,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EACL,OAAO,EACP,OAAO,EACP,MAAM,EACN,KAAK,EACL,MAAM,EACN,OAAO,EACP,OAAO,EACP,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,EACP,IAAI,EACJ,YAAY,EACZ,QAAQ,EACR,MAAM,EACN,QAAQ,EAER,YAAY,EACZ,WAAW,EACX,KAAK,EACL,SAAS,EACT,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,OAAO,EAEP,MAAM,EACN,WAAW,EAEX,MAAM,EACN,OAAO,CACR,CAAC;AAEK,SAAS0Y,iBAAiB,CAACZ,IAAY,EAAW;EACvD,OAAOW,mBAAmB,CAACR,GAAG,CAACH,IAAI,CAAC;AACtC;AC1FO,MAAMa,WAAW,GAAU,WAAW;EAChCC,aAAa,GAAQ,WAAW;EAChCC,cAAc,GAAO,WAAW;EAChCC,WAAW,GAAU,WAAW;EAChCC,kBAAkB,GAAG,WAAW;EAChCC,WAAW,GAAU,WAAW;EAChCC,kBAAkB,GAAG,WAAW;EAChCC,WAAW,GAAU,WAAW;EAChCC,kBAAkB,GAAG,WAAW;EAChCC,eAAe,GAAM,WAAW;EAChCC,SAAS,GAAGT,aAAa,GAAGC,cAAc,GAAGM,kBAAkB,GAAGC,eAAe;AAgBvF,MAAME,eAAe,GAAc,cAAgB;EAC7CC,cAAc,GAAe,cAAgB;EAE7CC,cAAc,GAAe,cAAgB;EAC7CC,kBAAkB,GAAW,cAAgB;EAC7CC,mBAAmB,GAAU,cAAgB;EAI7CC,eAAe,GAAc,eAAiB;EAC9CC,gBAAgB,GAAa,eAAiB;EAC9CC,kBAAkB,GAAW,eAAiB;EAC9CC,wBAAwB,GAAK,eAAiB;EAC9CC,yBAAyB,GAAI,eAAiB;EAC9CC,0BAA0B,GAAG,eAAiB;EAC9CC,oBAAoB,GAAS;AAKnC,MAAMC,UAAU,GAAWZ,eAAe,GAAGC,cAAc,GAAGE,kBAAkB,GAAIG,gBAAgB;EAC9FO,YAAY,GAASb,eAAe,GAAG,CAAC,GAAgBG,kBAAkB,GAAI,CAAC;EAC/EW,QAAQ,GAAad,eAAe,GAAG,CAAC,GAAgBE,cAAc,GAAQ,CAAC;EAC/Ea,aAAa,GAAQf,eAAe,GAAG,CAAC,GAAgBI,mBAAmB,GAAG,CAAC;EAC/EY,iBAAiB,GAAI,CAAC,GAAiBf,cAAc,GAAG,CAAC,GAAqBK,gBAAgB;EAC9FW,YAAY,GAAS,CAAC,GAAiBhB,cAAc,GAAG,CAAC,GAAqB,CAAC;EAC/EiB,YAAY,GAASlB,eAAe,GAAGC,cAAc,GAAGE,kBAAkB,GAAII,kBAAkB;EAChGY,eAAe,GAAM,CAAC,GAAiB,CAAC,GAAgB,CAAC,GAAcV,yBAAyB;EAGhGW,SAAS,GAAY,CAAC,GAAiB,CAAC,GAAgB,CAAC,GAAqBf,eAAe;EAC7FgB,YAAY,GAASrB,eAAe,GAAG,CAAC,GAAgB,CAAC,GAAqBK,eAAe;EAE7FiB,kBAAkB,GAAGJ,YAAY,GAAMV,wBAAwB;EAC/De,iBAAiB,GAAI,CAAC,GAAiB,CAAC,GAAgB,CAAC,GAAqBd,yBAAyB;EACvGe,mBAAmB,GAAE,CAAC,GAAiBvB,cAAc,GAAG,CAAC,GAAqBU,oBAAoB;EAElGc,oBAAoB,GAAGf,0BAA0B;AAgBvD,MAAMgB,yBAAyB,GAAG,KAAM;EAClCC,yBAAyB,GAAG,KAAM;EAClCC,yBAAyB,GAAG,KAAM;EAClCC,2BAA2B,GAAGF,yBAAyB,GAAGC,yBAAyB;AAGzF,MAAME,2BAA2B,GAAKH,yBAAyB,GAAGD,yBAAyB;EACrFK,2BAA2B,GAAKH,yBAAyB,GAAGF,yBAAyB;EACrFM,6BAA6B,GAAGL,yBAAyB;EACzDM,6BAA6B,GAAGL,yBAAyB;EACzDM,mBAAmB,GAAa,CAAC;ACpEvC,MAAMC,KAAK,CAAC;EASjBjrB,WAAW,CAACwS,KAAiB,EAAE;IAAA,KAN/B0Y,GAAG,GAAgB,IAAI1b,GAAG,EAAE;IAAA,KAE5B2b,OAAO,GAAgB,IAAI3b,GAAG,EAAE;IAAA,KAEhC4b,SAAS,GAAgB,IAAI5b,GAAG,EAAE;IAGhC,IAAI,CAACgD,KAAK,GAAGA,KAAK;EACpB;AACF;AAIe,MAAM6Y,YAAY,CAA+B;EAM9DrrB,WAAW,CAACsrB,MAAiB,EAAE/D,QAAiB,EAAE;IAAA,KALlD+D,MAAM;IAAA,IACNC,WAAU,GAAkB,EAAE;IAAA,KAC9BhE,QAAQ;IAAA,KACRiE,gBAAgB,GAA0B,IAAIhQ,GAAG,EAAE;IAGjD,IAAI,CAAC8P,MAAM,GAAGA,MAAM;IACpB,IAAI,CAAC/D,QAAQ,GAAGA,QAAQ;EAC1B;EAEA,IAAIkE,UAAU,GAAG;IACf,OAAO,CAAC,IAAI,CAACC,YAAY,EAAE,CAAClZ,KAAK,GAAG4V,aAAa,IAAI,CAAC;EACxD;EACA,IAAIuD,UAAU,GAAG;IACf,OAAO,CAAC,IAAI,CAACC,oBAAoB,EAAE,GAAGvD,cAAc,IAAI,CAAC;EAC3D;EACA,IAAIwD,UAAU,GAAG;IACf,OAAO,CAAC,IAAI,CAACC,qBAAqB,EAAE,GAAGtD,WAAW,IAAI,CAAC;EACzD;EACA,IAAInS,gBAAgB,GAAG;IACrB,OAAO,CAAC,IAAI,CAACyV,qBAAqB,EAAE,GAAGrD,kBAAkB,IAAI,CAAC;EAChE;EACA,IAAIsD,OAAO,GAAG;IACZ,OAAO,CAAC,IAAI,CAACD,qBAAqB,EAAE,GAAGpD,WAAW,IAAI,CAAC;EACzD;EACA,IAAIsD,+BAA+B,GAAG;IACpC,MAAMxZ,KAAK,GAAG,IAAI,CAACsZ,qBAAqB,EAAE;IAC1C,OAAO,CAACtZ,KAAK,GAAGkW,WAAW,IAAI,CAAC,IAAI,CAAClW,KAAK,GAAG6V,cAAc,MAAM,CAAC;EACpE;EACA,IAAI4D,aAAa,GAAG;IAClB,KAAK,IAAItqB,CAAC,GAAG,IAAI,CAAC4pB,UAAU,CAACpqB,MAAM,GAAG,CAAC,GAAIQ,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE6Q;MAAM,CAAC,GAAG,IAAI,CAAC+Y,UAAU,CAAC5pB,CAAC,CAAC;MACpC,IAAI6Q,KAAK,GAAGmW,kBAAkB,EAAE;QAC9B,OAAO,IAAI;MACb;MACA,IAAInW,KAAK,IAAIqW,SAAS,GAAGH,WAAW,CAAC,EAAE;QAErC,OAAO,KAAK;MACd;IACF;EACF;EACA,IAAIwD,kBAAkB,GAAG;IACvB,OAAO,CAAC,IAAI,CAACJ,qBAAqB,EAAE,GAAGzD,cAAc,IAAI,CAAC;EAC5D;EACA,IAAI8D,mBAAmB,GAAG;IACxB,OAAO,IAAI,CAACC,0BAA0B,CAAC,IAAI,CAACV,YAAY,EAAE,CAAC;EAC7D;EAEAW,WAAW,CAAC7Z,KAAiB,EAAS;IACpC,OAAO,IAAIyY,KAAK,CAACzY,KAAK,CAAC;EACzB;EAEA8Z,KAAK,CAAC9Z,KAAiB,EAAE;IAGvB,IAAI,CAAC+Y,UAAU,CAAC5V,IAAI,CAAC,IAAI,CAAC0W,WAAW,CAAC7Z,KAAK,CAAC,CAAC;EAC/C;EAEA+Z,IAAI,GAAe;IACjB,MAAMC,KAAK,GAAG,IAAI,CAACjB,UAAU,CAACpF,GAAG,EAAE;IACnC,OAAOqG,KAAK,CAACha,KAAK;EACpB;EAKA4Z,0BAA0B,CAACI,KAAa,EAAW;IACjD,OAAO,CAAC,EACNA,KAAK,CAACha,KAAK,IAAI6V,cAAc,GAAGM,kBAAkB,CAAC,IAClD,CAAC,IAAI,CAAC2C,MAAM,CAAC/D,QAAQ,IAAIiF,KAAK,CAACha,KAAK,GAAG4V,aAAc,CACvD;EACH;EAEAqE,WAAW,CAACxiB,IAAY,EAAEyiB,WAAyB,EAAEjc,GAAa,EAAE;IAClE,IAAI+b,KAAK,GAAG,IAAI,CAACd,YAAY,EAAE;IAC/B,IAAIgB,WAAW,GAAGzD,kBAAkB,IAAIyD,WAAW,GAAGxD,mBAAmB,EAAE;MACzE,IAAI,CAACyD,yBAAyB,CAACH,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;MAE7D,IAAIic,WAAW,GAAGxD,mBAAmB,EAAE;QACrCsD,KAAK,CAACpB,SAAS,CAACwB,GAAG,CAAC3iB,IAAI,CAAC;MAC3B,CAAC,MAAM;QACLuiB,KAAK,CAACrB,OAAO,CAACyB,GAAG,CAAC3iB,IAAI,CAAC;MACzB;MAEA,IAAIyiB,WAAW,GAAGzD,kBAAkB,EAAE;QACpC,IAAI,CAAC4D,kBAAkB,CAACL,KAAK,EAAEviB,IAAI,CAAC;MACtC;IACF,CAAC,MAAM,IAAIyiB,WAAW,GAAG1D,cAAc,EAAE;MACvC,KAAK,IAAIrnB,CAAC,GAAG,IAAI,CAAC4pB,UAAU,CAACpqB,MAAM,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;QACpD6qB,KAAK,GAAG,IAAI,CAACjB,UAAU,CAAC5pB,CAAC,CAAC;QAC1B,IAAI,CAACgrB,yBAAyB,CAACH,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;QAC7D+b,KAAK,CAACtB,GAAG,CAAC0B,GAAG,CAAC3iB,IAAI,CAAC;QACnB,IAAI,CAAC4iB,kBAAkB,CAACL,KAAK,EAAEviB,IAAI,CAAC;QAEpC,IAAIuiB,KAAK,CAACha,KAAK,GAAGqW,SAAS,EAAE;MAC/B;IACF;IACA,IAAI,IAAI,CAACyC,MAAM,CAAC/D,QAAQ,IAAIiF,KAAK,CAACha,KAAK,GAAG4V,aAAa,EAAE;MACvD,IAAI,CAACoD,gBAAgB,CAACsB,MAAM,CAAC7iB,IAAI,CAAC;IACpC;EACF;EAEA4iB,kBAAkB,CAACL,KAAa,EAAEviB,IAAY,EAAE;IAC9C,IAAI,IAAI,CAACqhB,MAAM,CAAC/D,QAAQ,IAAIiF,KAAK,CAACha,KAAK,GAAG4V,aAAa,EAAE;MACvD,IAAI,CAACoD,gBAAgB,CAACsB,MAAM,CAAC7iB,IAAI,CAAC;IACpC;EACF;EAEA0iB,yBAAyB,CACvBH,KAAa,EACbviB,IAAY,EACZyiB,WAAyB,EACzBjc,GAAa,EACb;IACA,IAAI,IAAI,CAACsc,mBAAmB,CAACP,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,CAAC,EAAE;MACtD,IAAI,CAACpB,MAAM,CAACrT,KAAK,CAACzG,MAAM,CAAC9C,gBAAgB,EAAE;QACzCwJ,EAAE,EAAEzH,GAAG;QACPhQ,cAAc,EAAEwJ;MAClB,CAAC,CAAC;IACJ;EACF;EAEA8iB,mBAAmB,CACjBP,KAAa,EACbviB,IAAY,EACZyiB,WAAyB,EAChB;IACT,IAAI,EAAEA,WAAW,GAAG5D,eAAe,CAAC,EAAE,OAAO,KAAK;IAElD,IAAI4D,WAAW,GAAGzD,kBAAkB,EAAE;MACpC,OACEuD,KAAK,CAACrB,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,IACvBuiB,KAAK,CAACpB,SAAS,CAAC3D,GAAG,CAACxd,IAAI,CAAC,IACzBuiB,KAAK,CAACtB,GAAG,CAACzD,GAAG,CAACxd,IAAI,CAAC;IAEvB;IAEA,IAAIyiB,WAAW,GAAGxD,mBAAmB,EAAE;MACrC,OACEsD,KAAK,CAACrB,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,IACtB,CAAC,IAAI,CAACmiB,0BAA0B,CAACI,KAAK,CAAC,IAAIA,KAAK,CAACtB,GAAG,CAACzD,GAAG,CAACxd,IAAI,CAAE;IAEpE;IAEA,OACGuiB,KAAK,CAACrB,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,IACtB,EACEuiB,KAAK,CAACha,KAAK,GAAG+V,kBAAkB,IAChCiE,KAAK,CAACrB,OAAO,CAAC6B,MAAM,EAAE,CAACjF,IAAI,EAAE,CAACtmB,KAAK,KAAKwI,IAAI,CAC7C,IACF,CAAC,IAAI,CAACmiB,0BAA0B,CAACI,KAAK,CAAC,IAAIA,KAAK,CAACpB,SAAS,CAAC3D,GAAG,CAACxd,IAAI,CAAE;EAE1E;EAEAgjB,gBAAgB,CAACjX,EAAgB,EAAE;IACjC,MAAM;MAAE/L;IAAK,CAAC,GAAG+L,EAAE;IACnB,MAAMkX,aAAa,GAAG,IAAI,CAAC3B,UAAU,CAAC,CAAC,CAAC;IACxC,IACE,CAAC2B,aAAa,CAAC/B,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,IAChC,CAACijB,aAAa,CAAChC,GAAG,CAACzD,GAAG,CAACxd,IAAI,CAAC,IAI5B,CAACijB,aAAa,CAAC9B,SAAS,CAAC3D,GAAG,CAACxd,IAAI,CAAC,EAClC;MACA,IAAI,CAACuhB,gBAAgB,CAAChqB,GAAG,CAACyI,IAAI,EAAE+L,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAAC;IAC/C;EACF;EAEAorB,YAAY,GAAW;IACrB,OAAO,IAAI,CAACH,UAAU,CAAC,IAAI,CAACA,UAAU,CAACpqB,MAAM,GAAG,CAAC,CAAC;EACpD;EAEAyqB,oBAAoB,GAAe;IACjC,KAAK,IAAIjqB,CAAC,GAAG,IAAI,CAAC4pB,UAAU,CAACpqB,MAAM,GAAG,CAAC,GAAIQ,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE6Q;MAAM,CAAC,GAAG,IAAI,CAAC+Y,UAAU,CAAC5pB,CAAC,CAAC;MACpC,IAAI6Q,KAAK,GAAGqW,SAAS,EAAE;QACrB,OAAOrW,KAAK;MACd;IACF;EACF;EAGAsZ,qBAAqB,GAAe;IAClC,KAAK,IAAInqB,CAAC,GAAG,IAAI,CAAC4pB,UAAU,CAACpqB,MAAM,GAAG,CAAC,GAAIQ,CAAC,EAAE,EAAE;MAC9C,MAAM;QAAE6Q;MAAM,CAAC,GAAG,IAAI,CAAC+Y,UAAU,CAAC5pB,CAAC,CAAC;MACpC,IAAI6Q,KAAK,IAAIqW,SAAS,GAAGH,WAAW,CAAC,IAAI,EAAElW,KAAK,GAAG8V,WAAW,CAAC,EAAE;QAC/D,OAAO9V,KAAK;MACd;IACF;EACF;AACF;AC7NA,MAAM2a,SAAS,SAASlC,KAAK,CAAC;EAAAjrB;IAAA;IAAA,KAE5BotB,gBAAgB,GAAgB,IAAI5d,GAAG,EAAE;EAAA;AAC3C;AAEe,MAAM6d,gBAAgB,SAAShC,YAAY,CAAY;EACpEgB,WAAW,CAAC7Z,KAAiB,EAAa;IACxC,OAAO,IAAI2a,SAAS,CAAC3a,KAAK,CAAC;EAC7B;EAEAia,WAAW,CAACxiB,IAAY,EAAEyiB,WAAyB,EAAEjc,GAAa,EAAE;IAClE,MAAM+b,KAAK,GAAG,IAAI,CAACd,YAAY,EAAE;IACjC,IAAIgB,WAAW,GAAGlD,0BAA0B,EAAE;MAC5C,IAAI,CAACmD,yBAAyB,CAACH,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;MAC7D,IAAI,CAACoc,kBAAkB,CAACL,KAAK,EAAEviB,IAAI,CAAC;MACpCuiB,KAAK,CAACY,gBAAgB,CAACR,GAAG,CAAC3iB,IAAI,CAAC;MAChC;IACF;IAEA,KAAK,CAACwiB,WAAW,CAACxiB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;EAC3C;EAEAsc,mBAAmB,CACjBP,KAAgB,EAChBviB,IAAY,EACZyiB,WAAyB,EAChB;IACT,IAAI,KAAK,CAACK,mBAAmB,CAACP,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,CAAC,EAAE,OAAO,IAAI;IAEpE,IAAIA,WAAW,GAAGlD,0BAA0B,EAAE;MAC5C,OACE,CAACgD,KAAK,CAACY,gBAAgB,CAAC3F,GAAG,CAACxd,IAAI,CAAC,KAChCuiB,KAAK,CAACrB,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,IAAIuiB,KAAK,CAACpB,SAAS,CAAC3D,GAAG,CAACxd,IAAI,CAAC,CAAC;IAE1D;IAEA,OAAO,KAAK;EACd;EAEAgjB,gBAAgB,CAACjX,EAAgB,EAAE;IACjC,IAAI,CAAC,IAAI,CAACuV,UAAU,CAAC,CAAC,CAAC,CAAC6B,gBAAgB,CAAC3F,GAAG,CAACzR,EAAE,CAAC/L,IAAI,CAAC,EAAE;MACrD,KAAK,CAACgjB,gBAAgB,CAACjX,EAAE,CAAC;IAC5B;EACF;AACF;ACzCe,MAAMsX,UAAU,CAAC;EAAAttB;IAAA,IAa9ButB,kBAAiB,GAAY,KAAK;IAAA,IAClCC,4BAA2B,GAAY,KAAK;EAAA;EAa5C/U,SAAS,CAACgV,YAA0B,EAAW;IAC7C,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;MACpC,OAAO,IAAI,CAACC,OAAO,CAACjG,GAAG,CAACgG,YAAY,CAAC;IACvC,CAAC,MAAM;MACL,MAAM,CAACE,UAAU,EAAEC,aAAa,CAAC,GAAGH,YAAY;MAChD,IAAI,CAAC,IAAI,CAAChV,SAAS,CAACkV,UAAU,CAAC,EAAE;QAC/B,OAAO,KAAK;MACd;MACA,MAAME,aAAa,GAAG,IAAI,CAACH,OAAO,CAACtsB,GAAG,CAACusB,UAAU,CAAC;MAClD,KAAK,MAAMpsB,GAAG,IAAIQ,MAAM,CAACd,IAAI,CAC3B2sB,aAAa,CACd,EAAoC;QACnC,IAAI,cAAa,IAAbC,6BAAa,CAAGtsB,GAAG,CAAC,MAAKqsB,aAAa,CAACrsB,GAAG,CAAC,EAAE;UAC/C,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb;EACF;EAEAsU,eAAe,CAGbiY,MAAkB,EAAE7jB,IAAgB,EAAE;IAAA;IACtC,OAAQ,yBAAI,CAACyjB,OAAO,CAACtsB,GAAG,CAAC0sB,MAAM,CAAC,qBAAzBC,iBACL9jB,KAAI,CACL;EACH;AACF;AC1BA,SAAS+jB,mBAAmB,CAACjc,IAAkB,EAAEkc,QAAwB,EAAE;EACzE,IAAIlc,IAAI,CAACmc,gBAAgB,KAAKC,SAAS,EAAE;IACvCpc,IAAI,CAACmc,gBAAgB,GAAGD,QAAQ;EAClC,CAAC,MAAM;IACLlc,IAAI,CAACmc,gBAAgB,CAACE,OAAO,CAAC,GAAGH,QAAQ,CAAC;EAC5C;AACF;AAOA,SAASI,kBAAkB,CAACtc,IAAkB,EAAEkc,QAAwB,EAAE;EACxE,IAAIlc,IAAI,CAACuc,eAAe,KAAKH,SAAS,EAAE;IACtCpc,IAAI,CAACuc,eAAe,GAAGL,QAAQ;EACjC,CAAC,MAAM;IACLlc,IAAI,CAACuc,eAAe,CAACF,OAAO,CAAC,GAAGH,QAAQ,CAAC;EAC3C;AACF;AAOO,SAASM,gBAAgB,CAC9Bxc,IAAkB,EAClBkc,QAAyB,EACzB;EACA,IAAIlc,IAAI,CAACyc,aAAa,KAAKL,SAAS,EAAE;IACpCpc,IAAI,CAACyc,aAAa,GAAGP,QAAQ;EAC/B,CAAC,MAAM;IACLlc,IAAI,CAACyc,aAAa,CAACJ,OAAO,CAAC,GAAGH,QAAQ,CAAC;EACzC;AACF;AAOA,SAASQ,mBAAmB,CAC1B1c,IAAkB,EAClB2c,QAAqB,EACrBC,SAA4B,EAC5B;EACA,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIjtB,CAAC,GAAG+sB,QAAQ,CAACvtB,MAAM;EACvB,OAAOytB,WAAW,KAAK,IAAI,IAAIjtB,CAAC,GAAG,CAAC,EAAE;IACpCitB,WAAW,GAAGF,QAAQ,CAAC,EAAE/sB,CAAC,CAAC;EAC7B;EACA,IAAIitB,WAAW,KAAK,IAAI,IAAIA,WAAW,CAACtuB,KAAK,GAAGquB,SAAS,CAACruB,KAAK,EAAE;IAC/DiuB,gBAAgB,CAACxc,IAAI,EAAE4c,SAAS,CAACV,QAAQ,CAAC;EAC5C,CAAC,MAAM;IACLD,mBAAmB,CAACY,WAAW,EAAED,SAAS,CAACV,QAAQ,CAAC;EACtD;AACF;AAEe,MAAMY,cAAc,SAASvB,UAAU,CAAC;EACrDwB,UAAU,CAACC,OAAgB,EAAQ;IACjC,IAAI,IAAI,CAACvuB,QAAQ,EAAEuuB,OAAO,CAACte,GAAG,CAACjQ,QAAQ,GAAG,IAAI,CAACA,QAAQ;IACvD,IAAI,CAACuY,KAAK,CAACkV,QAAQ,CAACtY,IAAI,CAACoZ,OAAO,CAAC;EACnC;EAMAC,cAAc,CAACjd,IAAU,EAAQ;IAC/B,MAAM;MAAEkd;KAAc,GAAG,IAAI,CAAClW,KAAK;IACnC,MAAMmW,kBAAkB,GAAGD,YAAY,CAAC9tB,MAAM;IAC9C,IAAI+tB,kBAAkB,KAAK,CAAC,EAAE;IAC9B,IAAIvtB,CAAC,GAAGutB,kBAAkB,GAAG,CAAC;IAC9B,MAAMC,aAAa,GAAGF,YAAY,CAACttB,CAAC,CAAC;IAErC,IAAIwtB,aAAa,CAAC7uB,KAAK,KAAKyR,IAAI,CAACxR,GAAG,EAAE;MACpC4uB,aAAa,CAACC,WAAW,GAAGrd,IAAI;MAChCpQ,CAAC,EAAE;IACL;IAEA,MAAM;MAAErB,KAAK,EAAE+uB;IAAU,CAAC,GAAGtd,IAAI;IAEjC,OAAOpQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClB,MAAMgtB,SAAS,GAAGM,YAAY,CAACttB,CAAC,CAAC;MACjC,MAAM2tB,UAAU,GAAGX,SAAS,CAACpuB,GAAG;MAChC,IAAI+uB,UAAU,GAAGD,SAAS,EAAE;QAO1BV,SAAS,CAACY,cAAc,GAAGxd,IAAI;QAC/B,IAAI,CAACyd,eAAe,CAACb,SAAS,CAAC;QAC/BM,YAAY,CAACQ,MAAM,CAAC9tB,CAAC,EAAE,CAAC,CAAC;MAC3B,CAAC,MAAM;QACL,IAAI2tB,UAAU,KAAKD,SAAS,EAAE;UAC5BV,SAAS,CAACe,YAAY,GAAG3d,IAAI;QAC/B;QAEA;MACF;IACF;EACF;EAMAyd,eAAe,CAACb,SAA4B,EAAE;IAC5C,MAAM;MAAEV;IAAS,CAAC,GAAGU,SAAS;IAC9B,IAAIA,SAAS,CAACS,WAAW,KAAK,IAAI,IAAIT,SAAS,CAACe,YAAY,KAAK,IAAI,EAAE;MACrE,IAAIf,SAAS,CAACS,WAAW,KAAK,IAAI,EAAE;QAClCpB,mBAAmB,CAACW,SAAS,CAACS,WAAW,EAAEnB,QAAQ,CAAC;MACtD;MACA,IAAIU,SAAS,CAACe,YAAY,KAAK,IAAI,EAAE;QACnCrB,kBAAkB,CAACM,SAAS,CAACe,YAAY,EAAEzB,QAAQ,CAAC;MACtD;IACF,CAAC,MAAM;MAEL,MAAM;QAAEsB,cAAc,EAAExd,IAAI;QAAEzR,KAAK,EAAEqvB;MAAa,CAAC,GAAGhB,SAAS;MAC/D,IAAI,IAAI,CAACiB,KAAK,CAACC,UAAU,CAACF,YAAY,GAAG,CAAC,CAAC,OAAoB,EAAE;QAI/D,QAAQ5d,IAAI,CAAC1N,IAAI;UACf,KAAK,kBAAkB;UACvB,KAAK,eAAe;UACpB,KAAK,kBAAkB;YACrBoqB,mBAAmB,CAAC1c,IAAI,EAAEA,IAAI,CAAClQ,UAAU,EAAE8sB,SAAS,CAAC;YACrD;UACF,KAAK,gBAAgB;UACrB,KAAK,wBAAwB;YAC3BF,mBAAmB,CAAC1c,IAAI,EAAEA,IAAI,CAACyG,SAAS,EAAEmW,SAAS,CAAC;YACpD;UACF,KAAK,qBAAqB;UAC1B,KAAK,oBAAoB;UACzB,KAAK,yBAAyB;UAC9B,KAAK,cAAc;UACnB,KAAK,aAAa;UAClB,KAAK,oBAAoB;YACvBF,mBAAmB,CAAC1c,IAAI,EAAEA,IAAI,CAACwC,MAAM,EAAEoa,SAAS,CAAC;YACjD;UACF,KAAK,iBAAiB;UACtB,KAAK,cAAc;UACnB,KAAK,iBAAiB;YACpBF,mBAAmB,CAAC1c,IAAI,EAAEA,IAAI,CAAC2c,QAAQ,EAAEC,SAAS,CAAC;YACnD;UACF,KAAK,wBAAwB;UAC7B,KAAK,mBAAmB;YACtBF,mBAAmB,CAAC1c,IAAI,EAAEA,IAAI,CAACmH,UAAU,EAAEyV,SAAS,CAAC;YACrD;UACF;YAAS;cACPJ,gBAAgB,CAACxc,IAAI,EAAEkc,QAAQ,CAAC;YAClC;QAAA;MAEJ,CAAC,MAAM;QACLM,gBAAgB,CAACxc,IAAI,EAAEkc,QAAQ,CAAC;MAClC;IACF;EACF;EAQA6B,yBAAyB,GAAG;IAC1B,MAAM;MAAEb;KAAc,GAAG,IAAI,CAAClW,KAAK;IACnC,KAAK,IAAIpX,CAAC,GAAGstB,YAAY,CAAC9tB,MAAM,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjD,IAAI,CAAC6tB,eAAe,CAACP,YAAY,CAACttB,CAAC,CAAC,CAAC;IACvC;IACA,IAAI,CAACoX,KAAK,CAACkW,YAAY,GAAG,EAAE;EAC9B;EAqBAc,iCAAiC,CAAChe,IAAU,EAAE;IAC5C,MAAM;MAAEkd;KAAc,GAAG,IAAI,CAAClW,KAAK;IACnC,MAAM;MAAE5X;IAAO,CAAC,GAAG8tB,YAAY;IAC/B,IAAI9tB,MAAM,KAAK,CAAC,EAAE;IAClB,MAAMwtB,SAAS,GAAGM,YAAY,CAAC9tB,MAAM,GAAG,CAAC,CAAC;IAC1C,IAAIwtB,SAAS,CAACS,WAAW,KAAKrd,IAAI,EAAE;MAClC4c,SAAS,CAACS,WAAW,GAAG,IAAI;IAC9B;EACF;EASAY,uBAAuB,CAACje,IAAU,EAAEzR,KAAa,EAAEC,GAAW,EAAE;IAC9D,MAAM;MAAE0uB;KAAc,GAAG,IAAI,CAAClW,KAAK;IACnC,MAAMmW,kBAAkB,GAAGD,YAAY,CAAC9tB,MAAM;IAC9C,IAAI+tB,kBAAkB,KAAK,CAAC,EAAE;IAC9B,IAAIvtB,CAAC,GAAGutB,kBAAkB,GAAG,CAAC;IAE9B,OAAOvtB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAClB,MAAMgtB,SAAS,GAAGM,YAAY,CAACttB,CAAC,CAAC;MACjC,MAAM2tB,UAAU,GAAGX,SAAS,CAACpuB,GAAG;MAChC,MAAMovB,YAAY,GAAGhB,SAAS,CAACruB,KAAK;MAEpC,IAAIqvB,YAAY,KAAKpvB,GAAG,EAAE;QACxBouB,SAAS,CAACS,WAAW,GAAGrd,IAAI;MAC9B,CAAC,MAAM,IAAIud,UAAU,KAAKhvB,KAAK,EAAE;QAC/BquB,SAAS,CAACe,YAAY,GAAG3d,IAAI;MAC/B,CAAC,MAAM,IAAIud,UAAU,GAAGhvB,KAAK,EAAE;QAC7B;MACF;IACF;EACF;AACF;AC/QO,MAAM2vB,SAAS,GAAG,wBAAwB;AAC1C,MAAMC,UAAU,GAAG,IAAIxd,MAAM,CAACud,SAAS,CAAC1X,MAAM,EAAE,GAAG,CAAC;AAGpD,SAAS4X,SAAS,CAACxtB,IAAY,EAAW;EAC/C,QAAQA,IAAI;IACV;IACA;IACA;IACA;MACE,OAAO,IAAI;IAEb;MACE,OAAO,KAAK;EAAA;AAElB;AAEO,MAAMytB,cAAc,GAAG,+BAA+B;AAEtD,MAAMC,oBAAoB,GAC/B,gDAAgD;AAM3C,MAAMC,yBAAyB,GAAG,IAAI5d,MAAM,CAIjD,MAAM,GAGJ2d,oBAAoB,CAAC9X,MAAM,GAC3B,OAAO,GAGP,0CAA0C,CAACA,MAAM,EACnD,GAAG,CACJ;AAGM,SAASgY,YAAY,CAAC5tB,IAAY,EAAW;EAClD,QAAQA,IAAI;IACV,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX;IACA;IACA;IACA,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,MAAM;MACT,OAAO,IAAI;IAEb;MACE,OAAO,KAAK;EAAA;AAElB;AChDe,MAAM6tB,KAAK,CAAC;EAAAxwB;IAAA,KACzBinB,MAAM;IAAA,KACNwJ,OAAO;IAAA,KACPC,SAAS;IAAA,KAITtZ,QAAQ;IAAA,KACR8C,MAAM;IAAA,IAeNyW,OAAM,GAAsB,EAAE;IAAA,IAG9BC,iBAAgB,GAAW,CAAC,CAAC;IAAA,IAM7BC,UAAS,GAAa,EAAE;IAAA,IAQxBC,0BAAyB,GAAa,EAAE;IAAA,IAGxCC,uBAAsB,GAAY,KAAK;IAAA,IACvCC,OAAM,GAAY,KAAK;IAAA,IACvBC,mBAAkB,GAAY,KAAK;IAAA,IACnCC,eAAc,GAAY,KAAK;IAAA,IAC/BC,iBAAgB,GAAY,KAAK;IAAA,IACjCC,gBAAe,GAAY,KAAK;IAAA,IAChCC,kCAAiC,GAAY,KAAK;IAAA,KAGlDC,YAAY,GAAsB;MAChCC,wBAAwB,EAAE,CAAC;MAC3BC,aAAa,EAAE;KAChB;IAAA,IAGDC,UAAS,GAAY,KAAK;IAAA,IAC1BC,2BAA0B,GAAY,KAAK;IAAA,IAG3CC,OAAM,GAID,EAAE;IAAA,IAGP1D,SAAQ,GAAqB,EAAE;IAAA,IAG/BgB,aAAY,GAA6B,EAAE;IAAA,IAG3Cpe,IAAG,GAAW,CAAC;IAAA,KAIfxM,IAAI;IAAA,IAGJ5C,MAAK,GAAQ,IAAI;IAAA,IAGjBnB,MAAK,GAAW,CAAC;IAAA,IACjBC,IAAG,GAAW,CAAC;IAAA,IAIf6Z,cAAa,GAAa,IAAI;IAAA,IAE9BpB,gBAAe,GAAa,IAAI;IAAA,IAChC4Y,aAAY,GAAW,CAAC;IAAA,KAIxB1L,OAAO,GAAsB,CAAC2L,KAAE,CAACrX,KAAK,CAAC;IAAA,IAEvCsX,mBAAkB,GAAY,IAAI;IAAA,IAKlCC,YAAW,GAAY,KAAK;IAAA,IAI5BC,8BAA6B,GAAoB,IAAI;IAAA,KAUrDC,YAAY,GAAiD,IAAIzW,GAAG,EAAE;IAAA,IAGtE0W,aAAY,GAAW,CAAC;EAAA;EA/GxBC,IAAI,SAAoE;IAAA,IAAnE;MAAEC,UAAU;MAAEC,UAAU;MAAEC,SAAS;MAAEC;IAAqB,CAAC;IAC9D,IAAI,CAACtL,MAAM,GACTmL,UAAU,KAAK,KAAK,GAChB,KAAK,GACLA,UAAU,KAAK,IAAI,GACnB,IAAI,GACJC,UAAU,KAAK,QAAQ;IAE7B,IAAI,CAAC5B,OAAO,GAAG6B,SAAS;IACxB,IAAI,CAAC5B,SAAS,GAAG,CAAC6B,WAAW;IAC7B,IAAI,CAACnb,QAAQ,GAAG,IAAI,CAAC8C,MAAM,GAAG,IAAIna,QAAQ,CAACuyB,SAAS,EAAEC,WAAW,EAAE,CAAC,CAAC;EACvE;EAsGAC,WAAW,GAAa;IACtB,OAAO,IAAIzyB,QAAQ,CAAC,IAAI,CAAC0wB,OAAO,EAAE,IAAI,CAAC5f,GAAG,GAAG,IAAI,CAAC6f,SAAS,EAAE,IAAI,CAAC7f,GAAG,CAAC;EACxE;EAEAF,KAAK,CAAC8hB,UAAoB,EAAS;IACjC,MAAM1Z,KAAK,GAAG,IAAIyX,KAAK,EAAE;IACzB,MAAMvvB,IAAI,GAAGc,MAAM,CAACd,IAAI,CAAC,IAAI,CAAoB;IACjD,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAER,MAAM,GAAGF,IAAI,CAACE,MAAM,EAAEQ,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACrD,MAAMJ,GAAG,GAAGN,IAAI,CAACU,CAAC,CAAC;MACnB,IAAI+wB,GAAG,GAAG,IAAI,CAACnxB,GAAG,CAAC;MAEnB,IAAI,CAACkxB,UAAU,IAAIxhB,KAAK,CAACC,OAAO,CAACwhB,GAAG,CAAC,EAAE;QACrCA,GAAG,GAAGA,GAAG,CAACC,KAAK,EAAE;MACnB;MAGA5Z,KAAK,CAACxX,GAAG,CAAC,GAAGmxB,GAAG;IAClB;IAEA,OAAO3Z,KAAK;EACd;AACF;eC1KA,SAAS6Z,OAAO,CAACjwB,IAAI,EAAE;EACrB,OAAOA,IAAI,MAAU,IAAIA,IAAI,IAAU;AACzC,CAAC;AAED,MAAMkwB,iCAAiC,GAAG;EACxCC,SAAS,EAAE,IAAItjB,GAAG,CAAS,kCAS1B,CAAC;EACFujB,GAAG,EAAE,IAAIvjB,GAAG,CAAS,CAKpB;AACH,CAAC;AAED,MAAMwjB,gCAAgC,GAAG;EAEvCC,GAAG,EAAGC,EAAU,IAAKA,EAAE,KAAqB,MAAIA,EAAE,KAAqB;EAGvEC,GAAG,EAAGD,EAAU,IAAKA,EAAE,IAAoB,MAAIA,EAAE,IAAoB;EAGrEE,GAAG,EAAGF,EAAU,IAAKA,EAAE,IAAoB,MAAIA,EAAE,IAAoB;EAGrEH,GAAG,EAAGG,EAAU,IACbA,EAAE,IAAoB,MAAIA,EAAE,IAAoB,MAChDA,EAAE,MAAwB,IAAIA,EAAE,MAAyB,IACzDA,EAAE,MAAwB,IAAIA,EAAE;AACrC,CAAC;AAUM,SAASG,kBAAkB,CAChChvB,IAAsC,EACtCurB,KAAa,EACb/e,GAAW,EACX6f,SAAiB,EACjBD,OAAe,EACfE,MAAmC,EACnC;EACA,MAAM2C,UAAU,GAAGziB,GAAG;EACtB,MAAM0iB,gBAAgB,GAAG7C,SAAS;EAClC,MAAM8C,cAAc,GAAG/C,OAAO;EAE9B,IAAIgD,GAAG,GAAG,EAAE;EACZ,IAAIC,eAAe,GAAG,IAAI;EAC1B,IAAIC,UAAU,GAAG9iB,GAAG;EACpB,MAAM;IAAE1P;EAAO,CAAC,GAAGyuB,KAAK;EACxB,SAAS;IACP,IAAI/e,GAAG,IAAI1P,MAAM,EAAE;MACjBwvB,MAAM,CAACiD,YAAY,CAACN,UAAU,EAAEC,gBAAgB,EAAEC,cAAc,CAAC;MACjEC,GAAG,IAAI7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE9iB,GAAG,CAAC;MACnC;IACF;IACA,MAAMqiB,EAAE,GAAGtD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IAChC,IAAIgjB,WAAW,CAACxvB,IAAI,EAAE6uB,EAAE,EAAEtD,KAAK,EAAE/e,GAAG,CAAC,EAAE;MACrC4iB,GAAG,IAAI7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE9iB,GAAG,CAAC;MACnC;IACF;IACA,IAAIqiB,EAAE,OAAwB,EAAE;MAC9BO,GAAG,IAAI7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE9iB,GAAG,CAAC;MACnC,MAAMijB,GAAG,GAAGC,eAAe,CACzBnE,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACPpsB,IAAI,KAAK,UAAU,EACnBssB,MAAM,CACP;MACD,IAAImD,GAAG,CAACZ,EAAE,KAAK,IAAI,IAAI,CAACQ,eAAe,EAAE;QACvCA,eAAe,GAAG;UAAE7iB,GAAG;UAAE6f,SAAS;UAAED;SAAS;MAC/C,CAAC,MAAM;QACLgD,GAAG,IAAIK,GAAG,CAACZ,EAAE;MACf;MACA,CAAC;QAAEriB,GAAG;QAAE6f,SAAS;QAAED;MAAQ,CAAC,GAAGqD,GAAG;MAClCH,UAAU,GAAG9iB,GAAG;IAClB,CAAC,MAAM,IACLqiB,EAAE,SAA4B,IAC9BA,EAAE,SAAiC,EACnC;MACA,EAAEriB,GAAG;MACL,EAAE4f,OAAO;MACTC,SAAS,GAAG7f,GAAG;IACjB,CAAC,MAAM,IAAIqiB,EAAE,OAAuB,IAAIA,EAAE,OAA6B,EAAE;MACvE,IAAI7uB,IAAI,KAAK,UAAU,EAAE;QACvBovB,GAAG,IAAI7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE9iB,GAAG,CAAC,GAAG,IAAI;QAC1C,EAAEA,GAAG;QACL,IACEqiB,EAAE,KAA6B,MAC/BtD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC,OAAuB,EAC5C;UACA,EAAEA,GAAG;QACP;QACA,EAAE4f,OAAO;QACTkD,UAAU,GAAGjD,SAAS,GAAG7f,GAAG;MAC9B,CAAC,MAAM;QACL8f,MAAM,CAACiD,YAAY,CAACN,UAAU,EAAEC,gBAAgB,EAAEC,cAAc,CAAC;MACnE;IACF,CAAC,MAAM;MACL,EAAE3iB,GAAG;IACP;EACF;EACA,OAAO;IACLA,GAAG;IACHmjB,GAAG,EAAEP,GAAG;IACRC,eAAe;IACfhD,SAAS;IACTD,OAAO;IAIPwD,eAAe,EAAE,CAAC,CAACP;GACpB;AACH;AAEA,SAASG,WAAW,CAClBxvB,IAAsC,EACtC6uB,EAAU,EACVtD,KAAa,EACb/e,GAAW,EACX;EACA,IAAIxM,IAAI,KAAK,UAAU,EAAE;IACvB,OACE6uB,EAAE,OAA0B,IAC3BA,EAAE,OAAyB,IAC1BtD,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAA8B;EAE7D;EACA,OACEqiB,EAAE,MAAM7uB,IAAI,KAAK,QAAQ,UAAiD,CAAC;AAE/E;AAOA,SAAS0vB,eAAe,CACtBnE,KAAa,EACb/e,GAAW,EACX6f,SAAiB,EACjBD,OAAe,EACfyD,UAAmB,EACnBvD,MAAgC,EAChC;EACA,MAAMwD,cAAc,GAAG,CAACD,UAAU;EAClCrjB,GAAG,EAAE;EAEL,MAAMijB,GAAG,GAAIZ,EAAiB,KAAM;IAAEriB,GAAG;IAAEqiB,EAAE;IAAExC,SAAS;IAAED;EAAQ,CAAC,CAAC;EAEpE,MAAMyC,EAAE,GAAGtD,KAAK,CAACC,UAAU,CAAChf,GAAG,EAAE,CAAC;EAClC,QAAQqiB,EAAE;IACR;MACE,OAAOY,GAAG,CAAC,IAAI,CAAC;IAClB;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB;MAA2B;QACzB,IAAInxB,IAAI;QACR,CAAC;UAAEA,IAAI;UAAEkO;QAAI,CAAC,GAAGujB,WAAW,CAC1BxE,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACP,CAAC,EACD,KAAK,EACL0D,cAAc,EACdxD,MAAM,CACP;QACD,OAAOmD,GAAG,CAACnxB,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG4B,MAAM,CAACuiB,YAAY,CAACnkB,IAAI,CAAC,CAAC;MAC9D;IACA;MAA2B;QACzB,IAAIA,IAAI;QACR,CAAC;UAAEA,IAAI;UAAEkO;QAAI,CAAC,GAAGwjB,aAAa,CAC5BzE,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACP0D,cAAc,EACdxD,MAAM,CACP;QACD,OAAOmD,GAAG,CAACnxB,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG4B,MAAM,CAAC+vB,aAAa,CAAC3xB,IAAI,CAAC,CAAC;MAC/D;IACA;MACE,OAAOmxB,GAAG,CAAC,IAAI,CAAC;IAClB;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB;MACE,OAAOA,GAAG,CAAC,QAAQ,CAAC;IACtB;MACE,OAAOA,GAAG,CAAC,IAAI,CAAC;IAClB;MACE,IAAIlE,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC,OAAuB,EAAE;QAChD,EAAEA,GAAG;MACP;IAEF;MACE6f,SAAS,GAAG7f,GAAG;MACf,EAAE4f,OAAO;IAEX;IACA;MACE,OAAOqD,GAAG,CAAC,EAAE,CAAC;IAChB;IACA;MACE,IAAII,UAAU,EAAE;QACd,OAAOJ,GAAG,CAAC,IAAI,CAAC;MAClB,CAAC,MAAM;QACLnD,MAAM,CAAC4D,mBAAmB,CAAC1jB,GAAG,GAAG,CAAC,EAAE6f,SAAS,EAAED,OAAO,CAAC;MACzD;IAEF;MACE,IAAIyC,EAAE,MAAoB,IAAIA,EAAE,MAAoB,EAAE;QACpD,MAAMsB,QAAQ,GAAG3jB,GAAG,GAAG,CAAC;QACxB,MAAM4jB,KAAK,GAAG7E,KAAK,CAAC+C,KAAK,CAAC6B,QAAQ,EAAE3jB,GAAG,GAAG,CAAC,CAAC,CAAC4jB,KAAK,CAAC,SAAS,CAAE;QAE9D,IAAIC,QAAQ,GAAGD,KAAK,CAAC,CAAC,CAAC;QAEvB,IAAIE,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,CAAC,CAAC;QACjC,IAAIC,KAAK,GAAG,GAAG,EAAE;UACfD,QAAQ,GAAGA,QAAQ,CAAC/B,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAChCgC,KAAK,GAAGC,QAAQ,CAACF,QAAQ,EAAE,CAAC,CAAC;QAC/B;QACA7jB,GAAG,IAAI6jB,QAAQ,CAACvzB,MAAM,GAAG,CAAC;QAC1B,MAAM4mB,IAAI,GAAG6H,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;QAClC,IACE6jB,QAAQ,KAAK,GAAG,IAChB3M,IAAI,KAAqB,MACzBA,IAAI,OAAqB,EACzB;UACA,IAAImM,UAAU,EAAE;YACd,OAAOJ,GAAG,CAAC,IAAI,CAAC;UAClB,CAAC,MAAM;YACLnD,MAAM,CAAC4D,mBAAmB,CAACC,QAAQ,EAAE9D,SAAS,EAAED,OAAO,CAAC;UAC1D;QACF;QAEA,OAAOqD,GAAG,CAACvvB,MAAM,CAACuiB,YAAY,CAAC6N,KAAK,CAAC,CAAC;MACxC;MAEA,OAAOb,GAAG,CAACvvB,MAAM,CAACuiB,YAAY,CAACoM,EAAE,CAAC,CAAC;EAAA;AAEzC;AAOA,SAASkB,WAAW,CAClBxE,KAAa,EACb/e,GAAW,EACX6f,SAAiB,EACjBD,OAAe,EACfoE,GAAW,EACXC,QAAiB,EACjBX,cAAuB,EACvBxD,MAA4B,EAC5B;EACA,MAAM2C,UAAU,GAAGziB,GAAG;EACtB,IAAIkkB,CAAC;EACL,CAAC;IAAEA,CAAC;IAAElkB;GAAK,GAAGmkB,OAAO,CACnBpF,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACP,EAAE,EACFoE,GAAG,EACHC,QAAQ,EACR,KAAK,EACLnE,MAAM,EACY,CAACwD,cAAc,CAClC;EACD,IAAIY,CAAC,KAAK,IAAI,EAAE;IACd,IAAIZ,cAAc,EAAE;MAClBxD,MAAM,CAACsE,qBAAqB,CAAC3B,UAAU,EAAE5C,SAAS,EAAED,OAAO,CAAC;IAC9D,CAAC,MAAM;MACL5f,GAAG,GAAGyiB,UAAU,GAAG,CAAC;IACtB;EACF;EACA,OAAO;IAAE3wB,IAAI,EAAEoyB,CAAC;IAAElkB;GAAK;AACzB;AAuBO,SAASmkB,OAAO,CACrBpF,KAAa,EACb/e,GAAW,EACX6f,SAAiB,EACjBD,OAAe,EACfpoB,KAAa,EACbwsB,GAAuB,EACvBC,QAAiB,EACjBI,iBAAmC,EACnCvE,MAAwB,EACxBwE,WAAoB,EACpB;EACA,MAAM70B,KAAK,GAAGuQ,GAAG;EACjB,MAAMukB,iBAAiB,GACrB/sB,KAAK,KAAK,EAAE,GACRwqB,iCAAiC,CAACE,GAAG,GACrCF,iCAAiC,CAACC,SAAS;EACjD,MAAMuC,gBAAgB,GACpBhtB,KAAK,KAAK,EAAE,GACR2qB,gCAAgC,CAACD,GAAG,GACpC1qB,KAAK,KAAK,EAAE,GACZ2qB,gCAAgC,CAACI,GAAG,GACpC/qB,KAAK,KAAK,CAAC,GACX2qB,gCAAgC,CAACG,GAAG,GACpCH,gCAAgC,CAACC,GAAG;EAE1C,IAAIqC,OAAO,GAAG,KAAK;EACnB,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAI5zB,CAAC,GAAG,CAAC,EAAEgR,CAAC,GAAGkiB,GAAG,IAAI,IAAI,GAAGW,QAAQ,GAAGX,GAAG,EAAElzB,CAAC,GAAGgR,CAAC,EAAE,EAAEhR,CAAC,EAAE;IAC5D,MAAMgB,IAAI,GAAGitB,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IAClC,IAAI6hB,GAAG;IAEP,IAAI/vB,IAAI,KAAyB,MAAIuyB,iBAAiB,KAAK,MAAM,EAAE;MACjE,MAAMO,IAAI,GAAG7F,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;MACtC,MAAMkX,IAAI,GAAG6H,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;MAEtC,IAAI,CAACqkB,iBAAiB,EAAE;QACtB,IAAIC,WAAW,EAAE,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAElkB;SAAK;QACxC8f,MAAM,CAAC+E,gCAAgC,CAAC7kB,GAAG,EAAE6f,SAAS,EAAED,OAAO,CAAC;MAClE,CAAC,MAAM,IACLkF,MAAM,CAACC,KAAK,CAAC7N,IAAI,CAAC,IAClB,CAACsN,gBAAgB,CAACtN,IAAI,CAAC,IACvBqN,iBAAiB,CAAC3N,GAAG,CAACgO,IAAI,CAAC,IAC3BL,iBAAiB,CAAC3N,GAAG,CAACM,IAAI,CAAC,EAC3B;QACA,IAAIoN,WAAW,EAAE,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAElkB;SAAK;QACxC8f,MAAM,CAACkF,0BAA0B,CAAChlB,GAAG,EAAE6f,SAAS,EAAED,OAAO,CAAC;MAC5D;MAGA,EAAE5f,GAAG;MACL;IACF;IAEA,IAAIlO,IAAI,MAAwB,EAAE;MAChC+vB,GAAG,GAAG/vB,IAAI,KAAuB,GAAqB;IACxD,CAAC,MAAM,IAAIA,IAAI,MAAwB,EAAE;MACvC+vB,GAAG,GAAG/vB,IAAI,KAAuB,GAAqB;IACxD,CAAC,MAAM,IAAImzB,QAAkBnzB,KAAI,CAAC,EAAE;MAClC+vB,GAAG,GAAG/vB,IAAI,GAAmB;IAC/B,CAAC,MAAM;MACL+vB,GAAG,GAAG8C,QAAQ;IAChB;IACA,IAAI9C,GAAG,IAAIrqB,KAAK,EAAE;MAGhB,IAAIqqB,GAAG,IAAI,CAAC,IAAIyC,WAAW,EAAE;QAC3B,OAAO;UAAEJ,CAAC,EAAE,IAAI;UAAElkB;SAAK;MACzB,CAAC,MAAM,IACL6hB,GAAG,IAAI,CAAC,IACR/B,MAAM,CAACoF,YAAY,CAACllB,GAAG,EAAE6f,SAAS,EAAED,OAAO,EAAEpoB,KAAK,CAAC,EACnD;QACAqqB,GAAG,GAAG,CAAC;OACR,MAAM,IAAIoC,QAAQ,EAAE;QACnBpC,GAAG,GAAG,CAAC;QACP4C,OAAO,GAAG,IAAI;MAChB,CAAC,MAAM;QACL;MACF;IACF;IACA,EAAEzkB,GAAG;IACL0kB,KAAK,GAAGA,KAAK,GAAGltB,KAAK,GAAGqqB,GAAG;EAC7B;EACA,IAAI7hB,GAAG,KAAKvQ,KAAK,IAAKu0B,GAAG,IAAI,IAAI,IAAIhkB,GAAG,GAAGvQ,KAAK,KAAKu0B,GAAI,IAAIS,OAAO,EAAE;IACpE,OAAO;MAAEP,CAAC,EAAE,IAAI;MAAElkB;KAAK;EACzB;EAEA,OAAO;IAAEkkB,CAAC,EAAEQ,KAAK;IAAE1kB;GAAK;AAC1B;AAMO,SAASwjB,aAAa,CAC3BzE,KAAa,EACb/e,GAAW,EACX6f,SAAiB,EACjBD,OAAe,EACf0D,cAAuB,EACvBxD,MAA8B,EAC9B;EACA,MAAMuC,EAAE,GAAGtD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;EAChC,IAAIlO,IAAI;EAER,IAAIuwB,EAAE,QAA6B,EAAE;IACnC,EAAEriB,GAAG;IACL,CAAC;MAAElO,IAAI;MAAEkO;KAAK,GAAGujB,WAAW,CAC1BxE,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACPb,KAAK,CAACoG,OAAO,CAAC,GAAG,EAAEnlB,GAAG,CAAC,GAAGA,GAAG,EAC7B,IAAI,EACJsjB,cAAc,EACdxD,MAAM,CACP;IACD,EAAE9f,GAAG;IACL,IAAIlO,IAAI,KAAK,IAAI,IAAIA,IAAI,GAAG,QAAQ,EAAE;MACpC,IAAIwxB,cAAc,EAAE;QAClBxD,MAAM,CAACsF,gBAAgB,CAACplB,GAAG,EAAE6f,SAAS,EAAED,OAAO,CAAC;MAClD,CAAC,MAAM;QACL,OAAO;UAAE9tB,IAAI,EAAE,IAAI;UAAEkO;SAAK;MAC5B;IACF;EACF,CAAC,MAAM;IACL,CAAC;MAAElO,IAAI;MAAEkO;IAAI,CAAC,GAAGujB,WAAW,CAC1BxE,KAAK,EACL/e,GAAG,EACH6f,SAAS,EACTD,OAAO,EACP,CAAC,EACD,KAAK,EACL0D,cAAc,EACdxD,MAAM,CACP;EACH;EACA,OAAO;IAAEhuB,IAAI;IAAEkO;GAAK;AACtB;;;AC7ZA,SAASqlB,aAAa,CAACrlB,GAAW,EAAE6f,SAAiB,EAAED,OAAe,EAAE;EACtE,OAAO,IAAI1wB,QAAQ,CAAC0wB,OAAO,EAAE5f,GAAG,GAAG6f,SAAS,EAAE7f,GAAG,CAAC;AACpD;AAEA,MAAMslB,iBAAiB,GAAG,IAAI3mB,GAAG,CAAC,wCAUjC,CAAC;AAMK,MAAM4mB,KAAK,CAAC;EACjBp2B,WAAW,CAAC+Y,KAAY,EAAE;IACxB,IAAI,CAAC1U,IAAI,GAAG0U,KAAK,CAAC1U,IAAI;IACtB,IAAI,CAAC5C,KAAK,GAAGsX,KAAK,CAACtX,KAAK;IACxB,IAAI,CAACnB,KAAK,GAAGyY,KAAK,CAACzY,KAAK;IACxB,IAAI,CAACC,GAAG,GAAGwY,KAAK,CAACxY,GAAG;IACpB,IAAI,CAACkQ,GAAG,GAAG,IAAIpQ,cAAc,CAAC0Y,KAAK,CAAC3B,QAAQ,EAAE2B,KAAK,CAACmB,MAAM,CAAC;EAC7D;AAOF;AAIe,MAAemc,SAAS,SAASxH,cAAc,CAAC;EAM7D7uB,WAAW,CAACoS,OAAgB,EAAEwd,KAAa,EAAE;IAC3C,KAAK,EAAE;IAAC,KANV0G,WAAW;IAAA,IAGXjkB,OAAM,GAA6B,EAAE;IAAA,KAk6CrCkkB,qBAAqB,GAAqB;MACxCR,YAAY,EAAE,CAACllB,GAAG,EAAE6f,SAAS,EAAED,OAAO,EAAEpoB,KAAK,KAAK;QAChD,IAAI,CAAC,IAAI,CAAC+J,OAAO,CAACokB,aAAa,EAAE,OAAO,KAAK;QAE7C,IAAI,CAACve,KAAK,CAACzG,MAAM,CAACpJ,YAAY,EAAE;UAC9B8P,EAAE,EAAEge,aAAa,CAACrlB,GAAG,EAAE6f,SAAS,EAAED,OAAO,CAAC;UAC1CpoB;QACF,CAAC,CAAC;QAEF,OAAO,IAAI;OACZ;MACDqtB,gCAAgC,EAAE,IAAI,CAACe,YAAY,CACjDjlB,MAAM,CAACrG,gCAAgC,CACxC;MACD0qB,0BAA0B,EAAE,IAAI,CAACY,YAAY,CAC3CjlB,MAAM,CAACrE,0BAA0B;KAEpC;IAAA,KAEDupB,2BAA2B,qBACtB,IAAI,CAACH,qBAAqB;MAC7BtB,qBAAqB,EAAE,IAAI,CAACwB,YAAY,CAACjlB,MAAM,CAAClJ,qBAAqB,CAAC;MACtE2tB,gBAAgB,EAAE,IAAI,CAACQ,YAAY,CAACjlB,MAAM,CAACvJ,gBAAgB;IAAC;IAAA,KAG9D0uB,uCAAuC,qBAClC,IAAI,CAACD,2BAA2B;MACnCnC,mBAAmB,EAAE,CAAC1jB,GAAG,EAAE6f,SAAS,EAAED,OAAO,KAAK;QAChD,IAAI,CAACmG,sBAAsB,CAACplB,MAAM,CAACpC,mBAAmB,EAAE;UACtD8I,EAAE,EAAEge,aAAa,CAACrlB,GAAG,EAAE6f,SAAS,EAAED,OAAO;QAC3C,CAAC,CAAC;OACH;MACDmD,YAAY,EAAE,CAAC/iB,GAAG,EAAE6f,SAAS,EAAED,OAAO,KAAK;QACzC,MAAM,IAAI,CAACxY,KAAK,CAACzG,MAAM,CAACjD,kBAAkB,EAAE;UAE1C2J,EAAE,EAAEge,aAAa,CAACrlB,GAAG,GAAG,CAAC,EAAE6f,SAAS,EAAED,OAAO;QAC/C,CAAC,CAAC;MACJ;IAAC;IAAA,KAGHoG,yCAAyC,qBACpC,IAAI,CAACH,2BAA2B;MACnCnC,mBAAmB,EAAE,IAAI,CAACkC,YAAY,CAACjlB,MAAM,CAACpC,mBAAmB,CAAC;MAClEwkB,YAAY,EAAE,CAAC/iB,GAAG,EAAE6f,SAAS,EAAED,OAAO,KAAK;QACzC,MAAM,IAAI,CAACxY,KAAK,CAACzG,MAAM,CAAChD,oBAAoB,EAAE;UAC5C0J,EAAE,EAAEge,aAAa,CAACrlB,GAAG,EAAE6f,SAAS,EAAED,OAAO;QAC3C,CAAC,CAAC;MACJ;IAAC;IA78CD,IAAI,CAAC1X,KAAK,GAAG,IAAIyX,KAAK,EAAE;IACxB,IAAI,CAACzX,KAAK,CAACoZ,IAAI,CAAC/f,OAAO,CAAC;IACxB,IAAI,CAACwd,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACzuB,MAAM,GAAGyuB,KAAK,CAACzuB,MAAM;IAC1B,IAAI,CAACm1B,WAAW,GAAG,KAAK;EAC1B;EAEAQ,SAAS,CAACjnB,KAAwB,EAAE;IAGlC,IAAI,CAACwC,MAAM,CAAClR,MAAM,GAAG,IAAI,CAAC4X,KAAK,CAACmZ,YAAY;IAC5C,IAAI,CAAC7f,MAAM,CAACsD,IAAI,CAAC9F,KAAK,CAAC;IACvB,EAAE,IAAI,CAACkJ,KAAK,CAACmZ,YAAY;EAC3B;EAIAnK,IAAI,GAAS;IACX,IAAI,CAACgP,mBAAmB,EAAE;IAC1B,IAAI,IAAI,CAAC3kB,OAAO,CAACC,MAAM,EAAE;MACvB,IAAI,CAACykB,SAAS,CAAC,IAAIV,KAAK,CAAC,IAAI,CAACrd,KAAK,CAAC,CAAC;IACvC;IAEA,IAAI,CAACA,KAAK,CAAC6Y,YAAY,GAAG,IAAI,CAAC7Y,KAAK,CAACzY,KAAK;IAC1C,IAAI,CAACyY,KAAK,CAACqB,aAAa,GAAG,IAAI,CAACrB,KAAK,CAACmB,MAAM;IAC5C,IAAI,CAACnB,KAAK,CAACC,eAAe,GAAG,IAAI,CAACD,KAAK,CAAC3B,QAAQ;IAChD,IAAI,CAAC4f,SAAS,EAAE;EAClB;EAEAC,GAAG,CAAC5yB,IAAe,EAAW;IAC5B,IAAI,IAAI,CAACowB,KAAK,CAACpwB,IAAI,CAAC,EAAE;MACpB,IAAI,CAAC0jB,IAAI,EAAE;MACX,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAKA0M,KAAK,CAACpwB,IAAe,EAAW;IAC9B,OAAO,IAAI,CAAC0U,KAAK,CAAC1U,IAAI,KAAKA,IAAI;EACjC;EAKA6yB,oBAAoB,CAACne,KAAY,EAAkB;IACjD,OAAO;MACLlI,GAAG,EAAEkI,KAAK,CAAClI,GAAG;MACdpP,KAAK,EAAE,IAAI;MACX4C,IAAI,EAAE0U,KAAK,CAAC1U,IAAI;MAChB/D,KAAK,EAAEyY,KAAK,CAACzY,KAAK;MAClBC,GAAG,EAAEwY,KAAK,CAACxY,GAAG;MACd2lB,OAAO,EAAE,CAAC,IAAI,CAACiR,UAAU,EAAE,CAAC;MAC5BnG,MAAM,EAAEjY,KAAK,CAACiY,MAAM;MACpB5Z,QAAQ,EAAE2B,KAAK,CAAC3B,QAAQ;MACxBgD,aAAa,EAAErB,KAAK,CAACqB,aAAa;MAClCqW,OAAO,EAAE1X,KAAK,CAAC0X,OAAO;MACtBC,SAAS,EAAE3X,KAAK,CAAC2X,SAAS;MAC1B8B,WAAW,EAAEzZ,KAAK,CAACyZ;KACpB;EACH;EAeA4E,SAAS,GAAmB;IAC1B,MAAMC,GAAG,GAAG,IAAI,CAACte,KAAK;IAEtB,IAAI,CAACA,KAAK,GAAG,IAAI,CAACme,oBAAoB,CAACG,GAAG,CAAC;IAE3C,IAAI,CAACf,WAAW,GAAG,IAAI;IACvB,IAAI,CAACU,SAAS,EAAE;IAChB,IAAI,CAACV,WAAW,GAAG,KAAK;IAExB,MAAMgB,IAAI,GAAG,IAAI,CAACve,KAAK;IACvB,IAAI,CAACA,KAAK,GAAGse,GAAG;IAChB,OAAOC,IAAI;EACb;EAEAC,cAAc,GAAW;IACvB,OAAO,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAACze,KAAK,CAAClI,GAAG,CAAC;EACjD;EAEA2mB,mBAAmB,CAAC3mB,GAAW,EAAU;IACvCuf,cAAc,CAACqH,SAAS,GAAG5mB,GAAG;IAC9B,OAAOuf,cAAc,CAACvJ,IAAI,CAAC,IAAI,CAAC+I,KAAK,CAAC,GAAGQ,cAAc,CAACqH,SAAS,GAAG5mB,GAAG;EACzE;EAEA6mB,iBAAiB,GAAW;IAC1B,OAAO,IAAI,CAAC9H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC0H,cAAc,EAAE,CAAC;EACrD;EAEAI,cAAc,CAAC9mB,GAAW,EAAU;IAKlC,IAAI+mB,EAAE,GAAG,IAAI,CAAChI,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;IACnC,IAAI,CAAC+mB,EAAE,GAAG,MAAM,MAAM,MAAM,IAAI,EAAE/mB,GAAG,GAAG,IAAI,CAAC+e,KAAK,CAACzuB,MAAM,EAAE;MACzD,MAAM02B,KAAK,GAAG,IAAI,CAACjI,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;MACxC,IAAI,CAACgnB,KAAK,GAAG,MAAM,MAAM,MAAM,EAAE;QAC/BD,EAAE,GAAG,OAAO,IAAI,CAACA,EAAE,GAAG,KAAK,KAAK,EAAE,CAAC,IAAIC,KAAK,GAAG,KAAK,CAAC;MACvD;IACF;IACA,OAAOD,EAAE;EACX;EAKAE,SAAS,CAAC7Q,MAAe,EAAQ;IAC/B,IAAI,CAAClO,KAAK,CAACkO,MAAM,GAAGA,MAAM;IAC1B,IAAIA,MAAM,EAAE;MAKV,IAAI,CAAClO,KAAK,CAACkZ,YAAY,CAAC8F,OAAO,CAAC;QAAA,IAAC,CAACC,YAAY,EAAE9f,EAAE,CAAC;QAAA,OACjD,IAAI,CAACD,KAAK,CAAC+f,YAAY,EAAE;UAAE9f;QAAG,CAAC,CAAC;MAAA,EACjC;MACD,IAAI,CAACa,KAAK,CAACkZ,YAAY,CAACgG,KAAK,EAAE;IACjC;EACF;EAEAd,UAAU,GAAe;IACvB,OAAO,IAAI,CAACpe,KAAK,CAACmN,OAAO,CAAC,IAAI,CAACnN,KAAK,CAACmN,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC;EAC1D;EAKA61B,SAAS,GAAS;IAChB,IAAI,CAACkB,SAAS,EAAE;IAChB,IAAI,CAACnf,KAAK,CAACzY,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IACjC,IAAI,CAAC,IAAI,CAACylB,WAAW,EAAE,IAAI,CAACvd,KAAK,CAAC3B,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;IACrE,IAAI,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,IAAI,CAAC1P,MAAM,EAAE;MACjC,IAAI,CAACg3B,WAAW,CAAQ;MACxB;IACF;IAEA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAACT,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,CAAC;EAC5D;EAKAwnB,gBAAgB,CAAC/I,UAAwB,EAA8B;IACrE,IAAIlY,QAAQ;IACZ,IAAI,CAAC,IAAI,CAACkf,WAAW,EAAElf,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;IAC1D,MAAMlyB,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,MAAMtQ,GAAG,GAAG,IAAI,CAACqvB,KAAK,CAACoG,OAAO,CAAC1G,UAAU,EAAEhvB,KAAK,GAAG,CAAC,CAAC;IACrD,IAAIC,GAAG,KAAK,CAAC,CAAC,EAAE;MAId,MAAM,IAAI,CAAC0X,KAAK,CAACzG,MAAM,CAACnD,mBAAmB,EAAE;QAC3C6J,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IAEA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,GAAGtQ,GAAG,GAAG+uB,UAAU,CAACnuB,MAAM;IACxC+uB,UAAU,CAACuH,SAAS,GAAGn3B,KAAK,GAAG,CAAC;IAChC,OAAO4vB,UAAU,CAACrJ,IAAI,CAAC,IAAI,CAAC+I,KAAK,CAAC,IAAIM,UAAU,CAACuH,SAAS,IAAIl3B,GAAG,EAAE;MACjE,EAAE,IAAI,CAACwY,KAAK,CAAC0X,OAAO;MACpB,IAAI,CAAC1X,KAAK,CAAC2X,SAAS,GAAGR,UAAU,CAACuH,SAAS;IAC7C;IAIA,IAAI,IAAI,CAACnB,WAAW,EAAE;IAGtB,MAAMvH,OAAuB,GAAG;MAC9B1qB,IAAI,EAAE,cAAc;MACpB5C,KAAK,EAAE,IAAI,CAACmuB,KAAK,CAAC+C,KAAK,CAACryB,KAAK,GAAG,CAAC,EAAEC,GAAG,CAAC;MACvCD,KAAK;MACLC,GAAG,EAAEA,GAAG,GAAG+uB,UAAU,CAACnuB,MAAM;MAC5BsP,GAAG,EAAE,IAAIpQ,cAAc,CAAC+W,QAAQ,EAAE,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;KAC3D;IACD,IAAI,IAAI,CAACpgB,OAAO,CAACC,MAAM,EAAE,IAAI,CAACykB,SAAS,CAAC/H,OAAO,CAAC;IAChD,OAAOA,OAAO;EAChB;EAEAuJ,eAAe,CAACC,SAAiB,EAA6B;IAC5D,MAAMj4B,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,IAAIuG,QAAQ;IACZ,IAAI,CAAC,IAAI,CAACkf,WAAW,EAAElf,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;IAC1D,IAAIU,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAE,IAAI,CAAC9W,KAAK,CAAClI,GAAG,IAAI0nB,SAAS,CAAE;IAC7D,IAAI,IAAI,CAACxf,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;MAChC,OAAO,CAACgvB,SAAS,CAAC+C,EAAE,CAAC,IAAI,EAAE,IAAI,CAACna,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;QACvD+xB,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;MAC5C;IACF;IAIA,IAAI,IAAI,CAACylB,WAAW,EAAE;IAGtB,MAAM/1B,GAAG,GAAG,IAAI,CAACwY,KAAK,CAAClI,GAAG;IAC1B,MAAMpP,KAAK,GAAG,IAAI,CAACmuB,KAAK,CAAC+C,KAAK,CAACryB,KAAK,GAAGi4B,SAAS,EAAEh4B,GAAG,CAAC;IAEtD,MAAMwuB,OAAsB,GAAG;MAC7B1qB,IAAI,EAAE,aAAa;MACnB5C,KAAK;MACLnB,KAAK;MACLC,GAAG;MACHkQ,GAAG,EAAE,IAAIpQ,cAAc,CAAC+W,QAAQ,EAAE,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;KAC3D;IACD,IAAI,IAAI,CAACpgB,OAAO,CAACC,MAAM,EAAE,IAAI,CAACykB,SAAS,CAAC/H,OAAO,CAAC;IAChD,OAAOA,OAAO;EAChB;EAKAmJ,SAAS,GAAS;IAChB,MAAMM,UAAU,GAAG,IAAI,CAACzf,KAAK,CAAClI,GAAG;IACjC,MAAMod,QAAQ,GAAG,EAAE;IACnBwK,IAAI,EAAE,OAAO,IAAI,CAAC1f,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;MACzC,MAAM+xB,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;MAChD,QAAQqiB,EAAE;QACR;QACA;QACA;UACE,EAAE,IAAI,CAACna,KAAK,CAAClI,GAAG;UAChB;QACF;UACE,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAAuB,EAChE;YACA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;UAClB;QAEF;QACA;QACA;UACE,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;UAChB,EAAE,IAAI,CAACkI,KAAK,CAAC0X,OAAO;UACpB,IAAI,CAAC1X,KAAK,CAAC2X,SAAS,GAAG,IAAI,CAAC3X,KAAK,CAAClI,GAAG;UACrC;QAEF;UACE,QAAQ,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;YAC/C;cAAyB;gBACvB,MAAMke,OAAO,GAAG,IAAI,CAACsJ,gBAAgB,CAAC,IAAI,CAAC;gBAC3C,IAAItJ,OAAO,KAAKZ,SAAS,EAAE;kBACzB,IAAI,CAACW,UAAU,CAACC,OAAO,CAAC;kBACxB,IAAI,IAAI,CAAC3c,OAAO,CAACsmB,aAAa,EAAEzK,QAAQ,CAACtY,IAAI,CAACoZ,OAAO,CAAC;gBACxD;gBACA;cACF;YAEA;cAAsB;gBACpB,MAAMA,OAAO,GAAG,IAAI,CAACuJ,eAAe,CAAC,CAAC,CAAC;gBACvC,IAAIvJ,OAAO,KAAKZ,SAAS,EAAE;kBACzB,IAAI,CAACW,UAAU,CAACC,OAAO,CAAC;kBACxB,IAAI,IAAI,CAAC3c,OAAO,CAACsmB,aAAa,EAAEzK,QAAQ,CAACtY,IAAI,CAACoZ,OAAO,CAAC;gBACxD;gBACA;cACF;YAEA;cACE,MAAM0J,IAAI;UAAA;UAEd;QAEF;UACE,IAAIlI,YAAY,CAAC2C,EAAE,CAAC,EAAE;YACpB,EAAE,IAAI,CAACna,KAAK,CAAClI,GAAG;WACjB,MAAM,IAAIqiB,EAAE,OAAmB,IAAI,CAAC,IAAI,CAAC3L,QAAQ,EAAE;YAClD,MAAM1W,GAAG,GAAG,IAAI,CAACkI,KAAK,CAAClI,GAAG;YAC1B,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAAmB,IACjD,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAA0B,KACvD2nB,UAAU,KAAK,CAAC,IAAI,IAAI,CAACzf,KAAK,CAAC2X,SAAS,GAAG8H,UAAU,CAAC,EACvD;cAEA,MAAMzJ,OAAO,GAAG,IAAI,CAACuJ,eAAe,CAAC,CAAC,CAAC;cACvC,IAAIvJ,OAAO,KAAKZ,SAAS,EAAE;gBACzB,IAAI,CAACW,UAAU,CAACC,OAAO,CAAC;gBACxB,IAAI,IAAI,CAAC3c,OAAO,CAACsmB,aAAa,EAAEzK,QAAQ,CAACtY,IAAI,CAACoZ,OAAO,CAAC;cACxD;YACF,CAAC,MAAM;cACL,MAAM0J,IAAI;YACZ;WACD,MAAM,IAAIvF,EAAE,OAAuB,IAAI,CAAC,IAAI,CAAC3L,QAAQ,EAAE;YACtD,MAAM1W,GAAG,GAAG,IAAI,CAACkI,KAAK,CAAClI,GAAG;YAC1B,IACE,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAA8B,MAC5D,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,KAAmB,MACjD,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAAmB,EACjD;cAEA,MAAMke,OAAO,GAAG,IAAI,CAACuJ,eAAe,CAAC,CAAC,CAAC;cACvC,IAAIvJ,OAAO,KAAKZ,SAAS,EAAE;gBACzB,IAAI,CAACW,UAAU,CAACC,OAAO,CAAC;gBACxB,IAAI,IAAI,CAAC3c,OAAO,CAACsmB,aAAa,EAAEzK,QAAQ,CAACtY,IAAI,CAACoZ,OAAO,CAAC;cACxD;YACF,CAAC,MAAM;cACL,MAAM0J,IAAI;YACZ;UACF,CAAC,MAAM;YACL,MAAMA,IAAI;UACZ;MAAA;IAEN;IAEA,IAAIxK,QAAQ,CAAC9sB,MAAM,GAAG,CAAC,EAAE;MACvB,MAAMZ,GAAG,GAAG,IAAI,CAACwY,KAAK,CAAClI,GAAG;MAC1B,MAAM8nB,iBAAoC,GAAG;QAC3Cr4B,KAAK,EAAEk4B,UAAU;QACjBj4B,GAAG;QACH0tB,QAAQ;QACRmB,WAAW,EAAE,IAAI;QACjBM,YAAY,EAAE,IAAI;QAClBH,cAAc,EAAE;OACjB;MACD,IAAI,CAACxW,KAAK,CAACkW,YAAY,CAACtZ,IAAI,CAACgjB,iBAAiB,CAAC;IACjD;EACF;EAOAR,WAAW,CAAC9zB,IAAe,EAAEquB,GAAS,EAAQ;IAC5C,IAAI,CAAC3Z,KAAK,CAACxY,GAAG,GAAG,IAAI,CAACwY,KAAK,CAAClI,GAAG;IAC/B,IAAI,CAACkI,KAAK,CAACmB,MAAM,GAAG,IAAI,CAACnB,KAAK,CAACyZ,WAAW,EAAE;IAC5C,MAAMoG,QAAQ,GAAG,IAAI,CAAC7f,KAAK,CAAC1U,IAAI;IAChC,IAAI,CAAC0U,KAAK,CAAC1U,IAAI,GAAGA,IAAI;IACtB,IAAI,CAAC0U,KAAK,CAACtX,KAAK,GAAGixB,GAAG;IAEtB,IAAI,CAAC,IAAI,CAAC4D,WAAW,EAAE;MACrB,IAAI,CAAChb,aAAa,CAACsd,QAAQ,CAAC;IAC9B;EACF;EAEAC,YAAY,CAACx0B,IAAe,EAAQ;IAClC,IAAI,CAAC0U,KAAK,CAAC1U,IAAI,GAAGA,IAAI;IAGtB,IAAI,CAACiX,aAAa,EAAE;EACtB;EAYAwd,oBAAoB,GAAS;IAC3B,IAAI,IAAI,CAAC/f,KAAK,CAAClI,GAAG,KAAK,CAAC,IAAI,IAAI,CAACkoB,qBAAqB,EAAE,EAAE;MACxD;IACF;IAEA,MAAMC,OAAO,GAAG,IAAI,CAACjgB,KAAK,CAAClI,GAAG,GAAG,CAAC;IAClC,MAAMkX,IAAI,GAAG,IAAI,CAAC4P,cAAc,CAACqB,OAAO,CAAC;IACzC,IAAIjR,IAAI,MAAoB,IAAIA,IAAI,MAAoB,EAAE;MACxD,MAAM,IAAI,CAAC9P,KAAK,CAACzG,MAAM,CAAC5E,wBAAwB,EAAE;QAChDsL,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IAEA,IACEzK,IAAI,QAA6B,IAChCA,IAAI,KAAgC,MAAI,IAAI,CAACtP,SAAS,CAAC,gBAAgB,CAAE,EAC1E;MAKA,IAAI,CAACwgB,YAAY,CAAC,gBAAgB,CAAC;MACnC,IAAI,IAAI,CAACpjB,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;QAClE,MAAM,IAAI,CAACoC,KAAK,CACd8P,IAAI,KAA6B,MAC7BvW,MAAM,CAACzF,4CAA4C,GACnDyF,MAAM,CAAC/E,2CAA2C,EACtD;UAAEyL,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;QAAG,CAAC,CACjC;MACH;MAEA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAIkX,IAAI,QAA6B,EAAE;QAErC,IAAI,CAACoQ,WAAW,CAAe;MACjC,CAAC,MAAM;QAEL,IAAI,CAACA,WAAW,CAAiB;MACnC;IACF,CAAC,MAAM,IAAIvR,iBAAiB,CAACmB,IAAI,CAAC,EAAE;MAClC,EAAE,IAAI,CAAChP,KAAK,CAAClI,GAAG;MAChB,IAAI,CAACsnB,WAAW,CAAiB,SAAI,CAACe,SAAS,CAACnR,IAAI,CAAC,CAAC;IACxD,CAAC,MAAM,IAAIA,IAAI,OAAwB,EAAE;MACvC,EAAE,IAAI,CAAChP,KAAK,CAAClI,GAAG;MAChB,IAAI,CAACsnB,WAAW,MAAiB,IAAI,CAACe,SAAS,EAAE,CAAC;IACpD,CAAC,MAAM;MACL,IAAI,CAACC,QAAQ,CAAU,KAAC,CAAC;IAC3B;EACF;EAEAC,aAAa,GAAS;IACpB,MAAMrR,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IAAIkX,IAAI,MAAoB,IAAIA,IAAI,MAAoB,EAAE;MACxD,IAAI,CAACsR,UAAU,CAAC,IAAI,CAAC;MACrB;IACF;IAEA,IACEtR,IAAI,KAAkB,MACtB,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAAkB,EAC3D;MACA,IAAI,CAACkI,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACsnB,WAAW,CAAa;IAC/B,CAAC,MAAM;MACL,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;MAChB,IAAI,CAACsnB,WAAW,CAAQ;IAC1B;EACF;EAEAmB,eAAe,GAAS;IACtB,MAAMvR,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IAAIkX,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAACoR,QAAQ,CAAiB,KAAC,CAAC;IAClC,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,CAAW,KAAC,CAAC;IAC5B;EACF;EAEAJ,qBAAqB,GAAY;IAC/B,IAAI,IAAI,CAAChgB,KAAK,CAAClI,GAAG,KAAK,CAAC,IAAI,IAAI,CAAC1P,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;IAEzD,IAAI+xB,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAClD,IAAIqiB,EAAE,OAA8B,EAAE,OAAO,KAAK;IAElD,MAAM5yB,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,IAAI,CAACkI,KAAK,CAAClI,GAAG,IAAI,CAAC;IAEnB,OAAO,CAACsf,SAAS,CAAC+C,EAAE,CAAC,IAAI,EAAE,IAAI,CAACna,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;MACvD+xB,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAC5C;IAEA,MAAMpP,KAAK,GAAG,IAAI,CAACmuB,KAAK,CAAC+C,KAAK,CAACryB,KAAK,GAAG,CAAC,EAAE,IAAI,CAACyY,KAAK,CAAClI,GAAG,CAAC;IAEzD,IAAI,CAACsnB,WAAW,CAA0B12B,SAAK,CAAC;IAEhD,OAAO,IAAI;EACb;EAEA83B,qBAAqB,CAAC52B,IAAY,EAAQ;IAExC,IAAI0B,IAAI,GAAG1B,IAAI,OAAuB,GAAsB;IAC5D,IAAI62B,KAAK,GAAG,CAAC;IACb,IAAIzR,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAGpD,IAAIlO,IAAI,OAAuB,IAAIolB,IAAI,OAAuB,EAAE;MAC9DyR,KAAK,EAAE;MACPzR,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;MAChDxM,IAAI,GAAc;IACpB;IAGA,IAAI0jB,IAAI,OAAuB,IAAI,CAAC,IAAI,CAAChP,KAAK,CAACiY,MAAM,EAAE;MACrDwI,KAAK,EAAE;MAIPn1B,IAAI,GAAG1B,IAAI,OAA0B,GAA8B;IACrE;IAEA,IAAI,CAACw2B,QAAQ,CAAC90B,IAAI,EAAEm1B,KAAK,CAAC;EAC5B;EAEAC,kBAAkB,CAAC92B,IAAY,EAAQ;IAErC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAEtD,IAAIkX,IAAI,KAAKplB,IAAI,EAAE;MACjB,IAAI,IAAI,CAACitB,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAAuB,EAAE;QACpE,IAAI,CAACsoB,QAAQ,CAAY,KAAC,CAAC;MAC7B,CAAC,MAAM;QACL,IAAI,CAACA,QAAQ,CACXx2B,IAAI,QAA0B,GAA+B,SAC7D,CAAC,CACF;MACH;MACA;IACF;IAEA,IAAIA,IAAI,QAA0B,EAAE;MAElC,IAAIolB,IAAI,OAA0B,EAAE;QAClC,IAAI,CAACoR,QAAQ,CAAc,KAAC,CAAC;QAC7B;MACF;MAEA,IACE,IAAI,CAAC1gB,SAAS,CAAC,gBAAgB,CAAC,IAChCsP,IAAI,QAA8B,EAClC;QACA,IAAI,IAAI,CAAClS,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;UAClE,MAAM,IAAI,CAACoC,KAAK,CAACzG,MAAM,CAAC3F,yCAAyC,EAAE;YACjEqM,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAC5B,CAAC,CAAC;QACJ;QACA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,CAAC;QACnB,IAAI,CAACsnB,WAAW,CAAc;QAC9B;MACF;MAGA,IACE,IAAI,CAAC1f,SAAS,CAAC,gBAAgB,CAAC,IAChCsP,IAAI,OAAiC,EACrC;QACA,IAAI,IAAI,CAAClS,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;UAClE,MAAM,IAAI,CAACoC,KAAK,CAACzG,MAAM,CAACjF,wCAAwC,EAAE;YAChE2L,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAC5B,CAAC,CAAC;QACJ;QACA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,CAAC;QACnB,IAAI,CAACsnB,WAAW,CAAgB;QAChC;MACF;IACF;IAEA,IAAIpQ,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAACoR,QAAQ,CAAY,KAAC,CAAC;MAC3B;IACF;IAEA,IAAI,CAACA,QAAQ,CACXx2B,IAAI,QAA0B,GAA+B,SAC7D,CAAC,CACF;EACH;EAEA+2B,eAAe,GAAS;IACtB,MAAM3R,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAGtD,IAAIkX,IAAI,OAAuB,IAAI,CAAC,IAAI,CAAChP,KAAK,CAACiY,MAAM,EAAE;MAIrD,IAAI,CAACmI,QAAQ,CAAe,KAAC,CAAC;KAC/B,MAEI,IACHpR,IAAI,KAAoB,MAGxB,IAAI,CAACtP,SAAS,CAAC,CACb,kBAAkB,EAClB;MAAEkhB,QAAQ,EAAE,MAAM;MAAEC,UAAU,EAAE;KAAM,CACvC,CAAC,EACF;MACA,IAAI,CAACT,QAAQ,CAAiB,KAAC,CAAC;MAGhC,MAAMU,WAAW,GAAG,IAAI,CAACjK,KAAK,CAACkK,WAAW,CAAC,IAAI,CAAC/gB,KAAK,CAAClI,GAAG,CAAC;MAC1D,IAAIgpB,WAAW,OAAoB,EAAE;QACnC,MAAM,IAAI,CAAC5wB,UAAU,EAAE;MACzB;IACF,CAAC,MAEI;MACH,IAAI,CAACkwB,QAAQ,CAAgB,KAAC,CAAC;IACjC;EACF;EAEAY,gBAAgB,GAAS;IACvB,MAAMhS,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAGtD,IACEkX,IAAI,OAAqB,IACzB,IAAI,CAACtP,SAAS,CAAC,CACb,kBAAkB,EAClB;MAAEkhB,QAAQ,EAAE,MAAM;MAAEC,UAAU,EAAE;KAAM,CACvC,CAAC,EACF;MACA,IAAI,CAACT,QAAQ,CAAc,KAAC,CAAC;IAC/B,CAAC,MAEI;MACH,IAAI,CAACA,QAAQ,CAAQ,KAAC,CAAC;IACzB;EACF;EAEAa,kBAAkB,CAACr3B,IAAY,EAAQ;IAErC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IAEtD,IAAIkX,IAAI,KAAKplB,IAAI,EAAE;MACjB,IAAI,CAACw2B,QAAQ,CAAY,KAAC,CAAC;MAC3B;IACF;IAEA,IAAIpR,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAACoR,QAAQ,CAAY,KAAC,CAAC;IAC7B,CAAC,MAAM;MACL,IAAI,CAACA,QAAQ,CAAa,KAAC,CAAC;IAC9B;EACF;EAEAc,YAAY,GAAS;IAEnB,MAAM;MAAEppB;KAAK,GAAG,IAAI,CAACkI,KAAK;IAC1B,MAAMgP,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;IAE3C,IAAIkX,IAAI,OAAuB,EAAE;MAC/B,IAAI,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAAuB,EAAE;QACzD,IAAI,CAACsoB,QAAQ,CAAY,KAAC,CAAC;QAC3B;MACF;MACA,IAAI,CAACA,QAAQ,CAAe,KAAC,CAAC;MAC9B;IACF;IAEA,IAAIpR,IAAI,OAAuB,EAAE;MAE/B,IAAI,CAACoR,QAAQ,CAAgB,KAAC,CAAC;MAC/B;IACF;IAEA,IAAI,CAACA,QAAQ,CAAQ,KAAC,CAAC;EACzB;EAEAe,YAAY,GAAS;IAEnB,MAAM;MAAErpB;KAAK,GAAG,IAAI,CAACkI,KAAK;IAC1B,MAAMgP,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC;IAE3C,IAAIkX,IAAI,OAA0B,EAAE;MAClC,MAAMoS,IAAI,GACR,IAAI,CAACvK,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAG,CAAC,CAAC,OAA0B,GAAG,CAAC,GAAG,CAAC;MAClE,IAAI,IAAI,CAAC+e,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAGspB,IAAI,CAAC,OAAuB,EAAE;QAC5D,IAAI,CAAChB,QAAQ,KAAYgB,IAAI,GAAG,CAAC,CAAC;QAClC;MACF;MACA,IAAI,CAAChB,QAAQ,CAAegB,QAAI,CAAC;MACjC;IACF;IAEA,IAAIpS,IAAI,OAAuB,EAAE;MAE/B,IAAI,CAACoR,QAAQ,CAAgB,KAAC,CAAC;MAC/B;IACF;IAEA,IAAI,CAACA,QAAQ,CAAQ,KAAC,CAAC;EACzB;EAEAiB,iBAAiB,CAACz3B,IAAY,EAAQ;IAEpC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IAAIkX,IAAI,OAAuB,EAAE;MAC/B,IAAI,CAACoR,QAAQ,CAEX,QAAI,CAACvJ,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAAuB,GAC5D,CAAC,GACD,CAAC,CACN;MACD;IACF;IACA,IAAIlO,IAAI,OAAuB,IAAIolB,IAAI,OAA0B,EAAE;MAEjE,IAAI,CAAChP,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACsnB,WAAW,CAAU;MAC1B;IACF;IACA,IAAI,CAACgB,QAAQ,CAACx2B,IAAI,OAAuB,GAAkB,SAAE,CAAC,CAAC;EACjE;EAEA03B,kBAAkB,GAAS;IAEzB,MAAMtS,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,MAAMmX,KAAK,GAAG,IAAI,CAAC4H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACvD,IAAIkX,IAAI,OAA2B,EAAE;MACnC,IAAIC,KAAK,OAAuB,EAAE;QAEhC,IAAI,CAACmR,QAAQ,CAAY,KAAC,CAAC;MAC7B,CAAC,MAAM;QAEL,IAAI,CAACA,QAAQ,CAAuB,KAAC,CAAC;MACxC;IACF,CAAC,MAAM,IACLpR,IAAI,OAAkB,IACtB,EAAEC,KAAK,MAAoB,IAAIA,KAAK,IAAoB,GAAC,EACzD;MAEA,IAAI,CAACjP,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACsnB,WAAW,CAAgB;IAClC,CAAC,MAAM;MACL,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;MAChB,IAAI,CAACsnB,WAAW,CAAa;IAC/B;EACF;EAEAC,gBAAgB,CAACz1B,IAAY,EAAQ;IACnC,QAAQA,IAAI;MAIV;QACE,IAAI,CAACy2B,aAAa,EAAE;QACpB;MAGF;QACE,EAAE,IAAI,CAACrgB,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAW;QAC3B;MACF;QACE,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAW;QAC3B;MACF;QACE,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAS;QACzB;MACF;QACE,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAU;QAC1B;MACF;QACE,IACE,IAAI,CAAC1f,SAAS,CAAC,gBAAgB,CAAC,IAChC,IAAI,CAACmX,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,QAA0B,EACnE;UACA,IAAI,IAAI,CAACgF,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;YAClE,MAAM,IAAI,CAACoC,KAAK,CACdzG,MAAM,CAAChF,0CAA0C,EACjD;cAAE0L,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAAG,CAAC,CACjC;UACH;UAGA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,CAAC;UACnB,IAAI,CAACsnB,WAAW,CAAgB;QAClC,CAAC,MAAM;UACL,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;UAChB,IAAI,CAACsnB,WAAW,CAAa;QAC/B;QACA;MACF;QACE,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAa;QAC7B;MACF;QACE,IACE,IAAI,CAAC1f,SAAS,CAAC,gBAAgB,CAAC,IAChC,IAAI,CAACmX,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,QAA0B,EACnE;UACA,IAAI,IAAI,CAACgF,eAAe,CAAC,gBAAgB,EAAE,YAAY,CAAC,KAAK,KAAK,EAAE;YAClE,MAAM,IAAI,CAACoC,KAAK,CACdzG,MAAM,CAAC1F,2CAA2C,EAClD;cAAEoM,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAAG,CAAC,CACjC;UACH;UAGA,IAAI,CAACzZ,KAAK,CAAClI,GAAG,IAAI,CAAC;UACnB,IAAI,CAACsnB,WAAW,CAAc;QAChC,CAAC,MAAM;UACL,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;UAChB,IAAI,CAACsnB,WAAW,CAAW;QAC7B;QACA;MACF;QACE,EAAE,IAAI,CAACpf,KAAK,CAAClI,GAAG;QAChB,IAAI,CAACsnB,WAAW,CAAW;QAC3B;MAEF;QACE,IACE,IAAI,CAAC1f,SAAS,CAAC,cAAc,CAAC,IAC9B,IAAI,CAACmX,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAAoB,EAC7D;UACA,IAAI,CAACsoB,QAAQ,CAAiB,KAAC,CAAC;QAClC,CAAC,MAAM;UACL,EAAE,IAAI,CAACpgB,KAAK,CAAClI,GAAG;UAChB,IAAI,CAACsnB,WAAW,CAAU;QAC5B;QACA;MAEF;QACE,IAAI,CAACkC,kBAAkB,EAAE;QACzB;MAEF;QACE,IAAI,CAACC,iBAAiB,EAAE;QACxB;MAEF;QAAuB;UACrB,MAAMvS,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;UAEtD,IAAIkX,IAAI,QAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAACwS,eAAe,CAAC,EAAE,CAAC;YACxB;UACF;UAEA,IAAIxS,IAAI,QAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAACwS,eAAe,CAAC,CAAC,CAAC;YACvB;UACF;UAEA,IAAIxS,IAAI,OAAyB,IAAIA,IAAI,OAAyB,EAAE;YAClE,IAAI,CAACwS,eAAe,CAAC,CAAC,CAAC;YACvB;UACF;QACF;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;QACE,IAAI,CAAClB,UAAU,CAAC,KAAK,CAAC;QACtB;MAGF;MACA;QACE,IAAI,CAACmB,UAAU,CAAC73B,IAAI,CAAC;QACrB;MAOF;QACE,IAAI,CAAC22B,eAAe,EAAE;QACtB;MAEF;MACA;QACE,IAAI,CAACC,qBAAqB,CAAC52B,IAAI,CAAC;QAChC;MAEF;MACA;QACE,IAAI,CAAC82B,kBAAkB,CAAC92B,IAAI,CAAC;QAC7B;MAEF;QACE,IAAI,CAAC+2B,eAAe,EAAE;QACtB;MAEF;MACA;QACE,IAAI,CAACM,kBAAkB,CAACr3B,IAAI,CAAC;QAC7B;MAEF;QACE,IAAI,CAACs3B,YAAY,EAAE;QACnB;MAEF;QACE,IAAI,CAACC,YAAY,EAAE;QACnB;MAEF;MACA;QACE,IAAI,CAACE,iBAAiB,CAACz3B,IAAI,CAAC;QAC5B;MAEF;QACE,IAAI,CAACw2B,QAAQ,CAAW,KAAC,CAAC;QAC1B;MAEF;QACE,IAAI,CAACY,gBAAgB,EAAE;QACvB;MAEF;QACE,IAAI,CAACjB,oBAAoB,EAAE;QAC3B;MAEF;QACE,IAAI,CAAC2B,QAAQ,EAAE;QACf;MAEF;QACE,IAAI7T,iBAAiB,CAACjkB,IAAI,CAAC,EAAE;UAC3B,IAAI,CAAC83B,QAAQ,CAAC93B,IAAI,CAAC;UACnB;QACF;IAAA;IAGJ,MAAM,IAAI,CAACsV,KAAK,CAACzG,MAAM,CAACxI,wBAAwB,EAAE;MAChDkP,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW,EAAE;MAC5BvpB,UAAU,EAAE1E,MAAM,CAAC+vB,aAAa,CAAC3xB,IAAI;IACvC,CAAC,CAAC;EACJ;EAEAw2B,QAAQ,CAAC90B,IAAe,EAAE81B,IAAY,EAAQ;IAC5C,MAAMnG,GAAG,GAAG,IAAI,CAACpE,KAAK,CAAC+C,KAAK,CAAC,IAAI,CAAC5Z,KAAK,CAAClI,GAAG,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG,GAAGspB,IAAI,CAAC;IACnE,IAAI,CAACphB,KAAK,CAAClI,GAAG,IAAIspB,IAAI;IACtB,IAAI,CAAChC,WAAW,CAAC9zB,IAAI,EAAE2vB,GAAG,CAAC;EAC7B;EAEA0G,UAAU,GAAS;IACjB,MAAMtjB,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAM9W,KAAK,GAAG,IAAI,CAACyY,KAAK,CAACzY,KAAK,GAAG,CAAC;IAClC,IAAIq6B,OAAO,EAAE5O,OAAO;IACpB,IAAI;MAAElb;KAAK,GAAG,IAAI,CAACkI,KAAK;IACxB,QAAS,EAAElI,GAAG,EAAE;MACd,IAAIA,GAAG,IAAI,IAAI,CAAC1P,MAAM,EAAE;QAEtB,MAAM,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAClD,kBAAkB,EAAE;UAC1C4J,EAAE,EAAExX,8BAA8B,CAAC0W,QAAQ,EAAE,CAAC;QAChD,CAAC,CAAC;MACJ;MACA,MAAM8b,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAChf,GAAG,CAAC;MACrC,IAAIsf,SAAS,CAAC+C,EAAE,CAAC,EAAE;QACjB,MAAM,IAAI,CAACjb,KAAK,CAACzG,MAAM,CAAClD,kBAAkB,EAAE;UAC1C4J,EAAE,EAAExX,8BAA8B,CAAC0W,QAAQ,EAAE,CAAC;QAChD,CAAC,CAAC;MACJ;MACA,IAAIujB,OAAO,EAAE;QACXA,OAAO,GAAG,KAAK;MACjB,CAAC,MAAM;QACL,IAAIzH,EAAE,OAAgC,EAAE;UACtCnH,OAAO,GAAG,IAAI;QAChB,CAAC,MAAM,IAAImH,EAAE,KAAiC,MAAInH,OAAO,EAAE;UACzDA,OAAO,GAAG,KAAK;QACjB,CAAC,MAAM,IAAImH,EAAE,OAAoB,IAAI,CAACnH,OAAO,EAAE;UAC7C;QACF;QACA4O,OAAO,GAAGzH,EAAE,KAAwB;MACtC;IACF;IACA,MAAM0H,OAAO,GAAG,IAAI,CAAChL,KAAK,CAAC+C,KAAK,CAACryB,KAAK,EAAEuQ,GAAG,CAAC;IAC5C,EAAEA,GAAG;IAEL,IAAIgqB,IAAI,GAAG,EAAE;IAEb,MAAM7B,OAAO,GAAG,MAEdt4B,8BAA8B,CAAC0W,QAAQ,EAAEvG,GAAG,GAAG,CAAC,GAAGvQ,KAAK,CAAC;IAE3D,OAAOuQ,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;MACxB,MAAMy2B,EAAE,GAAG,IAAI,CAACD,cAAc,CAAC9mB,GAAG,CAAC;MAEnC,MAAMiqB,IAAI,GAAGv2B,MAAM,CAACuiB,YAAY,CAAC8Q,EAAE,CAAC;MAGpC,IAAIzB,iBAAiB,CAAC1O,GAAG,CAACmQ,EAAE,CAAC,EAAE;QAC7B,IAAIA,EAAE,QAAyB,EAAE;UAC/B,IAAI,CAACqB,YAAY,CAAC,mBAAmB,EAAED,OAAO,EAAE,CAAC;UAEjD,IAAI6B,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtB,IAAI,CAAC9iB,KAAK,CAACzG,MAAM,CAACzJ,yBAAyB,EAAE;cAAEmQ,EAAE,EAAE8gB,OAAO;YAAG,CAAC,CAAC;UACjE;QACF,CAAC,MAAM,IAAIpB,EAAE,QAAyB,EAAE;UACtC,IAAIiD,IAAI,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;YACtB,IAAI,CAAC9iB,KAAK,CAACzG,MAAM,CAACzJ,yBAAyB,EAAE;cAAEmQ,EAAE,EAAE8gB,OAAO;YAAG,CAAC,CAAC;UACjE;QACF;QACA,IAAI6B,IAAI,CAACE,QAAQ,CAACD,IAAI,CAAC,EAAE;UACvB,IAAI,CAAC7iB,KAAK,CAACzG,MAAM,CAACjL,oBAAoB,EAAE;YAAE2R,EAAE,EAAE8gB,OAAO;UAAG,CAAC,CAAC;QAC5D;OACD,MAAM,IAAIjS,gBAAgB,CAAC6Q,EAAE,CAAC,IAAIA,EAAE,OAAwB,EAAE;QAC7D,IAAI,CAAC3f,KAAK,CAACzG,MAAM,CAAC7H,oBAAoB,EAAE;UAAEuO,EAAE,EAAE8gB,OAAO;QAAG,CAAC,CAAC;MAC5D,CAAC,MAAM;QACL;MACF;MAEA,EAAEnoB,GAAG;MACLgqB,IAAI,IAAIC,IAAI;IACd;IACA,IAAI,CAAC/hB,KAAK,CAAClI,GAAG,GAAGA,GAAG;IAEpB,IAAI,CAACsnB,WAAW,CAAY;MAC1B5lB,OAAO,EAAEqoB,OAAO;MAChBpoB,KAAK,EAAEqoB;IACT,CAAC,CAAC;EACJ;EAWA7F,OAAO,CACL3sB,KAAa,EACbwsB,GAAY,EAGG;IAAA,IAFfC,QAAiB,uEAAG,KAAK;IAAA,IACzBI,iBAAmC,uEAAG,IAAI;IAE1C,MAAM;MAAEH,CAAC;MAAElkB;IAAI,CAAC,GAAGmkB,OAAO,CACxB,IAAI,CAACpF,KAAK,EACV,IAAI,CAAC7W,KAAK,CAAClI,GAAG,EACd,IAAI,CAACkI,KAAK,CAAC2X,SAAS,EACpB,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,EAClBpoB,KAAK,EACLwsB,GAAG,EACHC,QAAQ,EACRI,iBAAiB,EACjB,IAAI,CAACqB,qBAAqB,EACR,KAAK,CACxB;IACD,IAAI,CAACxd,KAAK,CAAClI,GAAG,GAAGA,GAAG;IACpB,OAAOkkB,CAAC;EACV;EAEAwF,eAAe,CAAClyB,KAAa,EAAQ;IACnC,MAAM+O,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;IACzC,IAAIwI,QAAQ,GAAG,KAAK;IAEpB,IAAI,CAACjiB,KAAK,CAAClI,GAAG,IAAI,CAAC;IACnB,MAAM6hB,GAAG,GAAG,IAAI,CAACsC,OAAO,CAAC3sB,KAAK,CAAC;IAC/B,IAAIqqB,GAAG,IAAI,IAAI,EAAE;MACf,IAAI,CAACza,KAAK,CAACzG,MAAM,CAACpJ,YAAY,EAAE;QAE9B8P,EAAE,EAAExX,8BAA8B,CAAC0W,QAAQ,EAAE,CAAC,CAAC;QAC/C/O;MACF,CAAC,CAAC;IACJ;IACA,MAAM0f,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAElD,IAAIkX,IAAI,QAAyB,EAAE;MACjC,EAAE,IAAI,CAAChP,KAAK,CAAClI,GAAG;MAChBmqB,QAAQ,GAAG,IAAI;IACjB,CAAC,MAAM,IAAIjT,IAAI,QAAyB,EAAE;MACxC,MAAM,IAAI,CAAC9P,KAAK,CAACzG,MAAM,CAACrJ,cAAc,EAAE;QAAE+P,EAAE,EAAEd;MAAS,CAAC,CAAC;IAC3D;IAEA,IAAIwP,iBAAiB,CAAC,IAAI,CAAC+Q,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,CAAC,EAAE;MAC1D,MAAM,IAAI,CAACoH,KAAK,CAACzG,MAAM,CAACtG,gBAAgB,EAAE;QACxCgN,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IAEA,IAAIwI,QAAQ,EAAE;MACZ,MAAMhH,GAAG,GAAG,IAAI,CAACpE,KAAK,CACnB+C,KAAK,CAACvb,QAAQ,CAACjX,KAAK,EAAE,IAAI,CAAC4Y,KAAK,CAAClI,GAAG,CAAC,CACrCoqB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;MACvB,IAAI,CAAC9C,WAAW,CAAYnE,QAAG,CAAC;MAChC;IACF;IAEA,IAAI,CAACmE,WAAW,CAASzF,QAAG,CAAC;EAC/B;EAIA2G,UAAU,CAAC6B,aAAsB,EAAQ;IACvC,MAAM56B,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,MAAMuG,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAACyZ,WAAW,EAAE;IACzC,IAAI2I,OAAO,GAAG,KAAK;IACnB,IAAIH,QAAQ,GAAG,KAAK;IACpB,IAAII,SAAS,GAAG,KAAK;IACrB,IAAIC,WAAW,GAAG,KAAK;IACvB,IAAIC,OAAO,GAAG,KAAK;IAEnB,IAAI,CAACJ,aAAa,IAAI,IAAI,CAAClG,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;MAC/C,IAAI,CAAC/c,KAAK,CAACzG,MAAM,CAAC1I,aAAa,EAAE;QAAEoP,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAAG,CAAC,CAAC;IACpE;IACA,MAAM+I,cAAc,GAClB,IAAI,CAACxiB,KAAK,CAAClI,GAAG,GAAGvQ,KAAK,IAAI,CAAC,IAC3B,IAAI,CAACsvB,KAAK,CAACC,UAAU,CAACvvB,KAAK,CAAC,KAAqB;IAEnD,IAAIi7B,cAAc,EAAE;MAClB,MAAMC,OAAO,GAAG,IAAI,CAAC5L,KAAK,CAAC+C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACyY,KAAK,CAAClI,GAAG,CAAC;MACvD,IAAI,CAAC+lB,sBAAsB,CAACplB,MAAM,CAACnC,kBAAkB,EAAE;QAAE6I,EAAE,EAAEd;MAAS,CAAC,CAAC;MACxE,IAAI,CAAC,IAAI,CAAC2B,KAAK,CAACkO,MAAM,EAAE;QAEtB,MAAMwU,aAAa,GAAGD,OAAO,CAACxF,OAAO,CAAC,GAAG,CAAC;QAC1C,IAAIyF,aAAa,GAAG,CAAC,EAAE;UAErB,IAAI,CAACxjB,KAAK,CAACzG,MAAM,CAAC3C,yBAAyB,EAAE;YAC3CqJ,EAAE,EAAExX,8BAA8B,CAAC0W,QAAQ,EAAEqkB,aAAa;UAC5D,CAAC,CAAC;QACJ;MACF;MACAH,OAAO,GAAGC,cAAc,IAAI,CAAC,MAAM,CAAC1U,IAAI,CAAC2U,OAAO,CAAC;IACnD;IAEA,IAAIzT,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAChD,IAAIkX,IAAI,OAAkB,IAAI,CAACuT,OAAO,EAAE;MACtC,EAAE,IAAI,CAACviB,KAAK,CAAClI,GAAG;MAChB,IAAI,CAACmkB,OAAO,CAAC,EAAE,CAAC;MAChBmG,OAAO,GAAG,IAAI;MACdpT,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAC9C;IAEA,IACE,CAACkX,IAAI,KAAyB,MAAIA,IAAI,KAAyB,QAC/D,CAACuT,OAAO,EACR;MACAvT,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;MAC9C,IAAIkX,IAAI,OAAuB,IAAIA,IAAI,OAAmB,EAAE;QAC1D,EAAE,IAAI,CAAChP,KAAK,CAAClI,GAAG;MAClB;MACA,IAAI,IAAI,CAACmkB,OAAO,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE;QAC7B,IAAI,CAAC/c,KAAK,CAACzG,MAAM,CAACzI,wBAAwB,EAAE;UAAEmP,EAAE,EAAEd;QAAS,CAAC,CAAC;MAC/D;MACA+jB,OAAO,GAAG,IAAI;MACdE,WAAW,GAAG,IAAI;MAClBtT,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAC9C;IAEA,IAAIkX,IAAI,QAAyB,EAAE;MAGjC,IAAIoT,OAAO,IAAII,cAAc,EAAE;QAC7B,IAAI,CAACtjB,KAAK,CAACzG,MAAM,CAACxJ,oBAAoB,EAAE;UAAEkQ,EAAE,EAAEd;QAAS,CAAC,CAAC;MAC3D;MACA,EAAE,IAAI,CAAC2B,KAAK,CAAClI,GAAG;MAChBmqB,QAAQ,GAAG,IAAI;IACjB;IAEA,IAAIjT,IAAI,QAAyB,EAAE;MACjC,IAAI,CAACkR,YAAY,CAAC,SAAS,EAAE,IAAI,CAAClgB,KAAK,CAACyZ,WAAW,EAAE,CAAC;MACtD,IAAI6I,WAAW,IAAIE,cAAc,EAAE;QACjC,IAAI,CAACtjB,KAAK,CAACzG,MAAM,CAACrJ,cAAc,EAAE;UAAE+P,EAAE,EAAEd;QAAS,CAAC,CAAC;MACrD;MACA,EAAE,IAAI,CAAC2B,KAAK,CAAClI,GAAG;MAChBuqB,SAAS,GAAG,IAAI;IAClB;IAEA,IAAIxU,iBAAiB,CAAC,IAAI,CAAC+Q,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,CAAC,EAAE;MAC1D,MAAM,IAAI,CAACoH,KAAK,CAACzG,MAAM,CAACtG,gBAAgB,EAAE;QACxCgN,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IAGA,MAAMwB,GAAG,GAAG,IAAI,CAACpE,KAAK,CAAC+C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACyY,KAAK,CAAClI,GAAG,CAAC,CAACoqB,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;IAEzE,IAAID,QAAQ,EAAE;MACZ,IAAI,CAAC7C,WAAW,CAAYnE,QAAG,CAAC;MAChC;IACF;IAEA,IAAIoH,SAAS,EAAE;MACb,IAAI,CAACjD,WAAW,CAAanE,QAAG,CAAC;MACjC;IACF;IAEA,MAAMtB,GAAG,GAAG4I,OAAO,GAAG1G,QAAQ,CAACZ,GAAG,EAAE,CAAC,CAAC,GAAG0H,UAAU,CAAC1H,GAAG,CAAC;IACxD,IAAI,CAACmE,WAAW,CAASzF,QAAG,CAAC;EAC/B;EAIA2B,aAAa,CAACF,cAAuB,EAAiB;IACpD,MAAM;MAAExxB,IAAI;MAAEkO;IAAI,CAAC,GAAGwjB,aAAa,CACjC,IAAI,CAACzE,KAAK,EACV,IAAI,CAAC7W,KAAK,CAAClI,GAAG,EACd,IAAI,CAACkI,KAAK,CAAC2X,SAAS,EACpB,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,EAClB0D,cAAc,EACd,IAAI,CAACuC,2BAA2B,CACjC;IACD,IAAI,CAAC3d,KAAK,CAAClI,GAAG,GAAGA,GAAG;IACpB,OAAOlO,IAAI;EACb;EAEA63B,UAAU,CAACmB,KAAa,EAAQ;IAC9B,MAAM;MAAE3H,GAAG;MAAEnjB,GAAG;MAAE4f,OAAO;MAAEC;IAAU,CAAC,GAAG2C,kBAAkB,CACzDsI,KAAK,OAA4B,GAAG,QAAQ,GAAG,QAAQ,EACvD,IAAI,CAAC/L,KAAK,EACV,IAAI,CAAC7W,KAAK,CAAClI,GAAG,GAAG,CAAC,EAClB,IAAI,CAACkI,KAAK,CAAC2X,SAAS,EACpB,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,EAClB,IAAI,CAACkG,uCAAuC,CAC7C;IACD,IAAI,CAAC5d,KAAK,CAAClI,GAAG,GAAGA,GAAG,GAAG,CAAC;IACxB,IAAI,CAACkI,KAAK,CAAC2X,SAAS,GAAGA,SAAS;IAChC,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,GAAGA,OAAO;IAC5B,IAAI,CAAC0H,WAAW,CAAYnE,QAAG,CAAC;EAClC;EAGA4H,wBAAwB,GAAS;IAC/B,IAAI,CAAC,IAAI,CAACnH,KAAK,GAAW,EAAE;MAC1B,IAAI,CAACxrB,UAAU,CAAC,IAAI,EAAY;IAClC;IAEA,IAAI,CAAC8P,KAAK,CAAClI,GAAG,EAAE;IAChB,IAAI,CAACypB,iBAAiB,EAAE;EAC1B;EAGAA,iBAAiB,GAAS;IACxB,MAAMuB,OAAO,GAAG,IAAI,CAACjM,KAAK,CAAC,IAAI,CAAC7W,KAAK,CAAClI,GAAG,CAAC;IAC1C,MAAM;MAAEmjB,GAAG;MAAEN,eAAe;MAAE7iB,GAAG;MAAE4f,OAAO;MAAEC;IAAU,CAAC,GACrD2C,kBAAkB,CAChB,UAAU,EACV,IAAI,CAACzD,KAAK,EACV,IAAI,CAAC7W,KAAK,CAAClI,GAAG,GAAG,CAAC,EAClB,IAAI,CAACkI,KAAK,CAAC2X,SAAS,EACpB,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,EAClB,IAAI,CAACoG,yCAAyC,CAC/C;IACH,IAAI,CAAC9d,KAAK,CAAClI,GAAG,GAAGA,GAAG,GAAG,CAAC;IACxB,IAAI,CAACkI,KAAK,CAAC2X,SAAS,GAAGA,SAAS;IAChC,IAAI,CAAC3X,KAAK,CAAC0X,OAAO,GAAGA,OAAO;IAE5B,IAAIiD,eAAe,EAAE;MACnB,IAAI,CAAC3a,KAAK,CAACiZ,6BAA6B,GAAG,IAAIjyB,QAAQ,CACrD2zB,eAAe,CAACjD,OAAO,EACvBiD,eAAe,CAAC7iB,GAAG,GAAG6iB,eAAe,CAAChD,SAAS,EAC/CgD,eAAe,CAAC7iB,GAAG,CACpB;IACH;IAEA,IAAI,IAAI,CAAC+e,KAAK,CAACkK,WAAW,CAACjpB,GAAG,CAAC,OAA0B,EAAE;MACzD,IAAI,CAACsnB,WAAW,CAEdzE,mBAAe,GAAG,IAAI,GAAGmI,OAAO,GAAG7H,GAAG,GAAG,GAAG,CAC7C;IACH,CAAC,MAAM;MACL,IAAI,CAACjb,KAAK,CAAClI,GAAG,EAAE;MAChB,IAAI,CAACsnB,WAAW,CAEdzE,mBAAe,GAAG,IAAI,GAAGmI,OAAO,GAAG7H,GAAG,GAAG,IAAI,CAC9C;IACH;EACF;EAEA4C,sBAAsB,CACpBoB,YAAiC,UAEjC;IAAA,IADA;MAAE9f;IAAqB,CAAC;IAExB,MAAM/X,KAAK,GAAG+X,EAAE,CAAC/X,KAAK;IAEtB,IAAI,IAAI,CAAC4Y,KAAK,CAACkO,MAAM,IAAI,CAAC,IAAI,CAAClO,KAAK,CAACkZ,YAAY,CAACxK,GAAG,CAACtnB,KAAK,CAAC,EAAE;MAC5D,IAAI,CAAC8X,KAAK,CAAC+f,YAAY,EAAE;QAAE9f;MAAG,CAAC,CAAC;IAClC,CAAC,MAAM;MACL,IAAI,CAACa,KAAK,CAACkZ,YAAY,CAACzwB,GAAG,CAACrB,KAAK,EAAE,CAAC63B,YAAY,EAAE9f,EAAE,CAAC,CAAC;IACxD;EACF;EAWAghB,SAAS,CAAC4C,SAAkB,EAAU;IACpC,IAAI,CAAC/iB,KAAK,CAACgZ,WAAW,GAAG,KAAK;IAC9B,IAAIzK,IAAI,GAAG,EAAE;IACb,MAAMhnB,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,IAAI8iB,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;IAC/B,IAAIirB,SAAS,KAAK3N,SAAS,EAAE;MAC3B,IAAI,CAACpV,KAAK,CAAClI,GAAG,IAAIirB,SAAS,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC;IAC/C;IAEA,OAAO,IAAI,CAAC/iB,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,EAAE;MACnC,MAAM+xB,EAAE,GAAG,IAAI,CAACyE,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC;MAC9C,IAAIkW,gBAAgB,CAACmM,EAAE,CAAC,EAAE;QACxB,IAAI,CAACna,KAAK,CAAClI,GAAG,IAAIqiB,EAAE,IAAI,MAAM,GAAG,CAAC,GAAG,CAAC;MACxC,CAAC,MAAM,IAAIA,EAAE,OAAwB,EAAE;QACrC,IAAI,CAACna,KAAK,CAACgZ,WAAW,GAAG,IAAI;QAE7BzK,IAAI,IAAI,IAAI,CAACsI,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;QACpD,MAAMkrB,QAAQ,GAAG,IAAI,CAAChjB,KAAK,CAACyZ,WAAW,EAAE;QACzC,MAAMwJ,eAAe,GACnB,IAAI,CAACjjB,KAAK,CAAClI,GAAG,KAAKvQ,KAAK,GAAGsmB,iBAAiB,GAAGG,gBAAgB;QAEjE,IAAI,IAAI,CAAC6I,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC,QAAyB,EAAE;UACpE,IAAI,CAACoH,KAAK,CAACzG,MAAM,CAAClH,oBAAoB,EAAE;YACtC4N,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAC5B,CAAC,CAAC;UACFmB,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG,GAAG,CAAC;UAC/B;QACF;QAEA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;QAChB,MAAMorB,GAAG,GAAG,IAAI,CAAC5H,aAAa,CAAC,IAAI,CAAC;QACpC,IAAI4H,GAAG,KAAK,IAAI,EAAE;UAChB,IAAI,CAACD,eAAe,CAACC,GAAG,CAAC,EAAE;YACzB,IAAI,CAAChkB,KAAK,CAACzG,MAAM,CAAC/K,0BAA0B,EAAE;cAAEyR,EAAE,EAAE6jB;YAAS,CAAC,CAAC;UACjE;UAEAzU,IAAI,IAAI/iB,MAAM,CAAC+vB,aAAa,CAAC2H,GAAG,CAAC;QACnC;QACAtI,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;MAC7B,CAAC,MAAM;QACL;MACF;IACF;IACA,OAAOyW,IAAI,GAAG,IAAI,CAACsI,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;EAC5D;EAKA4pB,QAAQ,CAACqB,SAAkB,EAAQ;IACjC,MAAMxU,IAAI,GAAG,IAAI,CAAC4R,SAAS,CAAC4C,SAAS,CAAC;IACtC,MAAMz3B,IAAI,GAAG63B,UAAY,CAAC96B,GAAG,CAACkmB,IAAI,CAAC;IACnC,IAAIjjB,IAAI,KAAK8pB,SAAS,EAAE;MAGtB,IAAI,CAACgK,WAAW,CAAC9zB,IAAI,EAAEwhB,cAAc,CAACxhB,IAAI,CAAC,CAAC;IAC9C,CAAC,MAAM;MACL,IAAI,CAAC8zB,WAAW,CAAU7Q,SAAI,CAAC;IACjC;EACF;EAEAyP,mBAAmB,GAAS;IAC1B,MAAM;MAAE1yB;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAIwM,cAAc,CAAClhB,IAAI,CAAC,IAAI,IAAI,CAAC0U,KAAK,CAACgZ,WAAW,EAAE;MAClD,IAAI,CAAC9Z,KAAK,CAACzG,MAAM,CAAChJ,0BAA0B,EAAE;QAC5C0P,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;QACvB3O,YAAY,EAAEod,cAAc,CAACxhB,IAAI;MACnC,CAAC,CAAC;IACJ;EACF;EAWA4T,KAAK,CACH+f,YAAiD,EACjDmE,eAA8C,EACpB;IAC1B,MAAM;QAAEjkB;MAAe,CAAC,GAAGikB,eAAe;MAA3BzrB,OAAO,iCAAKyrB,eAAe;IAC1C,MAAM1rB,GAAG,GAAGyH,EAAE,YAAYnY,QAAQ,GAAGmY,EAAE,GAAGA,EAAE,CAACzH,GAAG,CAACnQ,KAAK;IAEtD,MAAM87B,KAAK,GAAGpE,YAAY,CAAC;MAAEvnB,GAAG;MAAEC;IAAQ,CAAC,CAAC;IAE5C,IAAI,CAAC,IAAI,CAAC0B,OAAO,CAACokB,aAAa,EAAE,MAAM4F,KAAK;IAC5C,IAAI,CAAC,IAAI,CAAC9F,WAAW,EAAE,IAAI,CAACvd,KAAK,CAAC4X,MAAM,CAAChb,IAAI,CAACymB,KAAK,CAAC;IAEpD,OAAOA,KAAK;EACd;EAQAC,cAAc,CACZrE,YAAiD,EACjDmE,eAA8C,EACZ;IAClC,MAAM;QAAEjkB;MAAe,CAAC,GAAGikB,eAAe;MAA3BzrB,OAAO,iCAAKyrB,eAAe;IAC1C,MAAM1rB,GAAG,GAAGyH,EAAE,YAAYnY,QAAQ,GAAGmY,EAAE,GAAGA,EAAE,CAACzH,GAAG,CAACnQ,KAAK;IACtD,MAAMuQ,GAAG,GAAGJ,GAAG,CAACtQ,KAAK;IACrB,MAAMwwB,MAAM,GAAG,IAAI,CAAC5X,KAAK,CAAC4X,MAAM;IAEhC,KAAK,IAAIhvB,CAAC,GAAGgvB,MAAM,CAACxvB,MAAM,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,MAAMy6B,KAAK,GAAGzL,MAAM,CAAChvB,CAAC,CAAC;MACvB,IAAIy6B,KAAK,CAAC3rB,GAAG,CAACtQ,KAAK,KAAK0Q,GAAG,EAAE;QAE3B,OAAQ8f,MAAM,CAAChvB,CAAC,CAAC,GAAGq2B,YAAY,CAAC;UAAEvnB,GAAG;UAAEC;QAAQ,CAAC,CAAC;MACpD;MACA,IAAI0rB,KAAK,CAAC3rB,GAAG,CAACtQ,KAAK,GAAG0Q,GAAG,EAAE;IAC7B;IAEA,OAAO,IAAI,CAACoH,KAAK,CAAC+f,YAAY,EAAEmE,eAAe,CAAC;EAClD;EAIA7gB,aAAa,CAACsd,QAAmB,EAAQ;EAGzC3vB,UAAU,CAACwH,GAAqB,EAAEpM,IAAgB,EAAQ;IACxD,MAAM,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACjE,eAAe,EAAE;MACvCC,QAAQ,EAAEnJ,IAAI,GAAGwhB,cAAc,CAACxhB,IAAI,CAAC,GAAG,IAAI;MAC5C6T,EAAE,EAAEzH,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACsI,KAAK,CAAC3B;IACrC,CAAC,CAAC;EACJ;EAEA6hB,YAAY,CAACtL,UAAkB,EAAEld,GAAc,EAAQ;IACrD,IAAI,IAAI,CAACgI,SAAS,CAACkV,UAAU,CAAC,EAAE;MAC9B,OAAO,IAAI;IACb;IAEA,MAAM,IAAI,CAAC1V,KAAK,CAACzG,MAAM,CAACzH,aAAa,EAAE;MACrCmO,EAAE,EAAEzH,GAAG,IAAI,IAAI,GAAGA,GAAG,GAAG,IAAI,CAACsI,KAAK,CAAC3B,QAAQ;MAC3CpN,aAAa,EAAE,CAAC2jB,UAAU;IAC5B,CAAC,CAAC;EACJ;EAEA2O,eAAe,CAACC,WAAqB,EAAQ;IAC3C,IAAI,CAACA,WAAW,CAACC,IAAI,CAACvyB,IAAI,IAAI,IAAI,CAACwO,SAAS,CAACxO,IAAI,CAAC,CAAC,EAAE;MACnD,MAAM,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAACnH,mBAAmB,EAAE;QAC3C6N,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;QACvBpN,aAAa,EAAEuyB;MACjB,CAAC,CAAC;IACJ;EACF;EAEA9F,YAAY,CAAC2F,KAAgC,EAAE;IAC7C,OAAO,CAACvrB,GAAW,EAAE6f,SAAiB,EAAED,OAAe,KAAK;MAC1D,IAAI,CAACxY,KAAK,CAACmkB,KAAK,EAAE;QAChBlkB,EAAE,EAAEge,aAAa,CAACrlB,GAAG,EAAE6f,SAAS,EAAED,OAAO;MAC3C,CAAC,CAAC;KACH;EACH;AAmDF;ACliDO,MAAMgM,UAAU,CAAC;EAAAz8B;IAAA,KAEtB08B,YAAY,GAAgB,IAAIltB,GAAG,EAAE;IAAA,KAGrCmtB,aAAa,GAAmC,IAAInhB,GAAG,EAAE;IAAA,KAIzDohB,qBAAqB,GAA0B,IAAIphB,GAAG,EAAE;EAAA;AAC1D;AAEe,MAAMqhB,iBAAiB,CAAC;EAKrC78B,WAAW,CAACsrB,MAAiB,EAAE;IAAA,KAJ/BA,MAAM;IAAA,IACNwR,MAAK,GAAsB,EAAE;IAAA,KAC7BF,qBAAqB,GAA0B,IAAIphB,GAAG,EAAE;IAGtD,IAAI,CAAC8P,MAAM,GAAGA,MAAM;EACtB;EAEAxD,OAAO,GAAe;IACpB,OAAO,IAAI,CAACgV,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC37B,MAAM,GAAG,CAAC,CAAC;EAC1C;EAEAmrB,KAAK,GAAG;IACN,IAAI,CAACwQ,KAAK,CAACnnB,IAAI,CAAC,IAAI8mB,UAAU,EAAE,CAAC;EACnC;EAEAlQ,IAAI,GAAG;IACL,MAAMwQ,aAAa,GAAG,IAAI,CAACD,KAAK,CAAC3W,GAAG,EAAE;IAKtC,MAAM2B,OAAO,GAAG,IAAI,CAACA,OAAO,EAAE;IAG9B,KAAK,MAAM,CAAC7d,IAAI,EAAEwG,GAAG,CAAC,IAAIQ,KAAK,CAAC+rB,IAAI,CAACD,aAAa,CAACH,qBAAqB,CAAC,EAAE;MACzE,IAAI9U,OAAO,EAAE;QACX,IAAI,CAACA,OAAO,CAAC8U,qBAAqB,CAACnV,GAAG,CAACxd,IAAI,CAAC,EAAE;UAC5C6d,OAAO,CAAC8U,qBAAqB,CAACp7B,GAAG,CAACyI,IAAI,EAAEwG,GAAG,CAAC;QAC9C;MACF,CAAC,MAAM;QACL,IAAI,CAAC6a,MAAM,CAACrT,KAAK,CAACzG,MAAM,CAACrI,6BAA6B,EAAE;UACtD+O,EAAE,EAAEzH,GAAG;UACPhQ,cAAc,EAAEwJ;QAClB,CAAC,CAAC;MACJ;IACF;EACF;EAEAgzB,kBAAkB,CAChBhzB,IAAY,EACZizB,WAA8B,EAC9BzsB,GAAa,EACb;IACA,MAAM;MAAEisB,YAAY;MAAEC,aAAa;MAAEC;IAAsB,CAAC,GAC1D,IAAI,CAAC9U,OAAO,EAAE;IAChB,IAAIqV,SAAS,GAAGT,YAAY,CAACjV,GAAG,CAACxd,IAAI,CAAC;IAEtC,IAAIizB,WAAW,GAAGvS,2BAA2B,EAAE;MAC7C,MAAMyS,QAAQ,GAAGD,SAAS,IAAIR,aAAa,CAACv7B,GAAG,CAAC6I,IAAI,CAAC;MACrD,IAAImzB,QAAQ,EAAE;QACZ,MAAMC,SAAS,GAAGD,QAAQ,GAAG5S,yBAAyB;QACtD,MAAM8S,SAAS,GAAGJ,WAAW,GAAG1S,yBAAyB;QAEzD,MAAM+S,OAAO,GAAGH,QAAQ,GAAGzS,2BAA2B;QACtD,MAAM6S,OAAO,GAAGN,WAAW,GAAGvS,2BAA2B;QAKzDwS,SAAS,GAAGI,OAAO,KAAKC,OAAO,IAAIH,SAAS,KAAKC,SAAS;QAE1D,IAAI,CAACH,SAAS,EAAER,aAAa,CAAC7P,MAAM,CAAC7iB,IAAI,CAAC;MAC5C,CAAC,MAAM,IAAI,CAACkzB,SAAS,EAAE;QACrBR,aAAa,CAACn7B,GAAG,CAACyI,IAAI,EAAEizB,WAAW,CAAC;MACtC;IACF;IAEA,IAAIC,SAAS,EAAE;MACb,IAAI,CAAC7R,MAAM,CAACrT,KAAK,CAACzG,MAAM,CAAC5F,wBAAwB,EAAE;QACjDsM,EAAE,EAAEzH,GAAG;QACPhQ,cAAc,EAAEwJ;MAClB,CAAC,CAAC;IACJ;IAEAyyB,YAAY,CAAC9P,GAAG,CAAC3iB,IAAI,CAAC;IACtB2yB,qBAAqB,CAAC9P,MAAM,CAAC7iB,IAAI,CAAC;EACpC;EAEA6N,cAAc,CAAC7N,IAAY,EAAEwG,GAAa,EAAE;IAC1C,IAAIoH,UAAU;IACd,KAAKA,UAAU,IAAI,IAAI,CAACilB,KAAK,EAAE;MAC7B,IAAIjlB,UAAU,CAAC6kB,YAAY,CAACjV,GAAG,CAACxd,IAAI,CAAC,EAAE;IACzC;IAEA,IAAI4N,UAAU,EAAE;MACdA,UAAU,CAAC+kB,qBAAqB,CAACp7B,GAAG,CAACyI,IAAI,EAAEwG,GAAG,CAAC;IACjD,CAAC,MAAM;MAEL,IAAI,CAAC6a,MAAM,CAACrT,KAAK,CAACzG,MAAM,CAACrI,6BAA6B,EAAE;QACtD+O,EAAE,EAAEzH,GAAG;QACPhQ,cAAc,EAAEwJ;MAClB,CAAC,CAAC;IACJ;EACF;AACF;ACpEA,MAAMwzB,WAAW,GAAG,CAAC;EACnBC,+BAA+B,GAAG,CAAC;EACnCC,oCAAoC,GAAG,CAAC;EACxCC,qBAAqB,GAAG,CAAC;AAI3B,MAAMC,eAAe,CAAC;EAGpB79B,WAAW,GAA0C;IAAA,IAAzCqE,IAAyB,uEAAGo5B,WAAW;IAAE,KAFrDp5B,IAAI;IAGF,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEAy5B,8BAA8B,GAAkC;IAC9D,OACE,IAAI,CAACz5B,IAAI,KAAKs5B,oCAAoC,IAClD,IAAI,CAACt5B,IAAI,KAAKq5B,+BAA+B;EAEjD;EAEAK,+BAA+B,GAAG;IAChC,OAAO,IAAI,CAAC15B,IAAI,KAAKu5B,qBAAqB;EAC5C;AACF;AAUA,MAAMI,qBAAqB,SAASH,eAAe,CAAC;EAGlD79B,WAAW,CAACqE,IAAW,EAAE;IACvB,KAAK,CAACA,IAAI,CAAC;IAAC,KAHd45B,iBAAiB,GACf,IAAIziB,GAAG,EAAE;EAGX;EACA0iB,sBAAsB,CACpBC,iBAA4C,UAM5C;IAAA,IALA;MACEjmB;IAGF,CAAC;IAED,MAAM/X,KAAK,GAAG+X,EAAE,CAAC/X,KAAK;IAEtB,IAAI,CAAC89B,iBAAiB,CAACz8B,GAAG,CAACrB,KAAK,EAAE,CAACg+B,iBAAiB,EAAEjmB,EAAE,CAAC,CAAC;EAC5D;EACAkmB,qBAAqB,CAACj+B,KAAa,EAAE;IACnC,IAAI,CAAC89B,iBAAiB,CAACnR,MAAM,CAAC3sB,KAAK,CAAC;EACtC;EACAk+B,aAAa,CACXC,QAAmE,EACnE;IACA,IAAI,CAACL,iBAAiB,CAAClG,OAAO,CAACuG,QAAQ,CAAC;EAC1C;AACF;AAEe,MAAMC,sBAAsB,CAAC;EAI1Cv+B,WAAW,CAACsrB,MAAiB,EAAE;IAAA,KAH/BA,MAAM;IAAA,KACNwR,KAAK,GAA2B,CAAC,IAAIe,eAAe,EAAE,CAAC;IAGrD,IAAI,CAACvS,MAAM,GAAGA,MAAM;EACtB;EACAgB,KAAK,CAACE,KAAsB,EAAE;IAC5B,IAAI,CAACsQ,KAAK,CAACnnB,IAAI,CAAC6W,KAAK,CAAC;EACxB;EAEAD,IAAI,GAAG;IACL,IAAI,CAACuQ,KAAK,CAAC3W,GAAG,EAAE;EAClB;EASAqY,+BAA+B,CAC7BxG,YAAuD,UAMjD;IAAA,IALN;MACE9f,EAAE,EAAEnG;IAGN,CAAC;IAED,MAAM0sB,MAAM,GAAG;MAAEvmB,EAAE,EAAEnG,IAAI,CAACtB,GAAG,CAACnQ;KAAO;IACrC,MAAM;MAAEw8B;IAAM,CAAC,GAAG,IAAI;IACtB,IAAIn7B,CAAC,GAAGm7B,KAAK,CAAC37B,MAAM,GAAG,CAAC;IACxB,IAAIqrB,KAAsB,GAAGsQ,KAAK,CAACn7B,CAAC,CAAC;IACrC,OAAO,CAAC6qB,KAAK,CAACuR,+BAA+B,EAAE,EAAE;MAC/C,IAAIvR,KAAK,CAACsR,8BAA8B,EAAE,EAAE;QAC1CtR,KAAK,CAAC0R,sBAAsB,CAAClG,YAAY,EAAEyG,MAAM,CAAC;MACpD,CAAC,MAAM;QAGL;MACF;MACAjS,KAAK,GAAGsQ,KAAK,CAAC,EAAEn7B,CAAC,CAAC;IACpB;IACA,IAAI,CAAC2pB,MAAM,CAACrT,KAAK,CAAC+f,YAAY,EAAEyG,MAAM,CAAC;EACzC;EAqBAC,gCAAgC,CAC9BtC,KAAgC,UAM1B;IAAA,IALN;MACElkB,EAAE,EAAEnG;IAGN,CAAC;IAED,MAAM;MAAE+qB;IAAM,CAAC,GAAG,IAAI;IACtB,MAAMtQ,KAAsB,GAAGsQ,KAAK,CAACA,KAAK,CAAC37B,MAAM,GAAG,CAAC,CAAC;IACtD,MAAMs9B,MAAM,GAAG;MAAEvmB,EAAE,EAAEnG,IAAI,CAACtB,GAAG,CAACnQ;KAAO;IACrC,IAAIksB,KAAK,CAACuR,+BAA+B,EAAE,EAAE;MAC3C,IAAI,CAACzS,MAAM,CAACrT,KAAK,CAACmkB,KAAK,EAAEqC,MAAM,CAAC;IAClC,CAAC,MAAM,IAAIjS,KAAK,CAACsR,8BAA8B,EAAE,EAAE;MACjDtR,KAAK,CAAC0R,sBAAsB,CAAC9B,KAAK,EAAEqC,MAAM,CAAC;IAC7C,CAAC,MAAM;MACL;IACF;EACF;EAQAE,+BAA+B,SAAiC;IAAA,IAAhC;MAAEzmB;IAAqB,CAAC;IACtD,MAAM;MAAE4kB;IAAM,CAAC,GAAG,IAAI;IACtB,IAAIn7B,CAAC,GAAGm7B,KAAK,CAAC37B,MAAM,GAAG,CAAC;IACxB,IAAIqrB,KAAsB,GAAGsQ,KAAK,CAACn7B,CAAC,CAAC;IACrC,OAAO6qB,KAAK,CAACsR,8BAA8B,EAAE,EAAE;MAC7C,IAAItR,KAAK,CAACnoB,IAAI,KAAKs5B,oCAAoC,EAAE;QACvDnR,KAAK,CAAC0R,sBAAsB,CAAC1sB,MAAM,CAAC5M,sBAAsB,EAAE;UAAEsT;QAAG,CAAC,CAAC;MACrE;MACAsU,KAAK,GAAGsQ,KAAK,CAAC,EAAEn7B,CAAC,CAAC;IACpB;EACF;EAEAi9B,iBAAiB,GAAS;IACxB,MAAM;MAAE9B;IAAM,CAAC,GAAG,IAAI;IACtB,MAAMpR,YAAY,GAAGoR,KAAK,CAACA,KAAK,CAAC37B,MAAM,GAAG,CAAC,CAAC;IAC5C,IAAI,CAACuqB,YAAY,CAACoS,8BAA8B,EAAE,EAAE;IACpDpS,YAAY,CAAC2S,aAAa,CAAC,UAAyB;MAAA,IAAxB,CAACrG,YAAY,EAAEvnB,GAAG,CAAC;MAC7C,IAAI,CAAC6a,MAAM,CAACrT,KAAK,CAAC+f,YAAY,EAAE;QAAE9f,EAAE,EAAEzH;MAAI,CAAC,CAAC;MAE5C,IAAI9O,CAAC,GAAGm7B,KAAK,CAAC37B,MAAM,GAAG,CAAC;MACxB,IAAIqrB,KAAK,GAAGsQ,KAAK,CAACn7B,CAAC,CAAC;MACpB,OAAO6qB,KAAK,CAACsR,8BAA8B,EAAE,EAAE;QAC7CtR,KAAK,CAAC4R,qBAAqB,CAAC3tB,GAAG,CAACtQ,KAAK,CAAC;QACtCqsB,KAAK,GAAGsQ,KAAK,CAAC,EAAEn7B,CAAC,CAAC;MACpB;IACF,CAAC,CAAC;EACJ;AACF;AAEO,SAASk9B,4BAA4B,GAAG;EAC7C,OAAO,IAAIhB,eAAe,CAACD,qBAAqB,CAAC;AACnD;AAEO,SAASkB,iBAAiB,GAAG;EAClC,OAAO,IAAId,qBAAqB,CAACN,+BAA+B,CAAC;AACnE;AAEO,SAASqB,kBAAkB,GAAG;EACnC,OAAO,IAAIf,qBAAqB,CAACL,oCAAoC,CAAC;AACxE;AAEO,SAASqB,kBAAkB,GAAG;EACnC,OAAO,IAAInB,eAAe,EAAE;AAC9B;ACtPO,MACLoB,KAAK,GAAG,MAAM;EAEdC,WAAW,GAAG,MAAM;EAEpBC,WAAW,GAAG,MAAM;EAEpBC,YAAY,GAAG,MAAM;EACrBC,QAAQ,GAAG,MAAM;AAkCJ,MAAMC,0BAA0B,CAAC;EAAAt/B;IAAA,IAC9Cu/B,OAAM,GAAkB,EAAE;EAAA;EAC1BjT,KAAK,CAAC9Z,KAAa,EAAE;IACnB,IAAI,CAAC+sB,MAAM,CAAC5pB,IAAI,CAACnD,KAAK,CAAC;EACzB;EAEA+Z,IAAI,GAAG;IACL,IAAI,CAACgT,MAAM,CAACpZ,GAAG,EAAE;EACnB;EAEAqZ,YAAY,GAAW;IACrB,OAAO,IAAI,CAACD,MAAM,CAAC,IAAI,CAACA,MAAM,CAACp+B,MAAM,GAAG,CAAC,CAAC;EAC5C;EAEA,IAAIs+B,QAAQ,GAAY;IACtB,OAAO,CAAC,IAAI,CAACD,YAAY,EAAE,GAAGL,WAAW,IAAI,CAAC;EAChD;EAEA,IAAIO,QAAQ,GAAY;IACtB,OAAO,CAAC,IAAI,CAACF,YAAY,EAAE,GAAGN,WAAW,IAAI,CAAC;EAChD;EAEA,IAAIS,SAAS,GAAY;IACvB,OAAO,CAAC,IAAI,CAACH,YAAY,EAAE,GAAGJ,YAAY,IAAI,CAAC;EACjD;EAEA,IAAIQ,KAAK,GAAY;IACnB,OAAO,CAAC,IAAI,CAACJ,YAAY,EAAE,GAAGH,QAAQ,IAAI,CAAC;EAC7C;AACF;AAEO,SAASQ,aAAa,CAC3B3rB,OAAgB,EAChBoB,WAAoB,EACT;EACX,OAAO,CAACpB,OAAO,GAAGirB,WAAW,GAAG,CAAC,KAAK7pB,WAAW,GAAG4pB,WAAW,GAAG,CAAC,CAAC;AACtE;ACzCe,MAAeY,UAAU,SAASzJ,SAAS,CAAC;EAIzD0J,QAAQ,CACNhuB,IAAmB,EACnBxQ,GAAW,EACXE,KAAU,EAEJ;IAAA,IADNU,UAAmB,uEAAG,IAAI;IAE1B,IAAI,CAAC4P,IAAI,EAAE;IAEX,MAAM8B,KAAK,GAAI9B,IAAI,CAAC8B,KAAK,GAAG9B,IAAI,CAAC8B,KAAK,IAAI,EAAG;IAC7C,IAAI1R,UAAU,EAAE;MACd0R,KAAK,CAACtS,GAAG,CAAC,GAAGE,KAAK;IACpB,CAAC,MAAM;MACLM,MAAM,CAACO,cAAc,CAACuR,KAAK,EAAEtS,GAAG,EAAE;QAAEY,UAAU;QAAEV;MAAM,CAAC,CAAC;IAC1D;EACF;EAIAu+B,YAAY,CAACnwB,KAAgB,EAAW;IACtC,OAAO,IAAI,CAACkJ,KAAK,CAAC1U,IAAI,KAAKwL,KAAK,IAAI,CAAC,IAAI,CAACkJ,KAAK,CAACgZ,WAAW;EAC7D;EAEAkO,oBAAoB,CAACC,SAAiB,EAAEj2B,IAAY,EAAW;IAC7D,MAAMk2B,OAAO,GAAGD,SAAS,GAAGj2B,IAAI,CAAC9I,MAAM;IACvC,IAAI,IAAI,CAACyuB,KAAK,CAAC+C,KAAK,CAACuN,SAAS,EAAEC,OAAO,CAAC,KAAKl2B,IAAI,EAAE;MACjD,MAAMm2B,MAAM,GAAG,IAAI,CAACxQ,KAAK,CAACC,UAAU,CAACsQ,OAAO,CAAC;MAC7C,OAAO,EACLpZ,gBAAgB,CAACqZ,MAAM,CAAC,IAIxB,CAACA,MAAM,GAAG,MAAM,MAAM,MAAM,CAC7B;IACH;IACA,OAAO,KAAK;EACd;EAEAC,qBAAqB,CAACp2B,IAAY,EAAW;IAC3C,MAAM8d,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,OAAO,IAAI,CAAC0I,oBAAoB,CAAClY,IAAI,EAAE9d,IAAI,CAAC;EAC9C;EAIAq2B,aAAa,CAACzwB,KAAgB,EAAW;IACvC,IAAI,IAAI,CAACmwB,YAAY,CAACnwB,KAAK,CAAC,EAAE;MAC5B,IAAI,CAACkY,IAAI,EAAE;MACX,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAIAwY,gBAAgB,CACd1wB,KAAgB,EAChBmoB,YAAyC,EACnC;IACN,IAAI,CAAC,IAAI,CAACsI,aAAa,CAACzwB,KAAK,CAAC,EAAE;MAC9B,IAAImoB,YAAY,IAAI,IAAI,EAAE;QACxB,MAAM,IAAI,CAAC/f,KAAK,CAAC+f,YAAY,EAAE;UAAE9f,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QAAS,CAAC,CAAC;MAC7D;MACA,MAAM,IAAI,CAACnO,UAAU,CAAC,IAAI,EAAE4G,KAAK,CAAC;IACpC;EACF;EAIA2wB,kBAAkB,GAAY;IAC5B,OACE,IAAI,CAAC/L,KAAK,KAAQ,IAClB,IAAI,CAACA,KAAK,CAAW,MACrB,IAAI,CAACgM,qBAAqB,EAAE;EAEhC;EAEAA,qBAAqB,GAAY;IAC/B,OAAOxQ,SAAS,CAACpJ,IAAI,CACnB,IAAI,CAAC+I,KAAK,CAAC+C,KAAK,CAAC,IAAI,CAAC5Z,KAAK,CAACqB,aAAa,CAACja,KAAK,EAAE,IAAI,CAAC4Y,KAAK,CAACzY,KAAK,CAAC,CACnE;EACH;EAEAogC,qBAAqB,GAAY;IAC/BpQ,yBAAyB,CAACmH,SAAS,GAAG,IAAI,CAAC1e,KAAK,CAACxY,GAAG;IACpD,OAAO+vB,yBAAyB,CAACzJ,IAAI,CAAC,IAAI,CAAC+I,KAAK,CAAC;EACnD;EAEA+Q,gBAAgB,GAAY;IAC1B,OAAO,IAAI,CAAC1J,GAAG,IAAS,IAAI,IAAI,CAACuJ,kBAAkB,EAAE;EACvD;EAKAI,SAAS,GAAiC;IAAA,IAAhCC,QAAiB,uEAAG,IAAI;IAChC,IAAIA,QAAQ,GAAG,IAAI,CAACF,gBAAgB,EAAE,GAAG,IAAI,CAAC1J,GAAG,IAAS,EAAE;IAC5D,IAAI,CAAChf,KAAK,CAACzG,MAAM,CAAC1H,gBAAgB,EAAE;MAAEoO,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB;IAAc,CAAC,CAAC;EACvE;EAKA0mB,MAAM,CAACz8B,IAAe,EAAEoM,GAAqB,EAAQ;IACnD,IAAI,CAACwmB,GAAG,CAAC5yB,IAAI,CAAC,IAAI,IAAI,CAAC4E,UAAU,CAACwH,GAAG,EAAEpM,IAAI,CAAC;EAC9C;EAIA08B,QAAQ,CACNC,EAAqC,EAKU;IAAA,IAJ/CC,QAAe,uEAAG,IAAI,CAACloB,KAAK,CAACpI,KAAK,EAAE;IAKpC,MAAMuwB,WAEL,GAAG;MAAEnvB,IAAI,EAAE;KAAM;IAClB,IAAI;MACF,MAAMA,IAAI,GAAGivB,EAAE,CAAC,YAAiB;QAAA,IAAhBjvB,IAAI,uEAAG,IAAI;QAC1BmvB,WAAW,CAACnvB,IAAI,GAAGA,IAAI;QACvB,MAAMmvB,WAAW;MACnB,CAAC,CAAC;MACF,IAAI,IAAI,CAACnoB,KAAK,CAAC4X,MAAM,CAACxvB,MAAM,GAAG8/B,QAAQ,CAACtQ,MAAM,CAACxvB,MAAM,EAAE;QACrD,MAAMggC,SAAS,GAAG,IAAI,CAACpoB,KAAK;QAC5B,IAAI,CAACA,KAAK,GAAGkoB,QAAQ;QAIrB,IAAI,CAACloB,KAAK,CAACmZ,YAAY,GAAGiP,SAAS,CAACjP,YAAY;QAChD,OAAO;UACLngB,IAAI;UACJqqB,KAAK,EAAE+E,SAAS,CAACxQ,MAAM,CAACsQ,QAAQ,CAACtQ,MAAM,CAACxvB,MAAM,CAAC;UAC/CigC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE,KAAK;UACdF;SACD;MACH;MAEA,OAAO;QACLpvB,IAAI;QACJqqB,KAAK,EAAE,IAAI;QACXgF,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,KAAK;QACdF,SAAS,EAAE;OACZ;KACF,CAAC,OAAO/E,KAAK,EAAE;MACd,MAAM+E,SAAS,GAAG,IAAI,CAACpoB,KAAK;MAC5B,IAAI,CAACA,KAAK,GAAGkoB,QAAQ;MACrB,IAAI7E,KAAK,YAAYt7B,WAAW,EAAE;QAEhC,OAAO;UAAEiR,IAAI,EAAE,IAAI;UAAEqqB,KAAK;UAAEgF,MAAM,EAAE,IAAI;UAAEC,OAAO,EAAE,KAAK;UAAEF;SAAW;MACvE;MACA,IAAI/E,KAAK,KAAK8E,WAAW,EAAE;QACzB,OAAO;UACLnvB,IAAI,EAAEmvB,WAAW,CAACnvB,IAAI;UACtBqqB,KAAK,EAAE,IAAI;UACXgF,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE,IAAI;UACbF;SACD;MACH;MAEA,MAAM/E,KAAK;IACb;EACF;EAEAkF,qBAAqB,CACnBjqB,mBAAwD,EACxDkqB,QAAiB,EACjB;IACA,IAAI,CAAClqB,mBAAmB,EAAE,OAAO,KAAK;IACtC,MAAM;MACJmqB,kBAAkB;MAClBC,cAAc;MACdC,aAAa;MACbC;IACF,CAAC,GAAGtqB,mBAAmB;IAEvB,MAAMuqB,SAAS,GACb,CAAC,CAACJ,kBAAkB,IACpB,CAAC,CAACC,cAAc,IAChB,CAAC,CAACE,qBAAqB,IACvB,CAAC,CAACD,aAAa;IAEjB,IAAI,CAACH,QAAQ,EAAE;MACb,OAAOK,SAAS;IAClB;IAEA,IAAIJ,kBAAkB,IAAI,IAAI,EAAE;MAC9B,IAAI,CAACvpB,KAAK,CAACzG,MAAM,CAACtJ,2BAA2B,EAAE;QAC7CgQ,EAAE,EAAEspB;MACN,CAAC,CAAC;IACJ;IAEA,IAAIC,cAAc,IAAI,IAAI,EAAE;MAC1B,IAAI,CAACxpB,KAAK,CAACzG,MAAM,CAAClL,cAAc,EAAE;QAAE4R,EAAE,EAAEupB;MAAe,CAAC,CAAC;IAC3D;IAEA,IAAIC,aAAa,IAAI,IAAI,EAAE;MACzB,IAAI,CAACzpB,KAAK,CAACzG,MAAM,CAACpE,sBAAsB,EAAE;QAAE8K,EAAE,EAAEwpB;MAAc,CAAC,CAAC;IAClE;IAEA,IAAIC,qBAAqB,IAAI,IAAI,EAAE;MACjC,IAAI,CAAC14B,UAAU,CAAC04B,qBAAqB,CAAC;IACxC;EACF;EAWAE,qBAAqB,GAAY;IAC/B,OAAO5c,0BAA0B,CAAC,IAAI,CAAClM,KAAK,CAAC1U,IAAI,CAAC;EACpD;EAMA4R,aAAa,CAAClE,IAAU,EAAW;IACjC,OAAOA,IAAI,CAAC1N,IAAI,KAAK,aAAa;EACpC;EAOA0R,gBAAgB,CAAChE,IAAU,EAAU;IACnC,OAAOA,IAAI,CAACiE,EAAE,CAAC/L,IAAI;EACrB;EAOA6P,wBAAwB,CAAC/H,IAAU,EAAW;IAC5C,OACE,CAACA,IAAI,CAAC1N,IAAI,KAAK,kBAAkB,IAC/B0N,IAAI,CAAC1N,IAAI,KAAK,0BAA0B,KAC1C,IAAI,CAAC4R,aAAa,CAAClE,IAAI,CAAC+vB,QAAQ,CAAC;EAErC;EAEA/nB,eAAe,CAAChI,IAAU,EAAW;IACnC,OACEA,IAAI,CAAC1N,IAAI,KAAK,0BAA0B,IACxC0N,IAAI,CAAC1N,IAAI,KAAK,wBAAwB;EAE1C;EAEA+P,gBAAgB,CACdrC,IAAU,EACyC;IACnD,OAAOA,IAAI,CAAC1N,IAAI,KAAK,gBAAgB;EACvC;EAEA2V,cAAc,CAACjI,IAAU,EAAW;IAClC,OAAOA,IAAI,CAAC1N,IAAI,KAAK,cAAc;EACrC;EAEA09B,gBAAgB,GAGF;IAAA,IADZxa,QAAiB,uEAAG,IAAI,CAACnV,OAAO,CAACigB,UAAU,KAAK,QAAQ;IAGxD,MAAM2P,SAAS,GAAG,IAAI,CAACjpB,KAAK,CAAC4Y,MAAM;IACnC,IAAI,CAAC5Y,KAAK,CAAC4Y,MAAM,GAAG,EAAE;IAEtB,MAAMsQ,sBAAsB,GAAG,IAAI,CAACC,mBAAmB;IACvD,IAAI,CAACA,mBAAmB,GAAG,IAAI1yB,GAAG,EAAE;IAGpC,MAAM2yB,WAAW,GAAG,IAAI,CAAC5a,QAAQ;IACjC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAExB,MAAM6a,QAAQ,GAAG,IAAI,CAAC5V,KAAK;IAC3B,MAAMnB,YAAY,GAAG,IAAI,CAACgX,eAAe,EAAE;IAC3C,IAAI,CAAC7V,KAAK,GAAG,IAAInB,YAAY,CAAC,IAAI,EAAE9D,QAAQ,CAAC;IAE7C,MAAM+a,YAAY,GAAG,IAAI,CAACC,SAAS;IACnC,IAAI,CAACA,SAAS,GAAG,IAAIjD,0BAA0B,EAAE;IAEjD,MAAMvC,aAAa,GAAG,IAAI,CAACllB,UAAU;IACrC,IAAI,CAACA,UAAU,GAAG,IAAIglB,iBAAiB,CAAC,IAAI,CAAC;IAE7C,MAAM2F,kBAAkB,GAAG,IAAI,CAACC,eAAe;IAC/C,IAAI,CAACA,eAAe,GAAG,IAAIlE,sBAAsB,CAAC,IAAI,CAAC;IAEvD,OAAO,MAAM;MAEX,IAAI,CAACxlB,KAAK,CAAC4Y,MAAM,GAAGqQ,SAAS;MAC7B,IAAI,CAACE,mBAAmB,GAAGD,sBAAsB;MAGjD,IAAI,CAAC1a,QAAQ,GAAG4a,WAAW;MAC3B,IAAI,CAAC3V,KAAK,GAAG4V,QAAQ;MACrB,IAAI,CAACG,SAAS,GAAGD,YAAY;MAC7B,IAAI,CAACzqB,UAAU,GAAGklB,aAAa;MAC/B,IAAI,CAAC0F,eAAe,GAAGD,kBAAkB;KAC1C;EACH;EAEAE,kBAAkB,GAAG;IACnB,IAAIC,UAAU,GAAG1D,KAAK;IACtB,IAAI,IAAI,CAAC1X,QAAQ,EAAE;MACjBob,UAAU,IAAIxD,WAAW;IAC3B;IACA,IAAI,CAAC3S,KAAK,CAACF,KAAK,CAAClE,aAAa,CAAC;IAC/B,IAAI,CAACma,SAAS,CAACjW,KAAK,CAACqW,UAAU,CAAC;EAClC;EAEAC,yBAAyB,CAACvrB,mBAAqC,EAAE;IAC/D,MAAM;MAAEqqB;IAAc,CAAC,GAAGrqB,mBAAmB;IAC7C,IAAIqqB,aAAa,KAAK,IAAI,EAAE;MAC1B,IAAI,CAACzI,YAAY,CAAC,sBAAsB,EAAEyI,aAAa,CAAC;IAC1D;EACF;AACF;AAeO,MAAMmB,gBAAgB,CAAC;EAAA7iC;IAAA,IAC5BwhC,mBAAkB,GAAgC,IAAI;IAAA,IACtDC,eAAc,GAAgC,IAAI;IAAA,IAClDC,cAAa,GAAgC,IAAI;IAAA,IACjDC,sBAAqB,GAAgC,IAAI;EAAA;AAC3D;AC3XA,MAAMmB,IAAI,CAAqB;EAC7B9iC,WAAW,CAACsrB,MAAc,EAAEza,GAAW,EAAEJ,GAAa,EAAE;IAAA,IAQxDpM,KAAI,GAAW,EAAE;IAPf,IAAI,CAAC/D,KAAK,GAAGuQ,GAAG;IAChB,IAAI,CAACtQ,GAAG,GAAG,CAAC;IACZ,IAAI,CAACkQ,GAAG,GAAG,IAAIpQ,cAAc,CAACoQ,GAAG,CAAC;IAClC,IAAI6a,MAAM,IAANA,cAAM,CAAElZ,OAAO,CAAC2wB,MAAM,EAAE,IAAI,CAACC,KAAK,GAAG,CAACnyB,GAAG,EAAE,CAAC,CAAC;IACjD,IAAIya,MAAM,YAANA,MAAM,CAAE9qB,QAAQ,EAAE,IAAI,CAACiQ,GAAG,CAACjQ,QAAQ,GAAG8qB,MAAM,CAAC9qB,QAAQ;EAC3D;AAaF;AACA,MAAMyiC,aAAa,GAAGH,IAAI,CAACI,SAAS;AAED;EAEjCD,aAAa,CAACE,OAAO,GAAG,YAAkB;IACxC,MAAMC,OAAO,GAAG,IAAIN,IAAI,CAAC3U,SAAS,EAAE,IAAI,CAAC7tB,KAAK,EAAE,IAAI,CAACmQ,GAAG,CAACnQ,KAAK,CAAC;IAC/D,MAAMW,IAAI,GAAGc,MAAM,CAACd,IAAI,CAAC,IAAI,CAAmB;IAChD,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAER,MAAM,GAAGF,IAAI,CAACE,MAAM,EAAEQ,CAAC,GAAGR,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACrD,MAAMJ,GAAG,GAAGN,IAAI,CAACU,CAAC,CAAC;MAEnB,IACEJ,GAAG,KAAK,iBAAiB,IACzBA,GAAG,KAAK,kBAAkB,IAC1BA,GAAG,KAAK,eAAe,EACvB;QAEA6hC,OAAO,CAAC7hC,GAAG,CAAC,GAAG,IAAI,CAACA,GAAG,CAAC;MAC1B;IACF;IAEA,OAAO6hC,OAAO;GACf;AACH;AAEA,SAASC,gBAAgB,CAACtxB,IAAS,EAAO;EACxC,OAAOuxB,eAAe,CAACvxB,IAAI,CAAC;AAC9B;AAEO,SAASuxB,eAAe,CAACvxB,IAAS,EAAO;EAI9C,MAAM;IAAE1N,IAAI;IAAE/D,KAAK;IAAEC,GAAG;IAAEkQ,GAAG;IAAEuyB,KAAK;IAAEnvB,KAAK;IAAE5J;EAAK,CAAC,GAAG8H,IAAI;EAC1D,MAAMwxB,MAAM,GAAGxhC,MAAM,CAACyhC,MAAM,CAACP,aAAa,CAAC;EAC3CM,MAAM,CAACl/B,IAAI,GAAGA,IAAI;EAClBk/B,MAAM,CAACjjC,KAAK,GAAGA,KAAK;EACpBijC,MAAM,CAAChjC,GAAG,GAAGA,GAAG;EAChBgjC,MAAM,CAAC9yB,GAAG,GAAGA,GAAG;EAChB8yB,MAAM,CAACP,KAAK,GAAGA,KAAK;EACpBO,MAAM,CAAC1vB,KAAK,GAAGA,KAAK;EACpB0vB,MAAM,CAACt5B,IAAI,GAAGA,IAAI;EAClB,IAAI5F,IAAI,KAAK,aAAa,EAAE;IAC1Bk/B,MAAM,CAACE,YAAY,GAAG1xB,IAAI,CAAC0xB,YAAY;EACzC;EACA,OAAOF,MAAM;AACf;AAEO,SAASG,kBAAkB,CAAC3xB,IAAS,EAAO;EACjD,MAAM;IAAE1N,IAAI;IAAE/D,KAAK;IAAEC,GAAG;IAAEkQ,GAAG;IAAEuyB,KAAK;IAAEnvB;EAAM,CAAC,GAAG9B,IAAI;EACpD,IAAI1N,IAAI,KAAK,aAAa,EAAE;IAC1B,OAAOg/B,gBAAgB,CAACtxB,IAAI,CAAC;EAC/B;EACA,MAAMwxB,MAAM,GAAGxhC,MAAM,CAACyhC,MAAM,CAACP,aAAa,CAAC;EAC3CM,MAAM,CAACl/B,IAAI,GAAGA,IAAI;EAClBk/B,MAAM,CAACjjC,KAAK,GAAGA,KAAK;EACpBijC,MAAM,CAAChjC,GAAG,GAAGA,GAAG;EAChBgjC,MAAM,CAAC9yB,GAAG,GAAGA,GAAG;EAChB8yB,MAAM,CAACP,KAAK,GAAGA,KAAK;EACpB,IAAIjxB,IAAI,CAAC6B,GAAG,KAAKua,SAAS,EAAE;IAE1BoV,MAAM,CAAC3vB,GAAG,GAAG7B,IAAI,CAAC6B,GAAG;EACvB,CAAC,MAAM;IACL2vB,MAAM,CAAC1vB,KAAK,GAAGA,KAAK;EACtB;EACA0vB,MAAM,CAAC9hC,KAAK,GAAGsQ,IAAI,CAACtQ,KAAK;EACzB,OAAO8hC,MAAM;AACf;AAIO,MAAeI,SAAS,SAAS7D,UAAU,CAAC;EACjDtpB,SAAS,GAAkC;IAEzC,OAAO,IAAIssB,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC/pB,KAAK,CAACzY,KAAK,EAAE,IAAI,CAACyY,KAAK,CAAC3B,QAAQ,CAAC;EAC9D;EAEAwsB,WAAW,CAAqBnzB,GAAa,EAAa;IAExD,OAAO,IAAIqyB,IAAI,CAAC,IAAI,EAAEryB,GAAG,CAACtQ,KAAK,EAAEsQ,GAAG,CAAC;EACvC;EAGAoJ,eAAe,CAAqBxV,IAAsB,EAAa;IACrE,OAAO,IAAI,CAACu/B,WAAW,CAACv/B,IAAI,CAACoM,GAAG,CAACnQ,KAAK,CAAC;EACzC;EAIAoW,UAAU,CAAqB3E,IAAe,EAAE1N,IAAe,EAAK;IAClE,OAAO,IAAI,CAAC4V,YAAY,CAAClI,IAAI,EAAE1N,IAAI,EAAE,IAAI,CAAC0U,KAAK,CAACqB,aAAa,CAAC;EAChE;EAIAH,YAAY,CACVlI,IAAqB,EACrB1N,IAAe,EACf6V,MAAgB,EACb;IAQHnI,IAAI,CAAC1N,IAAI,GAAGA,IAAI;IAEhB0N,IAAI,CAACxR,GAAG,GAAG2Z,MAAM,CAAC/Z,KAAK;IACvB4R,IAAI,CAACtB,GAAG,CAAClQ,GAAG,GAAG2Z,MAAM;IACrB,IAAI,IAAI,CAAC9H,OAAO,CAAC2wB,MAAM,EAAEhxB,IAAI,CAACixB,KAAK,CAAC,CAAC,CAAC,GAAG9oB,MAAM,CAAC/Z,KAAK;IACrD,IAAI,IAAI,CAACiS,OAAO,CAACsmB,aAAa,EAAE,IAAI,CAAC1J,cAAc,CAACjd,IAAI,CAAM;IAC9D,OAAOA,IAAI;EACb;EAEAsH,kBAAkB,CAACtH,IAAc,EAAEqF,QAAkB,EAAQ;IAC3DrF,IAAI,CAACzR,KAAK,GAAG8W,QAAQ,CAACjX,KAAK;IAC3B4R,IAAI,CAACtB,GAAG,CAACnQ,KAAK,GAAG8W,QAAQ;IACzB,IAAI,IAAI,CAAChF,OAAO,CAAC2wB,MAAM,EAAEhxB,IAAI,CAACixB,KAAK,CAAC,CAAC,CAAC,GAAG5rB,QAAQ,CAACjX,KAAK;EACzD;EAEAga,gBAAgB,CACdpI,IAAc,EAER;IAAA,IADNmI,MAAgB,uEAAG,IAAI,CAACnB,KAAK,CAACqB,aAAa;IAE3CrI,IAAI,CAACxR,GAAG,GAAG2Z,MAAM,CAAC/Z,KAAK;IACvB4R,IAAI,CAACtB,GAAG,CAAClQ,GAAG,GAAG2Z,MAAM;IACrB,IAAI,IAAI,CAAC9H,OAAO,CAAC2wB,MAAM,EAAEhxB,IAAI,CAACixB,KAAK,CAAC,CAAC,CAAC,GAAG9oB,MAAM,CAAC/Z,KAAK;EACvD;EAKA0jC,0BAA0B,CAAC9xB,IAAc,EAAE+xB,YAAsB,EAAQ;IACvE,IAAI,CAACzqB,kBAAkB,CAACtH,IAAI,EAAE+xB,YAAY,CAACrzB,GAAG,CAACnQ,KAAK,CAAC;EACvD;AACF;AClIA,MAAMyjC,aAAa,GAAG,IAAIv0B,GAAG,CAAC,CAC5B,GAAG,EACH,KAAK,EACL,MAAM,EACN,SAAS,EACT,OAAO,EACP,SAAS,EACT,OAAO,EACP,WAAW,EACX,OAAO,EACP,MAAM,EACN,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,MAAM,EACN,QAAQ,EACR,MAAM,CACP,CAAC;AAIF,MAAMw0B,UAAU,GAAGlzB,cAAe,MAAK,CAAC;EACtCmzB,yBAAyB,EACvB,gFAAgF;EAClFC,0BAA0B,EACxB,wKAAwK;EAG1KC,kBAAkB,EAAE;IAAA,IAAC;MAAEC;KAAwC;IAAA,OAC3BA,8CAAe;EAAA;EACnDC,mBAAmB,EACjB,yDAAyD;EAC3DC,4BAA4B,EAC1B,qEAAqE;EACvEC,6BAA6B,EAC3B,+CAA+C;EACjDC,+BAA+B,EAAE;IAAA,IAAC;MAChCC,UAAU;MACVC;IAIF,CAAC;IAAA,OAC8DD,uEAAW,mBAAkBA,UAAW,yBAAwBC,QAAa;EAAA;EAC5IC,uBAAuB,EAAE;IAAA,IAAC;MACxBF,UAAU;MACVC;IAIF,CAAC;IAAA,OACE,uDAAsDD,UAAW,6CAA4CC,QAAa;EAAA;EAC7HE,4BAA4B,EAAE;IAAA,IAAC;MAAEF;KAAgC;IAAA,OACrDA,kBAA+K;EAAA;EAC3LG,uBAAuB,EAAE;IAAA,IAAC;MACxBC,eAAe;MACfJ;IAIF,CAAC;IAAA,OACE,eAAcI,eAAgB,4FAA2FJ,QAAa;EAAA;EACzIK,sCAAsC,EAAE;IAAA,IAAC;MACvCL;KAGD;IAAA,OAC6GA,oHAAa;EAAA;EAa3HM,uCAAuC,EAAE;IAAA,IAAC;MACxCN,QAAQ;MACRD,UAAU;MACVQ;KAKD;IAAA,OACE,UAASP,QAAS,iBAAgBO,YAA2CR,yCAA8BQ,gCAAuB;EAAA;EACrIC,sCAAsC,EAAE;IAAA,IAAC;MACvCR,QAAQ;MACRD;IAKF,CAAC;IAAA,OACE,oDAAmDA,UAAW,iBAAgBC,QAAa;EAAA;EAC9FS,uCAAuC,EAAE;IAAA,IAAC;MACxCT,QAAQ;MACRD;IAKF,CAAC;IAAA,OACE,qCAAoCA,UAAW,4EAA2EC,QAAa;EAAA;EAC1IU,qBAAqB,EAAE;IAAA,IAAC;MACtBV,QAAQ;MACRD,UAAU;MACVY;IAKF,CAAC;IAAA,OACsFZ,+FAAW,wBAAuBY,UAAW,iBAAgBX,QAAa;EAAA;EACjKY,8BAA8B,EAAE;IAAA,IAAC;MAC/BZ,QAAQ;MACRD;IAIF,CAAC;IAAA,OACE,sDAAqDA,UAAW,oBAAmBC,QAAa;EAAA;EACnGa,yCAAyC,EAAE;IAAA,IAAC;MAC1Cb;KAGD;IAAA,OAC4GA,mHAAa;EAAA;EAC1Hc,yBAAyB,EAAE,0CAA0C;EACrEC,6BAA6B,EAC3B,wEAAwE;EAC1EC,mCAAmC,EACjC,wKAAwK;EAC1KC,kBAAkB,EAChB,6EAA6E;EAC/EC,sBAAsB,EACpB,0EAA0E;EAC5EC,eAAe,EAAE,+CAA+C;EAChEC,mCAAmC,EACjC,yFAAyF;EAC3FC,uBAAuB,EACrB,yGAAyG;EAC3GC,mBAAmB,EACjB,kEAAkE;EACpEC,iBAAiB,EAAE,yDAAyD;EAC5EC,iBAAiB;IACfxjC,OAAO,EACL;GAGE;IAAE2O,UAAU,EAAE;EAAyB,CAAC,CAE7C;EACD80B,yBAAyB,EAAE,0CAA0C;EACrEC,cAAc,EAAE,yCAAyC;EACzDC,2BAA2B,EACzB,yDAAyD;EAC3DC,4BAA4B,EAC1B,mGAAmG;EACrGC,yBAAyB,EAAE,0CAA0C;EACrEC,oBAAoB,EAClB,4DAA4D;EAC9DC,kBAAkB,EAAE,oDAAoD;EACxEC,qBAAqB,EACnB,mHAAmH;EACrHC,iBAAiB,EACf,sEAAsE;EACxEC,iCAAiC,EAC/B,sEAAsE;EACxEC,sBAAsB,EAAE;IAAA,IAAC;MAAEzC;KAAwC;IAAA,OACrCA,wCAAe;EAAA;EAC7C0C,4BAA4B,EAC1B,wDAAwD;EAC1DC,kCAAkC,EAChC,uDAAuD;EACzDC,oBAAoB,EAClB,kEAAkE;EACpEC,4BAA4B,EAC1B,kDAAkD;EACpDC,iCAAiC,EAC/B,mEAAmE;EACrEC,+CAA+C,EAC7C,mHAAmH;EACrHC,4BAA4B,EAAE;IAAA,IAAC;MAC7BC,qBAAqB;MACrBhC;IAIF,CAAC;IAAA,OACE,oBAAmBgC,qBAAsB,8BAA6BhC,UAAuB;EAAA;EAChGiC,mCAAmC,EACjC,mEAAmE;EACrEC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AAGF,SAASC,cAAc,CAACC,WAAmB,EAAW;EACpD,OACEA,WAAW,CAACpjC,IAAI,KAAK,6BAA6B,IACjDojC,WAAW,CAACpjC,IAAI,KAAK,0BAA0B,KAC7C,CAACojC,WAAW,CAACtuB,WAAW,IACtBsuB,WAAW,CAACtuB,WAAW,CAAC9U,IAAI,KAAK,WAAW,IAC3CojC,WAAW,CAACtuB,WAAW,CAAC9U,IAAI,KAAK,sBAAuB,CAAE;AAEpE;AAEA,SAASqjC,iBAAiB,CAAC31B,IAAY,EAAW;EAChD,OAAOA,IAAI,CAAC41B,UAAU,KAAK,MAAM,IAAI51B,IAAI,CAAC41B,UAAU,KAAK,QAAQ;AACnE;AAEA,SAASC,oBAAoB,CAACvjC,IAAe,EAAW;EACtD,OAAO2gB,0BAA0B,CAAC3gB,IAAI,CAAC,IAAIA,IAAI,KAAa;AAC9D;AAEA,MAAMwjC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,oBAAoB;EAC3BC,GAAG,EAAE,oBAAoB;EACzB1jC,IAAI,EAAE,aAAa;EACnB2jC,SAAS,EAAE;AACb,CAAC;AAGD,SAASC,SAAS,CAChBC,IAAS,EACTrhB,IAA6D,EACjD;EACZ,MAAMshB,KAAU,GAAG,EAAE;EACrB,MAAMC,KAAU,GAAG,EAAE;EACrB,KAAK,IAAIzmC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGumC,IAAI,CAAC/mC,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACpC,CAACklB,IAAI,CAACqhB,IAAI,CAACvmC,CAAC,CAAC,EAAEA,CAAC,EAAEumC,IAAI,CAAC,GAAGC,KAAK,GAAGC,KAAK,EAAEzyB,IAAI,CAACuyB,IAAI,CAACvmC,CAAC,CAAC,CAAC;EACxD;EACA,OAAO,CAACwmC,KAAK,EAAEC,KAAK,CAAC;AACvB;AAEA,MAAMC,iBAAiB,GAAG,wBAAwB;AAoClD,WAAgBr2B,UAAyB,IACvC,MAAMs2B,eAAe,SAASt2B,UAAU,CAAmB;EAAAhS;IAAA;IAAA,IAIzDuoC,WAAU,GAAoCpa,SAAS;EAAA;EAEvDkU,eAAe,GAEb;IACA,OAAOhV,gBAAgB;EACzB;EAEAmb,gBAAgB,GAAY;IAC1B,OAAO,IAAI,CAAC3yB,eAAe,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC0yB,UAAU,KAAK,MAAM;EAC1E;EAEAE,gBAAgB,GAAY;IAC1B,OAAO,CAAC,CAAC,IAAI,CAAC5yB,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC;EAChD;EAEAsiB,WAAW,CAAC9zB,IAAe,EAAEquB,GAAQ,EAAQ;IAC3C,IACEruB,IAAI,QAAc,IAClBA,IAAI,OAAY,IAChBA,IAAI,OAA4B,EAChC;MACA,IAAI,IAAI,CAACkkC,UAAU,KAAKpa,SAAS,EAAE;QACjC,IAAI,CAACoa,UAAU,GAAG,IAAI;MACxB;IACF;IACA,OAAO,KAAK,CAACpQ,WAAW,CAAC9zB,IAAI,EAAEquB,GAAG,CAAC;EACrC;EAEA5D,UAAU,CAACC,OAAkB,EAAQ;IACnC,IAAI,IAAI,CAACwZ,UAAU,KAAKpa,SAAS,EAAE;MAEjC,MAAMua,OAAO,GAAGL,iBAAiB,CAACM,IAAI,CAAC5Z,OAAO,CAACttB,KAAK,CAAC;MACrD,IAAI,CAACinC,OAAO,EAAE,CAEb,KAAM,IAAIA,OAAO,CAAC,CAAC,CAAC,KAAK,MAAM,EAAE;QAChC,IAAI,CAACH,UAAU,GAAG,MAAM;OACzB,MAAM,IAAIG,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAClC,IAAI,CAACH,UAAU,GAAG,QAAQ;MAC5B,CAAC,MAAM;QACL,MAAM,IAAIK,KAAK,CAAC,wBAAwB,CAAC;MAC3C;IACF;IACA,OAAO,KAAK,CAAC9Z,UAAU,CAACC,OAAO,CAAC;EAClC;EAEA8Z,wBAAwB,CAACC,GAAe,EAAc;IACpD,MAAMC,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,IAAI,CAACjY,KAAK,CAACiY,MAAM,GAAG,IAAI;IACxB,IAAI,CAAC8P,MAAM,CAACgI,GAAG,MAAY,CAAC;IAE5B,MAAMzkC,IAAI,GAAG,IAAI,CAAC2kC,aAAa,EAAE;IACjC,IAAI,CAACjwB,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAC7B,OAAO1kC,IAAI;EACb;EAEA4kC,kBAAkB,GAAoB;IACpC,MAAMl3B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,MAAM0yB,SAAS,GAAG,IAAI,CAACnwB,KAAK,CAAC3B,QAAQ;IACrC,IAAI,CAAC2Q,IAAI,EAAE;IACX,IAAI,CAACwY,gBAAgB,CAAY;IAEjC,IAAI,IAAI,CAACxnB,KAAK,CAAC6Y,YAAY,GAAGsX,SAAS,CAAC/oC,KAAK,GAAG,CAAC,EAAE;MACjD,IAAI,CAAC8X,KAAK,CAAC+rB,UAAU,CAAC+C,kCAAkC,EAAE;QACxD7uB,EAAE,EAAEgxB;MACN,CAAC,CAAC;IACJ;IACA,IAAI,IAAI,CAACjS,GAAG,IAAW,EAAE;MACvBllB,IAAI,CAACtQ,KAAK,GAAG,KAAK,CAAC0nC,eAAe,EAAE;MACpC,IAAI,CAACrI,MAAM,CAAW;MACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;IACnD,CAAC,MAAM;MACL,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;IACnD;EACF;EAEAq3B,oCAAoC,GAGlC;IACA,MAAML,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,IAAI,CAACjY,KAAK,CAACiY,MAAM,GAAG,IAAI;IACxB,IAAI,CAAC8P,MAAM,CAAU;IACrB,IAAIz8B,IAAI,GAAG,IAAI;IACf,IAAIglC,SAAS,GAAG,IAAI;IACpB,IAAI,IAAI,CAAC5U,KAAK,IAAW,EAAE;MACzB,IAAI,CAAC1b,KAAK,CAACiY,MAAM,GAAG+X,SAAS;MAC7BM,SAAS,GAAG,IAAI,CAACJ,kBAAkB,EAAE;IACvC,CAAC,MAAM;MACL5kC,IAAI,GAAG,IAAI,CAAC2kC,aAAa,EAAE;MAC3B,IAAI,CAACjwB,KAAK,CAACiY,MAAM,GAAG+X,SAAS;MAC7B,IAAI,IAAI,CAACtU,KAAK,IAAW,EAAE;QACzB4U,SAAS,GAAG,IAAI,CAACJ,kBAAkB,EAAE;MACvC;IACF;IACA,OAAO,CAAC5kC,IAAI,EAAEglC,SAAS,CAAC;EAC1B;EAEAC,qBAAqB,CACnBv3B,IAAgC,EACZ;IACpB,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAACwhB,qBAAqB,CAACx3B,IAAI,EAAc,IAAI,CAAC;IAClD,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEAy3B,wBAAwB,CACtBz3B,IAAmC,EACZ;IACvB,IAAI,CAACgW,IAAI,EAAE;IAEX,MAAM/R,EAAE,GAAIjE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAG;IAE7C,MAAMC,QAAQ,GAAG,IAAI,CAAClzB,SAAS,EAAE;IACjC,MAAMmzB,aAAa,GAAG,IAAI,CAACnzB,SAAS,EAAoB;IAExD,IAAI,IAAI,CAACie,KAAK,IAAO,EAAE;MACrBiV,QAAQ,CAACh0B,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IACpE,CAAC,MAAM;MACLF,QAAQ,CAACh0B,cAAc,GAAG,IAAI;IAChC;IAEA,IAAI,CAACorB,MAAM,CAAW;IACtB,MAAM+I,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;IAC9CJ,QAAQ,CAACn1B,MAAM,GAAGs1B,GAAG,CAACt1B,MAAM;IAC5Bm1B,QAAQ,CAACn4B,IAAI,GAAGs4B,GAAG,CAACt4B,IAAI;IACxBm4B,QAAQ,CAACK,IAAI,GAAGF,GAAG,CAAC7oB,KAAK;IACzB,IAAI,CAAC8f,MAAM,CAAW;IAEtB,CAAC4I,QAAQ,CAACM,UAAU,EAAEj4B,IAAI,CAACs3B,SAAS,CAAC,GACnC,IAAI,CAACD,oCAAoC,EAAE;IAE7CO,aAAa,CAACM,cAAc,GAAG,IAAI,CAACvzB,UAAU,CAC5CgzB,QAAQ,EACR,wBAAwB,CACzB;IAED1zB,EAAE,CAACi0B,cAAc,GAAG,IAAI,CAACvzB,UAAU,CAACizB,aAAa,EAAE,gBAAgB,CAAC;IAEpE,IAAI,CAACxvB,gBAAgB,CAACnE,EAAE,CAAC;IACzB,IAAI,CAAC4qB,SAAS,EAAE;IAEhB,IAAI,CAACpU,KAAK,CAACC,WAAW,CACpB1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EACZsgB,oBAAoB,EACpBxY,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAClB;IAED,OAAO,IAAI,CAACoW,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAm4B,gBAAgB,CACdn4B,IAA2B,EAC3Bo4B,YAAsB,EACP;IACf,IAAI,IAAI,CAAC1V,KAAK,IAAW,EAAE;MACzB,OAAO,IAAI,CAAC6U,qBAAqB,CAACv3B,IAAI,CAAC;IACzC,CAAC,MAAM,IAAI,IAAI,CAAC0iB,KAAK,IAAc,EAAE;MACnC,OAAO,IAAI,CAAC+U,wBAAwB,CAACz3B,IAAI,CAAC;IAC5C,CAAC,MAAM,IAAI,IAAI,CAAC0iB,KAAK,IAAS,EAAE;MAC9B,OAAO,IAAI,CAAC2V,wBAAwB,CAACr4B,IAAI,CAAC;IAC5C,CAAC,MAAM,IAAI,IAAI,CAACuuB,aAAa,KAAY,EAAE;MACzC,IAAI,IAAI,CAAC7L,KAAK,IAAQ,EAAE;QACtB,OAAO,IAAI,CAAC4V,6BAA6B,CAACt4B,IAAI,CAAC;MACjD,CAAC,MAAM;QACL,IAAIo4B,YAAY,EAAE;UAChB,IAAI,CAAClyB,KAAK,CAAC+rB,UAAU,CAACgC,mBAAmB,EAAE;YACzC9tB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;UACjB,CAAC,CAAC;QACJ;QACA,OAAO,IAAI,CAACsxB,sBAAsB,CAACv4B,IAAI,CAAC;MAC1C;IACF,CAAC,MAAM,IAAI,IAAI,CAACiuB,YAAY,KAAU,EAAE;MACtC,OAAO,IAAI,CAACuK,yBAAyB,CAACx4B,IAAI,CAAC;IAC7C,CAAC,MAAM,IAAI,IAAI,CAACiuB,YAAY,KAAY,EAAE;MACxC,OAAO,IAAI,CAACwK,0BAA0B,CAACz4B,IAAI,CAAC;IAC9C,CAAC,MAAM,IAAI,IAAI,CAACiuB,YAAY,KAAe,EAAE;MAC3C,OAAO,IAAI,CAACyK,yBAAyB,CAAC14B,IAAI,CAAC;IAC7C,CAAC,MAAM,IAAI,IAAI,CAAC0iB,KAAK,IAAY,EAAE;MACjC,OAAO,IAAI,CAACiW,iCAAiC,CAAC34B,IAAI,EAAEo4B,YAAY,CAAC;IACnE,CAAC,MAAM;MACL,MAAM,IAAI,CAAClhC,UAAU,EAAE;IACzB;EACF;EAEAmhC,wBAAwB,CACtBr4B,IAAmC,EACZ;IACvB,IAAI,CAACgW,IAAI,EAAE;IACXhW,IAAI,CAACiE,EAAE,GAAG,IAAI,CAAC20B,kCAAkC,CACpB,IAAI,CAChC;IACD,IAAI,CAACne,KAAK,CAACC,WAAW,CAAC1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EAAE2f,QAAQ,EAAE7X,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAAC;IACjE,IAAI,CAACsgC,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAu4B,sBAAsB,CACpBv4B,IAAiC,EACZ;IACrB,IAAI,CAACya,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;IAE7B,IAAI,IAAI,CAACsM,KAAK,KAAW,EAAE;MACzB1iB,IAAI,CAACiE,EAAE,GAAG,KAAK,CAAC40B,aAAa,EAAE;IACjC,CAAC,MAAM;MACL74B,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAClC;IAEA,MAAMoB,QAAQ,GAAI94B,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACsB,SAAS,EAAG;IAE/C,MAAMtB,IAAI,GAAI21B,QAAQ,CAAC31B,IAAI,GAAG,EAAG;IACjC,IAAI,CAAC4rB,MAAM,CAAW;IACtB,OAAO,CAAC,IAAI,CAACrM,KAAK,GAAW,EAAE;MAC7B,IAAIoW,QAAQ,GAAG,IAAI,CAACr0B,SAAS,EAAuB;MAEpD,IAAI,IAAI,CAACie,KAAK,IAAY,EAAE;QAC1B,IAAI,CAAC1M,IAAI,EAAE;QACX,IAAI,CAAC,IAAI,CAACiY,YAAY,KAAU,IAAI,CAAC,IAAI,CAACvL,KAAK,IAAY,EAAE;UAC3D,IAAI,CAACxc,KAAK,CAAC+rB,UAAU,CAAC8B,mCAAmC,EAAE;YACzD5tB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;UACjB,CAAC,CAAC;QACJ;QACA,KAAK,CAAC8xB,WAAW,CAACD,QAAQ,CAAC;MAC7B,CAAC,MAAM;QACL,IAAI,CAACtK,gBAAgB,MAEnByD,UAAU,CAACsD,mCAAmC,CAC/C;QAEDuD,QAAQ,GAAG,IAAI,CAACX,gBAAgB,CAACW,QAAQ,EAAE,IAAI,CAAC;MAClD;MAEA31B,IAAI,CAACS,IAAI,CAACk1B,QAAQ,CAAC;IACrB;IAEA,IAAI,CAACre,KAAK,CAACD,IAAI,EAAE;IAEjB,IAAI,CAACuU,MAAM,CAAW;IAEtB,IAAI,CAACpqB,UAAU,CAACm0B,QAAQ,EAAE,gBAAgB,CAAC;IAE3C,IAAIpmC,IAA8B,GAAG,IAAI;IACzC,IAAIsmC,eAAe,GAAG,KAAK;IAC3B71B,IAAI,CAAC6iB,OAAO,CAAC0P,WAAW,IAAI;MAC1B,IAAID,cAAc,CAACC,WAAW,CAAC,EAAE;QAC/B,IAAIhjC,IAAI,KAAK,UAAU,EAAE;UACvB,IAAI,CAACwT,KAAK,CAAC+rB,UAAU,CAACE,0BAA0B,EAAE;YAChDhsB,EAAE,EAAEuvB;UACN,CAAC,CAAC;QACJ;QACAhjC,IAAI,GAAG,IAAI;MACb,CAAC,MAAM,IAAIgjC,WAAW,CAACpjC,IAAI,KAAK,sBAAsB,EAAE;QACtD,IAAI0mC,eAAe,EAAE;UACnB,IAAI,CAAC9yB,KAAK,CAAC+rB,UAAU,CAACO,6BAA6B,EAAE;YACnDrsB,EAAE,EAAEuvB;UACN,CAAC,CAAC;QACJ;QACA,IAAIhjC,IAAI,KAAK,IAAI,EAAE;UACjB,IAAI,CAACwT,KAAK,CAAC+rB,UAAU,CAACE,0BAA0B,EAAE;YAChDhsB,EAAE,EAAEuvB;UACN,CAAC,CAAC;QACJ;QACAhjC,IAAI,GAAG,UAAU;QACjBsmC,eAAe,GAAG,IAAI;MACxB;IACF,CAAC,CAAC;IAEFh5B,IAAI,CAACtN,IAAI,GAAGA,IAAI,IAAI,UAAU;IAC9B,OAAO,IAAI,CAACiS,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA24B,iCAAiC,CAC/B34B,IAA4C,EAC5Co4B,YAA6B,EACG;IAChC,IAAI,CAACrJ,MAAM,CAAY;IAEvB,IAAI,IAAI,CAAC7J,GAAG,IAAa,EAAE;MACzB,IAAI,IAAI,CAACxC,KAAK,IAAc,IAAI,IAAI,CAACA,KAAK,IAAW,EAAE;QAGrD1iB,IAAI,CAACoH,WAAW,GAAG,IAAI,CAAC+wB,gBAAgB,CAAC,IAAI,CAAC1zB,SAAS,EAAE,CAAC;MAC5D,CAAC,MAAM;QAELzE,IAAI,CAACoH,WAAW,GAAG,IAAI,CAAC6vB,aAAa,EAAE;QACvC,IAAI,CAACpI,SAAS,EAAE;MAClB;MACA7uB,IAAI,CAACi5B,OAAO,GAAG,IAAI;MAEnB,OAAO,IAAI,CAACt0B,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACL,IACE,IAAI,CAAC0iB,KAAK,IAAW,IACrB,IAAI,CAACwW,KAAK,EAAE,IACX,CAAC,IAAI,CAACjL,YAAY,CAAU,QAAI,IAAI,CAACA,YAAY,CAAe,SAC/D,CAACmK,YAAa,EAChB;QACA,MAAMjvB,KAAK,GAAG,IAAI,CAACnC,KAAK,CAACtX,KAIV;QACf,MAAM,IAAI,CAACwW,KAAK,CAAC+rB,UAAU,CAACoD,4BAA4B,EAAE;UACxDlvB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;UACvBiwB,qBAAqB,EAAEnsB,KAAK;UAC5BmqB,UAAU,EAAEwC,iBAAiB,CAAC3sB,KAAK;QACrC,CAAC,CAAC;MACJ;MAEA,IACE,IAAI,CAACuZ,KAAK,IAAS,IACnB,IAAI,CAACA,KAAK,IAAc,IACxB,IAAI,CAACA,KAAK,CAAW,OACrB,IAAI,CAACuL,YAAY,KAAY,EAC7B;QACAjuB,IAAI,CAACoH,WAAW,GAAG,IAAI,CAAC+wB,gBAAgB,CAAC,IAAI,CAAC1zB,SAAS,EAAE,CAAC;QAC1DzE,IAAI,CAACi5B,OAAO,GAAG,KAAK;QAEpB,OAAO,IAAI,CAACt0B,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;OACzD,MAAM,IACL,IAAI,CAAC0iB,KAAK,CAAS,OACnB,IAAI,CAACA,KAAK,GAAW,IACrB,IAAI,CAACuL,YAAY,KAAe,IAChC,IAAI,CAACA,YAAY,CAAU,QAC3B,IAAI,CAACA,YAAY,KAAY,EAC7B;QACAjuB,IAAI,GAAG,IAAI,CAAC6G,WAAW,CACrB7G,IAAI,EACa,IAAI,CACtB;QACD,IAAIA,IAAI,CAAC1N,IAAI,KAAK,wBAAwB,EAAE;UAC1C0N,IAAI,CAAC1N,IAAI,GAAG,mBAAmB;UAC/B0N,IAAI,CAACi5B,OAAO,GAAG,KAAK;UACpB,OAAOj5B,IAAI,CAACm5B,UAAU;QACxB;QAEAn5B,IAAI,CAAC1N,IAAI,GAAG,SAAS,GAAG0N,IAAI,CAAC1N,IAAI;QAEjC,OAAO0N,IAAI;MACb;IACF;IAEA,MAAM,IAAI,CAAC9I,UAAU,EAAE;EACzB;EAEAohC,6BAA6B,CAC3Bt4B,IAAwC,EACZ;IAC5B,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAACwY,gBAAgB,CAAa;IAClCxuB,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACpD,IAAI,CAACvK,SAAS,EAAE;IAEhB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAw4B,yBAAyB,CACvBx4B,IAAoC,EACZ;IACxB,IAAI,CAACgW,IAAI,EAAE;IACX,MAAMqjB,QAAQ,GAAG,IAAI,CAACC,kBAAkB,CAACt5B,IAAI,CAAC;IAE9Cq5B,QAAQ,CAAC/mC,IAAI,GAAG,kBAAkB;IAClC,OAAO+mC,QAAQ;EACjB;EAEAZ,0BAA0B,CACxBz4B,IAAqC,EACZ;IACzB,IAAI,CAACgW,IAAI,EAAE;IACX,MAAMqjB,QAAQ,GAAG,IAAI,CAACE,mBAAmB,CAACv5B,IAAI,EAAE,IAAI,CAAC;IAErDq5B,QAAQ,CAAC/mC,IAAI,GAAG,mBAAmB;IACnC,OAAO+mC,QAAQ;EACjB;EAEAX,yBAAyB,CACvB14B,IAAoC,EACZ;IACxB,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAACwhB,qBAAqB,CAACx3B,IAAI,CAAC;IAChC,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAIAw3B,qBAAqB,CACnBx3B,IAA2B,EAErB;IAAA,IADNw5B,OAAgB,uEAAG,KAAK;IAExBx5B,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACw1B,6BAA6B,CAC5B,CAACD,OAAO,EACJ,IAAI,CACvB;IAED,IAAI,CAAC/e,KAAK,CAACC,WAAW,CACpB1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EACZshC,OAAO,GAAG1hB,aAAa,GAAGF,YAAY,EACtC5X,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAClB;IAED,IAAI,IAAI,CAACm0B,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACL73B,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC5B;IAEA3D,IAAI,CAAC05B,OAAO,GAAG,EAAE;IACjB15B,IAAI,CAAC25B,UAAU,GAAG,EAAE;IACpB35B,IAAI,CAAC45B,MAAM,GAAG,EAAE;IAEhB,IAAI,IAAI,CAAC1U,GAAG,IAAa,EAAE;MACzB,GAAG;QACDllB,IAAI,CAAC05B,OAAO,CAAC91B,IAAI,CAAC,IAAI,CAACi2B,yBAAyB,EAAE,CAAC;MACrD,CAAC,QAAQ,CAACL,OAAO,IAAI,IAAI,CAACtU,GAAG,CAAU;IACzC;IAEA,IAAI,IAAI,CAAC+I,YAAY,KAAY,EAAE;MACjC,IAAI,CAACjY,IAAI,EAAE;MACX,GAAG;QACDhW,IAAI,CAAC45B,MAAM,CAACh2B,IAAI,CAAC,IAAI,CAACi2B,yBAAyB,EAAE,CAAC;MACpD,CAAC,QAAQ,IAAI,CAAC3U,GAAG,CAAU;IAC7B;IAEA,IAAI,IAAI,CAAC+I,YAAY,KAAgB,EAAE;MACrC,IAAI,CAACjY,IAAI,EAAE;MACX,GAAG;QACDhW,IAAI,CAAC25B,UAAU,CAAC/1B,IAAI,CAAC,IAAI,CAACi2B,yBAAyB,EAAE,CAAC;MACxD,CAAC,QAAQ,IAAI,CAAC3U,GAAG,CAAU;IAC7B;IAEAllB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAAC22B,mBAAmB,CAAC;MACnCC,WAAW,EAAEP,OAAO;MACpBQ,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAEV,OAAO;MACnBW,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ;EAEAN,yBAAyB,GAA2B;IAClD,MAAM75B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAE7BzE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACm2B,gCAAgC,EAAE;IACjD,IAAI,IAAI,CAAC1X,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC02B,mCAAmC,EAAE;IAClE,CAAC,MAAM;MACLr6B,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC5B;IAEA,OAAO,IAAI,CAACgB,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEAs6B,kBAAkB,CAACt6B,IAA6B,EAAmB;IACjE,IAAI,CAACw3B,qBAAqB,CAACx3B,IAAI,CAAC;IAChC,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAu6B,kBAAkB,CAAChlB,IAAY,EAAE;IAC/B,IAAIA,IAAI,KAAK,GAAG,EAAE;MAChB,IAAI,CAACrP,KAAK,CAAC+rB,UAAU,CAAC8C,4BAA4B,EAAE;QAClD5uB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;EACF;EAEAm1B,iBAAiB,CAACjlB,IAAY,EAAElQ,QAAkB,EAAE+B,WAAqB,EAAE;IACzE,IAAI,CAAC4qB,aAAa,CAACtc,GAAG,CAACH,IAAI,CAAC,EAAE;IAE9B,IAAI,CAACrP,KAAK,CACRkB,WAAW,GACP6qB,UAAU,CAACG,kBAAkB,GAC7BH,UAAU,CAAC6C,sBAAsB,EACrC;MACE3uB,EAAE,EAAEd,QAAQ;MACZgtB,YAAY,EAAE9c;IAChB,CAAC,CACF;EACH;EAEAkkB,6BAA6B,CAC3BgB,OAAiB,EACjBrzB,WAAqB,EACP;IACd,IAAI,CAACozB,iBAAiB,CACpB,IAAI,CAACxzB,KAAK,CAACtX,KAAK,EAChB,IAAI,CAACsX,KAAK,CAAC3B,QAAQ,EACnB+B,WAAW,CACZ;IACD,OAAO,IAAI,CAACswB,eAAe,CAAC+C,OAAO,CAAC;EACtC;EAIAnB,kBAAkB,CAACt5B,IAA6B,EAAmB;IACjEA,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACw1B,6BAA6B,CAC5B,KAAK,EACD,IAAI,CACvB;IACD,IAAI,CAAChf,KAAK,CAACC,WAAW,CAAC1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EAAE0f,YAAY,EAAE5X,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAAC;IAErE,IAAI,IAAI,CAACm0B,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACL73B,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC5B;IAEA3D,IAAI,CAAC06B,KAAK,GAAG,IAAI,CAAC5D,wBAAwB,CAAO;IACjD,IAAI,CAACjI,SAAS,EAAE;IAEhB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,WAAW,CAAC;EAC3C;EAEAu5B,mBAAmB,CACjBv5B,IAA8B,EAC9B26B,OAAgB,EACE;IAClB,IAAI,CAACnM,gBAAgB,CAAU;IAC/BxuB,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACw1B,6BAA6B,CAC5B,IAAI,EACA,IAAI,CACvB;IACD,IAAI,CAAChf,KAAK,CAACC,WAAW,CAAC1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EAAE0f,YAAY,EAAE5X,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAAC;IAErE,IAAI,IAAI,CAACm0B,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE,CAAC,MAAM;MACL73B,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC5B;IAGA3D,IAAI,CAAC46B,SAAS,GAAG,IAAI;IACrB,IAAI,IAAI,CAAClY,KAAK,IAAU,EAAE;MACxB1iB,IAAI,CAAC46B,SAAS,GAAG,IAAI,CAAC9D,wBAAwB,CAAU;IAC1D;IAEA92B,IAAI,CAAC66B,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACF,OAAO,EAAE;MACZ36B,IAAI,CAAC66B,QAAQ,GAAG,IAAI,CAAC/D,wBAAwB,CAAO;IACtD;IACA,IAAI,CAACjI,SAAS,EAAE;IAEhB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,YAAY,CAAC;EAC5C;EAIA86B,sBAAsB,GAAmD;IAAA,IAAlDC,cAAuB,uEAAG,KAAK;IACpD,MAAMC,YAAY,GAAG,IAAI,CAACh0B,KAAK,CAAC3B,QAAQ;IAExC,MAAMrF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;IAE9C,MAAMw2B,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAEzC,MAAMC,KAAK,GAAG,IAAI,CAACvC,kCAAkC,EAAE;IACvD54B,IAAI,CAAC9H,IAAI,GAAGijC,KAAK,CAACjjC,IAAI;IAEtB8H,IAAI,CAACi7B,QAAQ,GAAGA,QAAQ;IAExBj7B,IAAI,CAACo7B,KAAK,GAAGD,KAAK,CAACjD,cAAc;IAEjC,IAAI,IAAI,CAACxV,KAAK,IAAO,EAAE;MACrB,IAAI,CAACwC,GAAG,CAAO;MAEfllB,IAAI,CAACi5B,OAAO,GAAG,IAAI,CAAChC,aAAa,EAAE;IACrC,CAAC,MAAM;MACL,IAAI8D,cAAc,EAAE;QAClB,IAAI,CAAC70B,KAAK,CAAC+rB,UAAU,CAAC+B,uBAAuB,EAAE;UAAE7tB,EAAE,EAAE60B;QAAa,CAAC,CAAC;MACtE;IACF;IAEA,OAAO,IAAI,CAACr2B,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA63B,iCAAiC,GAA+B;IAC9D,MAAMb,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,MAAMjf,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA8B;IACzDzE,IAAI,CAACwC,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACwE,KAAK,CAACiY,MAAM,GAAG,IAAI;IAGxB,IAAI,IAAI,CAACyD,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,KAAgB,EAAE;MACnD,IAAI,CAAC1M,IAAI,EAAE;IACb,CAAC,MAAM;MACL,IAAI,CAAC9e,UAAU,EAAE;IACnB;IAEA,IAAImkC,eAAe,GAAG,KAAK;IAE3B,GAAG;MACD,MAAMC,aAAa,GAAG,IAAI,CAACR,sBAAsB,CAACO,eAAe,CAAC;MAElEr7B,IAAI,CAACwC,MAAM,CAACoB,IAAI,CAAC03B,aAAa,CAAC;MAE/B,IAAIA,aAAa,CAACrC,OAAO,EAAE;QACzBoC,eAAe,GAAG,IAAI;MACxB;MAEA,IAAI,CAAC,IAAI,CAAC3Y,KAAK,IAAO,EAAE;QACtB,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF,CAAC,QAAQ,CAAC,IAAI,CAACrM,KAAK,CAAO;IAC3B,IAAI,CAACqM,MAAM,CAAO;IAElB,IAAI,CAAC/nB,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAE7B,OAAO,IAAI,CAACryB,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;EAC1D;EAEAq6B,mCAAmC,GAAiC;IAClE,MAAMr6B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgC;IAC3D,MAAMuyB,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnCjf,IAAI,CAACwC,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACwE,KAAK,CAACiY,MAAM,GAAG,IAAI;IAExB,IAAI,CAAC8P,MAAM,CAAO;IAClB,MAAMwM,qBAAqB,GAAG,IAAI,CAACv0B,KAAK,CAACkY,kBAAkB;IAC3D,IAAI,CAAClY,KAAK,CAACkY,kBAAkB,GAAG,KAAK;IACrC,OAAO,CAAC,IAAI,CAACwD,KAAK,IAAO,EAAE;MACzB1iB,IAAI,CAACwC,MAAM,CAACoB,IAAI,CAAC,IAAI,CAACqzB,aAAa,EAAE,CAAC;MACtC,IAAI,CAAC,IAAI,CAACvU,KAAK,IAAO,EAAE;QACtB,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,IAAI,CAAC/nB,KAAK,CAACkY,kBAAkB,GAAGqc,qBAAqB;IACrD,IAAI,CAACxM,MAAM,CAAO;IAElB,IAAI,CAAC/nB,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAE7B,OAAO,IAAI,CAACryB,UAAU,CAAC3E,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAEAw7B,4CAA4C,GAAiC;IAC3E,MAAMx7B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgC;IAC3D,MAAMuyB,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnCjf,IAAI,CAACwC,MAAM,GAAG,EAAE;IAEhB,IAAI,CAACwE,KAAK,CAACiY,MAAM,GAAG,IAAI;IAExB,IAAI,CAAC8P,MAAM,CAAO;IAClB,OAAO,CAAC,IAAI,CAACrM,KAAK,IAAO,EAAE;MACzB1iB,IAAI,CAACwC,MAAM,CAACoB,IAAI,CAAC,IAAI,CAAC63B,oCAAoC,EAAE,CAAC;MAC7D,IAAI,CAAC,IAAI,CAAC/Y,KAAK,IAAO,EAAE;QACtB,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,IAAI,CAACA,MAAM,CAAO;IAElB,IAAI,CAAC/nB,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAE7B,OAAO,IAAI,CAACryB,UAAU,CAAC3E,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAEA07B,sBAAsB,GAAwB;IAC5C,MAAM17B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAuB;IAClD,IAAI,CAAC+pB,gBAAgB,CAAe;IAEpCxuB,IAAI,CAAC05B,OAAO,GAAG,EAAE;IACjB,IAAI,IAAI,CAACxU,GAAG,IAAa,EAAE;MACzB,GAAG;QACDllB,IAAI,CAAC05B,OAAO,CAAC91B,IAAI,CAAC,IAAI,CAACi2B,yBAAyB,EAAE,CAAC;MACrD,CAAC,QAAQ,IAAI,CAAC3U,GAAG,CAAU;IAC7B;IAEAllB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAAC22B,mBAAmB,CAAC;MACnCC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,KAAK;MACjBC,WAAW,EAAE,KAAK;MAClBC,UAAU,EAAE,KAAK;MACjBC,YAAY,EAAE;IAChB,CAAC,CAAC;IAEF,OAAO,IAAI,CAACx1B,UAAU,CAAC3E,IAAI,EAAE,yBAAyB,CAAC;EACzD;EAEA27B,0BAA0B,GAAiB;IACzC,OAAO,IAAI,CAACjZ,KAAK,KAAQ,IAAI,IAAI,CAACA,KAAK,CAAW,OAC9C,KAAK,CAACmW,aAAa,EAAE,GACrB,IAAI,CAACnB,eAAe,CAAC,IAAI,CAAC;EAChC;EAEAkE,0BAA0B,CACxB57B,IAAqC,EACrC67B,QAAiB,EACjBZ,QAAgC,EACP;IACzBj7B,IAAI,CAAC87B,MAAM,GAAGD,QAAQ;IAGtB,IAAI,IAAI,CAACxW,SAAS,EAAE,CAAC/yB,IAAI,OAAa,EAAE;MACtC0N,IAAI,CAACiE,EAAE,GAAG,IAAI,CAAC03B,0BAA0B,EAAE;MAC3C37B,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACsnC,wBAAwB,EAAE;IAC5C,CAAC,MAAM;MACL92B,IAAI,CAACiE,EAAE,GAAG,IAAI;MACdjE,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACynC,aAAa,EAAE;IACjC;IACA,IAAI,CAAClI,MAAM,CAAa;IACxB/uB,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAAConC,wBAAwB,EAAE;IAC5C92B,IAAI,CAACi7B,QAAQ,GAAGA,QAAQ;IAExB,OAAO,IAAI,CAACt2B,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA+7B,+BAA+B,CAC7B/7B,IAA0C,EAC1C67B,QAAiB,EACa;IAC9B77B,IAAI,CAAC87B,MAAM,GAAGD,QAAQ;IAEtB77B,IAAI,CAACiE,EAAE,GAAG,IAAI,CAAC03B,0BAA0B,EAAE;IAC3C,IAAI,CAAC5M,MAAM,CAAa;IACxB,IAAI,CAACA,MAAM,CAAa;IACxB,IAAI,IAAI,CAACrM,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,IAAW,EAAE;MAC9C1iB,IAAI,CAACuC,MAAM,GAAG,IAAI;MAClBvC,IAAI,CAACsG,QAAQ,GAAG,KAAK;MACrBtG,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACssC,4BAA4B,CAC5C,IAAI,CAACnK,WAAW,CAAC7xB,IAAI,CAACtB,GAAG,CAACnQ,KAAK,CAAC,CACjC;IACH,CAAC,MAAM;MACLyR,IAAI,CAACuC,MAAM,GAAG,KAAK;MACnB,IAAI,IAAI,CAAC2iB,GAAG,IAAa,EAAE;QACzBllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;MACtB;MACAtG,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAAConC,wBAAwB,EAAE;IAC9C;IACA,OAAO,IAAI,CAACnyB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAg8B,4BAA4B,CAC1Bh8B,IAA0C,EACZ;IAC9BA,IAAI,CAACwC,MAAM,GAAG,EAAE;IAChBxC,IAAI,CAACR,IAAI,GAAG,IAAI;IAChBQ,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC1B3D,IAAI,CAACg4B,IAAI,GAAG,IAAI;IAEhB,IAAI,IAAI,CAACtV,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE;IAEA,IAAI,CAAC9I,MAAM,CAAW;IACtB,IAAI,IAAI,CAACrM,KAAK,IAAU,EAAE;MACxB1iB,IAAI,CAACg4B,IAAI,GAAG,IAAI,CAACiE,0BAA0B,CAAa,IAAI,CAAC;MAE7Dj8B,IAAI,CAACg4B,IAAI,CAAC9/B,IAAI,GAAG,IAAI;MACrB,IAAI,CAAC,IAAI,CAACwqB,KAAK,IAAW,EAAE;QAC1B,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,OAAO,CAAC,IAAI,CAACrM,KAAK,IAAW,IAAI,CAAC,IAAI,CAACA,KAAK,IAAa,EAAE;MACzD1iB,IAAI,CAACwC,MAAM,CAACoB,IAAI,CAAC,IAAI,CAACq4B,0BAA0B,CAAC,KAAK,CAAC,CAAC;MACxD,IAAI,CAAC,IAAI,CAACvZ,KAAK,IAAW,EAAE;QAC1B,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IAEA,IAAI,IAAI,CAAC7J,GAAG,IAAa,EAAE;MACzBllB,IAAI,CAACR,IAAI,GAAG,IAAI,CAACy8B,0BAA0B,CAAC,KAAK,CAAC;IACpD;IACA,IAAI,CAAClN,MAAM,CAAW;IACtB/uB,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAACnB,wBAAwB,EAAE;IAEjD,OAAO,IAAI,CAACnyB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEAk8B,+BAA+B,CAC7Bl8B,IAA0C,EAC1C67B,QAAiB,EACa;IAC9B,MAAMM,SAAS,GAAG,IAAI,CAAC13B,SAAS,EAAE;IAClCzE,IAAI,CAAC87B,MAAM,GAAGD,QAAQ;IACtB77B,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACssC,4BAA4B,CAACG,SAAS,CAAC;IACzD,OAAO,IAAI,CAACx3B,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEA85B,mBAAmB,SAYY;IAAA,IAZX;MAClBC,WAAW;MACXC,UAAU;MACVC,WAAW;MACXC,UAAU;MACVC;IAOF,CAAC;IACC,MAAMnD,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,IAAI,CAACjY,KAAK,CAACiY,MAAM,GAAG,IAAI;IAExB,MAAM3B,SAAS,GAAG,IAAI,CAAC7Y,SAAS,EAAE;IAElC6Y,SAAS,CAAC8e,cAAc,GAAG,EAAE;IAC7B9e,SAAS,CAACxtB,UAAU,GAAG,EAAE;IACzBwtB,SAAS,CAAC+e,QAAQ,GAAG,EAAE;IACvB/e,SAAS,CAACgf,aAAa,GAAG,EAAE;IAE5B,IAAIC,QAAQ;IACZ,IAAIC,KAAK;IACT,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIzC,UAAU,IAAI,IAAI,CAACtX,KAAK,GAAc,EAAE;MAC1C,IAAI,CAACqM,MAAM,CAAc;MACzBwN,QAAQ,GAAe;MACvBC,KAAK,GAAG,IAAI;IACd,CAAC,MAAM;MACL,IAAI,CAACzN,MAAM,CAAW;MACtBwN,QAAQ,GAAY;MACpBC,KAAK,GAAG,KAAK;IACf;IAEAlf,SAAS,CAACkf,KAAK,GAAGA,KAAK;IAEvB,OAAO,CAAC,IAAI,CAAC9Z,KAAK,CAAC6Z,QAAQ,CAAC,EAAE;MAC5B,IAAIV,QAAQ,GAAG,KAAK;MACpB,IAAIa,aAA0C,GAAG,IAAI;MACrD,IAAIC,eAA4C,GAAG,IAAI;MACvD,MAAM38B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAE7B,IAAIy1B,UAAU,IAAI,IAAI,CAACjM,YAAY,KAAW,EAAE;QAC9C,MAAM5I,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;QAElC,IAAIA,SAAS,CAAC/yB,IAAI,OAAa,IAAI+yB,SAAS,CAAC/yB,IAAI,OAAgB,EAAE;UACjE,IAAI,CAAC0jB,IAAI,EAAE;UACX0mB,aAAa,GAAG,IAAI,CAAC11B,KAAK,CAAC3B,QAAQ;UACnC00B,WAAW,GAAG,KAAK;QACrB;MACF;MAEA,IAAIA,WAAW,IAAI,IAAI,CAAC9L,YAAY,KAAY,EAAE;QAChD,MAAM5I,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;QAGlC,IAAIA,SAAS,CAAC/yB,IAAI,OAAa,IAAI+yB,SAAS,CAAC/yB,IAAI,OAAgB,EAAE;UACjE,IAAI,CAAC0jB,IAAI,EAAE;UACX6lB,QAAQ,GAAG,IAAI;QACjB;MACF;MAEA,MAAMZ,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;MAEzC,IAAI,IAAI,CAAChW,GAAG,GAAa,EAAE;QACzB,IAAIwX,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxlC,UAAU,CAACwlC,aAAa,CAAC;QAChC;QACA,IAAI,IAAI,CAACxX,GAAG,GAAa,EAAE;UACzB,IAAI+V,QAAQ,EAAE;YACZ,IAAI,CAAC/jC,UAAU,CAAC+jC,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;UACrC;UACA+uB,SAAS,CAACgf,aAAa,CAAC14B,IAAI,CAC1B,IAAI,CAACm4B,+BAA+B,CAAC/7B,IAAI,EAAE67B,QAAQ,CAAC,CACrD;QACH,CAAC,MAAM;UACLve,SAAS,CAAC+e,QAAQ,CAACz4B,IAAI,CACrB,IAAI,CAACg4B,0BAA0B,CAAC57B,IAAI,EAAE67B,QAAQ,EAAEZ,QAAQ,CAAC,CAC1D;QACH;OACD,MAAM,IAAI,IAAI,CAACvY,KAAK,CAAW,OAAI,IAAI,CAACA,KAAK,IAAO,EAAE;QACrD,IAAIga,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxlC,UAAU,CAACwlC,aAAa,CAAC;QAChC;QACA,IAAIzB,QAAQ,EAAE;UACZ,IAAI,CAAC/jC,UAAU,CAAC+jC,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;QACrC;QACA+uB,SAAS,CAAC8e,cAAc,CAACx4B,IAAI,CAC3B,IAAI,CAACs4B,+BAA+B,CAACl8B,IAAI,EAAE67B,QAAQ,CAAC,CACrD;MACH,CAAC,MAAM;QACL,IAAInpC,IAAI,GAAG,MAAM;QAEjB,IAAI,IAAI,CAACu7B,YAAY,IAAS,IAAI,IAAI,CAACA,YAAY,KAAS,EAAE;UAC5D,MAAM5I,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;UAClC,IAAInS,0BAA0B,CAACmS,SAAS,CAAC/yB,IAAI,CAAC,EAAE;YAC9CI,IAAI,GAAG,IAAI,CAACsU,KAAK,CAACtX,KAAK;YACvB,IAAI,CAACsmB,IAAI,EAAE;UACb;QACF;QAEA,MAAM4mB,aAAa,GAAG,IAAI,CAACC,2BAA2B,CACpD78B,IAAI,EACJ67B,QAAQ,EACRa,aAAa,EACbzB,QAAQ,EACRvoC,IAAI,EACJunC,WAAW,EACXE,YAAY,WAAZA,YAAY,GAAI,CAACqC,KAAK,CACvB;QAED,IAAII,aAAa,KAAK,IAAI,EAAE;UAC1BH,OAAO,GAAG,IAAI;UACdE,eAAe,GAAG,IAAI,CAAC31B,KAAK,CAACC,eAAe;QAC9C,CAAC,MAAM;UACLqW,SAAS,CAACxtB,UAAU,CAAC8T,IAAI,CAACg5B,aAAa,CAAC;QAC1C;MACF;MAEA,IAAI,CAACE,uBAAuB,EAAE;MAE9B,IACEH,eAAe,IACf,CAAC,IAAI,CAACja,KAAK,CAAW,MACtB,CAAC,IAAI,CAACA,KAAK,GAAc,EACzB;QACA,IAAI,CAACxc,KAAK,CAAC+rB,UAAU,CAAC4C,iCAAiC,EAAE;UACvD1uB,EAAE,EAAEw2B;QACN,CAAC,CAAC;MACJ;IACF;IAEA,IAAI,CAAC5N,MAAM,CAACwN,QAAQ,CAAC;IAOrB,IAAItC,WAAW,EAAE;MACf3c,SAAS,CAACmf,OAAO,GAAGA,OAAO;IAC7B;IAEA,MAAM/a,GAAG,GAAG,IAAI,CAAC/c,UAAU,CAAC2Y,SAAS,EAAE,sBAAsB,CAAC;IAE9D,IAAI,CAACtW,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAE7B,OAAOtV,GAAG;EACZ;EAEAmb,2BAA2B,CACzB78B,IAAuE,EACvE67B,QAAiB,EACjBa,aAA0C,EAC1CzB,QAA2C,EAC3CvoC,IAAY,EACZunC,WAAoB,EACpBE,YAAqB,EAC6C;IAClE,IAAI,IAAI,CAACjV,GAAG,IAAa,EAAE;MACzB,MAAM6X,cAAc,GAClB,IAAI,CAACra,KAAK,CAAU,OACpB,IAAI,CAACA,KAAK,IAAS,IACnB,IAAI,CAACA,KAAK,GAAW,IACrB,IAAI,CAACA,KAAK,CAAc;MAE1B,IAAIqa,cAAc,EAAE;QAClB,IAAI,CAAC9C,WAAW,EAAE;UAChB,IAAI,CAAC/zB,KAAK,CAAC+rB,UAAU,CAAC4B,sBAAsB,EAAE;YAC5C1tB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;UACjB,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,CAACkzB,YAAY,EAAE;UACxB,IAAI,CAACj0B,KAAK,CAAC+rB,UAAU,CAAC2B,kBAAkB,EAAE;YACxCztB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;UACjB,CAAC,CAAC;QACJ;QACA,IAAIg0B,QAAQ,EAAE;UACZ,IAAI,CAAC/0B,KAAK,CAAC+rB,UAAU,CAAC6B,eAAe,EAAE;YAAE3tB,EAAE,EAAE80B;UAAS,CAAC,CAAC;QAC1D;QAEA,OAAO,IAAI;MACb;MAEA,IAAI,CAAChB,WAAW,EAAE;QAChB,IAAI,CAAC/zB,KAAK,CAAC+rB,UAAU,CAACgD,oBAAoB,EAAE;UAC1C9uB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;QACjB,CAAC,CAAC;MACJ;MACA,IAAIy1B,aAAa,IAAI,IAAI,EAAE;QACzB,IAAI,CAACxlC,UAAU,CAACwlC,aAAa,CAAC;MAChC;MACA,IAAIzB,QAAQ,EAAE;QACZ,IAAI,CAAC/0B,KAAK,CAAC+rB,UAAU,CAACoC,cAAc,EAAE;UAAEluB,EAAE,EAAE80B;QAAS,CAAC,CAAC;MACzD;MAEAj7B,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACi4B,aAAa,EAAE;MACpC,OAAO,IAAI,CAACtyB,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACLA,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACmsC,0BAA0B,EAAE;MAC5C37B,IAAI,CAAC87B,MAAM,GAAGD,QAAQ;MACtB77B,IAAI,CAACg9B,KAAK,GAAGN,aAAa,IAAI,IAAI;MAClC18B,IAAI,CAACtN,IAAI,GAAGA,IAAI;MAEhB,IAAI4T,QAAQ,GAAG,KAAK;MACpB,IAAI,IAAI,CAACoc,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,IAAW,EAAE;QAE9C1iB,IAAI,CAACuC,MAAM,GAAG,IAAI;QAElB,IAAIm6B,aAAa,IAAI,IAAI,EAAE;UACzB,IAAI,CAACxlC,UAAU,CAACwlC,aAAa,CAAC;QAChC;QACA,IAAIzB,QAAQ,EAAE;UACZ,IAAI,CAAC/jC,UAAU,CAAC+jC,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;QACrC;QAEAyR,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACssC,4BAA4B,CAC5C,IAAI,CAACnK,WAAW,CAAC7xB,IAAI,CAACtB,GAAG,CAACnQ,KAAK,CAAC,CACjC;QACD,IAAImE,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,EAAE;UACpC,IAAI,CAACuqC,2BAA2B,CAACj9B,IAAI,CAAC;QACxC;QAEA,IACE,CAACi6B,WAAW,IACZj6B,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,KAAK,aAAa,IAC/B8H,IAAI,CAACtQ,KAAK,CAACsoC,IAAI,EACf;UACA,IAAI,CAAC9xB,KAAK,CAAC+rB,UAAU,CAACsC,4BAA4B,EAAE;YAClDpuB,EAAE,EAAEnG,IAAI,CAACtQ,KAAK,CAACsoC;UACjB,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACL,IAAItlC,IAAI,KAAK,MAAM,EAAE,IAAI,CAACwE,UAAU,EAAE;QAEtC8I,IAAI,CAACuC,MAAM,GAAG,KAAK;QAEnB,IAAI,IAAI,CAAC2iB,GAAG,IAAa,EAAE;UACzB5e,QAAQ,GAAG,IAAI;QACjB;QACAtG,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAAConC,wBAAwB,EAAE;QAC5C92B,IAAI,CAACi7B,QAAQ,GAAGA,QAAQ;MAC1B;MAEAj7B,IAAI,CAACsG,QAAQ,GAAGA,QAAQ;MAExB,OAAO,IAAI,CAAC3B,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;IACpD;EACF;EAIAi9B,2BAA2B,CACzBlN,QAEC,EACK;IACN,MAAMmN,UAAU,GAAGnN,QAAQ,CAACr9B,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;IAClD,MAAMtD,MAAM,GACV2gC,QAAQ,CAACrgC,KAAK,CAAC8S,MAAM,CAACpT,MAAM,IAAI2gC,QAAQ,CAACrgC,KAAK,CAAC8P,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IAE9D,IAAIuwB,QAAQ,CAACrgC,KAAK,CAACsoC,IAAI,EAAE;MACvB,IAAI,CAAC9xB,KAAK,CACR6pB,QAAQ,CAACr9B,IAAI,KAAK,KAAK,GACnBu/B,UAAU,CAACwB,yBAAyB,GACpCxB,UAAU,CAACmC,yBAAyB,EACxC;QAAEjuB,EAAE,EAAE4pB,QAAQ,CAACrgC,KAAK,CAACsoC;MAAK,CAAC,CAC5B;IACH;IAEA,IAAI5oC,MAAM,KAAK8tC,UAAU,EAAE;MACzB,IAAI,CAACh3B,KAAK,CACR6pB,QAAQ,CAACr9B,IAAI,KAAK,KAAK,GACnB+M,MAAM,CAACvM,cAAc,GACrBuM,MAAM,CAACtM,cAAc,EACzB;QAAEgT,EAAE,EAAE4pB;MAAS,CAAC,CACjB;IACH;IAEA,IAAIA,QAAQ,CAACr9B,IAAI,KAAK,KAAK,IAAIq9B,QAAQ,CAACrgC,KAAK,CAAC8P,IAAI,EAAE;MAClD,IAAI,CAAC0G,KAAK,CAACzG,MAAM,CAACrM,sBAAsB,EAAE;QAAE+S,EAAE,EAAE4pB;MAAS,CAAC,CAAC;IAC7D;EACF;EAEA+M,uBAAuB,GAAS;IAC9B,IACE,CAAC,IAAI,CAAC5X,GAAG,IAAS,IAClB,CAAC,IAAI,CAACA,GAAG,IAAU,IACnB,CAAC,IAAI,CAACxC,KAAK,CAAW,MACtB,CAAC,IAAI,CAACA,KAAK,GAAc,EACzB;MACA,IAAI,CAACxrB,UAAU,EAAE;IACnB;EACF;EAEAkjC,gCAAgC,CAC9B/0B,QAAmB,EACnBpB,EAAiB,EACc;IAAA;IAC/B,qBAAQ,wBAARoB,QAAQ,GAAK,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAChC,IAAIrF,IAAkD,GACpDiE,EAAE,IAAI,IAAI,CAACw1B,6BAA6B,CAAC,IAAI,CAAC;IAEhD,OAAO,IAAI,CAACvU,GAAG,IAAQ,EAAE;MACvB,MAAMiY,KAAK,GAAG,IAAI,CAACtL,WAAW,CAAgCxsB,QAAQ,CAAC;MACvE83B,KAAK,CAACC,aAAa,GAAGp9B,IAAI;MAC1Bm9B,KAAK,CAACl5B,EAAE,GAAG,IAAI,CAACw1B,6BAA6B,CAAC,IAAI,CAAC;MACnDz5B,IAAI,GAAG,IAAI,CAAC2E,UAAU,CAACw4B,KAAK,EAAE,yBAAyB,CAAC;IAC1D;IAEA,OAAOn9B,IAAI;EACb;EAEAq9B,oBAAoB,CAClBh4B,QAAkB,EAClBpB,EAAgB,EACa;IAC7B,MAAMjE,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IAEvCrF,IAAI,CAAC2D,cAAc,GAAG,IAAI;IAC1B3D,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACm2B,gCAAgC,CAAC/0B,QAAQ,EAAEpB,EAAE,CAAC;IAE7D,IAAI,IAAI,CAACye,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC02B,mCAAmC,EAAE;IAClE;IAEA,OAAO,IAAI,CAAC11B,UAAU,CAAC3E,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAEAs9B,mBAAmB,GAA+B;IAChD,MAAMt9B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,CAACsqB,MAAM,CAAY;IACvB/uB,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACu+B,oBAAoB,EAAE;IAC3C,OAAO,IAAI,CAAC54B,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAw9B,kBAAkB,GAA8B;IAC9C,MAAMx9B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7BzE,IAAI,CAACwI,KAAK,GAAG,EAAE;IACf,IAAI,CAACumB,MAAM,CAAa;IAExB,OAAO,IAAI,CAAC/nB,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,IAAI,CAAC,IAAI,CAACszB,KAAK,GAAa,EAAE;MAC/D1iB,IAAI,CAACwI,KAAK,CAAC5E,IAAI,CAAC,IAAI,CAACqzB,aAAa,EAAE,CAAC;MACrC,IAAI,IAAI,CAACvU,KAAK,GAAa,EAAE;MAC7B,IAAI,CAACqM,MAAM,CAAU;IACvB;IACA,IAAI,CAACA,MAAM,CAAa;IACxB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAi8B,0BAA0B,CAACwB,KAAc,EAA2B;IAClE,IAAIvlC,IAAI,GAAG,IAAI;IACf,IAAIoO,QAAQ,GAAG,KAAK;IACpB,IAAI4xB,cAAc,GAAG,IAAI;IACzB,MAAMl4B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA2B;IACtD,MAAMi5B,EAAE,GAAG,IAAI,CAACrY,SAAS,EAAE;IAC3B,MAAMsY,MAAM,GAAG,IAAI,CAAC32B,KAAK,CAAC1U,IAAI,KAAa;IAE3C,IAAIorC,EAAE,CAACprC,IAAI,OAAa,IAAIorC,EAAE,CAACprC,IAAI,OAAgB,EAAE;MACnD,IAAIqrC,MAAM,IAAI,CAACF,KAAK,EAAE;QACpB,IAAI,CAACv3B,KAAK,CAAC+rB,UAAU,CAACwC,oBAAoB,EAAE;UAAEtuB,EAAE,EAAEnG;QAAK,CAAC,CAAC;MAC3D;MACA9H,IAAI,GAAG,IAAI,CAACw/B,eAAe,CAACiG,MAAM,CAAC;MACnC,IAAI,IAAI,CAACzY,GAAG,IAAa,EAAE;QACzB5e,QAAQ,GAAG,IAAI;QACf,IAAIq3B,MAAM,EAAE;UACV,IAAI,CAACz3B,KAAK,CAAC+rB,UAAU,CAACuC,yBAAyB,EAAE;YAAEruB,EAAE,EAAEnG;UAAK,CAAC,CAAC;QAChE;MACF;MACAk4B,cAAc,GAAG,IAAI,CAACpB,wBAAwB,EAAE;IAClD,CAAC,MAAM;MACLoB,cAAc,GAAG,IAAI,CAACjB,aAAa,EAAE;IACvC;IACAj3B,IAAI,CAAC9H,IAAI,GAAGA,IAAI;IAChB8H,IAAI,CAACsG,QAAQ,GAAGA,QAAQ;IACxBtG,IAAI,CAACk4B,cAAc,GAAGA,cAAc;IACpC,OAAO,IAAI,CAACvzB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA49B,kCAAkC,CAChCtrC,IAAgB,EACS;IACzB,MAAM0N,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACv/B,IAAI,CAACoM,GAAG,CAACnQ,KAAK,CAAC;IAC7CyR,IAAI,CAAC9H,IAAI,GAAG,IAAI;IAChB8H,IAAI,CAACsG,QAAQ,GAAG,KAAK;IACrBtG,IAAI,CAACk4B,cAAc,GAAG5lC,IAAI;IAC1B,OAAO,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEA+3B,2BAA2B,GAIzB;IAAA,IAJ0Bv1B,MAAiC,uEAAG,EAAE;IAKhE,IAAIhD,IAAgD,GAAG,IAAI;IAC3D,IAAIyP,KAAiD,GAAG,IAAI;IAC5D,IAAI,IAAI,CAACyT,KAAK,IAAU,EAAE;MACxBzT,KAAK,GAAG,IAAI,CAACgtB,0BAA0B,CAAa,IAAI,CAAC;MAEzDhtB,KAAK,CAAC/W,IAAI,GAAG,IAAI;MACjB,IAAI,CAAC,IAAI,CAACwqB,KAAK,IAAW,EAAE;QAC1B,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,OAAO,CAAC,IAAI,CAACrM,KAAK,IAAW,IAAI,CAAC,IAAI,CAACA,KAAK,IAAa,EAAE;MACzDlgB,MAAM,CAACoB,IAAI,CAAC,IAAI,CAACq4B,0BAA0B,CAAC,KAAK,CAAC,CAAC;MACnD,IAAI,CAAC,IAAI,CAACvZ,KAAK,IAAW,EAAE;QAC1B,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,IAAI,IAAI,CAAC7J,GAAG,IAAa,EAAE;MACzB1lB,IAAI,GAAG,IAAI,CAACy8B,0BAA0B,CAAC,KAAK,CAAC;IAC/C;IACA,OAAO;MAAEz5B,MAAM;MAAEhD,IAAI;MAAEyP;KAAO;EAChC;EAEA4uB,yBAAyB,CACvBx4B,QAAkB,EAClBrF,IAAkC,EAClCiE,EAAgB,EACM;IACtB,QAAQA,EAAE,CAAC/L,IAAI;MACb,KAAK,KAAK;QACR,OAAO,IAAI,CAACyM,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;MAEnD,KAAK,MAAM;MACX,KAAK,SAAS;QACZ,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,uBAAuB,CAAC;MAEvD,KAAK,OAAO;QACV,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;MAErD,KAAK,OAAO;QACV,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;MAErD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;MAEtD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;MAEtD,KAAK,QAAQ;QACX,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;MAEtD;QACE,IAAI,CAACu6B,kBAAkB,CAACt2B,EAAE,CAAC/L,IAAI,CAAC;QAChC,OAAO,IAAI,CAACmlC,oBAAoB,CAACh4B,QAAQ,EAAEpB,EAAE,CAAC;IAAA;EAEpD;EAKAs5B,oBAAoB,GAAyB;IAC3C,MAAMl4B,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMrF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAIqzB,GAAG;IACP,IAAIxlC,IAAI;IACR,IAAIwrC,aAAa,GAAG,KAAK;IACzB,MAAMvC,qBAAqB,GAAG,IAAI,CAACv0B,KAAK,CAACkY,kBAAkB;IAE3D,QAAQ,IAAI,CAAClY,KAAK,CAAC1U,IAAI;MACrB;QACE,OAAO,IAAI,CAACwnC,mBAAmB,CAAC;UAC9BC,WAAW,EAAE,KAAK;UAClBC,UAAU,EAAE,KAAK;UACjBC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE;QAChB,CAAC,CAAC;MAEJ;QACE,OAAO,IAAI,CAACL,mBAAmB,CAAC;UAC9BC,WAAW,EAAE,KAAK;UAClBC,UAAU,EAAE,IAAI;UAChBC,WAAW,EAAE,IAAI;UACjBC,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE;QAChB,CAAC,CAAC;MAEJ;QACE,IAAI,CAACnzB,KAAK,CAACkY,kBAAkB,GAAG,KAAK;QACrC5sB,IAAI,GAAG,IAAI,CAACkrC,kBAAkB,EAAE;QAChC,IAAI,CAACx2B,KAAK,CAACkY,kBAAkB,GAAGqc,qBAAqB;QACrD,OAAOjpC,IAAI;MAEb;QACE0N,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;QAC9D,IAAI,CAAC9I,MAAM,CAAW;QACtB+I,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;QACxC/3B,IAAI,CAACwC,MAAM,GAAGs1B,GAAG,CAACt1B,MAAM;QACxBxC,IAAI,CAACR,IAAI,GAAGs4B,GAAG,CAACt4B,IAAI;QACpBQ,IAAI,CAACg4B,IAAI,GAAGF,GAAG,CAAC7oB,KAAK;QACrB,IAAI,CAAC8f,MAAM,CAAW;QAEtB,IAAI,CAACA,MAAM,CAAU;QAErB/uB,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;QAEtC,OAAO,IAAI,CAACtyB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;MAExD;QACE,IAAI,CAACgW,IAAI,EAAE;QAGX,IAAI,CAAC,IAAI,CAAC0M,KAAK,IAAW,IAAI,CAAC,IAAI,CAACA,KAAK,IAAa,EAAE;UACtD,IAAI3P,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAI,IAAI,CAACowB,KAAK,IAAU,EAAE;YAC9D,MAAM5kB,KAAK,GAAG,IAAI,CAACunB,SAAS,EAAE,CAAC/yB,IAAI;YACnCwrC,aAAa,GAAGhgC,KAAK,KAAgB,MAAIA,KAAK,KAAa;UAC7D,CAAC,MAAM;YACLggC,aAAa,GAAG,IAAI;UACtB;QACF;QAEA,IAAIA,aAAa,EAAE;UACjB,IAAI,CAAC92B,KAAK,CAACkY,kBAAkB,GAAG,KAAK;UACrC5sB,IAAI,GAAG,IAAI,CAAC2kC,aAAa,EAAE;UAC3B,IAAI,CAACjwB,KAAK,CAACkY,kBAAkB,GAAGqc,qBAAqB;UAGrD,IACE,IAAI,CAACv0B,KAAK,CAACkY,kBAAkB,IAC7B,EACE,IAAI,CAACwD,KAAK,CAAU,OACnB,IAAI,CAACA,KAAK,CAAW,OAAI,IAAI,CAAC2C,SAAS,EAAE,CAAC/yB,IAAI,KAAc,GAC9D,EACD;YACA,IAAI,CAACy8B,MAAM,CAAW;YACtB,OAAOz8B,IAAI;UACb,CAAC,MAAM;YAEL,IAAI,CAAC4yB,GAAG,CAAU;UACpB;QACF;QAEA,IAAI5yB,IAAI,EAAE;UACRwlC,GAAG,GAAG,IAAI,CAACC,2BAA2B,CAAC,CACrC,IAAI,CAAC6F,kCAAkC,CAACtrC,IAAI,CAAC,CAC9C,CAAC;QACJ,CAAC,MAAM;UACLwlC,GAAG,GAAG,IAAI,CAACC,2BAA2B,EAAE;QAC1C;QAEA/3B,IAAI,CAACwC,MAAM,GAAGs1B,GAAG,CAACt1B,MAAM;QACxBxC,IAAI,CAACR,IAAI,GAAGs4B,GAAG,CAACt4B,IAAI;QACpBQ,IAAI,CAACg4B,IAAI,GAAGF,GAAG,CAAC7oB,KAAK;QAErB,IAAI,CAAC8f,MAAM,CAAW;QAEtB,IAAI,CAACA,MAAM,CAAU;QAErB/uB,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;QAEtCj3B,IAAI,CAAC2D,cAAc,GAAG,IAAI;QAE1B,OAAO,IAAI,CAACgB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;MAExD;QACE,OAAO,IAAI,CAACqB,YAAY,CACtB,IAAI,CAAC2F,KAAK,CAACtX,KAAK,EAChB,6BAA6B,CAC9B;MAEH;MACA;QACEsQ,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACgzB,KAAK,CAAU;QACjC,IAAI,CAAC1M,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CACpB3E,IAAI,EACJ,8BAA8B,CAC/B;MAEH;QACE,IAAI,IAAI,CAACgH,KAAK,CAACtX,KAAK,KAAK,GAAG,EAAE;UAC5B,IAAI,CAACsmB,IAAI,EAAE;UACX,IAAI,IAAI,CAAC0M,KAAK,KAAQ,EAAE;YACtB,OAAO,IAAI,CAACqb,kBAAkB,CAC5B,CAAC,IAAI,CAAC/2B,KAAK,CAACtX,KAAK,EACjB,6BAA6B,EAC7BsQ,IAAI,CACL;UACH;UAEA,IAAI,IAAI,CAAC0iB,KAAK,KAAW,EAAE;YACzB,OAAO,IAAI,CAACqb,kBAAkB,CAC5B,CAAC,IAAI,CAAC/2B,KAAK,CAACtX,KAAK,EACjB,6BAA6B,EAC7BsQ,IAAI,CACL;UACH;UAEA,MAAM,IAAI,CAACkG,KAAK,CAAC+rB,UAAU,CAACiD,4BAA4B,EAAE;YACxD/uB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QAEA,MAAM,IAAI,CAACnO,UAAU,EAAE;MACzB;QACE,OAAO,IAAI,CAACmK,YAAY,CACtB,IAAI,CAAC2F,KAAK,CAACtX,KAAK,EAChB,6BAA6B,CAC9B;MAEH;QACE,OAAO,IAAI,CAAC2R,YAAY,CACtB,IAAI,CAAC2F,KAAK,CAACtX,KAAK,EAChB,6BAA6B,CAC9B;MAEH;QACE,IAAI,CAACsmB,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;MAEpD;QACE,IAAI,CAACgW,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,2BAA2B,CAAC;MAE3D;QACE,IAAI,CAACgW,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;MAEpD;QACE,IAAI,CAACgW,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;MAEtD;QACE,OAAO,IAAI,CAACs9B,mBAAmB,EAAE;MAEnC;QACE,IAAI9pB,cAAc,CAAC,IAAI,CAACxM,KAAK,CAAC1U,IAAI,CAAC,EAAE;UACnC,MAAM6W,KAAK,GAAG2K,cAAc,CAAC,IAAI,CAAC9M,KAAK,CAAC1U,IAAI,CAAC;UAC7C,IAAI,CAAC0jB,IAAI,EAAE;UACX,OAAO,KAAK,CAACgoB,gBAAgB,CAACh+B,IAAI,EAA0BmJ,KAAK,CAAC;SACnE,MAAM,IAAI4J,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;UAC7C,IAAI,IAAI,CAAC27B,YAAY,KAAe,EAAE;YACpC,OAAO,IAAI,CAACyN,sBAAsB,EAAE;UACtC;UAEA,OAAO,IAAI,CAACmC,yBAAyB,CACnCx4B,QAAQ,EACRrF,IAAI,EACJ,IAAI,CAAC03B,eAAe,EAAE,CACvB;QACH;IAAA;IAGJ,MAAM,IAAI,CAACxgC,UAAU,EAAE;EACzB;EAEA+mC,oBAAoB,GAAyB;IAC3C,MAAM54B,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,IAAI/S,IAAI,GAAG,IAAI,CAACirC,oBAAoB,EAAE;IACtC,IAAIW,yBAAyB,GAAG,KAAK;IACrC,OACE,CAAC,IAAI,CAACxb,KAAK,GAAa,IAAI,IAAI,CAACA,KAAK,IAAgB,KACtD,CAAC,IAAI,CAAC+L,kBAAkB,EAAE,EAC1B;MACA,MAAMzuB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;MACvC,MAAMiB,QAAQ,GAAG,IAAI,CAAC4e,GAAG,CAAgB;MACzCgZ,yBAAyB,GAAGA,yBAAyB,IAAI53B,QAAQ;MACjE,IAAI,CAACyoB,MAAM,CAAa;MACxB,IAAI,CAACzoB,QAAQ,IAAI,IAAI,CAACoc,KAAK,GAAa,EAAE;QACxC1iB,IAAI,CAACmrB,WAAW,GAAG74B,IAAI;QACvB,IAAI,CAAC0jB,IAAI,EAAE;QACX1jB,IAAI,GAAG,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;MACrD,CAAC,MAAM;QACLA,IAAI,CAACm+B,UAAU,GAAG7rC,IAAI;QACtB0N,IAAI,CAACo+B,SAAS,GAAG,IAAI,CAACnH,aAAa,EAAE;QACrC,IAAI,CAAClI,MAAM,CAAa;QACxB,IAAImP,yBAAyB,EAAE;UAC7Bl+B,IAAI,CAACsG,QAAQ,GAAGA,QAAQ;UACxBhU,IAAI,GAAG,IAAI,CAACqS,UAAU,CAEpB3E,IAAI,EACJ,2BAA2B,CAC5B;QACH,CAAC,MAAM;UACL1N,IAAI,GAAG,IAAI,CAACqS,UAAU,CAEpB3E,IAAI,EACJ,mBAAmB,CACpB;QACH;MACF;IACF;IACA,OAAO1N,IAAI;EACb;EAEA+rC,mBAAmB,GAAyB;IAC1C,MAAMr+B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,IAAI,CAACygB,GAAG,IAAa,EAAE;MACzBllB,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACmG,mBAAmB,EAAE;MAChD,OAAO,IAAI,CAAC15B,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;IACxD,CAAC,MAAM;MACL,OAAO,IAAI,CAACi+B,oBAAoB,EAAE;IACpC;EACF;EAEAK,kCAAkC,GAAyB;IACzD,MAAMC,KAAK,GAAG,IAAI,CAACF,mBAAmB,EAAE;IACxC,IAAI,CAAC,IAAI,CAACr3B,KAAK,CAACkY,kBAAkB,IAAI,IAAI,CAACgG,GAAG,IAAU,EAAE;MAExD,MAAMllB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAC0M,KAAK,CAAC7/B,GAAG,CAACnQ,KAAK,CAAC;MAC9CyR,IAAI,CAACwC,MAAM,GAAG,CAAC,IAAI,CAACo7B,kCAAkC,CAACW,KAAK,CAAC,CAAC;MAC9Dv+B,IAAI,CAACR,IAAI,GAAG,IAAI;MAChBQ,IAAI,CAACg4B,IAAI,GAAG,IAAI;MAChBh4B,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAAChB,aAAa,EAAE;MACtCj3B,IAAI,CAAC2D,cAAc,GAAG,IAAI;MAC1B,OAAO,IAAI,CAACgB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;IACxD;IACA,OAAOu+B,KAAK;EACd;EAEAC,yBAAyB,GAAyB;IAChD,MAAMx+B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,CAACygB,GAAG,CAAe;IACvB,MAAM5yB,IAAI,GAAG,IAAI,CAACgsC,kCAAkC,EAAE;IACtDt+B,IAAI,CAACwI,KAAK,GAAG,CAAClW,IAAI,CAAC;IACnB,OAAO,IAAI,CAAC4yB,GAAG,IAAe,EAAE;MAC9BllB,IAAI,CAACwI,KAAK,CAAC5E,IAAI,CAAC,IAAI,CAAC06B,kCAAkC,EAAE,CAAC;IAC5D;IACA,OAAOt+B,IAAI,CAACwI,KAAK,CAACpZ,MAAM,KAAK,CAAC,GAC1BkD,IAAI,GACJ,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,4BAA4B,CAAC;EACzD;EAEAy+B,kBAAkB,GAAyB;IACzC,MAAMz+B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,CAACygB,GAAG,CAAc;IACtB,MAAM5yB,IAAI,GAAG,IAAI,CAACksC,yBAAyB,EAAE;IAC7Cx+B,IAAI,CAACwI,KAAK,GAAG,CAAClW,IAAI,CAAC;IACnB,OAAO,IAAI,CAAC4yB,GAAG,IAAc,EAAE;MAC7BllB,IAAI,CAACwI,KAAK,CAAC5E,IAAI,CAAC,IAAI,CAAC46B,yBAAyB,EAAE,CAAC;IACnD;IACA,OAAOx+B,IAAI,CAACwI,KAAK,CAACpZ,MAAM,KAAK,CAAC,GAC1BkD,IAAI,GACJ,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EAClD;EAEAi3B,aAAa,GAAyB;IACpC,MAAMD,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,IAAI,CAACjY,KAAK,CAACiY,MAAM,GAAG,IAAI;IACxB,MAAM3sB,IAAI,GAAG,IAAI,CAACmsC,kBAAkB,EAAE;IACtC,IAAI,CAACz3B,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAC7B,OAAO1kC,IAAI;EACb;EAEAmpC,oCAAoC,GAAyB;IAC3D,IAAI,IAAI,CAACz0B,KAAK,CAAC1U,IAAI,KAAY,OAAI,IAAI,CAAC0U,KAAK,CAACtX,KAAK,KAAK,GAAG,EAAE;MAC3D,MAAM2V,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;MACpC,MAAMrF,IAAI,GAAG,IAAI,CAAC03B,eAAe,EAAE;MACnC,OAAO,IAAI,CAAC2F,oBAAoB,CAACh4B,QAAQ,EAAErF,IAAI,CAAC;IAClD,CAAC,MAAM;MACL,OAAO,IAAI,CAACi3B,aAAa,EAAE;IAC7B;EACF;EAEAmC,uBAAuB,GAAyB;IAC9C,MAAMp5B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAwB;IACnDzE,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACpB,wBAAwB,EAAE;IACrD,OAAO,IAAI,CAACnyB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEA44B,kCAAkC,CAChC8F,sBAAgC,EAClB;IACd,MAAMvD,KAAK,GAAGuD,sBAAsB,GAChC,IAAI,CAAChH,eAAe,EAAE,GACtB,IAAI,CAAC+B,6BAA6B,EAAE;IACxC,IAAI,IAAI,CAAC/W,KAAK,IAAU,EAAE;MAExByY,KAAK,CAACjD,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;MACrD,IAAI,CAAChxB,gBAAgB,CAAC+yB,KAAK,CAAC;IAC9B;IACA,OAAOA,KAAK;EACd;EAEAwD,mBAAmB,CAAC3+B,IAAY,EAAU;IACxCA,IAAI,CAAC4B,UAAU,CAACs2B,cAAc,GAAGl4B,IAAI,CAACk4B,cAAc;IAEpD,IAAI,CAAC9vB,gBAAgB,CAACpI,IAAI,CAAC4B,UAAU,EAAE5B,IAAI,CAACk4B,cAAc,CAACx5B,GAAG,CAAClQ,GAAG,CAAC;IAEnE,OAAOwR,IAAI,CAAC4B,UAAU;EACxB;EAEAs5B,iBAAiB,GAAsC;IACrD,IAAID,QAAQ,GAAG,IAAI;IACnB,IAAI,IAAI,CAACvY,KAAK,IAAY,EAAE;MAC1BuY,QAAQ,GAAG,IAAI,CAACx2B,SAAS,EAAkB;MAC3C,IAAI,IAAI,CAACuC,KAAK,CAACtX,KAAK,KAAK,GAAG,EAAE;QAC5BurC,QAAQ,CAACvoC,IAAI,GAAG,MAAM;MACxB,CAAC,MAAM;QACLuoC,QAAQ,CAACvoC,IAAI,GAAG,OAAO;MACzB;MACA,IAAI,CAACsjB,IAAI,EAAE;MACX,OAAO,IAAI,CAACrR,UAAU,CAACs2B,QAAQ,EAAE,UAAU,CAAC;IAC9C;IACA,OAAOA,QAAQ;EACjB;EAMA92B,iBAAiB,CACfnE,IAAgB,EAChB4+B,mBAAoC,EAE9B;IAAA,IADNv6B,QAAiB,uEAAG,KAAK;IAEzB,IAAIu6B,mBAAmB,EAAE;MACvB,OAAO,IAAI,CAACC,gCAAgC,CAAC7+B,IAAI,EAAE,MACjD,KAAK,CAACmE,iBAAiB,CAACnE,IAAI,EAAE,IAAI,EAAEqE,QAAQ,CAAC,CAC9C;IACH;IAEA,OAAO,KAAK,CAACF,iBAAiB,CAACnE,IAAI,EAAE,KAAK,EAAEqE,QAAQ,CAAC;EACvD;EAEAy6B,0BAA0B,CAMxB9+B,IAAe,EAAE1N,IAAe,EAAgC;IAAA,IAA9B+R,QAAiB,uEAAG,KAAK;IAC3D,IAAI,IAAI,CAACqe,KAAK,IAAU,EAAE;MACxB,MAAMiV,QAAQ,GAAG,IAAI,CAAClzB,SAAS,EAAoB;MAEnD,CACEkzB,QAAQ,CAACO,cAAc,EAEvBl4B,IAAI,CAACs3B,SAAS,CACf,GAAG,IAAI,CAACD,oCAAoC,EAAE;MAE/Cr3B,IAAI,CAACi4B,UAAU,GAAGN,QAAQ,CAACO,cAAc,GACrC,IAAI,CAACvzB,UAAU,CAACgzB,QAAQ,EAAE,gBAAgB,CAAC,GAC3C,IAAI;IACV;IAEA,OAAO,KAAK,CAACmH,0BAA0B,CAAC9+B,IAAI,EAAE1N,IAAI,EAAE+R,QAAQ,CAAC;EAC/D;EAGA06B,kBAAkB,CAACt+B,KAAyB,EAAe;IAEzD,IAAI,IAAI,CAACuG,KAAK,CAACkO,MAAM,IAAI,IAAI,CAAC+Y,YAAY,KAAe,EAAE;MACzD,MAAM5I,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;MAClC,IAAIpS,0BAA0B,CAACoS,SAAS,CAAC/yB,IAAI,CAAC,EAAE;QAC9C,MAAM0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;QAC9C,IAAI,CAACuR,IAAI,EAAE;QACX,OAAO,IAAI,CAACskB,kBAAkB,CAACt6B,IAAI,CAAC;MACtC;KACD,MAAM,IAAI,IAAI,CAAC02B,gBAAgB,EAAE,IAAI,IAAI,CAACzI,YAAY,KAAU,EAAE;MACjE,MAAMjuB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7B,IAAI,CAACuR,IAAI,EAAE;MACX,OAAO,IAAI,CAACgpB,wBAAwB,CAACh/B,IAAI,CAAC;IAC5C;IACA,MAAMgC,IAAI,GAAG,KAAK,CAAC+8B,kBAAkB,CAACt+B,KAAK,CAAC;IAE5C,IAAI,IAAI,CAAC+1B,UAAU,KAAKpa,SAAS,IAAI,CAAC,IAAI,CAAC3Z,gBAAgB,CAACT,IAAI,CAAC,EAAE;MACjE,IAAI,CAACw0B,UAAU,GAAG,IAAI;IACxB;IACA,OAAOx0B,IAAI;EACb;EAGAi9B,wBAAwB,CACtBj/B,IAA2B,EAC3Bk/B,IAAkB,EAClBp4B,UAAgC,EACT;IACvB,IAAIo4B,IAAI,CAAC5sC,IAAI,KAAK,YAAY,EAAE;MAC9B,IAAI4sC,IAAI,CAAChnC,IAAI,KAAK,SAAS,EAAE;QAC3B,IACE,IAAI,CAACwqB,KAAK,IAAW,IACrB3P,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAClC,IAAI,CAACowB,KAAK,IAAc,IACxB,IAAI,CAACA,KAAK,CAAS,OACnB,IAAI,CAACA,KAAK,IAAY,EACtB;UAEA,OAAO,IAAI,CAACyV,gBAAgB,CAACn4B,IAAI,CAAC;QACpC;OACD,MAAM,IAAI+S,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;QAC7C,IAAI4sC,IAAI,CAAChnC,IAAI,KAAK,WAAW,EAAE;UAE7B,OAAO,IAAI,CAACoiC,kBAAkB,CAACt6B,IAAI,CAAC;QACtC,CAAC,MAAM,IAAIk/B,IAAI,CAAChnC,IAAI,KAAK,MAAM,EAAE;UAE/B,OAAO,IAAI,CAACohC,kBAAkB,CAACt5B,IAAI,CAAC;QACtC,CAAC,MAAM,IAAIk/B,IAAI,CAAChnC,IAAI,KAAK,QAAQ,EAAE;UAEjC,OAAO,IAAI,CAACqhC,mBAAmB,CAACv5B,IAAI,EAAE,KAAK,CAAC;QAC9C;MACF;IACF;IAEA,OAAO,KAAK,CAACi/B,wBAAwB,CAACj/B,IAAI,EAAEk/B,IAAI,EAAEp4B,UAAU,CAAC;EAC/D;EAGAq4B,4BAA4B,GAAY;IACtC,MAAM;MAAE7sC;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IACEsM,kCAAkC,CAAChhB,IAAI,CAAC,IACvC,IAAI,CAACokC,gBAAgB,EAAE,IAAIpkC,IAAI,QAAc,EAC9C;MACA,OAAO,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAW;IAChC;IACA,OAAO,KAAK,CAACmf,4BAA4B,EAAE;EAC7C;EAEAC,wBAAwB,GAAY;IAClC,MAAM;MAAE9sC;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IACEsM,kCAAkC,CAAChhB,IAAI,CAAC,IACvC,IAAI,CAACokC,gBAAgB,EAAE,IAAIpkC,IAAI,QAAc,EAC9C;MACA,OAAO,IAAI,CAAC0U,KAAK,CAACgZ,WAAW;IAC/B;IAEA,OAAO,KAAK,CAACof,wBAAwB,EAAE;EACzC;EAEAC,4BAA4B,GAAiC;IAC3D,IAAI,IAAI,CAAC3I,gBAAgB,EAAE,IAAI,IAAI,CAACzI,YAAY,KAAU,EAAE;MAC1D,MAAMjuB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7B,IAAI,CAACuR,IAAI,EAAE;MACX,OAAO,IAAI,CAACgpB,wBAAwB,CAACh/B,IAAI,CAAC;IAC5C;IACA,OAAO,KAAK,CAACq/B,4BAA4B,EAAE;EAC7C;EAEAC,gBAAgB,CACdJ,IAAkB,EAElB75B,QAAkB,EAClBC,mBAA6C,EAC/B;IACd,IAAI,CAAC,IAAI,CAACod,KAAK,CAAa,KAAE,OAAOwc,IAAI;IAEzC,IAAI,IAAI,CAACl4B,KAAK,CAACgY,sBAAsB,EAAE;MACrC,MAAMqP,MAAM,GAAG,IAAI,CAAC1I,iBAAiB,EAAE;MAIvC,IACE0I,MAAM,KAAoB,MAC1BA,MAAM,OAAuB,IAC7BA,MAAM,KAAoB,MAC1BA,MAAM,OAA+B,EACrC;QAEA,IAAI,CAACkR,0BAA0B,CAACj6B,mBAAmB,CAAC;QACpD,OAAO45B,IAAI;MACb;IACF;IAEA,IAAI,CAACnQ,MAAM,CAAa;IACxB,MAAM/nB,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;IAChC,MAAM4gC,iBAAiB,GAAG,IAAI,CAACx4B,KAAK,CAAC8X,SAAS;IAC9C,MAAM9e,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IACvC,IAAI;MAAEo6B,UAAU;MAAEC;IAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;IACjE,IAAI,CAACC,KAAK,EAAErc,OAAO,CAAC,GAAG,IAAI,CAACsc,uBAAuB,CAACJ,UAAU,CAAC;IAE/D,IAAIC,MAAM,IAAInc,OAAO,CAACn0B,MAAM,GAAG,CAAC,EAAE;MAChC,MAAM0vB,SAAS,GAAG,CAAC,GAAG0gB,iBAAiB,CAAC;MAExC,IAAIjc,OAAO,CAACn0B,MAAM,GAAG,CAAC,EAAE;QACtB,IAAI,CAAC4X,KAAK,GAAGA,KAAK;QAClB,IAAI,CAACA,KAAK,CAAC8X,SAAS,GAAGA,SAAS;QAEhC,KAAK,IAAIlvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2zB,OAAO,CAACn0B,MAAM,EAAEQ,CAAC,EAAE,EAAE;UACvCkvB,SAAS,CAAClb,IAAI,CAAC2f,OAAO,CAAC3zB,CAAC,CAAC,CAACrB,KAAK,CAAC;QAClC;QAEA,CAAC;UAAEkxC,UAAU;UAAEC;QAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;QAC9D,CAACC,KAAK,EAAErc,OAAO,CAAC,GAAG,IAAI,CAACsc,uBAAuB,CAACJ,UAAU,CAAC;MAC7D;MAEA,IAAIC,MAAM,IAAIE,KAAK,CAACxwC,MAAM,GAAG,CAAC,EAAE;QAM9B,IAAI,CAAC8W,KAAK,CAAC+rB,UAAU,CAACC,yBAAyB,EAAE;UAC/C/rB,EAAE,EAAEa,KAAK,CAAC3B;QACZ,CAAC,CAAC;MACJ;MAEA,IAAIq6B,MAAM,IAAIE,KAAK,CAACxwC,MAAM,KAAK,CAAC,EAAE;QAChC,IAAI,CAAC4X,KAAK,GAAGA,KAAK;QAClB8X,SAAS,CAAClb,IAAI,CAACg8B,KAAK,CAAC,CAAC,CAAC,CAACrxC,KAAK,CAAC;QAC9B,IAAI,CAACyY,KAAK,CAAC8X,SAAS,GAAGA,SAAS;QAChC,CAAC;UAAE2gB,UAAU;UAAEC;QAAO,CAAC,GAAG,IAAI,CAACC,6BAA6B,EAAE;MAChE;IACF;IAEA,IAAI,CAACE,uBAAuB,CAACJ,UAAU,EAAE,IAAI,CAAC;IAE9C,IAAI,CAACz4B,KAAK,CAAC8X,SAAS,GAAG0gB,iBAAiB;IACxC,IAAI,CAACzQ,MAAM,CAAU;IAErB/uB,IAAI,CAAC8U,IAAI,GAAGoqB,IAAI;IAChBl/B,IAAI,CAACy/B,UAAU,GAAGA,UAAU;IAC5Bz/B,IAAI,CAAC8/B,SAAS,GAAG,IAAI,CAACjB,gCAAgC,CAAC7+B,IAAI,EAAE,MAC3D,IAAI,CAAC+/B,gBAAgB,CAAC3jB,SAAS,EAAEA,SAAS,CAAC,CAC5C;IAED,OAAO,IAAI,CAACzX,UAAU,CAAC3E,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAEA2/B,6BAA6B,GAG3B;IACA,IAAI,CAAC34B,KAAK,CAAC+X,yBAAyB,CAACnb,IAAI,CAAC,IAAI,CAACoD,KAAK,CAACzY,KAAK,CAAC;IAE3D,MAAMkxC,UAAU,GAAG,IAAI,CAACO,uBAAuB,EAAE;IACjD,MAAMN,MAAM,GAAG,CAAC,IAAI,CAAChd,KAAK,CAAU;IAEpC,IAAI,CAAC1b,KAAK,CAAC+X,yBAAyB,CAAC3K,GAAG,EAAE;IAE1C,OAAO;MAAEqrB,UAAU;MAAEC;KAAQ;EAC/B;EASAG,uBAAuB,CACrB7/B,IAAkB,EAClBigC,eAAyB,EACmC;IAC5D,MAAMlV,KAAK,GAAG,CAAC/qB,IAAI,CAAC;IACpB,MAAMkgC,MAAmC,GAAG,EAAE;IAE9C,OAAOnV,KAAK,CAAC37B,MAAM,KAAK,CAAC,EAAE;MACzB,MAAM4Q,IAAI,GAAG+qB,KAAK,CAAC3W,GAAG,EAAE;MACxB,IAAIpU,IAAI,CAAC1N,IAAI,KAAK,yBAAyB,EAAE;QAC3C,IAAI0N,IAAI,CAAC2D,cAAc,IAAI,CAAC3D,IAAI,CAACi4B,UAAU,EAAE;UAG3C,IAAI,CAACkI,qBAAqB,CAACngC,IAAI,CAAC;QAClC,CAAC,MAAM;UAELkgC,MAAM,CAACt8B,IAAI,CAAC5D,IAAI,CAAC;QACnB;QACA+qB,KAAK,CAACnnB,IAAI,CAAC5D,IAAI,CAACmD,IAAI,CAAC;MACvB,CAAC,MAAM,IAAInD,IAAI,CAAC1N,IAAI,KAAK,uBAAuB,EAAE;QAChDy4B,KAAK,CAACnnB,IAAI,CAAC5D,IAAI,CAACy/B,UAAU,CAAC;QAC3B1U,KAAK,CAACnnB,IAAI,CAAC5D,IAAI,CAAC8/B,SAAS,CAAC;MAC5B;IACF;IAEA,IAAIG,eAAe,EAAE;MACnBC,MAAM,CAACla,OAAO,CAAChmB,IAAI,IAAI,IAAI,CAACmgC,qBAAqB,CAACngC,IAAI,CAAC,CAAC;MACxD,OAAO,CAACkgC,MAAM,EAAE,EAAE,CAAC;IACrB;IAEA,OAAOhK,SAAS,CAACgK,MAAM,EAAElgC,IAAI,IAC3BA,IAAI,CAACwC,MAAM,CAAC49B,KAAK,CAAC7B,KAAK,IAAI,IAAI,CAAC74B,YAAY,CAAC64B,KAAK,EAAE,IAAI,CAAC,CAAC,CAC3D;EACH;EAEA4B,qBAAqB,CAACngC,IAA+B,EAAE;IAAA;IACrD,IAAI,CAACqgC,gBAAgB,CAGnBrgC,IAAI,CAACwC,MAAM,iBACXxC,IAAI,CAAC8B,KAAK,KAAV,4BAAYw+B,gBAAgB,EAChB,KAAK,CAClB;IAED,IAAI,CAAC7lB,KAAK,CAACF,KAAK,CAACjE,cAAc,GAAGC,WAAW,CAAC;IAE9C,KAAK,CAACgqB,WAAW,CAACvgC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IACpC,IAAI,CAACya,KAAK,CAACD,IAAI,EAAE;EACnB;EAEAqkB,gCAAgC,CAC9B7+B,IAAoB,EACpBG,KAAc,EACX;IACH,IAAIqgC,MAAS;IACb,IAAI,IAAI,CAACx5B,KAAK,CAAC+X,yBAAyB,CAACkF,OAAO,CAACjkB,IAAI,CAACzR,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MACnE,IAAI,CAACyY,KAAK,CAAC+X,yBAAyB,CAACnb,IAAI,CAAC,IAAI,CAACoD,KAAK,CAACzY,KAAK,CAAC;MAC3DiyC,MAAM,GAAGrgC,KAAK,EAAE;MAChB,IAAI,CAAC6G,KAAK,CAAC+X,yBAAyB,CAAC3K,GAAG,EAAE;IAC5C,CAAC,MAAM;MACLosB,MAAM,GAAGrgC,KAAK,EAAE;IAClB;IAEA,OAAOqgC,MAAM;EACf;EAEAC,cAAc,CACZzgC,IAAkB,EAElBqF,QAAkB,EACJ;IACdrF,IAAI,GAAG,KAAK,CAACygC,cAAc,CAACzgC,IAAI,EAAEqF,QAAQ,CAAC;IAC3C,IAAI,IAAI,CAAC6f,GAAG,IAAa,EAAE;MACzBllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;MAIpB,IAAI,CAAC8B,gBAAgB,CAACpI,IAAI,CAAC;IAC7B;IAEA,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MACxB,MAAMge,YAAY,GAAG,IAAI,CAAC7O,WAAW,CAACxsB,QAAQ,CAAC;MAC/Cq7B,YAAY,CAAC9+B,UAAU,GAAG5B,IAAI;MAC9B0gC,YAAY,CAACxI,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;MAE5D,OAAO,IAAI,CAACz0B,UAAU,CAAC+7B,YAAY,EAAE,oBAAoB,CAAC;IAC5D;IAEA,OAAO1gC,IAAI;EACb;EAEA2gC,uBAAuB,CAAC3gC,IAAY,EAAE;IACpC,IACGA,IAAI,CAAC1N,IAAI,KAAK,mBAAmB,KAC/B0N,IAAI,CAAC41B,UAAU,KAAK,MAAM,IAAI51B,IAAI,CAAC41B,UAAU,KAAK,QAAQ,CAAC,IAC7D51B,IAAI,CAAC1N,IAAI,KAAK,wBAAwB,IACrC0N,IAAI,CAACm5B,UAAU,KAAK,MAAO,IAC5Bn5B,IAAI,CAAC1N,IAAI,KAAK,sBAAsB,IAAI0N,IAAI,CAACm5B,UAAU,KAAK,MAAO,EACpE;MAGA;IACF;IAEA,KAAK,CAACwH,uBAAuB,CAAC3gC,IAAI,CAAC;EACrC;EAEA6G,WAAW,CACT7G,IAA+D,EAC/D8G,UAAgC,EACnB;IACb,MAAM85B,IAAI,GAAG,KAAK,CAAC/5B,WAAW,CAAC7G,IAAI,EAAE8G,UAAU,CAAC;IAChD,IACE85B,IAAI,CAACtuC,IAAI,KAAK,wBAAwB,IACtCsuC,IAAI,CAACtuC,IAAI,KAAK,sBAAsB,EACpC;MACAsuC,IAAI,CAACzH,UAAU,GAAGyH,IAAI,CAACzH,UAAU,IAAI,OAAO;IAC9C;IACA,OAAOyH,IAAI;EACb;EAEAC,sBAAsB,CACpB7gC,IAA8B,EACI;IAClC,IAAI,IAAI,CAACiuB,YAAY,KAAU,EAAE;MAC/BjuB,IAAI,CAACm5B,UAAU,GAAG,MAAM;MAExB,MAAM2H,eAAe,GAAG,IAAI,CAACr8B,SAAS,EAAE;MACxC,IAAI,CAACuR,IAAI,EAAE;MAEX,IAAI,IAAI,CAAC0M,KAAK,GAAW,EAAE;QAEzB1iB,IAAI,CAACmH,UAAU,GAAG,IAAI,CAAC45B,qBAAqB,CACrB,IAAI,CAC1B;QACD,KAAK,CAACC,eAAe,CAAChhC,IAAI,CAAC;QAC3B,OAAO,IAAI;MACb,CAAC,MAAM;QAGL,OAAO,IAAI,CAACs5B,kBAAkB,CAACwH,eAAe,CAAC;MACjD;IACF,CAAC,MAAM,IAAI,IAAI,CAAC7S,YAAY,KAAY,EAAE;MACxCjuB,IAAI,CAACm5B,UAAU,GAAG,MAAM;MAExB,MAAM2H,eAAe,GAAG,IAAI,CAACr8B,SAAS,EAAE;MACxC,IAAI,CAACuR,IAAI,EAAE;MAGX,OAAO,IAAI,CAACujB,mBAAmB,CAACuH,eAAe,EAAE,KAAK,CAAC;IACzD,CAAC,MAAM,IAAI,IAAI,CAAC7S,YAAY,KAAe,EAAE;MAC3CjuB,IAAI,CAACm5B,UAAU,GAAG,MAAM;MACxB,MAAM2H,eAAe,GAAG,IAAI,CAACr8B,SAAS,EAAE;MACxC,IAAI,CAACuR,IAAI,EAAE;MAEX,OAAO,IAAI,CAACskB,kBAAkB,CAACwG,eAAe,CAAC;KAChD,MAAM,IAAI,IAAI,CAACpK,gBAAgB,EAAE,IAAI,IAAI,CAACzI,YAAY,KAAU,EAAE;MACjEjuB,IAAI,CAACm5B,UAAU,GAAG,OAAO;MACzB,MAAM2H,eAAe,GAAG,IAAI,CAACr8B,SAAS,EAAE;MACxC,IAAI,CAACuR,IAAI,EAAE;MAEX,OAAO,IAAI,CAACgpB,wBAAwB,CAAC8B,eAAe,CAAC;IACvD,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,sBAAsB,CAAC7gC,IAAI,CAAC;IAC3C;EACF;EAEAihC,aAAa,CAACjhC,IAAY,EAAW;IACnC,IAAI,KAAK,CAACihC,aAAa,CAACjhC,IAAI,CAAC,EAAE,OAAO,IAAI;IAE1C,IAAI,IAAI,CAACiuB,YAAY,KAAU,IAAI,IAAI,CAAC5I,SAAS,EAAE,CAAC/yB,IAAI,OAAY,EAAE;MACpE0N,IAAI,CAACm5B,UAAU,GAAG,MAAM;MACxB,IAAI,CAACnjB,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,EAAE;MACX,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEAkrB,kCAAkC,CAAClhC,IAAY,EAAW;IACxD,MAAM;MAAEqF;KAAU,GAAG,IAAI,CAAC2B,KAAK;IAC/B,MAAMm6B,YAAY,GAAG,KAAK,CAACD,kCAAkC,CAAClhC,IAAI,CAAC;IACnE,IAAImhC,YAAY,IAAInhC,IAAI,CAACm5B,UAAU,KAAK,MAAM,EAAE;MAC9C,IAAI,CAACjiC,UAAU,CAACmO,QAAQ,CAAC;IAC3B;IACA,OAAO87B,YAAY;EACrB;EAEAC,YAAY,CACVphC,IAAa,EACbqhC,WAAoB,EACpBC,UAA2B,EAC3B;IACA,KAAK,CAACF,YAAY,CAACphC,IAAI,EAAEqhC,WAAW,EAAEC,UAAU,CAAC;IACjD,IAAI,IAAI,CAAC5e,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE;EACF;EAEA0J,gBAAgB,CACdj+B,SAAsB,EACtBk+B,MAAW,EACXx6B,KAA8B,EACxB;IACN,MAAM;MAAE3B;KAAU,GAAG,IAAI,CAAC2B,KAAK;IAC/B,IAAI,IAAI,CAACinB,YAAY,KAAa,EAAE;MAClC,IAAI,KAAK,CAACwT,4BAA4B,CAACn+B,SAAS,EAAEk+B,MAAM,CAAC,EAAE;QAEzD;MACF;MAEAA,MAAM,CAAC7G,OAAO,GAAG,IAAI;IACvB;IAEA,KAAK,CAAC4G,gBAAgB,CAACj+B,SAAS,EAAEk+B,MAAM,EAAEx6B,KAAK,CAAC;IAEhD,IAAIw6B,MAAM,CAAC7G,OAAO,EAAE;MAClB,IACE6G,MAAM,CAAClvC,IAAI,KAAK,eAAe,IAC/BkvC,MAAM,CAAClvC,IAAI,KAAK,sBAAsB,IACtCkvC,MAAM,CAAClvC,IAAI,KAAK,oBAAoB,EACpC;QACA,IAAI,CAAC4T,KAAK,CAAC+rB,UAAU,CAACK,mBAAmB,EAAE;UAAEnsB,EAAE,EAAEd;QAAS,CAAC,CAAC;MAC9D,CAAC,MAAM,IAAIm8B,MAAM,CAAC9xC,KAAK,EAAE;QACvB,IAAI,CAACwW,KAAK,CAAC+rB,UAAU,CAACM,4BAA4B,EAAE;UAClDpsB,EAAE,EAAEq7B,MAAM,CAAC9xC;QACb,CAAC,CAAC;MACJ;IACF;EACF;EAEAgyC,UAAU,CAACnsB,IAAY,EAAW;IAChC,OAAOA,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,eAAe;EACxD;EAEAosB,YAAY,GAAS;IACnB,MAAMpsB,IAAI,GAAG,KAAK,CAAC4R,SAAS,EAAE;IAC9B,MAAMya,QAAQ,GAAG,IAAI,GAAGrsB,IAAI;IAG5B,IAAI,CAAC,IAAI,CAACmsB,UAAU,CAACnsB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACvO,KAAK,CAACiY,MAAM,EAAE;MAChD,IAAI,CAAC/Y,KAAK,CAACzG,MAAM,CAAC9I,iBAAiB,EAAE;QACnCwP,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW,EAAE;QAC5B/xB,cAAc,EAAEkzC;MAClB,CAAC,CAAC;IACJ;IAEA,IAAI,CAACxb,WAAW,CAAUwb,aAAQ,CAAC;EACrC;EAGAvb,gBAAgB,CAACz1B,IAAY,EAAQ;IACnC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IAAIlO,IAAI,QAA6B,IAAIolB,IAAI,QAA0B,EAAE;MACvE,OAAO,IAAI,CAACoR,QAAQ,IAAe,CAAC,CAAC;IACvC,CAAC,MAAM,IACL,IAAI,CAACpgB,KAAK,CAACiY,MAAM,KAChBruB,IAAI,KAA0B,MAAIA,IAAI,OAAuB,CAAC,EAC/D;MACA,OAAO,IAAI,CAACw2B,QAAQ,CAACx2B,IAAI,KAA0B,YAAgB,EAAE,CAAC,CAAC;KACxE,MAAM,IAAI,IAAI,CAACoW,KAAK,CAACiY,MAAM,IAAIruB,IAAI,OAA2B,EAAE;MAC/D,IAAIolB,IAAI,OAAkB,EAAE;QAC1B,OAAO,IAAI,CAACoR,QAAQ,KAAiB,CAAC,CAAC;MACzC;MAEA,OAAO,IAAI,CAACA,QAAQ,KAAc,CAAC,CAAC;KACrC,MAAM,IACLtR,eAAe,CAACllB,IAAI,EAAEolB,IAAI,EAAE,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,CAAC,EACtE;MACA,IAAI,CAACkI,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,OAAO,IAAI,CAAC6iC,YAAY,EAAE;IAC5B,CAAC,MAAM;MACL,OAAO,KAAK,CAACtb,gBAAgB,CAACz1B,IAAI,CAAC;IACrC;EACF;EAEA8U,YAAY,CAAC1F,IAAY,EAAE2F,SAAmB,EAAW;IACvD,IAAI3F,IAAI,CAAC1N,IAAI,KAAK,oBAAoB,EAAE;MACtC,OAAO,IAAI,CAACoT,YAAY,CAAC1F,IAAI,CAAC4B,UAAU,EAAE+D,SAAS,CAAC;IACtD,CAAC,MAAM;MACL,OAAO,KAAK,CAACD,YAAY,CAAC1F,IAAI,EAAE2F,SAAS,CAAC;IAC5C;EACF;EAEAC,YAAY,CAAC5F,IAAY,EAAgC;IAAA,IAA9B6F,KAAc,uEAAG,KAAK;IAC/C,IACE,CAACA,KAAK,IACN7F,IAAI,CAAC1N,IAAI,KAAK,sBAAsB,IACpC0N,IAAI,CAAC6hC,IAAI,CAACvvC,IAAI,KAAK,oBAAoB,EACvC;MACA0N,IAAI,CAAC6hC,IAAI,GAAG,IAAI,CAAClD,mBAAmB,CAAC3+B,IAAI,CAAC6hC,IAAI,CAAC;IACjD;IACA,KAAK,CAACj8B,YAAY,CAAC5F,IAAI,EAAE6F,KAAK,CAAC;EACjC;EAGAw6B,gBAAgB,CACdyB,QAAwB,EACxBxB,gBAA6C,EAC7Cz6B,KAAc,EACR;IACN,KAAK,IAAIjW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkyC,QAAQ,CAAC1yC,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACxC,MAAMsvC,IAAI,GAAG4C,QAAQ,CAAClyC,CAAC,CAAC;MACxB,IAAI,KAAI,IAAJsvC,oBAAI,CAAE5sC,IAAI,MAAK,oBAAoB,EAAE;QACvCwvC,QAAQ,CAAClyC,CAAC,CAAC,GAAG,IAAI,CAAC+uC,mBAAmB,CAACO,IAAI,CAAC;MAC9C;IACF;IACA,KAAK,CAACmB,gBAAgB,CAACyB,QAAQ,EAAExB,gBAAgB,EAAEz6B,KAAK,CAAC;EAC3D;EAIAk8B,gBAAgB,CACdD,QAAwD,EACxDE,mBAA6B,EACmB;IAChD,KAAK,IAAIpyC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkyC,QAAQ,CAAC1yC,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAAA;MACxC,MAAMsvC,IAAI,GAAG4C,QAAQ,CAAClyC,CAAC,CAAC;MACxB,IACEsvC,IAAI,IACJA,IAAI,CAAC5sC,IAAI,KAAK,oBAAoB,IAClC,EAAC4sC,mBAAI,CAACp9B,KAAK,aAAVmgC,WAAYt/B,cAAa,CACzBm/B,aAAQ,CAAC1yC,MAAM,GAAG,CAAC,IAAI,CAAC4yC,mBAAmB,CAAC,EAC7C;QACA,IAAI,CAAC97B,KAAK,CAAC+rB,UAAU,CAAC2C,iBAAiB,EAAE;UACvCzuB,EAAE,EAAE+4B,IAAI,CAAChH;QACX,CAAC,CAAC;MACJ;IACF;IAEA,OAAO4J,QAAQ;EACjB;EAEAI,cAAc,CACZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB/8B,mBAA6C,EACN;IACvC,MAAMtF,IAAI,GAAG,KAAK,CAACkiC,cAAc,CAC/BC,KAAK,EACLC,YAAY,EACZC,OAAO,EACP/8B,mBAAmB,CACpB;IAOD,IAAI88B,YAAY,IAAI,CAAC,IAAI,CAACp7B,KAAK,CAACgY,sBAAsB,EAAE;MACtD,IAAI,CAAC+iB,gBAAgB,CAAC/hC,IAAI,CAAC2c,QAAQ,CAAC;IACtC;IAEA,OAAO3c,IAAI;EACb;EAEAuF,WAAW,CAACjT,IAAY,EAAEgwC,eAAwB,EAAE78B,OAAqB,EAAE;IACzE,OACEnT,IAAI,KAAK,oBAAoB,IAC7B,KAAK,CAACiT,WAAW,CAACjT,IAAI,EAAEgwC,eAAe,EAAE78B,OAAO,CAAC;EAErD;EAGAb,kBAAkB,CAAC5E,IAAqB,EAAmB;IACzD,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MAExB1iB,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACtD;IACA,OAAO,KAAK,CAACx0B,kBAAkB,CAAC5E,IAAI,CAAC;EACvC;EAEA8E,yBAAyB,CACvB9E,IAA4B,EACJ;IACxB,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MAExB1iB,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;IACtD;IACA,OAAO,KAAK,CAACt0B,yBAAyB,CAAC9E,IAAI,CAAC;EAC9C;EAGAuiC,aAAa,GAAY;IACvB,OAAO,IAAI,CAAC7f,KAAK,IAAO,IAAI,KAAK,CAAC6f,aAAa,EAAE;EACnD;EAGAC,eAAe,GAAY;IACzB,OAAO,IAAI,CAAC9f,KAAK,IAAU,IAAI,KAAK,CAAC8f,eAAe,EAAE;EACxD;EAEAC,sBAAsB,CAAClgC,MAAuC,EAAW;IACvE,OAAO,CAAC,IAAI,CAACmgB,KAAK,IAAU,IAAI,KAAK,CAAC+f,sBAAsB,CAAClgC,MAAM,CAAC;EACtE;EAGAc,eAAe,CACbC,SAAsB,EACtBf,MAAqB,EACrBgB,WAAoB,EACpBpB,OAAgB,EAChBqB,aAAsB,EACtBC,iBAA0B,EACpB;IACN,IAAKlB,MAAM,CAAS04B,QAAQ,EAAE;MAC5B,IAAI,CAAC/jC,UAAU,CAAEqL,MAAM,CAAS04B,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;IACrD;IACA,OAAQgU,MAAM,CAAS04B,QAAQ;IAC/B,IAAI,IAAI,CAACvY,KAAK,IAAO,EAAE;MACrBngB,MAAM,CAACoB,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAClE;IAEA,KAAK,CAACx0B,eAAe,CACnBC,SAAS,EACTf,MAAM,EACNgB,WAAW,EACXpB,OAAO,EACPqB,aAAa,EACbC,iBAAiB,CAClB;IAED,IAAIlB,MAAM,CAACC,MAAM,IAAIgB,aAAa,EAAE;MAClC,MAAMhB,MAAM,GAAGD,MAAM,CAACC,MAAM;MAC5B,IAAIA,MAAM,CAACpT,MAAM,GAAG,CAAC,IAAI,IAAI,CAACszC,WAAW,CAAClgC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpD,IAAI,CAAC0D,KAAK,CAAC+rB,UAAU,CAACsC,4BAA4B,EAAE;UAAEpuB,EAAE,EAAE5D;QAAO,CAAC,CAAC;MACrE;IAEF,CAAC,MAAM,IAELA,MAAM,CAACjQ,IAAI,KAAK,kBAAkB,IAClCkR,aAAa,IAEbjB,MAAM,CAAC7S,KAAK,CAAC8S,MAAM,EACnB;MAEA,MAAMA,MAAM,GAAGD,MAAM,CAAC7S,KAAK,CAAC8S,MAAM;MAClC,IAAIA,MAAM,CAACpT,MAAM,GAAG,CAAC,IAAI,IAAI,CAACszC,WAAW,CAAClgC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;QACpD,IAAI,CAAC0D,KAAK,CAAC+rB,UAAU,CAACsC,4BAA4B,EAAE;UAAEpuB,EAAE,EAAE5D;QAAO,CAAC,CAAC;MACrE;IACF;EACF;EAEAogC,sBAAsB,CACpBr/B,SAAsB,EACtBf,MAA4B,EAC5BgB,WAAoB,EACpBpB,OAAgB,EACV;IACN,IAAKI,MAAM,CAAS04B,QAAQ,EAAE;MAC5B,IAAI,CAAC/jC,UAAU,CAAEqL,MAAM,CAAS04B,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;IACrD;IACA,OAAQgU,MAAM,CAAS04B,QAAQ;IAC/B,IAAI,IAAI,CAACvY,KAAK,IAAO,EAAE;MACrBngB,MAAM,CAACoB,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAClE;IAEA,KAAK,CAAC8K,sBAAsB,CAACr/B,SAAS,EAAEf,MAAM,EAAEgB,WAAW,EAAEpB,OAAO,CAAC;EACvE;EAGAygC,eAAe,CAAC5iC,IAAa,EAAQ;IACnC,KAAK,CAAC4iC,eAAe,CAAC5iC,IAAI,CAAC;IAC3B,IAAIA,IAAI,CAACC,UAAU,IAAI,IAAI,CAACyiB,KAAK,IAAO,EAAE;MACxC1iB,IAAI,CAAC6iC,mBAAmB,GAAG,IAAI,CAACxI,mCAAmC,EAAE;IACvE;IACA,IAAI,IAAI,CAACpM,YAAY,KAAgB,EAAE;MACrC,IAAI,CAACjY,IAAI,EAAE;MACX,MAAM8sB,WAAoC,GAAI9iC,IAAI,CAAC25B,UAAU,GAAG,EAAG;MACnE,GAAG;QACD,MAAM35B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;QAC7BzE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACw1B,6BAA6B,CAAa,IAAI,CAAC;QAC9D,IAAI,IAAI,CAAC/W,KAAK,IAAO,EAAE;UACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC02B,mCAAmC,EAAE;QAClE,CAAC,MAAM;UACLr6B,IAAI,CAAC2D,cAAc,GAAG,IAAI;QAC5B;QACAm/B,WAAW,CAACl/B,IAAI,CAAC,IAAI,CAACe,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC,CAAC;MAC5D,CAAC,QAAQ,IAAI,CAACklB,GAAG,CAAU;IAC7B;EACF;EAEA6d,uBAAuB,CAACxgC,MAAsC,EAAQ;IACpE,KAAK,CAACwgC,uBAAuB,CAACxgC,MAAM,CAAC;IACrC,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IACxD,IAAIC,MAAM,CAACpT,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMmvC,KAAK,GAAG/7B,MAAM,CAAC,CAAC,CAAC;MACvB,IAAI,IAAI,CAACkgC,WAAW,CAACnE,KAAK,CAAC,IAAIh8B,MAAM,CAAC7P,IAAI,KAAK,KAAK,EAAE;QACpD,IAAI,CAACwT,KAAK,CAAC+rB,UAAU,CAACwB,yBAAyB,EAAE;UAAEttB,EAAE,EAAEo4B;QAAM,CAAC,CAAC;OAChE,MAAM,IAAI,IAAI,CAACmE,WAAW,CAACnE,KAAK,CAAC,EAAE;QAClC,IAAI,CAACr4B,KAAK,CAAC+rB,UAAU,CAACmC,yBAAyB,EAAE;UAAEjuB,EAAE,EAAEo4B;QAAM,CAAC,CAAC;MACjE;IACF;EACF;EAEAyE,+BAA+B,CAC7BhjC,IAA2C,EACrC;IACNA,IAAI,CAACi7B,QAAQ,GAAG,IAAI,CAACC,iBAAiB,EAAE;EAC1C;EAGA+H,iBAAiB,CACfj+B,IAA+C,EAC/CK,QAAqC,EACrC9B,WAAoB,EACpBpB,OAAgB,EAChB8C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EACV;IACnC,IAAKN,IAAI,CAASi2B,QAAQ,EAAE;MAC1B,IAAI,CAAC/jC,UAAU,CAAE8N,IAAI,CAASi2B,QAAQ,CAACv8B,GAAG,CAACnQ,KAAK,CAAC;IACnD;IACA,OAAQyW,IAAI,CAASi2B,QAAQ;IAE7B,IAAIt3B,cAAc;IAGlB,IAAI,IAAI,CAAC+e,KAAK,IAAO,IAAI,CAACxd,UAAU,EAAE;MACpCvB,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;MACzD,IAAI,CAAC,IAAI,CAACnV,KAAK,IAAW,EAAE,IAAI,CAACxrB,UAAU,EAAE;IAC/C;IAEA,MAAMspC,MAAM,GAAG,KAAK,CAACyC,iBAAiB,CACpCj+B,IAAI,EACJK,QAAQ,EACR9B,WAAW,EACXpB,OAAO,EACP8C,SAAS,EACTC,UAAU,EACVI,mBAAmB,CACpB;IAGD,IAAI3B,cAAc,EAAE;MAClB,CAAC68B,MAAM,CAAC9wC,KAAK,IAAI8wC,MAAM,EAAE78B,cAAc,GAAGA,cAAc;IAC1D;IACA,OAAO68B,MAAM;EACf;EAEA0C,4BAA4B,CAAC3E,KAAgB,EAAa;IACxD,IAAI,IAAI,CAACrZ,GAAG,IAAa,EAAE;MACzB,IAAIqZ,KAAK,CAACjsC,IAAI,KAAK,YAAY,EAAE;QAC/B,IAAI,CAAC4T,KAAK,CAAC+rB,UAAU,CAACkC,iBAAiB,EAAE;UAAEhuB,EAAE,EAAEo4B;QAAM,CAAC,CAAC;MACzD;MACA,IAAI,IAAI,CAACmE,WAAW,CAACnE,KAAK,CAAC,EAAE;QAC3B,IAAI,CAACr4B,KAAK,CAAC+rB,UAAU,CAACuC,yBAAyB,EAAE;UAAEruB,EAAE,EAAEo4B;QAAM,CAAC,CAAC;MACjE;MAECA,KAAK,CAAyBj4B,QAAQ,GAAG,IAAI;IAChD;IACA,IAAI,IAAI,CAACoc,KAAK,IAAU,EAAE;MAExB6b,KAAK,CAACrG,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;KACtD,MAAM,IAAI,IAAI,CAACsJ,WAAW,CAACnE,KAAK,CAAC,EAAE;MAClC,IAAI,CAACr4B,KAAK,CAAC+rB,UAAU,CAACqC,2BAA2B,EAAE;QAAEnuB,EAAE,EAAEo4B;MAAM,CAAC,CAAC;IACnE;IAEA,IAAI,IAAI,CAAC7b,KAAK,CAAO,OAAI,IAAI,CAACggB,WAAW,CAACnE,KAAK,CAAC,EAAE;MAChD,IAAI,CAACr4B,KAAK,CAAC+rB,UAAU,CAACyC,kBAAkB,EAAE;QAAEvuB,EAAE,EAAEo4B;MAAM,CAAC,CAAC;IAC1D;IAEA,IAAI,CAACn2B,gBAAgB,CAACm2B,KAAK,CAAC;IAC5B,OAAOA,KAAK;EACd;EAEA4E,iBAAiB,CACf99B,QAA0B,EAC1Bw8B,IAAuB,EACZ;IACX,MAAM7hC,IAAI,GAAG,KAAK,CAACmjC,iBAAiB,CAAC99B,QAAQ,EAAEw8B,IAAI,CAAC;IAEpD,IACE7hC,IAAI,CAAC1N,IAAI,KAAK,mBAAmB,IACjC0N,IAAI,CAACk4B,cAAc,IACnBl4B,IAAI,CAAC06B,KAAK,CAACnsC,KAAK,GAAGyR,IAAI,CAACk4B,cAAc,CAAC3pC,KAAK,EAC5C;MACA,IAAI,CAAC2X,KAAK,CAAC+rB,UAAU,CAAC0C,qBAAqB,EAAE;QAC3CxuB,EAAE,EAAEnG,IAAI,CAACk4B;MACX,CAAC,CAAC;IACJ;IAEA,OAAOl4B,IAAI;EACb;EAEAojC,wBAAwB,CAACpjC,IAAyB,EAAW;IAC3D,IAAI,CAAC21B,iBAAiB,CAAC31B,IAAI,CAAC,EAAE;MAC5B,OAAO,KAAK,CAACojC,wBAAwB,CAACpjC,IAAI,CAAC;IAC7C;IAEA,OAAO61B,oBAAoB,CAAC,IAAI,CAAC7uB,KAAK,CAAC1U,IAAI,CAAC;EAC9C;EAEA+wC,qBAAqB,CAACrjC,IAAiC,EAAE;IACvD,KAAK,CAACqjC,qBAAqB,CAACrjC,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACsjC,MAAM,IAAItjC,IAAI,CAAC41B,UAAU,KAAK,OAAO,EAAE;MAC9C,IAAI,CAAC1vB,KAAK,CAAC+rB,UAAU,CAACyB,6BAA6B,EAAE;QACnDvtB,EAAE,EAAEnG,IAAI,CAACmH,UAAU,CAAC,CAAC,CAAC,CAACzI,GAAG,CAACnQ;MAC7B,CAAC,CAAC;IACJ;EACF;EAEAg1C,yBAAyB,CAKvBvjC,IAAyB,EAAEwjC,SAAoB,EAAElxC,IAAe,EAAQ;IACxEkxC,SAAS,CAACC,KAAK,GAAG9N,iBAAiB,CAAC31B,IAAI,CAAC,GACrC,IAAI,CAACy5B,6BAA6B,CAClB,IAAI,EACA,IAAI,CACvB,GACD,IAAI,CAAC/B,eAAe,EAAE;IAE1B13B,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAAC,IAAI,CAAC8/B,qBAAqB,CAACF,SAAS,EAAElxC,IAAI,CAAC,CAAC;EACnE;EAGAqxC,gCAAgC,CAAC3jC,IAAyB,EAAW;IACnEA,IAAI,CAAC41B,UAAU,GAAG,OAAO;IAEzB,IAAIljC,IAAI,GAAG,IAAI;IACf,IAAI,IAAI,CAACgwB,KAAK,IAAY,EAAE;MAC1BhwB,IAAI,GAAG,QAAiB;IAC1B,CAAC,MAAM,IAAI,IAAI,CAACu7B,YAAY,KAAU,EAAE;MACtCv7B,IAAI,GAAG,MAAe;IACxB;IACA,IAAIA,IAAI,EAAE;MACR,MAAMgrC,EAAE,GAAG,IAAI,CAACrY,SAAS,EAAE;MAC3B,MAAM;QAAE/yB;MAAK,CAAC,GAAGorC,EAAE;MAGnB,IAAIhrC,IAAI,KAAK,MAAM,IAAIJ,IAAI,OAAY,EAAE;QAEvC,IAAI,CAAC4E,UAAU,CAAC,IAAI,EAAEwmC,EAAE,CAACprC,IAAI,CAAC;MAChC;MAEA,IACEujC,oBAAoB,CAACvjC,IAAI,CAAC,IAC1BA,IAAI,KAAc,KAClBA,IAAI,OAAY,EAChB;QACA,IAAI,CAAC0jB,IAAI,EAAE;QACXhW,IAAI,CAAC41B,UAAU,GAAGljC,IAAI;MACxB;IACF;IAEA,OAAO,KAAK,CAACixC,gCAAgC,CAAC3jC,IAAI,CAAC;EACrD;EAGA4jC,oBAAoB,CAClBJ,SAAc,EACdK,gBAAyB,EACzBC,kBAA2B,EAE3BC,eAAwB,EAExBppB,WAAqC,EAClB;IACnB,MAAMqpB,UAAU,GAAGR,SAAS,CAACS,QAAQ;IAErC,IAAIC,iBAAiB,GAAG,IAAI;IAC5B,IAAIF,UAAU,CAAC1xC,IAAI,KAAK,YAAY,EAAE;MACpC,IAAI0xC,UAAU,CAAC9rC,IAAI,KAAK,MAAM,EAAE;QAC9BgsC,iBAAiB,GAAG,MAAM;MAC5B,CAAC,MAAM,IAAIF,UAAU,CAAC9rC,IAAI,KAAK,QAAQ,EAAE;QACvCgsC,iBAAiB,GAAG,QAAQ;MAC9B;IACF;IAEA,IAAIv+B,SAAS,GAAG,KAAK;IACrB,IAAI,IAAI,CAACsoB,YAAY,IAAQ,IAAI,CAAC,IAAI,CAACK,qBAAqB,CAAC,IAAI,CAAC,EAAE;MAClE,MAAM6V,QAAQ,GAAG,IAAI,CAACzM,eAAe,CAAC,IAAI,CAAC;MAC3C,IACEwM,iBAAiB,KAAK,IAAI,IAC1B,CAACjxB,0BAA0B,CAAC,IAAI,CAACjM,KAAK,CAAC1U,IAAI,CAAC,EAC5C;QAEAkxC,SAAS,CAACS,QAAQ,GAAGE,QAAQ;QAC7BX,SAAS,CAAC5N,UAAU,GAAGsO,iBAAiB;QACxCV,SAAS,CAACC,KAAK,GAAGlS,eAAe,CAAC4S,QAAQ,CAAC;MAC7C,CAAC,MAAM;QAELX,SAAS,CAACS,QAAQ,GAAGD,UAAU;QAC/BR,SAAS,CAAC5N,UAAU,GAAG,IAAI;QAC3B4N,SAAS,CAACC,KAAK,GAAG,IAAI,CAAC/L,eAAe,EAAE;MAC1C;IACF,CAAC,MAAM;MACL,IACEwM,iBAAiB,KAAK,IAAI,IAC1BjxB,0BAA0B,CAAC,IAAI,CAACjM,KAAK,CAAC1U,IAAI,CAAC,EAC3C;QAEAkxC,SAAS,CAACS,QAAQ,GAAG,IAAI,CAACvM,eAAe,CAAC,IAAI,CAAC;QAC/C8L,SAAS,CAAC5N,UAAU,GAAGsO,iBAAiB;MAC1C,CAAC,MAAM;QACL,IAAIL,gBAAgB,EAAE;UAEpB,MAAM,IAAI,CAAC39B,KAAK,CAACzG,MAAM,CAACnK,qBAAqB,EAAE;YAC7C6Q,EAAE,EAAEq9B,SAAS;YACbjuC,UAAU,EAAEyuC,UAAU,CAACt0C;UACzB,CAAC,CAAC;QACJ;QAEA8zC,SAAS,CAACS,QAAQ,GAAGD,UAAU;QAC/BR,SAAS,CAAC5N,UAAU,GAAG,IAAI;MAC7B;MAEA,IAAI,IAAI,CAACrH,aAAa,IAAQ,EAAE;QAC9BiV,SAAS,CAACC,KAAK,GAAG,IAAI,CAAC/L,eAAe,EAAE;MAC1C,CAAC,MAAM;QACL/xB,SAAS,GAAG,IAAI;QAChB69B,SAAS,CAACC,KAAK,GAAGlS,eAAe,CAACiS,SAAS,CAACS,QAAQ,CAAC;MACvD;IACF;IAEA,MAAMG,qBAAqB,GAAGzO,iBAAiB,CAAC6N,SAAS,CAAC;IAE1D,IAAIM,kBAAkB,IAAIM,qBAAqB,EAAE;MAC/C,IAAI,CAACl+B,KAAK,CAAC+rB,UAAU,CAAC0B,mCAAmC,EAAE;QACzDxtB,EAAE,EAAEq9B;MACN,CAAC,CAAC;IACJ;IAEA,IAAIM,kBAAkB,IAAIM,qBAAqB,EAAE;MAC/C,IAAI,CAAC5J,iBAAiB,CACpBgJ,SAAS,CAACC,KAAK,CAACvrC,IAAI,EACpBsrC,SAAS,CAACC,KAAK,CAAC/kC,GAAG,CAACnQ,KAAK,EACP,IAAI,CACvB;IACH;IAEA,IAAIoX,SAAS,IAAI,CAACm+B,kBAAkB,IAAI,CAACM,qBAAqB,EAAE;MAC9D,IAAI,CAACC,iBAAiB,CACpBb,SAAS,CAACC,KAAK,CAACvrC,IAAI,EACpBsrC,SAAS,CAAC9kC,GAAG,CAACnQ,KAAK,EACnB,IAAI,EACJ,IAAI,CACL;IACH;IAEA,OAAO,IAAI,CAACm1C,qBAAqB,CAACF,SAAS,EAAE,iBAAiB,CAAC;EACjE;EAEAc,gBAAgB,GAAc;IAC5B,QAAQ,IAAI,CAACt9B,KAAK,CAAC1U,IAAI;MACrB;QAEE,OAAO,IAAI,CAAColC,eAAe,CAAe,IAAI,CAAC;MACjD;QACE,OAAO,KAAK,CAAC4M,gBAAgB,EAAE;IAAA;EAErC;EAGAC,mBAAmB,CACjBvkC,IAAwB,EACxBwkC,cAAwB,EAClB;IAEN,MAAM9xC,IAAI,GAAGsN,IAAI,CAACtN,IAAI;IACtB,IAAIA,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,IAAI,IAAI,CAACgwB,KAAK,IAAO,EAAE;MACzD1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;IAChE;IACA,KAAK,CAAC0M,mBAAmB,CAACvkC,IAAI,EAAEwkC,cAAc,CAAC;EACjD;EAGAC,UAAU,CACR7D,IAA0B,EAC1BluC,IAA6B,EACvB;IACN,KAAK,CAAC+xC,UAAU,CAAC7D,IAAI,EAAEluC,IAAI,CAAC;IAC5B,IAAI,IAAI,CAACgwB,KAAK,IAAU,EAAE;MAExBke,IAAI,CAAC38B,EAAE,CAACi0B,cAAc,GAAG,IAAI,CAACkB,uBAAuB,EAAE;MACvD,IAAI,CAAChxB,gBAAgB,CAACw4B,IAAI,CAAC38B,EAAE,CAAC;IAChC;EACF;EAGAygC,iCAAiC,CAC/B1kC,IAA+B,EAC/B2kC,IAAsB,EACK;IAC3B,IAAI,IAAI,CAACjiB,KAAK,IAAU,EAAE;MACxB,MAAM6Y,qBAAqB,GAAG,IAAI,CAACv0B,KAAK,CAACkY,kBAAkB;MAC3D,IAAI,CAAClY,KAAK,CAACkY,kBAAkB,GAAG,IAAI;MAEpClf,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAACmB,uBAAuB,EAAE;MAChD,IAAI,CAACpyB,KAAK,CAACkY,kBAAkB,GAAGqc,qBAAqB;IACvD;IAEA,OAAO,KAAK,CAACmJ,iCAAiC,CAAC1kC,IAAI,EAAE2kC,IAAI,CAAC;EAC5D;EAGAC,qBAAqB,GAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,IAAU,IAAI,KAAK,CAACkiB,qBAAqB,EAAE;EAC9D;EAYA7E,gBAAgB,CACdz6B,mBAA6C,EAC7Cu/B,cAAyB,EACX;IAAA;IACd,IAAI79B,KAAK,GAAG,IAAI;IAEhB,IAAI89B,GAAG;IAEP,IACE,IAAI,CAACp+B,SAAS,CAAC,KAAK,CAAC,KACpB,IAAI,CAACgc,KAAK,KAAgB,IAAI,IAAI,CAACA,KAAK,IAAO,CAAC,EACjD;MACA1b,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;MAE1BkmC,GAAG,GAAG,IAAI,CAAC9V,QAAQ,CACjB,MAAM,KAAK,CAAC+Q,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC,EACjE79B,KAAK,CACN;MAID,IAAI,CAAC89B,GAAG,CAACza,KAAK,EAAE,OAAOya,GAAG,CAAC9kC,IAAI;MAK/B,MAAM;QAAEmU;OAAS,GAAG,IAAI,CAACnN,KAAK;MAC9B,MAAM+9B,cAAc,GAAG5wB,OAAO,CAACA,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC;MAClD,IAAI21C,cAAc,KAAK1wB,KAAE,CAAC3L,MAAM,IAAIq8B,cAAc,KAAK1wB,KAAE,CAACzL,MAAM,EAAE;QAChEuL,OAAO,CAACC,GAAG,EAAE;MACf;IACF;IAEA,IAAI,WAAG,aAAH4wB,IAAK3a,MAAK,IAAI,IAAI,CAAC3H,KAAK,IAAO,EAAE;MAAA;MACnC1b,KAAK,GAAGA,KAAK,IAAI,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;MAEnC,IAAI+E,cAA0C;MAE9C,MAAM8H,KAAK,GAAG,IAAI,CAACujB,QAAQ,CAACiW,KAAK,IAAI;QAAA;QACnCthC,cAAc,GAAG,IAAI,CAACk0B,iCAAiC,EAAE;QAEzD,MAAMqN,eAAe,GAAG,IAAI,CAACrG,gCAAgC,CAC3Dl7B,cAAc,EACd,MAAM;UACJ,MAAM68B,MAAM,GAAG,KAAK,CAACT,gBAAgB,CACnCz6B,mBAAmB,EACnBu/B,cAAc,CACf;UAED,IAAI,CAAC/S,0BAA0B,CAAC0O,MAAM,EAAE78B,cAAc,CAAC;UAEvD,OAAO68B,MAAM;QACf,CAAC,CACF;QAID,IAAI0E,wCAAe,CAACpjC,KAAK,aAArBqjC,sBAAuBxiC,aAAa,EAAEsiC,KAAK,EAAE;QAKjD,MAAM/F,IAAI,GAAG,IAAI,CAACkG,6BAA6B,CAACF,eAAe,CAAC;QAEhE,IAAIhG,IAAI,CAAC5sC,IAAI,KAAK,yBAAyB,EAAE2yC,KAAK,EAAE;QAEpD/F,IAAI,CAACv7B,cAAc,GAAGA,cAAc;QACpC,IAAI,CAACmuB,0BAA0B,CAACoN,IAAI,EAAEv7B,cAAc,CAAC;QAErD,OAAOuhC,eAAe;OACvB,EAAEl+B,KAAK,CAAC;MAET,IAAIk+B,eAII,GAAG,IAAI;MAEf,IACEz5B,KAAK,CAACzL,IAAI,IAEV,IAAI,CAAColC,6BAA6B,CAAC35B,KAAK,CAACzL,IAAI,CAAC,CAAC1N,IAAI,KACjD,yBAAyB,EAC3B;QACA,IAAI,CAACmZ,KAAK,CAAC4e,KAAK,IAAI,CAAC5e,KAAK,CAAC6jB,OAAO,EAAE;UAGlC,IAAI7jB,KAAK,CAACzL,IAAI,CAACqlC,KAAK,EAAE;YAEpB,IAAI,CAACn/B,KAAK,CACR+rB,UAAU,CAACmD,+CAA+C,EAC1D;cAAEjvB,EAAE,EAAExC;YAAe,CAAC,CACvB;UACH;UAEA,OAAO8H,KAAK,CAACzL,IAAI;QACnB;QAGAklC,eAAe,GAAGz5B,KAAK,CAACzL,IAAI;MAC9B;MAQA,aAAI8kC,GAAG,aAAHQ,KAAKtlC,KAAI,EAAE;QAEb,IAAI,CAACgH,KAAK,GAAG89B,GAAG,CAAC1V,SAAS;QAC1B,OAAO0V,GAAG,CAAC9kC,IAAI;MACjB;MAEA,IAAIklC,eAAe,EAAE;QAEnB,IAAI,CAACl+B,KAAK,GAAGyE,KAAK,CAAC2jB,SAAS;QAC5B,OAAO8V,eAAe;MACxB;MAEA,IAAIJ,YAAG,aAAHS,KAAKlW,OAAM,EAAE,MAAMyV,GAAG,CAACza,KAAK;MAChC,IAAI5e,KAAK,CAAC4jB,MAAM,EAAE,MAAM5jB,KAAK,CAAC4e,KAAK;MAGnC,MAAM,IAAI,CAACnkB,KAAK,CAAC+rB,UAAU,CAACkD,iCAAiC,EAAE;QAC7DhvB,EAAE,EAAExC;MACN,CAAC,CAAC;IACJ;IAEA,OAAO,KAAK,CAACo8B,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC;EACpE;EAGAW,UAAU,CACRxlC,IAAuC,EACe;IACtD,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MAExB,MAAM8d,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAAC,MAAM;QACjC,MAAMuM,qBAAqB,GAAG,IAAI,CAACv0B,KAAK,CAACkY,kBAAkB;QAC3D,IAAI,CAAClY,KAAK,CAACkY,kBAAkB,GAAG,IAAI;QAEpC,MAAMyY,QAAQ,GAAG,IAAI,CAAClzB,SAAS,EAAoB;QAEnD,CACEkzB,QAAQ,CAACO,cAAc,EAEvBl4B,IAAI,CAACs3B,SAAS,CACf,GAAG,IAAI,CAACD,oCAAoC,EAAE;QAE/C,IAAI,CAACrwB,KAAK,CAACkY,kBAAkB,GAAGqc,qBAAqB;QAErD,IAAI,IAAI,CAAC9M,kBAAkB,EAAE,EAAE,IAAI,CAACv3B,UAAU,EAAE;QAChD,IAAI,CAAC,IAAI,CAACwrB,KAAK,IAAU,EAAE,IAAI,CAACxrB,UAAU,EAAE;QAE5C,OAAOygC,QAAQ;MACjB,CAAC,CAAC;MAEF,IAAI6I,MAAM,CAACnR,MAAM,EAAE,OAAO,IAAI;MAG9B,IAAImR,MAAM,CAACnW,KAAK,EAAE,IAAI,CAACrjB,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;MAI/CpvB,IAAI,CAACi4B,UAAU,GAAGuI,MAAM,CAACxgC,IAAI,CAACk4B,cAAc,GACxC,IAAI,CAACvzB,UAAU,CAAC67B,MAAM,CAACxgC,IAAI,EAAE,gBAAgB,CAAC,GAC9C,IAAI;IACV;IAEA,OAAO,KAAK,CAACwlC,UAAU,CAACxlC,IAAI,CAAC;EAC/B;EAEAylC,gBAAgB,CAACjjC,MAAqB,EAAW;IAC/C,OAAO,IAAI,CAACkgB,KAAK,CAAU,OAAI,KAAK,CAAC+iB,gBAAgB,CAACjjC,MAAM,CAAC;EAC/D;EAEAkjC,0BAA0B,CACxB1lC,IAA+B,EAC/BwC,MAAmB,EACb;IACN,IAAI,IAAI,CAACwE,KAAK,CAAC+X,yBAAyB,CAACkF,OAAO,CAACjkB,IAAI,CAACzR,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MACnEyR,IAAI,CAACwC,MAAM,GAAGA,MAAM;IACtB,CAAC,MAAM;MACL,KAAK,CAACkjC,0BAA0B,CAAC1lC,IAAI,EAAEwC,MAAM,CAAC;IAChD;EACF;EAEA+9B,WAAW,CACTvgC,IAAgB,EAChB2lC,eAAwB,EACxBC,eAAgC,EAE1B;IAAA,IADNC,iBAA0B,uEAAG,IAAI;IAEjC,IACED,eAAe,IACf,IAAI,CAAC5+B,KAAK,CAAC+X,yBAAyB,CAACkF,OAAO,CAACjkB,IAAI,CAACzR,KAAK,CAAC,KAAK,CAAC,CAAC,EAC/D;MACA;IACF;IAGA,KAAK,IAAIqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGoQ,IAAI,CAACwC,MAAM,CAACpT,MAAM,EAAEQ,CAAC,EAAE,EAAE;MAC3C,IAAI,IAAI,CAAC8yC,WAAW,CAAC1iC,IAAI,CAACwC,MAAM,CAAC5S,CAAC,CAAC,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;QAC7C,IAAI,CAACsW,KAAK,CAAC+rB,UAAU,CAACwC,oBAAoB,EAAE;UAAEtuB,EAAE,EAAEnG,IAAI,CAACwC,MAAM,CAAC5S,CAAC;QAAE,CAAC,CAAC;MACrE;IACF;IAEA,OAAO,KAAK,CAAC2wC,WAAW,CACtBvgC,IAAI,EACJ2lC,eAAe,EACfC,eAAe,EACfC,iBAAiB,CAClB;EACH;EAEAC,kCAAkC,CAACC,UAAmB,EAAgB;IACpE,OAAO,KAAK,CAACD,kCAAkC,CAC7CC,UAAU,IAAI,IAAI,CAAC/+B,KAAK,CAAC8X,SAAS,CAACmF,OAAO,CAAC,IAAI,CAACjd,KAAK,CAACzY,KAAK,CAAC,KAAK,CAAC,CAAC,CACpE;EACH;EAEAy3C,eAAe,CACbx+B,IAAkB,EAElBnC,QAAkB,EAClBoC,OAAwB,EACV;IACd,IACED,IAAI,CAAClV,IAAI,KAAK,YAAY,IAC1BkV,IAAI,CAACtP,IAAI,KAAK,OAAO,IACrB,IAAI,CAAC8O,KAAK,CAAC8X,SAAS,CAACmF,OAAO,CAAC5e,QAAQ,CAACjX,KAAK,CAAC,KAAK,CAAC,CAAC,EACnD;MACA,IAAI,CAAC4nB,IAAI,EAAE;MAEX,MAAMhW,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;MACvCrF,IAAI,CAACuG,MAAM,GAAGiB,IAAI;MAClBxH,IAAI,CAACyG,SAAS,GAAG,KAAK,CAACw/B,4BAA4B,KAAY,KAAK,CAAC;MACrEz+B,IAAI,GAAG,IAAI,CAAC7C,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;IAChD,CAAC,MAAM,IACLwH,IAAI,CAAClV,IAAI,KAAK,YAAY,IAC1BkV,IAAI,CAACtP,IAAI,KAAK,OAAO,IACrB,IAAI,CAACwqB,KAAK,IAAO,EACjB;MACA,MAAM1b,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;MAChC,MAAM6M,KAAK,GAAG,IAAI,CAACujB,QAAQ,CACzBiW,KAAK,IAAI,IAAI,CAACiB,iCAAiC,CAAC7gC,QAAQ,CAAC,IAAI4/B,KAAK,EAAE,EACpEj+B,KAAK,CACN;MAID,IAAI,CAACyE,KAAK,CAAC4e,KAAK,IAAI,CAAC5e,KAAK,CAAC6jB,OAAO,EAAE,OAAO7jB,KAAK,CAACzL,IAAI;MAErD,MAAMwgC,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAC1B,MAAM,KAAK,CAACgX,eAAe,CAACx+B,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,CAAC,EACpDT,KAAK,CACN;MAED,IAAIw5B,MAAM,CAACxgC,IAAI,IAAI,CAACwgC,MAAM,CAACnW,KAAK,EAAE,OAAOmW,MAAM,CAACxgC,IAAI;MAEpD,IAAIyL,KAAK,CAACzL,IAAI,EAAE;QACd,IAAI,CAACgH,KAAK,GAAGyE,KAAK,CAAC2jB,SAAS;QAE5B,OAAO3jB,KAAK,CAACzL,IAAI;MACnB;MAEA,IAAIwgC,MAAM,CAACxgC,IAAI,EAAE;QACf,IAAI,CAACgH,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;QAC7B,OAAOoR,MAAM,CAACxgC,IAAI;MACpB;MAEA,MAAMyL,KAAK,CAAC4e,KAAK,IAAImW,MAAM,CAACnW,KAAK;IACnC;IAEA,OAAO,KAAK,CAAC2b,eAAe,CAACx+B,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,CAAC;EACvD;EAEAF,cAAc,CACZC,IAAkB,EAElBnC,QAAkB,EAClBoC,OAAmC,EACnC0+B,cAAqC,EACvB;IACd,IAAI,IAAI,CAACzjB,KAAK,IAAgB,IAAI,IAAI,CAAC0jB,mBAAmB,EAAE,EAAE;MAC5DD,cAAc,CAACz+B,mBAAmB,GAAG,IAAI;MACzC,IAAID,OAAO,EAAE;QACX0+B,cAAc,CAACv+B,IAAI,GAAG,IAAI;QAC1B,OAAOJ,IAAI;MACb;MACA,IAAI,CAACwO,IAAI,EAAE;MACX,MAAMhW,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAA2BxsB,QAAQ,CAAC;MACjErF,IAAI,CAACuG,MAAM,GAAGiB,IAAI;MAClBxH,IAAI,CAACqmC,aAAa,GAAG,IAAI,CAAChM,mCAAmC,EAAE;MAC/D,IAAI,CAACtL,MAAM,CAAW;MACtB/uB,IAAI,CAACyG,SAAS,GAAG,IAAI,CAACw/B,4BAA4B,KAAY,KAAK,CAAC;MACpEjmC,IAAI,CAACsG,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI,CAACF,oBAAoB,CAACpG,IAAI,EAAiB,IAAI,CAAC;IAC7D,CAAC,MAAM,IAAI,CAACyH,OAAO,IAAI,IAAI,CAACgvB,gBAAgB,EAAE,IAAI,IAAI,CAAC/T,KAAK,IAAO,EAAE;MACnE,MAAM1iB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAE3BxsB,QAAQ,CAAC;MACXrF,IAAI,CAACuG,MAAM,GAAGiB,IAAI;MAElB,MAAMg5B,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAAC,MAAM;QACjChvB,IAAI,CAACqmC,aAAa,GAChB,IAAI,CAAC7K,4CAA4C,EAAE;QACrD,IAAI,CAACzM,MAAM,CAAW;QACtB/uB,IAAI,CAACyG,SAAS,GAAG,KAAK,CAACw/B,4BAA4B,KAAY,KAAK,CAAC;QACrE,IAAIE,cAAc,CAACz+B,mBAAmB,EAAE;UACrC1H,IAAI,CAAsCsG,QAAQ,GAAG,KAAK;QAC7D;QACA,OAAO,IAAI,CAACF,oBAAoB,CAC9BpG,IAAI,EACJmmC,cAAc,CAACz+B,mBAAmB,CACnC;MACH,CAAC,CAAC;MAEF,IAAI84B,MAAM,CAACxgC,IAAI,EAAE;QACf,IAAIwgC,MAAM,CAACnW,KAAK,EAAE,IAAI,CAACrjB,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;QAC/C,OAAOoR,MAAM,CAACxgC,IAAI;MACpB;IACF;IAEA,OAAO,KAAK,CAACuH,cAAc,CACzBC,IAAI,EAEJnC,QAAQ,EACRoC,OAAO,EACP0+B,cAAc,CACf;EACH;EAEAG,cAAc,CAACtmC,IAAqB,EAAQ;IAC1C,KAAK,CAACsmC,cAAc,CAACtmC,IAAI,CAAC;IAE1B,IAAIumC,KAAK,GAAG,IAAI;IAChB,IAAI,IAAI,CAAC9P,gBAAgB,EAAE,IAAI,IAAI,CAAC/T,KAAK,IAAO,EAAE;MAChD6jB,KAAK,GAAG,IAAI,CAACvX,QAAQ,CAAC,MACpB,IAAI,CAACwM,4CAA4C,EAAE,CACpD,CAACx7B,IAAI;IACR;IACAA,IAAI,CAACqmC,aAAa,GAAGE,KAAK;EAC5B;EAEAL,iCAAiC,CAC/B7gC,QAAkB,EAC4B;IAC9C,MAAMrF,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAA4BxsB,QAAQ,CAAC;IAClE,IAAI,CAACk/B,mBAAmB,CAACvkC,IAAI,CAAC;IAC9B,IAAI,CAAC,IAAI,CAACwlC,UAAU,CAACxlC,IAAI,CAAC,EAAE;IAC5B,OAAO,KAAK,CAACwmC,oBAAoB,CAC/BxmC,IAAI,EACSoc,SAAS,EACR,IAAI,CACnB;EACH;EAEAoL,qBAAqB,CAAC52B,IAAY,EAAQ;IACxC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IACElO,IAAI,KAAuB,MAC3BolB,IAAI,OAAoB,IACxB,IAAI,CAAChP,KAAK,CAACmY,cAAc,EACzB;MACA,IAAI,CAACnY,KAAK,CAACmY,cAAc,GAAG,KAAK;MACjC,IAAI,CAACnY,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACmmB,SAAS,EAAE;MAChB;IACF;IAEA,KAAK,CAACuC,qBAAqB,CAAC52B,IAAI,CAAC;EACnC;EAEA82B,kBAAkB,CAAC92B,IAAY,EAAQ;IACrC,MAAMolB,IAAI,GAAG,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC;IACtD,IACElO,IAAI,QAA0B,IAC9BolB,IAAI,QAA8B,EAClC;MAEA,IAAI,CAACoR,QAAQ,CAAe,IAAC,CAAC;MAC9B;IACF;IAEA,KAAK,CAACM,kBAAkB,CAAC92B,IAAI,CAAC;EAChC;EAEA61C,aAAa,CAACrmC,IAAY,EAAEsmC,OAAkB,EAAU;IACtD,MAAMC,QAAQ,GAAG,KAAK,CAACF,aAAa,CAACrmC,IAAI,EAAEsmC,OAAO,CAAC;IACnD,IAAI,IAAI,CAAC1/B,KAAK,CAACmY,cAAc,EAAE;MAC7B,IAAI,CAACjZ,KAAK,CAAC+rB,UAAU,CAACuD,uBAAuB,EAAE;QAC7CrvB,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IACA,OAAOkmB,QAAQ;EACjB;EAEArgB,gBAAgB,GAA+B;IAC7C,IAAI,IAAI,CAAC5f,SAAS,CAAC,cAAc,CAAC,IAAI,IAAI,CAACkgC,eAAe,EAAE,EAAE;MAC5D,IAAI,IAAI,CAAC5/B,KAAK,CAACmY,cAAc,EAAE;QAC7B,MAAM,IAAI,CAACjZ,KAAK,CAAC+rB,UAAU,CAACiC,iBAAiB,EAAE;UAC7C/tB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACA,IAAI,CAACwhC,wBAAwB,EAAE;MAC/B,MAAMC,WAAW,GAAG,IAAI,CAACF,eAAe,EAAE;MAC1C,IAAIE,WAAW,EAAE;QACf,IAAI,CAAC9/B,KAAK,CAAClI,GAAG,IAAIgoC,WAAW;QAC7B,IAAI,CAAC9/B,KAAK,CAACmY,cAAc,GAAG,IAAI;MAClC;MACA;IACF;IAEA,OAAO,KAAK,CAACmH,gBAAgB,CAAC,IAAI,CAACtf,KAAK,CAACmY,cAAc,GAAG,KAAK,GAAG,IAAI,CAAC;EACzE;EAEAynB,eAAe,GAAmB;IAChC,MAAM;MAAE9nC;KAAK,GAAG,IAAI,CAACkI,KAAK;IAC1B,IAAI+/B,yBAAyB,GAAG,CAAC;IACjC,OACE,CAAgC,OAAC/d,QAAQ,CAEvC,IAAI,CAACnL,KAAK,CAACC,UAAU,CAAChf,GAAG,GAAGioC,yBAAyB,CAAC,CACvD,EACD;MACAA,yBAAyB,EAAE;IAC7B;IAEA,MAAMC,GAAG,GAAG,IAAI,CAACnpB,KAAK,CAACC,UAAU,CAACipB,yBAAyB,GAAGjoC,GAAG,CAAC;IAClE,MAAMmoC,GAAG,GAAG,IAAI,CAACppB,KAAK,CAACC,UAAU,CAACipB,yBAAyB,GAAGjoC,GAAG,GAAG,CAAC,CAAC;IAEtE,IAAIkoC,GAAG,OAAoB,IAAIC,GAAG,OAAoB,EAAE;MACtD,OAAOF,yBAAyB,GAAG,CAAC;IACtC;IACA,IACE,IAAI,CAAClpB,KAAK,CAAC+C,KAAK,CACdmmB,yBAAyB,GAAGjoC,GAAG,EAC/BioC,yBAAyB,GAAGjoC,GAAG,GAAG,EAAE,CACrC,KAAK,cAAc,EACpB;MACA,OAAOioC,yBAAyB,GAAG,EAAE;IACvC;IACA,IAAIC,GAAG,OAAoB,IAAIC,GAAG,OAAoB,EAAE;MACtD,OAAOF,yBAAyB;IAClC;IACA,OAAO,KAAK;EACd;EAEAF,wBAAwB,GAAS;IAC/B,MAAMr4C,GAAG,GAAG,IAAI,CAACqvB,KAAK,CAACoG,OAAO,CAAC,IAAI,EAAE,IAAI,CAACjd,KAAK,CAAClI,GAAG,CAAC;IACpD,IAAItQ,GAAG,KAAK,CAAC,CAAC,EAAE;MACd,MAAM,IAAI,CAAC0X,KAAK,CAACzG,MAAM,CAACnD,mBAAmB,EAAE;QAC3C6J,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;EACF;EAIAymB,wCAAwC,CACtCxoC,GAAa,UAQP;IAAA,IAPN;MACEi0B,QAAQ;MACRD;IAIF,CAAC;IAED,IAAI,CAACxsB,KAAK,CAAC+rB,UAAU,CAACQ,+BAA+B,EAAE;MACrDtsB,EAAE,EAAEzH,GAAG;MACPg0B,UAAU;MACVC;IACF,CAAC,CAAC;EACJ;EAEAwU,qCAAqC,CACnCzoC,GAAa,EACb0oC,WAAwB,EACxB;IACA,OAAO,IAAI,CAAClhC,KAAK,CACf,CAACkhC,WAAW,CAAClU,YAAY,GACrBjB,UAAU,CAACmB,uCAAuC,GAClDgU,WAAW,CAAClU,YAAY,KAAK,QAAQ,GACrCjB,UAAU,CAACkB,sCAAsC,GACjDlB,UAAU,CAACgB,uCAAuC;MAEpD9sB,EAAE,EAAEzH;IAAG,GACJ0oC,WAAW,CAEjB;EACH;EAEAC,uCAAuC,CACrC3oC,GAAa,UAQP;IAAA,IAPN;MACEi0B,QAAQ;MACRD;IAIF,CAAC;IAED,IAAI,CAACxsB,KAAK,CAAC+rB,UAAU,CAACsB,8BAA8B,EAAE;MACpDptB,EAAE,EAAEzH,GAAG;MACPi0B,QAAQ;MACRD;IACF,CAAC,CAAC;EACJ;EAEA4U,kDAAkD,CAChDtnC,IAAY,UAMN;IAAA,IALN;MACE2yB;IAGF,CAAC;IAED,IAAI,CAACzsB,KAAK,CAAC+rB,UAAU,CAACuB,yCAAyC,EAAE;MAC/DrtB,EAAE,EAAEnG,IAAI;MACR2yB;IACF,CAAC,CAAC;EACJ;EAEA4U,kBAAkB,GAAmB;IACnC,MAAMliC,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMmiC,SAAS,GAAG,MAAM,IAAI,CAAC9kB,KAAK,IAAU,IAAI,IAAI,CAACA,KAAK,CAAW;IACrE,QAAQ,IAAI,CAAC1b,KAAK,CAAC1U,IAAI;MACrB;QAAa;UACX,MAAMm1C,OAAO,GAAG,IAAI,CAAClmC,mBAAmB,CAAC,IAAI,CAACyF,KAAK,CAACtX,KAAK,CAAC;UAC1D,IAAI83C,SAAS,EAAE,EAAE;YACf,OAAO;cAAEl1C,IAAI,EAAE,QAAQ;cAAEoM,GAAG,EAAE+oC,OAAO,CAAC/oC,GAAG,CAACnQ,KAAK;cAAEmB,KAAK,EAAE+3C;aAAS;UACnE;UACA,OAAO;YAAEn1C,IAAI,EAAE,SAAS;YAAEoM,GAAG,EAAE2G;WAAU;QAC3C;MACA;QAAgB;UACd,MAAMoiC,OAAO,GAAG,IAAI,CAACnmC,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;UACzD,IAAI83C,SAAS,EAAE,EAAE;YACf,OAAO;cAAEl1C,IAAI,EAAE,QAAQ;cAAEoM,GAAG,EAAE+oC,OAAO,CAAC/oC,GAAG,CAACnQ,KAAK;cAAEmB,KAAK,EAAE+3C;aAAS;UACnE;UACA,OAAO;YAAEn1C,IAAI,EAAE,SAAS;YAAEoM,GAAG,EAAE2G;WAAU;QAC3C;MACA;MACA;QAAgB;UACd,MAAMoiC,OAAO,GAAG,IAAI,CAAChmC,mBAAmB,CAAC,IAAI,CAACihB,KAAK,IAAU,CAAC;UAC9D,IAAI8kB,SAAS,EAAE,EAAE;YACf,OAAO;cACLl1C,IAAI,EAAE,SAAS;cACfoM,GAAG,EAAE+oC,OAAO,CAAC/oC,GAAG,CAACnQ,KAAK;cACtBmB,KAAK,EAAE+3C;aACR;UACH;UACA,OAAO;YAAEn1C,IAAI,EAAE,SAAS;YAAEoM,GAAG,EAAE2G;WAAU;QAC3C;MACA;QACE,OAAO;UAAE/S,IAAI,EAAE,SAAS;UAAEoM,GAAG,EAAE2G;SAAU;IAAA;EAE/C;EAEAqiC,iBAAiB,GAGf;IACA,MAAMhpC,GAAG,GAAG,IAAI,CAACsI,KAAK,CAAC3B,QAAQ;IAC/B,MAAMpB,EAAE,GAAG,IAAI,CAACyzB,eAAe,CAAC,IAAI,CAAC;IACrC,MAAMtX,IAAI,GAAG,IAAI,CAAC8E,GAAG,CAAO,MACxB,IAAI,CAACqiB,kBAAkB,EAAE,GACzB;MAAEj1C,IAAI,EAAE,MAAe;MAAEoM;KAAK;IAClC,OAAO;MAAEuF,EAAE;MAAEmc;KAAM;EACrB;EAEAunB,iCAAiC,CAC/BjpC,GAAa,EACbyV,OAAoB,EACpByzB,YAA8B,EACxB;IACN,MAAM;MAAE1U;IAAa,CAAC,GAAG/e,OAAO;IAChC,IAAI+e,YAAY,KAAK,IAAI,EAAE;MACzB;IACF;IACA,IAAIA,YAAY,KAAK0U,YAAY,EAAE;MACjC,IAAI,CAACT,qCAAqC,CAACzoC,GAAG,EAAEyV,OAAO,CAAC;IAC1D;EACF;EAEA0zB,eAAe,SAcb;IAAA,IAdc;MACdlV,QAAQ;MACRO;IAIF,CAAC;IASC,MAAM4U,SAAS,GAAG,IAAIrqC,GAAG,EAAE;IAC3B,MAAMsqC,OAAO,GAAG;MAEdC,cAAc,EAAE,EAAE;MAElBC,aAAa,EAAE,EAAE;MAEjBC,aAAa,EAAE,EAAE;MAEjBC,gBAAgB,EAAE;KACnB;IACD,IAAIC,iBAAiB,GAAG,KAAK;IAC7B,OAAO,CAAC,IAAI,CAAC1lB,KAAK,GAAW,EAAE;MAC7B,IAAI,IAAI,CAACwC,GAAG,IAAa,EAAE;QACzBkjB,iBAAiB,GAAG,IAAI;QACxB;MACF;MACA,MAAMC,UAAU,GAAG,IAAI,CAAC5jC,SAAS,EAAE;MACnC,MAAM;QAAER,EAAE;QAAEmc;MAAK,CAAC,GAAG,IAAI,CAACsnB,iBAAiB,EAAE;MAC7C,MAAMhV,UAAU,GAAGzuB,EAAE,CAAC/L,IAAI;MAC1B,IAAIw6B,UAAU,KAAK,EAAE,EAAE;QACrB;MACF;MACA,IAAI,QAAQ,CAAC5d,IAAI,CAAC4d,UAAU,CAAC,EAAE;QAC7B,IAAI,CAACxsB,KAAK,CAAC+rB,UAAU,CAACoB,qBAAqB,EAAE;UAC3CltB,EAAE,EAAElC,EAAE;UACNyuB,UAAU;UACVY,UAAU,EAAEZ,UAAU,CAAC,CAAC,CAAC,CAAC4V,WAAW,EAAE,GAAG5V,UAAU,CAAC9R,KAAK,CAAC,CAAC,CAAC;UAC7D+R;QACF,CAAC,CAAC;MACJ;MACA,IAAImV,SAAS,CAACpyB,GAAG,CAACgd,UAAU,CAAC,EAAE;QAC7B,IAAI,CAACxsB,KAAK,CAAC+rB,UAAU,CAACW,uBAAuB,EAAE;UAC7CzsB,EAAE,EAAElC,EAAE;UACNyuB,UAAU;UACVC;QACF,CAAC,CAAC;MACJ;MACAmV,SAAS,CAACjtB,GAAG,CAAC6X,UAAU,CAAC;MACzB,MAAMve,OAAO,GAAG;QAAEwe,QAAQ;QAAEO,YAAY;QAAER;OAAY;MACtD2V,UAAU,CAACpkC,EAAE,GAAGA,EAAE;MAClB,QAAQmc,IAAI,CAAC9tB,IAAI;QACf,KAAK,SAAS;UAAE;YACd,IAAI,CAACq1C,iCAAiC,CACpCvnB,IAAI,CAAC1hB,GAAG,EACRyV,OAAO,EACP,SAAS,CACV;YACDk0B,UAAU,CAACjoB,IAAI,GAAGA,IAAI,CAAC1wB,KAAK;YAC5Bq4C,OAAO,CAACC,cAAc,CAACpkC,IAAI,CACzB,IAAI,CAACe,UAAU,CAAC0jC,UAAU,EAAE,mBAAmB,CAAC,CACjD;YACD;UACF;QACA,KAAK,QAAQ;UAAE;YACb,IAAI,CAACV,iCAAiC,CAACvnB,IAAI,CAAC1hB,GAAG,EAAEyV,OAAO,EAAE,QAAQ,CAAC;YACnEk0B,UAAU,CAACjoB,IAAI,GAAGA,IAAI,CAAC1wB,KAAK;YAC5Bq4C,OAAO,CAACE,aAAa,CAACrkC,IAAI,CACxB,IAAI,CAACe,UAAU,CAAC0jC,UAAU,EAAE,kBAAkB,CAAC,CAChD;YACD;UACF;QACA,KAAK,QAAQ;UAAE;YACb,IAAI,CAACV,iCAAiC,CAACvnB,IAAI,CAAC1hB,GAAG,EAAEyV,OAAO,EAAE,QAAQ,CAAC;YACnEk0B,UAAU,CAACjoB,IAAI,GAAGA,IAAI,CAAC1wB,KAAK;YAC5Bq4C,OAAO,CAACG,aAAa,CAACtkC,IAAI,CACxB,IAAI,CAACe,UAAU,CAAC0jC,UAAU,EAAE,kBAAkB,CAAC,CAChD;YACD;UACF;QACA,KAAK,SAAS;UAAE;YACd,MAAM,IAAI,CAAClB,qCAAqC,CAAC/mB,IAAI,CAAC1hB,GAAG,EAAEyV,OAAO,CAAC;UACrE;QACA,KAAK,MAAM;UAAE;YACX,QAAQ+e,YAAY;cAClB,KAAK,SAAS;gBACZ,IAAI,CAACgU,wCAAwC,CAC3C9mB,IAAI,CAAC1hB,GAAG,EACRyV,OAAO,CACR;gBACD;cACF,KAAK,QAAQ;gBACX,IAAI,CAACkzB,uCAAuC,CAACjnB,IAAI,CAAC1hB,GAAG,EAAEyV,OAAO,CAAC;gBAC/D;cACF;gBACE4zB,OAAO,CAACI,gBAAgB,CAACvkC,IAAI,CAC3B,IAAI,CAACe,UAAU,CAAC0jC,UAAU,EAAE,qBAAqB,CAAC,CACnD;YAAA;UAEP;MAAA;MAGF,IAAI,CAAC,IAAI,CAAC3lB,KAAK,GAAW,EAAE;QAC1B,IAAI,CAACqM,MAAM,CAAU;MACvB;IACF;IACA,OAAO;MAAEgZ,OAAO;MAAEK;KAAmB;EACvC;EAEAG,qBAAqB,CACnBC,kBAAiC,EACjCL,gBAA+B,UAMhB;IAAA,IALf;MACExV;IAGF,CAAC;IAED,IAAI6V,kBAAkB,CAACp5C,MAAM,KAAK,CAAC,EAAE;MACnC,OAAO+4C,gBAAgB;IACzB,CAAC,MAAM,IAAIA,gBAAgB,CAAC/4C,MAAM,KAAK,CAAC,EAAE;MACxC,OAAOo5C,kBAAkB;KAC1B,MAAM,IAAIL,gBAAgB,CAAC/4C,MAAM,GAAGo5C,kBAAkB,CAACp5C,MAAM,EAAE;MAC9D,KAAK,MAAMoyC,MAAM,IAAIgH,kBAAkB,EAAE;QACvC,IAAI,CAAClB,kDAAkD,CAAC9F,MAAM,EAAE;UAC9D7O;QACF,CAAC,CAAC;MACJ;MACA,OAAOwV,gBAAgB;IACzB,CAAC,MAAM;MACL,KAAK,MAAM3G,MAAM,IAAI2G,gBAAgB,EAAE;QACrC,IAAI,CAACb,kDAAkD,CAAC9F,MAAM,EAAE;UAC9D7O;QACF,CAAC,CAAC;MACJ;MACA,OAAO6V,kBAAkB;IAC3B;EACF;EAEAC,yBAAyB,SAIJ;IAAA,IAJK;MACxB9V;IAGF,CAAC;IACC,IAAI,CAAC,IAAI,CAACpE,aAAa,CAAQ,MAAE,OAAO,IAAI;IAE5C,IAAI,CAACxb,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;MACvC,MAAM,IAAI,CAAC4T,KAAK,CAAC+rB,UAAU,CAACe,sCAAsC,EAAE;QAClE7sB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;QACvBstB;MACF,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEjjC;KAAO,GAAG,IAAI,CAACsX,KAAK;IAC5B,IAAI,CAACgP,IAAI,EAAE;IAEX,IACEtmB,KAAK,KAAK,SAAS,IACnBA,KAAK,KAAK,QAAQ,IAClBA,KAAK,KAAK,QAAQ,IAClBA,KAAK,KAAK,QAAQ,EAClB;MACA,IAAI,CAACwW,KAAK,CAAC+rB,UAAU,CAACa,uBAAuB,EAAE;QAC7C3sB,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;QACvBstB,QAAQ;QACRI,eAAe,EAAErjC;MACnB,CAAC,CAAC;IACJ;IAEA,OAAOA,KAAK;EACd;EAEAg5C,YAAY,CAAC1oC,IAAoB,EAAEiE,EAAU,EAAU;IACrD,MAAM0uB,QAAQ,GAAG1uB,EAAE,CAAC/L,IAAI;IACxB,MAAMywC,OAAO,GAAG1kC,EAAE,CAACvF,GAAG,CAACnQ,KAAK;IAC5B,MAAM2kC,YAAY,GAAG,IAAI,CAACuV,yBAAyB,CAAC;MAAE9V;IAAS,CAAC,CAAC;IACjE,IAAI,CAAC5D,MAAM,CAAW;IACtB,MAAM;MAAEgZ,OAAO;MAAEK;IAAkB,CAAC,GAAG,IAAI,CAACP,eAAe,CAAC;MAC1DlV,QAAQ;MACRO;IACF,CAAC,CAAC;IACFlzB,IAAI,CAACooC,iBAAiB,GAAGA,iBAAiB;IAE1C,QAAQlV,YAAY;MAClB,KAAK,SAAS;QACZlzB,IAAI,CAACkzB,YAAY,GAAG,IAAI;QACxBlzB,IAAI,CAAC+nC,OAAO,GAAGA,OAAO,CAACC,cAAc;QACrC,IAAI,CAACjZ,MAAM,CAAW;QACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;MACjD,KAAK,QAAQ;QACXA,IAAI,CAACkzB,YAAY,GAAG,IAAI;QACxBlzB,IAAI,CAAC+nC,OAAO,GAAGA,OAAO,CAACE,aAAa;QACpC,IAAI,CAAClZ,MAAM,CAAW;QACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;MAChD,KAAK,QAAQ;QACXA,IAAI,CAACkzB,YAAY,GAAG,IAAI;QACxBlzB,IAAI,CAAC+nC,OAAO,GAAG,IAAI,CAACQ,qBAAqB,CACvCR,OAAO,CAACG,aAAa,EACrBH,OAAO,CAACI,gBAAgB,EACxB;UAAExV;QAAS,CAAC,CACb;QACD,IAAI,CAAC5D,MAAM,CAAW;QACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;MAChD,KAAK,QAAQ;QACXA,IAAI,CAAC+nC,OAAO,GAAGA,OAAO,CAACI,gBAAgB;QACvC,IAAI,CAACpZ,MAAM,CAAW;QACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;MAChD;QAAS;UAEP,MAAM4oC,KAAK,GAAG,MAAM;YAClB5oC,IAAI,CAAC+nC,OAAO,GAAG,EAAE;YACjB,IAAI,CAAChZ,MAAM,CAAW;YACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;WAC/C;UACDA,IAAI,CAACkzB,YAAY,GAAG,KAAK;UAEzB,MAAM2V,QAAQ,GAAGd,OAAO,CAACC,cAAc,CAAC54C,MAAM;UAC9C,MAAM05C,OAAO,GAAGf,OAAO,CAACE,aAAa,CAAC74C,MAAM;UAC5C,MAAM25C,OAAO,GAAGhB,OAAO,CAACG,aAAa,CAAC94C,MAAM;UAC5C,MAAM45C,YAAY,GAAGjB,OAAO,CAACI,gBAAgB,CAAC/4C,MAAM;UAEpD,IAAI,CAACy5C,QAAQ,IAAI,CAACC,OAAO,IAAI,CAACC,OAAO,IAAI,CAACC,YAAY,EAAE;YACtD,OAAOJ,KAAK,EAAE;UAChB,CAAC,MAAM,IAAI,CAACC,QAAQ,IAAI,CAACC,OAAO,EAAE;YAChC9oC,IAAI,CAAC+nC,OAAO,GAAG,IAAI,CAACQ,qBAAqB,CACvCR,OAAO,CAACG,aAAa,EACrBH,OAAO,CAACI,gBAAgB,EACxB;cAAExV;YAAS,CAAC,CACb;YACD,IAAI,CAAC5D,MAAM,CAAW;YACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;WAC/C,MAAM,IAAI,CAAC8oC,OAAO,IAAI,CAACC,OAAO,IAAIF,QAAQ,IAAIG,YAAY,EAAE;YAC3D,KAAK,MAAMxH,MAAM,IAAIuG,OAAO,CAACI,gBAAgB,EAAE;cAC7C,IAAI,CAACjB,wCAAwC,CAAC1F,MAAM,CAAC9iC,GAAG,CAACnQ,KAAK,EAAE;gBAC9DokC,QAAQ;gBACRD,UAAU,EAAE8O,MAAM,CAACv9B,EAAE,CAAC/L;cACxB,CAAC,CAAC;YACJ;YACA8H,IAAI,CAAC+nC,OAAO,GAAGA,OAAO,CAACC,cAAc;YACrC,IAAI,CAACjZ,MAAM,CAAW;YACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;WAChD,MAAM,IAAI,CAAC6oC,QAAQ,IAAI,CAACE,OAAO,IAAID,OAAO,IAAIE,YAAY,EAAE;YAC3D,KAAK,MAAMxH,MAAM,IAAIuG,OAAO,CAACI,gBAAgB,EAAE;cAC7C,IAAI,CAACd,uCAAuC,CAAC7F,MAAM,CAAC9iC,GAAG,CAACnQ,KAAK,EAAE;gBAC7DokC,QAAQ;gBACRD,UAAU,EAAE8O,MAAM,CAACv9B,EAAE,CAAC/L;cACxB,CAAC,CAAC;YACJ;YACA8H,IAAI,CAAC+nC,OAAO,GAAGA,OAAO,CAACE,aAAa;YACpC,IAAI,CAAClZ,MAAM,CAAW;YACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;UAChD,CAAC,MAAM;YACL,IAAI,CAACkG,KAAK,CAAC+rB,UAAU,CAACY,4BAA4B,EAAE;cAClD1sB,EAAE,EAAEwiC,OAAO;cACXhW;YACF,CAAC,CAAC;YACF,OAAOiW,KAAK,EAAE;UAChB;QACF;IAAA;EAEJ;EAEA5J,wBAAwB,CAACh/B,IAAoB,EAAU;IACrD,MAAMiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IACjC13B,IAAI,CAACiE,EAAE,GAAGA,EAAE;IACZjE,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACulC,YAAY,CAAC,IAAI,CAACjkC,SAAS,EAAE,EAAER,EAAE,CAAC;IACnD,OAAO,IAAI,CAACU,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGAomC,mBAAmB,GAAY;IAC7B,MAAMpwB,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,IAAI,IAAI,CAAC3H,KAAK,CAACC,UAAU,CAAC9H,IAAI,CAAC,OAAuB,EAAE;MACtD,MAAMizB,SAAS,GAAG,IAAI,CAACprB,KAAK,CAACC,UAAU,CAAC9H,IAAI,GAAG,CAAC,CAAC;MACjD,OACEizB,SAAS,OAAuB,IAAIA,SAAS,KAAuB;IAExE;IACA,OAAO,KAAK;EACd;EAEA7D,6BAA6B,CAACplC,IAAY,EAAE;IAC1C,OAAOA,IAAI,CAAC1N,IAAI,KAAK,oBAAoB,GAAG0N,IAAI,CAAC4B,UAAU,GAAG5B,IAAI;EACpE;AACF,CAAC;AC3uHH,MAAMkpC,QAGL,GAAG;EACFC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,GAAG;EACRC,IAAI,EAAE,QAAQ;EACdp8B,EAAE,EAAE,GAAG;EACPC,EAAE,EAAE,GAAG;EACPo8B,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdtjC,KAAK,EAAE,QAAQ;EACfujC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,OAAO,EAAE,QAAQ;EACjBC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,OAAO,EAAE,QAAQ;EACjBC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,OAAO,EAAE,QAAQ;EACjBC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,OAAO,EAAE,QAAQ;EACjBC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,OAAO,EAAE,QAAQ;EACjBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfnN,KAAK,EAAE,QAAQ;EACfoN,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfxxC,IAAI,EAAE,QAAQ;EACdyxC,KAAK,EAAE,QAAQ;EACfC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,KAAK,EAAE,QAAQ;EACfC,EAAE,EAAE,QAAQ;EACZC,EAAE,EAAE,QAAQ;EACZC,GAAG,EAAE,QAAQ;EACbC,GAAG,EAAE,QAAQ;EACbC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,KAAK,EAAE,QAAQ;EACfC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,MAAM,EAAE,QAAQ;EAChBC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,GAAG,EAAE,QAAQ;EACbC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,QAAQ;EACfC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE;AACT,CAAU;AC5OV,MAAMC,SAAS,GAAG75C,cAAe,KAAI,CAAC;EACpC85C,gBAAgB,EACd,8DAA8D;EAChEC,wBAAwB,EAAE;IAAA,IAAC;MAAEC;KAA4C;IAAA,OACxBA,6DAAkB;EAAA;EACnEC,yBAAyB,EAAE,gDAAgD;EAC3EC,4BAA4B,EAC1B,0GAA0G;EAE5Gz9C,eAAe,EAAE;IAAA,IAAC;MAChBtE,UAAU;MACVgiD;IAIF,CAAC;IAAA,OACuBhiD,gCAAW,sBAAqBgiD,UAAW,aAAYhiD,UAAiB;EAAA;EAChGiiD,mBAAmB,EACjB,gEAAgE;EAClEC,sBAAsB,EAAE,4BAA4B;EACpDC,4BAA4B,EAC1B;AACJ,CAAC,CAAC;AAIF,SAASC,UAAU,CAAC/pD,MAA4B,EAAW;EACzD,OAAOA,MAAM,GACTA,MAAM,CAAC+C,IAAI,KAAK,oBAAoB,IAClC/C,MAAM,CAAC+C,IAAI,KAAK,oBAAoB,GACtC,KAAK;AACX;AAIA,SAASinD,mBAAmB,CAC1BhqD,MAAqE,EAC7D;EACR,IAAIA,MAAM,CAAC+C,IAAI,KAAK,eAAe,EAAE;IACnC,OAAO/C,MAAM,CAAC2I,IAAI;EACpB;EAEA,IAAI3I,MAAM,CAAC+C,IAAI,KAAK,mBAAmB,EAAE;IACvC,OAAO/C,MAAM,CAACiqD,SAAS,CAACthD,IAAI,GAAG,GAAG,GAAG3I,MAAM,CAAC2I,IAAI,CAACA,IAAI;EACvD;EAEA,IAAI3I,MAAM,CAAC+C,IAAI,KAAK,qBAAqB,EAAE;IACzC,OACEinD,mBAAmB,CAAChqD,MAAM,CAACA,MAAM,CAAC,GAClC,GAAG,GACHgqD,mBAAmB,CAAChqD,MAAM,CAACwgC,QAAQ,CAAC;EAExC;EAGA,MAAM,IAAI8G,KAAK,CAAC,4BAA4B,GAAGtnC,MAAM,CAAC+C,IAAI,CAAC;AAC7D;AAQA,UAAgB2N,UAAyB,IACvC,MAAMw5C,cAAc,SAASx5C,UAAU,CAAoC;EAGzEy5C,YAAY,GAAS;IACnB,IAAIh4B,GAAG,GAAG,EAAE;IACZ,IAAIE,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;IAC/B,SAAS;MACP,IAAI,IAAI,CAACkI,KAAK,CAAClI,GAAG,IAAI,IAAI,CAAC1P,MAAM,EAAE;QACjC,MAAM,IAAI,CAAC8W,KAAK,CAAC0yC,SAAS,CAACQ,sBAAsB,EAAE;UACjDjzC,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MAEA,MAAM8b,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;MAEhD,QAAQqiB,EAAE;QACR;QACA;UACE,IAAI,IAAI,CAACna,KAAK,CAAClI,GAAG,KAAK,IAAI,CAACkI,KAAK,CAACzY,KAAK,EAAE;YACvC,IAAI4yB,EAAE,OAAuB,IAAI,IAAI,CAACna,KAAK,CAAC+Y,kBAAkB,EAAE;cAC9D,EAAE,IAAI,CAAC/Y,KAAK,CAAClI,GAAG;cAChB,OAAO,IAAI,CAACsnB,WAAW,CAAgB;YACzC;YACA,OAAO,KAAK,CAACC,gBAAgB,CAAClF,EAAE,CAAC;UACnC;UACAO,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;UACnD,OAAO,IAAI,CAACsnB,WAAW,MAAa1E,GAAG,CAAC;QAE1C;UACEA,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;UACnD4iB,GAAG,IAAI,IAAI,CAACi4B,aAAa,EAAE;UAC3B/3B,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;UAC3B;QAEF;QACA;QAWA;UACE,IAAIsf,SAAS,CAAC+C,EAAE,CAAC,EAAE;YACjBO,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;YACnD4iB,GAAG,IAAI,IAAI,CAACk4B,cAAc,CAAC,IAAI,CAAC;YAChCh4B,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;UAC7B,CAAC,MAAM;YACL,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;UAClB;MAAA;IAEN;EACF;EAEA86C,cAAc,CAACC,aAAsB,EAAU;IAC7C,MAAM14B,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAChD,IAAI4iB,GAAG;IACP,EAAE,IAAI,CAAC1a,KAAK,CAAClI,GAAG;IAChB,IACEqiB,EAAE,KAA6B,MAC/B,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC,OAAuB,EAC5D;MACA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;MAChB4iB,GAAG,GAAGm4B,aAAa,GAAG,IAAI,GAAG,MAAM;IACrC,CAAC,MAAM;MACLn4B,GAAG,GAAGlvB,MAAM,CAACuiB,YAAY,CAACoM,EAAE,CAAC;IAC/B;IACA,EAAE,IAAI,CAACna,KAAK,CAAC0X,OAAO;IACpB,IAAI,CAAC1X,KAAK,CAAC2X,SAAS,GAAG,IAAI,CAAC3X,KAAK,CAAClI,GAAG;IAErC,OAAO4iB,GAAG;EACZ;EAEAo4B,aAAa,CAAClwB,KAAa,EAAQ;IACjC,IAAIlI,GAAG,GAAG,EAAE;IACZ,IAAIE,UAAU,GAAG,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG;IACjC,SAAS;MACP,IAAI,IAAI,CAACkI,KAAK,CAAClI,GAAG,IAAI,IAAI,CAAC1P,MAAM,EAAE;QACjC,MAAM,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAACjD,kBAAkB,EAAE;UAC1C2J,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MAEA,MAAM8b,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;MAChD,IAAIqiB,EAAE,KAAKyI,KAAK,EAAE;MAClB,IAAIzI,EAAE,OAAwB,EAAE;QAC9BO,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;QACnD4iB,GAAG,IAAI,IAAI,CAACi4B,aAAa,EAAE;QAC3B/3B,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;MAC7B,CAAC,MAAM,IAAIsf,SAAS,CAAC+C,EAAE,CAAC,EAAE;QACxBO,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,CAAC;QACnD4iB,GAAG,IAAI,IAAI,CAACk4B,cAAc,CAAC,KAAK,CAAC;QACjCh4B,UAAU,GAAG,IAAI,CAAC5a,KAAK,CAAClI,GAAG;MAC7B,CAAC,MAAM;QACL,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;MAClB;IACF;IACA4iB,GAAG,IAAI,IAAI,CAAC7D,KAAK,CAAC+C,KAAK,CAACgB,UAAU,EAAE,IAAI,CAAC5a,KAAK,CAAClI,GAAG,EAAE,CAAC;IACrD,OAAO,IAAI,CAACsnB,WAAW,MAAY1E,GAAG,CAAC;EACzC;EAEAi4B,aAAa,GAAW;IACtB,MAAMl3B,QAAQ,GAAG,EAAE,IAAI,CAACzb,KAAK,CAAClI,GAAG;IACjC,IAAI,IAAI,CAAC8mB,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,OAAyB,EAAE;MAChE,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;MAEhB,IAAIxI,KAAK,GAAG,EAAE;MACd,IAAI,IAAI,CAACsvB,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,QAAyB,EAAE;QAChExI,KAAK,GAAG,EAAE;QACV,EAAE,IAAI,CAAC0Q,KAAK,CAAClI,GAAG;MAClB;MAEA,MAAMi7C,SAAS,GAAG,IAAI,CAAC92B,OAAO,CAC5B3sB,KAAK,EACK8lB,SAAS,EACJ,KAAK,EACI,MAAM,CAC/B;MACD,IACE29B,SAAS,KAAK,IAAI,IAClB,IAAI,CAACn0B,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,OAAwB,EAC3D;QACA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;QAChB,OAAOtM,MAAM,CAAC+vB,aAAa,CAACw3B,SAAS,CAAC;MACxC;IACF,CAAC,MAAM;MACL,IAAIC,KAAK,GAAG,CAAC;MACb,IAAI7uC,IAAI,GAAG,KAAK;MAChB,OACE6uC,KAAK,EAAE,GAAG,EAAE,IACZ,IAAI,CAAChzC,KAAK,CAAClI,GAAG,GAAG,IAAI,CAAC1P,MAAM,IAC5B,EAAE+b,IAAI,GAAG,IAAI,CAACya,cAAc,CAAC,IAAI,CAAC5e,KAAK,CAAClI,GAAG,CAAC,MAAuB,CAAC,EACpE;QACA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;MAClB;MAEA,IAAIqM,IAAI,EAAE;QACR,MAAM8uC,IAAI,GAAG,IAAI,CAACp8B,KAAK,CAAC+C,KAAK,CAAC6B,QAAQ,EAAE,IAAI,CAACzb,KAAK,CAAClI,GAAG,CAAC;QACvD,MAAMo7C,MAAM,GAAGC,QAAa,CAACF,IAAI,CAAC;QAClC,EAAE,IAAI,CAACjzC,KAAK,CAAClI,GAAG;QAEhB,IAAIo7C,MAAM,EAAE;UACV,OAAOA,MAAM;QACf;MACF;IACF;IAGA,IAAI,CAAClzC,KAAK,CAAClI,GAAG,GAAG2jB,QAAQ;IACzB,OAAO,GAAG;EACZ;EASA23B,WAAW,GAAS;IAClB,IAAIj5B,EAAE;IACN,MAAM5yB,KAAK,GAAG,IAAI,CAACyY,KAAK,CAAClI,GAAG;IAC5B,GAAG;MACDqiB,EAAE,GAAG,IAAI,CAACtD,KAAK,CAACC,UAAU,CAAC,EAAE,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC;IAC9C,CAAC,QAAQkW,gBAAgB,CAACmM,EAAE,CAAC,IAAIA,EAAE,KAAmB;IACtD,OAAO,IAAI,CAACiF,WAAW,MAErB,IAAI,CAACvI,KAAK,CAAC+C,KAAK,CAACryB,KAAK,EAAE,IAAI,CAACyY,KAAK,CAAClI,GAAG,CAAC,CACxC;EACH;EAIAu7C,kBAAkB,GAAoB;IACpC,MAAMr6C,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,IAAI,CAACie,KAAK,KAAY,EAAE;MAC1B1iB,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAAC8O,KAAK,CAACtX,KAAK;KAC7B,MAAM,IAAI8jB,cAAc,CAAC,IAAI,CAACxM,KAAK,CAAC1U,IAAI,CAAC,EAAE;MAC1C0N,IAAI,CAAC9H,IAAI,GAAG4b,cAAc,CAAC,IAAI,CAAC9M,KAAK,CAAC1U,IAAI,CAAC;IAC7C,CAAC,MAAM;MACL,IAAI,CAAC4E,UAAU,EAAE;IACnB;IACA,IAAI,CAAC8e,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAIAs6C,sBAAsB,GAAwB;IAC5C,MAAMj1C,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMnN,IAAI,GAAG,IAAI,CAACmiD,kBAAkB,EAAE;IACtC,IAAI,CAAC,IAAI,CAACn1B,GAAG,CAAU,KAAE,OAAOhtB,IAAI;IAEpC,MAAM8H,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IACvCrF,IAAI,CAACw5C,SAAS,GAAGthD,IAAI;IACrB8H,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACmiD,kBAAkB,EAAE;IACrC,OAAO,IAAI,CAAC11C,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAKAu6C,mBAAmB,GAGO;IACxB,MAAMl1C,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,IAAIrF,IAAI,GAAG,IAAI,CAACs6C,sBAAsB,EAAE;IACxC,IAAIt6C,IAAI,CAAC1N,IAAI,KAAK,mBAAmB,EAAE;MACrC,OAAO0N,IAAI;IACb;IACA,OAAO,IAAI,CAACklB,GAAG,IAAQ,EAAE;MACvB,MAAMmM,OAAO,GAAG,IAAI,CAACQ,WAAW,CAACxsB,QAAQ,CAAC;MAC1CgsB,OAAO,CAAC9hC,MAAM,GAAGyQ,IAAI;MACrBqxB,OAAO,CAACtB,QAAQ,GAAG,IAAI,CAACsqB,kBAAkB,EAAE;MAC5Cr6C,IAAI,GAAG,IAAI,CAAC2E,UAAU,CAAC0sB,OAAO,EAAE,qBAAqB,CAAC;IACxD;IACA,OAAOrxB,IAAI;EACb;EAIAw6C,sBAAsB,GAAiB;IACrC,IAAIx6C,IAAI;IACR,QAAQ,IAAI,CAACgH,KAAK,CAAC1U,IAAI;MACrB;QACE0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;QACvB,IAAI,CAACg2C,UAAU,CAACpmC,KAAE,CAAC5L,KAAK,CAAC;QACzB,IAAI,CAACuN,IAAI,EAAE;QACXhW,IAAI,GAAG,IAAI,CAAC06C,2BAA2B,CAAC16C,IAAI,EAAEqU,KAAE,CAAC3L,MAAM,CAAC;QACxD,IAAI1I,IAAI,CAAC4B,UAAU,CAACtP,IAAI,KAAK,oBAAoB,EAAE;UACjD,IAAI,CAAC4T,KAAK,CAAC0yC,SAAS,CAACC,gBAAgB,EAAE;YAAE1yC,EAAE,EAAEnG;UAAK,CAAC,CAAC;QACtD;QACA,OAAOA,IAAI;MAEb;MACA;QACE,OAAO,IAAI,CAAC64B,aAAa,EAAE;MAE7B;QACE,MAAM,IAAI,CAAC3yB,KAAK,CAAC0yC,SAAS,CAACO,mBAAmB,EAAE;UAC9ChzC,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;IAAA;EAER;EAMAs1C,uBAAuB,GAAyB;IAC9C,MAAM36C,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAC,IAAI,CAAC7qB,KAAK,CAACqB,aAAa,CAAC;IACvD,OAAO,IAAI,CAACH,YAAY,CAAClI,IAAI,EAAE,oBAAoB,EAAE,IAAI,CAACgH,KAAK,CAAC3B,QAAQ,CAAC;EAC3E;EAIAu1C,mBAAmB,CAAC56C,IAA8B,EAAoB;IACpE,IAAI,CAACgW,IAAI,EAAE;IACXhW,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACw1B,eAAe,EAAE;IACxC,IAAI,CAACqjB,UAAU,CAACpmC,KAAE,CAACzL,MAAM,CAAC;IAC1B,IAAI,CAAC5B,KAAK,CAAC+Y,kBAAkB,GAAG,IAAI;IACpC,IAAI,CAACgP,MAAM,CAAW;IAEtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAIA06C,2BAA2B,CACzB16C,IAAsC,EACtC66C,eAA2B,EACD;IAC1B,IAAI,IAAI,CAACn4B,KAAK,GAAW,EAAE;MACzB1iB,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAAC+4C,uBAAuB,EAAE;IAClD,CAAC,MAAM;MACL,MAAM/4C,UAAU,GAAG,IAAI,CAACw1B,eAAe,EAAE;MAazCp3B,IAAI,CAAC4B,UAAU,GAAGA,UAAU;IAC9B;IACA,IAAI,CAAC64C,UAAU,CAACI,eAAe,CAAC;IAChC,IAAI,CAAC7zC,KAAK,CAAC+Y,kBAAkB,GAAG,IAAI;IACpC,IAAI,CAACgP,MAAM,CAAW;IAEtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAIA86C,iBAAiB,GAAmB;IAClC,MAAM96C,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,IAAI,IAAI,CAACie,KAAK,GAAW,EAAE;MACzB,IAAI,CAAC+3B,UAAU,CAACpmC,KAAE,CAAC5L,KAAK,CAAC;MACzB,IAAI,CAACuN,IAAI,EAAE;MACX,IAAI,CAAC+Y,MAAM,CAAa;MACxB/uB,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACghC,uBAAuB,EAAE;MAC9C,IAAI,CAACya,UAAU,CAACpmC,KAAE,CAAC3L,MAAM,CAAC;MAC1B,IAAI,CAAC1B,KAAK,CAAC+Y,kBAAkB,GAAG,IAAI;MACpC,IAAI,CAACgP,MAAM,CAAW;MACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACoiD,sBAAsB,EAAE;IACzCt6C,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACw1B,GAAG,CAAO,MAAG,IAAI,CAACs1B,sBAAsB,EAAE,GAAG,IAAI;IACnE,OAAO,IAAI,CAAC71C,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAIA+6C,wBAAwB,CAAC11C,QAAkB,EAAuB;IAChE,MAAMrF,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAC3BxsB,QAAQ,CACT;IACD,IAAI,IAAI,CAAC6f,GAAG,KAAc,EAAE;MAE1B,OAAO,IAAI,CAACvgB,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACqiD,mBAAmB,EAAE;IACtC,OAAO,IAAI,CAACS,+BAA+B,CACzCh7C,IAAI,CACL;EACH;EAEAg7C,+BAA+B,CAC7Bh7C,IAAiC,EACZ;IACrB,MAAM2G,UAA4B,GAAG,EAAE;IACvC,OAAO,CAAC,IAAI,CAAC+b,KAAK,IAAU,IAAI,CAAC,IAAI,CAACA,KAAK,KAAc,EAAE;MACzD/b,UAAU,CAAC/C,IAAI,CAAC,IAAI,CAACk3C,iBAAiB,EAAE,CAAC;IAC3C;IACA96C,IAAI,CAAC2G,UAAU,GAAGA,UAAU;IAC5B3G,IAAI,CAACi7C,WAAW,GAAG,IAAI,CAAC/1B,GAAG,CAAU;IACrC,IAAI,CAAC6J,MAAM,CAAc;IACzB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAIAk7C,wBAAwB,CAAC71C,QAAkB,EAAuB;IAChE,MAAMrF,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IACvC,IAAI,IAAI,CAAC6f,GAAG,KAAc,EAAE;MAC1B,OAAO,IAAI,CAACvgB,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACAA,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACqiD,mBAAmB,EAAE;IACtC,IAAI,CAACxrB,MAAM,CAAc;IACzB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAKAm7C,iBAAiB,CAAC91C,QAAkB,EAAgB;IAClD,MAAMrF,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IACvC,MAAM+1C,QAAQ,GAAG,EAAE;IACnB,MAAMC,cAAc,GAAG,IAAI,CAACN,wBAAwB,CAAC11C,QAAQ,CAAC;IAC9D,IAAIi2C,cAAc,GAAG,IAAI;IAEzB,IAAI,CAACD,cAAc,CAACJ,WAAW,EAAE;MAC/BM,QAAQ,EAAE,SAAS;QACjB,QAAQ,IAAI,CAACv0C,KAAK,CAAC1U,IAAI;UACrB;YACE+S,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;YAC9B,IAAI,CAAC2Q,IAAI,EAAE;YACX,IAAI,IAAI,CAACkP,GAAG,IAAU,EAAE;cACtBo2B,cAAc,GAAG,IAAI,CAACJ,wBAAwB,CAAC71C,QAAQ,CAAC;cACxD,MAAMk2C,QAAQ;YAChB;YACAH,QAAQ,CAACx3C,IAAI,CAAC,IAAI,CAACu3C,iBAAiB,CAAC91C,QAAQ,CAAC,CAAC;YAC/C;UAEF;YACE+1C,QAAQ,CAACx3C,IAAI,CAAC,IAAI,CAACi1B,aAAa,EAAE,CAAC;YACnC;UAEF;YAAgB;cACd,MAAM74B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAExB;cACH,IAAI,CAACg2C,UAAU,CAACpmC,KAAE,CAAC5L,KAAK,CAAC;cACzB,IAAI,CAACuN,IAAI,EAAE;cACX,IAAI,IAAI,CAAC0M,KAAK,IAAa,EAAE;gBAC3B04B,QAAQ,CAACx3C,IAAI,CAAC,IAAI,CAACg3C,mBAAmB,CAAC56C,IAAI,CAAC,CAAC;cAC/C,CAAC,MAAM;gBACLo7C,QAAQ,CAACx3C,IAAI,CACX,IAAI,CAAC82C,2BAA2B,CAAC16C,IAAI,EAAEqU,KAAE,CAACzL,MAAM,CAAC,CAClD;cACH;cAEA;YACF;UAEA;YACE,MAAM,IAAI,CAAC1R,UAAU,EAAE;QAAA;MAE7B;MAEA,IACEoiD,UAAU,CAAC+B,cAAc,CAAC,IAC1B,CAAC/B,UAAU,CAACgC,cAAc,CAAC,IAC3BA,cAAc,KAAK,IAAI,EACvB;QACA,IAAI,CAACp1C,KAAK,CAAC0yC,SAAS,CAACI,yBAAyB,EAAE;UAC9C7yC,EAAE,EAAEm1C;QACN,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAAChC,UAAU,CAAC+B,cAAc,CAAC,IAAI/B,UAAU,CAACgC,cAAc,CAAC,EAAE;QACpE,IAAI,CAACp1C,KAAK,CAAC0yC,SAAS,CAACE,wBAAwB,EAAE;UAC7C3yC,EAAE,EAAEm1C,cAAc;UAClBvC,cAAc,EAAEQ,mBAAmB,CAAC8B,cAAc,CAACnjD,IAAI;QACzD,CAAC,CAAC;MACJ,CAAC,MAAM,IAAI,CAACohD,UAAU,CAAC+B,cAAc,CAAC,IAAI,CAAC/B,UAAU,CAACgC,cAAc,CAAC,EAAE;QACrE,IACE/B,mBAAmB,CAAC+B,cAAc,CAACpjD,IAAI,CAAC,KACxCqhD,mBAAmB,CAAC8B,cAAc,CAACnjD,IAAI,CAAC,EACxC;UACA,IAAI,CAACgO,KAAK,CAAC0yC,SAAS,CAACE,wBAAwB,EAAE;YAC7C3yC,EAAE,EAAEm1C,cAAc;YAClBvC,cAAc,EAAEQ,mBAAmB,CAAC8B,cAAc,CAACnjD,IAAI;UACzD,CAAC,CAAC;QACJ;MACF;IACF;IAEA,IAAIohD,UAAU,CAAC+B,cAAc,CAAC,EAAE;MAC9Br7C,IAAI,CAACw7C,eAAe,GAAGH,cAAc;MACrCr7C,IAAI,CAACy7C,eAAe,GAAGH,cAAc;IACvC,CAAC,MAAM;MACLt7C,IAAI,CAACq7C,cAAc,GAAGA,cAAc;MACpCr7C,IAAI,CAACs7C,cAAc,GAAGA,cAAc;IACtC;IACAt7C,IAAI,CAACo7C,QAAQ,GAAGA,QAAQ;IACxB,IAAI,IAAI,CAAC14B,KAAK,IAAO,EAAE;MACrB,MAAM,IAAI,CAACxc,KAAK,CAAC0yC,SAAS,CAACS,4BAA4B,EAAE;QACvDlzC,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IAEA,OAAOi0C,UAAU,CAAC+B,cAAc,CAAC,GAC7B,IAAI,CAAC12C,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC,GACpC,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,YAAY,CAAC;EACzC;EAIA07C,eAAe,GAAiB;IAC9B,MAAMr2C,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,IAAI,CAAC2Q,IAAI,EAAE;IACX,OAAO,IAAI,CAACmlC,iBAAiB,CAAC91C,QAAQ,CAAC;EACzC;EAEAo1C,UAAU,CAACkB,UAAsB,EAAE;IACjC,MAAM;MAAExnC;KAAS,GAAG,IAAI,CAACnN,KAAK;IAC9BmN,OAAO,CAACA,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC,GAAGusD,UAAU;EAC1C;EAMA9iB,aAAa,CAACvzB,mBAA6C,EAAgB;IACzE,IAAI,IAAI,CAACod,KAAK,KAAY,EAAE;MAC1B,OAAO,IAAI,CAACrhB,YAAY,CAAC,IAAI,CAAC2F,KAAK,CAACtX,KAAK,EAAE,SAAS,CAAC;IACvD,CAAC,MAAM,IAAI,IAAI,CAACgzB,KAAK,KAAgB,EAAE;MACrC,OAAO,IAAI,CAACg5B,eAAe,EAAE;KAC9B,MAAM,IACL,IAAI,CAACh5B,KAAK,CAAO,OACjB,IAAI,CAAC7E,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,CAAC,OAA8B,EACnE;MAGA,IAAI,CAACgoB,YAAY,CAAgB;MACjC,OAAO,IAAI,CAAC40B,eAAe,EAAE;IAC/B,CAAC,MAAM;MACL,OAAO,KAAK,CAAC7iB,aAAa,CAACvzB,mBAAmB,CAAC;IACjD;EACF;EAEA6gB,SAAS,GAAG;IACV,MAAMf,UAAU,GAAG,IAAI,CAACA,UAAU,EAAE;IACpC,IAAI,CAACA,UAAU,CAAC7c,aAAa,EAAE,KAAK,CAAC4d,SAAS,EAAE;EAClD;EAEAE,gBAAgB,CAACz1B,IAAY,EAAQ;IACnC,MAAMujB,OAAO,GAAG,IAAI,CAACiR,UAAU,EAAE;IAEjC,IAAIjR,OAAO,KAAKE,KAAE,CAACzL,MAAM,EAAE;MACzB,OAAO,IAAI,CAAC8wC,YAAY,EAAE;IAC5B;IAEA,IAAIvlC,OAAO,KAAKE,KAAE,CAAC3L,MAAM,IAAIyL,OAAO,KAAKE,KAAE,CAAC1L,MAAM,EAAE;MAClD,IAAIkM,iBAAiB,CAACjkB,IAAI,CAAC,EAAE;QAC3B,OAAO,IAAI,CAACwpD,WAAW,EAAE;MAC3B;MAEA,IAAIxpD,IAAI,OAA0B,EAAE;QAClC,EAAE,IAAI,CAACoW,KAAK,CAAClI,GAAG;QAChB,OAAO,IAAI,CAACsnB,WAAW,CAAc;MACvC;MAEA,IACE,CAACx1B,IAAI,KAA4B,MAAIA,IAAI,OAAyB,KAClEujB,OAAO,KAAKE,KAAE,CAAC3L,MAAM,EACrB;QACA,OAAO,IAAI,CAACoxC,aAAa,CAAClpD,IAAI,CAAC;MACjC;IACF;IAEA,IACEA,IAAI,KAAuB,MAC3B,IAAI,CAACoW,KAAK,CAAC+Y,kBAAkB,IAC7B,IAAI,CAAClC,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAA8B,EACvE;MACA,EAAE,IAAI,CAACkI,KAAK,CAAClI,GAAG;MAChB,OAAO,IAAI,CAACsnB,WAAW,CAAgB;IACzC;IAEA,OAAO,KAAK,CAACC,gBAAgB,CAACz1B,IAAI,CAAC;EACrC;EAEA2Y,aAAa,CAACsd,QAAmB,EAAQ;IACvC,MAAM;MAAE1S,OAAO;MAAE7hB;KAAM,GAAG,IAAI,CAAC0U,KAAK;IACpC,IAAI1U,IAAI,OAAa,IAAIu0B,QAAQ,QAAmB,EAAE;MAGpD1S,OAAO,CAACuJ,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAErJ,KAAE,CAAC1L,MAAM,CAAC;MAChC,IAAI,CAAC3B,KAAK,CAAC+Y,kBAAkB,GAAG,KAAK;IACvC,CAAC,MAAM,IAAIztB,IAAI,QAAmB,EAAE;MAElC6hB,OAAO,CAACvQ,IAAI,CAACyQ,KAAE,CAAC3L,MAAM,CAAC;IACzB,CAAC,MAAM,IAAIpW,IAAI,QAAiB,EAAE;MAChC,MAAMovB,GAAG,GAAGvN,OAAO,CAACA,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC;MACvC,IAAKsyB,GAAG,KAAKrN,KAAE,CAAC3L,MAAM,IAAIme,QAAQ,KAAa,MAAKnF,GAAG,KAAKrN,KAAE,CAAC1L,MAAM,EAAE;QACrEwL,OAAO,CAACC,GAAG,EAAE;QACb,IAAI,CAACpN,KAAK,CAAC+Y,kBAAkB,GAC3B5L,OAAO,CAACA,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC,KAAKilB,KAAE,CAACzL,MAAM;MAC7C,CAAC,MAAM;QACL,IAAI,CAAC6xC,UAAU,CAACpmC,KAAE,CAACzL,MAAM,CAAC;QAC1B,IAAI,CAAC5B,KAAK,CAAC+Y,kBAAkB,GAAG,IAAI;MACtC;IACF,CAAC,MAAM;MACL,IAAI,CAAC/Y,KAAK,CAAC+Y,kBAAkB,GAAG5M,0BAA0B,CAAC7gB,IAAI,CAAC;IAClE;EACF;AACF,CAAC;AClnBH,MAAMspD,eAAe,SAAS1iC,KAAK,CAAC;EAAAjrB;IAAA;IAAA,KAClCua,KAAK,GAAgB,IAAI/K,GAAG,EAAE;IAAA,KAG9Bo+C,KAAK,GAAgB,IAAIp+C,GAAG,EAAE;IAAA,KAG9Bq+C,UAAU,GAAgB,IAAIr+C,GAAG,EAAE;IAAA,KAGnCs+C,OAAO,GAAgB,IAAIt+C,GAAG,EAAE;IAAA,KAMhCu+C,kBAAkB,GAAgB,IAAIv+C,GAAG,EAAE;EAAA;AAC7C;AAKe,MAAMw+C,sBAAsB,SAAS3iC,YAAY,CAAkB;EAAArrB;IAAA;IAAA,IAChFiuD,aAAY,GAAkB,EAAE;EAAA;EAEhC5hC,WAAW,CAAC7Z,KAAiB,EAAmB;IAC9C,IAAI,CAACy7C,YAAY,CAACt4C,IAAI,CAAC,IAAInG,GAAG,EAAE,CAAC;IAEjC,OAAO,IAAIm+C,eAAe,CAACn7C,KAAK,CAAC;EACnC;EAEA8Z,KAAK,CAAC9Z,KAAa,EAAQ;IACzB,IAAIA,KAAK,IAAIoW,eAAe,EAAE;MAC5B,IAAI,CAACqlC,YAAY,CAACt4C,IAAI,CAAC,IAAInG,GAAG,EAAE,CAAC;IACnC;IAEA,KAAK,CAAC8c,KAAK,CAAC9Z,KAAK,CAAC;EACpB;EAEA+Z,IAAI,GAAG;IACL,MAAM/Z,KAAK,GAAG,KAAK,CAAC+Z,IAAI,EAAE;IAE1B,IAAI/Z,KAAK,IAAIoW,eAAe,EAAE;MAC5B,IAAI,CAACqlC,YAAY,CAAC9nC,GAAG,EAAE;IACzB;IAEA,OAAO3T,KAAK;EACd;EAEA07C,SAAS,CAACjkD,IAAY,EAAEkkD,WAAqB,EAAE;IAC7C,MAAMt5B,GAAG,GAAG,IAAI,CAACo5B,YAAY,CAAC9sD,MAAM;IACpC,IAAI,IAAI,CAAC8sD,YAAY,CAACp5B,GAAG,GAAG,CAAC,CAAC,CAACpN,GAAG,CAACxd,IAAI,CAAC,EAAE;MACxC,OAAO,IAAI;IACb;IACA,IAAI,CAACkkD,WAAW,IAAIt5B,GAAG,GAAG,CAAC,EAAE;MAC3B,KAAK,IAAIlzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkzB,GAAG,GAAG,CAAC,EAAElzB,CAAC,EAAE,EAAE;QAChC,IAAI,IAAI,CAACssD,YAAY,CAACtsD,CAAC,CAAC,CAAC8lB,GAAG,CAACxd,IAAI,CAAC,EAAE,OAAO,IAAI;MACjD;IACF;IACA,OAAO,KAAK;EACd;EAEAwiB,WAAW,CAACxiB,IAAY,EAAEyiB,WAAyB,EAAEjc,GAAa,EAAE;IAClE,IAAIic,WAAW,GAAGjD,oBAAoB,EAAE;MACtC,IAAI,IAAI,CAACykC,SAAS,CAACjkD,IAAI,EAAE,IAAI,CAAC,EAAE;QAC9B,IAAI,CAACqhB,MAAM,CAACrT,KAAK,CAACzG,MAAM,CAAC9C,gBAAgB,EAAE;UACzCwJ,EAAE,EAAEzH,GAAG;UACPhQ,cAAc,EAAEwJ;QAClB,CAAC,CAAC;MACJ;MACA,IAAI,CAACgkD,YAAY,CAAC,IAAI,CAACA,YAAY,CAAC9sD,MAAM,GAAG,CAAC,CAAC,CAACyrB,GAAG,CAAC3iB,IAAI,CAAC;MACzD;IACF;IAEA,MAAMuiB,KAAK,GAAG,IAAI,CAACd,YAAY,EAAE;IACjC,IAAIgB,WAAW,GAAGnD,yBAAyB,EAAE;MAC3C,IAAI,CAACsD,kBAAkB,CAACL,KAAK,EAAEviB,IAAI,CAAC;MACpCuiB,KAAK,CAACuhC,kBAAkB,CAACnhC,GAAG,CAAC3iB,IAAI,CAAC;MAClC;IACF;IAEA,KAAK,CAACwiB,WAAW,CAACxiB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;IAEzC,IAAIic,WAAW,GAAG3D,cAAc,EAAE;MAChC,IAAI,EAAE2D,WAAW,GAAG5D,eAAe,CAAC,EAAE;QAEpC,IAAI,CAAC6D,yBAAyB,CAACH,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,EAAEjc,GAAG,CAAC;QAC7D,IAAI,CAACoc,kBAAkB,CAACL,KAAK,EAAEviB,IAAI,CAAC;MACtC;MACAuiB,KAAK,CAACjS,KAAK,CAACqS,GAAG,CAAC3iB,IAAI,CAAC;IACvB;IACA,IAAIyiB,WAAW,GAAGrD,kBAAkB,EAAEmD,KAAK,CAACohC,KAAK,CAAChhC,GAAG,CAAC3iB,IAAI,CAAC;IAC3D,IAAIyiB,WAAW,GAAGpD,wBAAwB,EAAEkD,KAAK,CAACqhC,UAAU,CAACjhC,GAAG,CAAC3iB,IAAI,CAAC;IACtE,IAAIyiB,WAAW,GAAGtD,gBAAgB,EAAEoD,KAAK,CAACshC,OAAO,CAAClhC,GAAG,CAAC3iB,IAAI,CAAC;EAC7D;EAEA8iB,mBAAmB,CACjBP,KAAsB,EACtBviB,IAAY,EACZyiB,WAAyB,EAChB;IACT,IAAIF,KAAK,CAACohC,KAAK,CAACnmC,GAAG,CAACxd,IAAI,CAAC,EAAE;MACzB,IAAIyiB,WAAW,GAAGrD,kBAAkB,EAAE;QAGpC,MAAM+kC,OAAO,GAAG,CAAC,EAAE1hC,WAAW,GAAGpD,wBAAwB,CAAC;QAC1D,MAAM+kC,QAAQ,GAAG7hC,KAAK,CAACqhC,UAAU,CAACpmC,GAAG,CAACxd,IAAI,CAAC;QAC3C,OAAOmkD,OAAO,KAAKC,QAAQ;MAC7B;MACA,OAAO,IAAI;IACb;IACA,IAAI3hC,WAAW,GAAGtD,gBAAgB,IAAIoD,KAAK,CAACshC,OAAO,CAACrmC,GAAG,CAACxd,IAAI,CAAC,EAAE;MAC7D,IAAIuiB,KAAK,CAACrB,OAAO,CAAC1D,GAAG,CAACxd,IAAI,CAAC,EAAE;QAE3B,OAAO,CAAC,EAAEyiB,WAAW,GAAG5D,eAAe,CAAC;MAC1C,CAAC,MAAM;QAEL,OAAO,KAAK;MACd;IACF;IACA,IAAI4D,WAAW,GAAG3D,cAAc,IAAIyD,KAAK,CAACjS,KAAK,CAACkN,GAAG,CAACxd,IAAI,CAAC,EAAE;MACzD,OAAO,IAAI;IACb;IAEA,OAAO,KAAK,CAAC8iB,mBAAmB,CAACP,KAAK,EAAEviB,IAAI,EAAEyiB,WAAW,CAAC;EAC5D;EAEAO,gBAAgB,CAACjX,EAAgB,EAAE;IACjC,MAAM;MAAE/L;IAAK,CAAC,GAAG+L,EAAE;IAEnB,IAAI,IAAI,CAACk4C,SAAS,CAACjkD,IAAI,CAAC,EAAE;IAE1B,MAAM4qB,GAAG,GAAG,IAAI,CAACtJ,UAAU,CAACpqB,MAAM;IAClC,KAAK,IAAIQ,CAAC,GAAGkzB,GAAG,GAAG,CAAC,EAAElzB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACjC,MAAM6qB,KAAK,GAAG,IAAI,CAACjB,UAAU,CAAC5pB,CAAC,CAAC;MAChC,IAAI6qB,KAAK,CAACjS,KAAK,CAACkN,GAAG,CAACxd,IAAI,CAAC,IAAIuiB,KAAK,CAACuhC,kBAAkB,CAACtmC,GAAG,CAACxd,IAAI,CAAC,EAAE;IACnE;IAEA,KAAK,CAACgjB,gBAAgB,CAACjX,EAAE,CAAC;EAC5B;AACF;AChHA,MAAMs4C,QAAM,GAAG,CAAehtD,MAAS,EAAEC,GAAY,KACnDQ,MAAM,CAACwsD,cAAc,CAAC7X,IAAI,CAACp1C,MAAM,EAAEC,GAAG,CAAC,IAAID,MAAM,CAACC,GAAG,CAAC;AAWxD,SAASitD,OAAO,CAAIC,CAAY,EAAK;EACnC,IAAIA,CAAC,IAAI,IAAI,EAAE;IACb,MAAM,IAAI7lB,KAAK,CAAe6lB,eAAE,SAAQ,CAAC;EAC3C;EACA,OAAOA,CAAC;AACV;AAEA,SAASC,MAAM,CAACD,CAAU,EAAQ;EAChC,IAAI,CAACA,CAAC,EAAE;IACN,MAAM,IAAI7lB,KAAK,CAAC,aAAa,CAAC;EAChC;AACF;AAgBA,MAAM+lB,QAAQ,GAAG79C,cAAe,YAAW,CAAC;EAC1C89C,+BAA+B,EAAE;IAAA,IAAC;MAAEC;KAAoC;IAAA,OAC3DA,qBAA0E;EAAA;EACvFC,8BAA8B,EAAE;IAAA,IAAC;MAC/BC;KAGD;IAAA,OACcA,yBAAyE;EAAA;EACxFC,iCAAiC,EAC/B,6DAA6D;EAC/DC,+BAA+B,EAAE,0CAA0C;EAC3EC,wBAAwB,EACtB,qDAAqD;EACvDC,qBAAqB,EAAE,mDAAmD;EAC1EC,sBAAsB,EAAE,oDAAoD;EAC5EC,mEAAmE,EACjE,4GAA4G;EAC9GC,4BAA4B,EAC1B,6DAA6D;EAC/DC,eAAe,EAAE;IAAA,IAAC;MAAE9qD;KAA+B;IAAA,OAClBA,mCAAW;EAAA;EAC5C+qD,+BAA+B,EAC7B,mDAAmD;EACrDC,gCAAgC,EAC9B,2DAA2D;EAC7DC,8BAA8B,EAG5B;IAAA,IAAC;MAAEC;IAAwC,CAAC;IAAA,OACJ;EAAA;EAC1CC,iBAAiB,EAAE;IAAA,IAAC;MAAED;KAAoC;IAAA,OAChCA,gCAAY;EAAA;EAGtCE,uBAAuB,EAAE;IAAA,IAAC;MAAEhgD;KAA4C;IAAA,OAClEA,SAA8B;EAAA;EACpCigD,kBAAkB,EAAE,qCAAqC;EACzDC,mBAAmB,EAAE,sCAAsC;EAC3DC,iCAAiC,EAC/B,8DAA8D;EAChEC,wBAAwB,EAAE,4CAA4C;EACtExqB,6BAA6B,EAC3B,4DAA4D;EAC9DyqB,qBAAqB,EAAE;IAAA,IAAC;MACtBC;KAGD;IAAA,OACKA,aAAS,CAAC,CAAC,CAAE,mCAAkCA,SAAS,CAAC,CAAC,CAAc;EAAA;EAC9EC,yBAAyB,EACvB,uDAAuD;EACzDC,8BAA8B,EAAE;IAAA,IAAC;MAC/BV;KAGD;IAAA,OAC6DA,oEAAa;EAAA;EAC3EW,wBAAwB,EACtB,sDAAsD;EACxDC,yBAAyB,EACvB,0DAA0D;EAC5DC,uBAAuB,EACrB,qDAAqD;EACvDC,qCAAqC,EACnC,mDAAmD;EACrDC,2BAA2B,EAAE;IAAA,IAAC;MAAEf;KAAoC;IAAA,OAC9DA,YAAoD;EAAA;EAC1DgB,8BAA8B,EAAE;IAAA,IAAC;MAAEhB;KAAoC;IAAA,OACjEA,YAAuD;EAAA;EAC7DiB,uCAAuC,EAAE;IAAA,IAAC;MACxCjB;KAGD;IAAA,OACKA,YAA6F;EAAA;EACnGkB,qBAAqB,EAAE;IAAA,IAAC;MACtBC;KAGD;IAAA,OACKA,oBAAgB,CAAC,CAAC,CAAE,4BAA2BA,gBAAgB,CAAC,CAAC,CAAc;EAAA;EACrFC,iDAAiD,EAC/C,6DAA6D,GAC7D,gGAAgG;EAClGC,uBAAuB,EACrB,yDAAyD;EAC3DC,oBAAoB,EAClB,6DAA6D;EAC/DC,gCAAgC,EAC9B,0DAA0D;EAC5DC,iCAAiC,EAC/B,4DAA4D;EAC9DC,wCAAwC,EACtC,kFAAkF;EACpFC,0BAA0B,EACxB,uDAAuD;EACzDC,qBAAqB,EACnB,4GAA4G;EAC9GprB,iBAAiB,EACf,gFAAgF;EAClFqrB,yBAAyB,EACvB,uDAAuD;EACzDC,8BAA8B,EAAE;IAAA,IAAC;MAC/B7B;KAGD;IAAA,OAC6DA,oEAAa;EAAA;EAC3E8B,0BAA0B,EACxB,mFAAmF;EACrFC,sBAAsB,EACpB,gHAAgH;EAClHC,qBAAqB,EACnB,mGAAmG;EAErGC,qCAAqC,EACnC,qDAAqD;EACvDC,iCAAiC,EAC/B,8CAA8C;EAChDC,8BAA8B,EAC5B,wDAAwD;EAC1DC,uCAAuC,EAAE;IAAA,IAAC;MACxCC;IAGF,CAAC;IAAA,OACE,yBAAwBA,iBAAkB,kDAAiDA,iBAAsB;EAAA;EACpHC,6BAA6B,EAC3B,+CAA+C;EACjDC,yBAAyB,EACvB,mHAAmH;EACrHC,sCAAsC,EACpC,kFAAkF;EACpFC,+BAA+B,EAC7B,0GAA0G;EAC5GC,+BAA+B,EAC7B,0GAA0G;EAC5GC,2BAA2B,EACzB,uEAAuE;EACzEC,kBAAkB,EAChB,8EAA8E;EAChFC,wBAAwB,EAAE,wCAAwC;EAClEC,6BAA6B,EAAE,6CAA6C;EAC5EC,6BAA6B,EAC3B,qDAAqD;EACvDC,gCAAgC,EAC9B,mEAAmE;EACrEC,iCAAiC,EAAE;IAAA,IAAC;MAAEvuD;KAAwB;IAAA,OAC3D,yFAAwFA,IAAK;EAAA;AAClG,CAAC,CAAC;AAMF,SAASwuD,mBAAmB,CAC1BpxD,KAAa,EAC2B;EACxC,QAAQA,KAAK;IACX,KAAK,KAAK;MACR,OAAO,cAAc;IACvB,KAAK,SAAS;MACZ,OAAO,kBAAkB;IAC3B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,OAAO;MACV,OAAO,gBAAgB;IACzB,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,QAAQ;MACX,OAAO,iBAAiB;IAC1B,KAAK,WAAW;MACd,OAAO,oBAAoB;IAC7B,KAAK,SAAS;MACZ,OAAO,kBAAkB;IAC3B;MACE,OAAO0sB,SAAS;EAAA;AAEtB;AAEA,SAAS2kC,kBAAkB,CAACnD,QAAgB,EAA+B;EACzE,OACEA,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,WAAW;AAE/E;AAEA,SAASoD,uBAAuB,CAC9BpD,QAAgB,EACmB;EACnC,OAAOA,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK;AAChD;AASA,iBAAgB39C,UAA0D,IACxE,MAAMghD,qBAAqB,SAAShhD,UAAU,CAAmB;EAC/DqwB,eAAe,GAEb;IACA,OAAO2rB,sBAAsB;EAC/B;EAEAiF,cAAc,GAAY;IAGxB,OAAOnuC,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC;EAC3C;EAEA6uD,wBAAwB,GAAG;IACzB,OACE,CAAC,IAAI,CAACz+B,KAAK,GAAa,IACtB,IAAI,CAACA,KAAK,GAAW,IACrB,IAAI,CAACA,KAAK,IAAS,IACnB,IAAI,CAACA,KAAK,IAAa,IACvB,IAAI,CAACA,KAAK,KAAgB,IAC1B,IAAI,CAACoN,qBAAqB,EAAE,KAC9B,CAAC,IAAI,CAACpB,qBAAqB,EAAE;EAEjC;EAEA0yB,4BAA4B,GAAG;IAK7B,IAAI,CAACprC,IAAI,EAAE;IACX,OAAO,IAAI,CAACmrC,wBAAwB,EAAE;EACxC;EAGAE,eAAe,CACbC,gBAAqB,EACrBC,6BAAuC,EACjB;IACtB,IAAI,CAACxuC,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAI,IAAI,CAAC0U,KAAK,CAAC1U,IAAI,OAAW,EAAE;MACrE,OAAO8pB,SAAS;IAClB;IAEA,MAAMwhC,QAAQ,GAAG,IAAI,CAAC52C,KAAK,CAACtX,KAAK;IACjC,IAAI4xD,gBAAgB,CAACr9B,OAAO,CAAC25B,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7C,IAAI2D,6BAA6B,IAAI,IAAI,CAACC,uBAAuB,EAAE,EAAE;QACnE,OAAOplC,SAAS;MAClB;MACA,IAAI,IAAI,CAACqlC,UAAU,CAAC,IAAI,CAACL,4BAA4B,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;QACjE,OAAO9D,QAAQ;MACjB;IACF;IACA,OAAOxhC,SAAS;EAClB;EAOAulC,gBAAgB,SAaP;IAAA,IAbQ;MACfC,QAAQ;MACRN,gBAAgB;MAChBO,mBAAmB;MACnBN,6BAA6B;MAC7BO,aAAa,GAAGlF,QAAQ,CAAC+B;IAQ3B,CAAC;IACC,MAAMoD,YAAY,GAAG,CACnBrjD,GAAa,EACbk/C,QAAoB,EACpBoE,MAAkB,EAClBC,KAAiB,KACd;MACH,IAAIrE,QAAQ,KAAKoE,MAAM,IAAIJ,QAAQ,CAACK,KAAK,CAAC,EAAE;QAC1C,IAAI,CAAC/7C,KAAK,CAAC02C,QAAQ,CAACkC,qBAAqB,EAAE;UACzC34C,EAAE,EAAEzH,GAAG;UACPqgD,gBAAgB,EAAE,CAACiD,MAAM,EAAEC,KAAK;QAClC,CAAC,CAAC;MACJ;KACD;IACD,MAAMC,YAAY,GAAG,CACnBxjD,GAAa,EACbk/C,QAAoB,EACpBuE,IAAgB,EAChBC,IAAgB,KACb;MACH,IACGR,QAAQ,CAACO,IAAI,CAAC,IAAIvE,QAAQ,KAAKwE,IAAI,IACnCR,QAAQ,CAACQ,IAAI,CAAC,IAAIxE,QAAQ,KAAKuE,IAAK,EACrC;QACA,IAAI,CAACj8C,KAAK,CAAC02C,QAAQ,CAACuB,qBAAqB,EAAE;UACzCh4C,EAAE,EAAEzH,GAAG;UACP0/C,SAAS,EAAE,CAAC+D,IAAI,EAAEC,IAAI;QACxB,CAAC,CAAC;MACJ;KACD;IAED,SAAS;MACP,MAAM;QAAE/8C;OAAU,GAAG,IAAI,CAAC2B,KAAK;MAC/B,MAAM42C,QAAuC,GAAG,IAAI,CAACyD,eAAe,CAClEC,gBAAgB,CAACl+C,MAAM,CAACy+C,mBAAmB,WAAnBA,mBAAmB,GAAI,EAAE,CAAC,EAClDN,6BAA6B,CAC9B;MAED,IAAI,CAAC3D,QAAQ,EAAE;MAEf,IAAImD,kBAAkB,CAACnD,QAAQ,CAAC,EAAE;QAChC,IAAIgE,QAAQ,CAACS,aAAa,EAAE;UAC1B,IAAI,CAACn8C,KAAK,CAAC02C,QAAQ,CAACe,8BAA8B,EAAE;YAClDx3C,EAAE,EAAEd,QAAQ;YACZu4C;UACF,CAAC,CAAC;QACJ,CAAC,MAAM;UACLmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAEA,QAAQ,EAAE,UAAU,CAAC;UACtDmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAEA,QAAQ,EAAE,QAAQ,CAAC;UACpDmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAEA,QAAQ,EAAE,UAAU,CAAC;UAEtDgE,QAAQ,CAACS,aAAa,GAAGzE,QAAQ;QACnC;MACF,CAAC,MAAM,IAAIoD,uBAAuB,CAACpD,QAAQ,CAAC,EAAE;QAC5C,IAAIgE,QAAQ,CAAChE,QAAQ,CAAC,EAAE;UACtB,IAAI,CAAC13C,KAAK,CAAC02C,QAAQ,CAACiB,iBAAiB,EAAE;YAAE13C,EAAE,EAAEd,QAAQ;YAAEu4C;UAAS,CAAC,CAAC;QACpE;QACAgE,QAAQ,CAAChE,QAAQ,CAAC,GAAG,IAAI;QAEzBmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC;MAC/C,CAAC,MAAM;QACL,IAAI5tD,MAAM,CAACwsD,cAAc,CAAC7X,IAAI,CAACid,QAAQ,EAAEhE,QAAQ,CAAC,EAAE;UAClD,IAAI,CAAC13C,KAAK,CAAC02C,QAAQ,CAACiB,iBAAiB,EAAE;YAAE13C,EAAE,EAAEd,QAAQ;YAAEu4C;UAAS,CAAC,CAAC;QACpE,CAAC,MAAM;UACLmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;UACtDmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;UACtDmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC;UACxDmE,YAAY,CAAC18C,QAAQ,EAAEu4C,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC;UAExDsE,YAAY,CAAC78C,QAAQ,EAAEu4C,QAAQ,EAAE,SAAS,EAAE,UAAU,CAAC;UACvDsE,YAAY,CAAC78C,QAAQ,EAAEu4C,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;QACxD;QACAgE,QAAQ,CAAChE,QAAQ,CAAC,GAAG,IAAI;MAC3B;MAEA,IAAIiE,mBAAmB,YAAnBA,mBAAmB,CAAE74B,QAAQ,CAAC40B,QAAQ,CAAC,EAAE;QAC3C,IAAI,CAAC13C,KAAK,CAAC47C,aAAa,EAAE;UACxB37C,EAAE,EAAEd,QAAQ;UACZu4C;QACF,CAAC,CAAC;MACJ;IACF;EACF;EAEA0E,kBAAkB,CAAC5vD,IAAoB,EAAW;IAChD,QAAQA,IAAI;MACV,KAAK,aAAa;MAClB,KAAK,aAAa;QAChB,OAAO,IAAI,CAACgwB,KAAK,CAAW;MAC9B,KAAK,uBAAuB;QAC1B,OAAO,IAAI,CAACA,KAAK,CAAW;MAC9B,KAAK,mBAAmB;QACtB,OAAO,IAAI,CAACA,KAAK,CAAa;MAChC,KAAK,2BAA2B;QAC9B,OAAO,IAAI,CAACA,KAAK,CAAO;IAAA;IAG5B,MAAM,IAAImU,KAAK,CAAC,aAAa,CAAC;EAChC;EAEA0rB,WAAW,CACT7vD,IAAoB,EACpB8vD,YAAqB,EAChB;IACL,MAAMhiB,MAAW,GAAG,EAAE;IACtB,OAAO,CAAC,IAAI,CAAC8hB,kBAAkB,CAAC5vD,IAAI,CAAC,EAAE;MAErC8tC,MAAM,CAAC58B,IAAI,CAAC4+C,YAAY,EAAE,CAAC;IAC7B;IACA,OAAOhiB,MAAM;EACf;EAEAiiB,oBAAoB,CAClB/vD,IAAoB,EACpB8vD,YAAqB,EACrBE,mBAEC,EACI;IACL,OAAOjG,OAAO,CACZ,IAAI,CAACkG,0BAA0B,CAC7BjwD,IAAI,EACJ8vD,YAAY,EACQ,IAAI,EACxBE,mBAAmB,CACpB,CACF;EACH;EAMAC,0BAA0B,CACxBjwD,IAAoB,EACpB8vD,YAAwC,EACxCI,aAAsB,EACtBF,mBAEC,EACuB;IACxB,MAAMliB,MAAM,GAAG,EAAE;IACjB,IAAIqiB,gBAAgB,GAAG,CAAC,CAAC;IAEzB,SAAS;MACP,IAAI,IAAI,CAACP,kBAAkB,CAAC5vD,IAAI,CAAC,EAAE;QACjC;MACF;MACAmwD,gBAAgB,GAAG,CAAC,CAAC;MAErB,MAAMC,OAAO,GAAGN,YAAY,EAAE;MAC9B,IAAIM,OAAO,IAAI,IAAI,EAAE;QACnB,OAAO1mC,SAAS;MAClB;MACAokB,MAAM,CAAC58B,IAAI,CAACk/C,OAAO,CAAC;MAEpB,IAAI,IAAI,CAAC59B,GAAG,IAAU,EAAE;QACtB29B,gBAAgB,GAAG,IAAI,CAAC77C,KAAK,CAAC6Y,YAAY;QAC1C;MACF;MAEA,IAAI,IAAI,CAACyiC,kBAAkB,CAAC5vD,IAAI,CAAC,EAAE;QACjC;MACF;MAEA,IAAIkwD,aAAa,EAAE;QAEjB,IAAI,CAAC7zB,MAAM,CAAU;MACvB;MACA,OAAO3S,SAAS;IAClB;IAEA,IAAIsmC,mBAAmB,EAAE;MACvBA,mBAAmB,CAAChzD,KAAK,GAAGmzD,gBAAgB;IAC9C;IAEA,OAAOriB,MAAM;EACf;EAEAuiB,oBAAoB,CAClBrwD,IAAoB,EACpB8vD,YAAqB,EACrBQ,OAAgB,EAChBC,cAAuB,EACvBP,mBAEC,EACI;IACL,IAAI,CAACO,cAAc,EAAE;MACnB,IAAID,OAAO,EAAE;QACX,IAAI,CAACj0B,MAAM,CAAa;MAC1B,CAAC,MAAM;QACL,IAAI,CAACA,MAAM,CAAO;MACpB;IACF;IAEA,MAAMyR,MAAM,GAAG,IAAI,CAACiiB,oBAAoB,CACtC/vD,IAAI,EACJ8vD,YAAY,EACZE,mBAAmB,CACpB;IAED,IAAIM,OAAO,EAAE;MACX,IAAI,CAACj0B,MAAM,CAAa;IAC1B,CAAC,MAAM;MACL,IAAI,CAACA,MAAM,CAAO;IACpB;IAEA,OAAOyR,MAAM;EACf;EAEA0iB,iBAAiB,GAAmB;IAClC,MAAMljD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAkB;IAC7C,IAAI,CAACsqB,MAAM,CAAY;IACvB,IAAI,CAACA,MAAM,CAAW;IACtB,IAAI,CAAC,IAAI,CAACrM,KAAK,KAAW,EAAE;MAC1B,IAAI,CAACxc,KAAK,CAAC02C,QAAQ,CAAC+D,6BAA6B,EAAE;QACjDx6C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IAGArF,IAAI,CAAChB,QAAQ,GAAG,KAAK,CAAC65B,aAAa,EAAqB;IACxD,IAAI,CAAC9J,MAAM,CAAW;IAEtB,IAAI,IAAI,CAAC7J,GAAG,IAAQ,EAAE;MAGpBllB,IAAI,CAACmjD,SAAS,GAAG,IAAI,CAACC,iBAAiB,EAAE;IAC3C;IACA,IAAI,IAAI,CAAC1gC,KAAK,IAAO,EAAE;MACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC0/C,oBAAoB,EAAE;IACnD;IACA,OAAO,IAAI,CAAC1+C,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEAojD,iBAAiB,GAAqD;IAAA,IAApDE,kBAA2B,uEAAG,IAAI;IAClD,IAAIpJ,MAAsB,GAAG,IAAI,CAACxiB,eAAe,CAAC4rB,kBAAkB,CAAC;IACrE,OAAO,IAAI,CAACp+B,GAAG,IAAQ,EAAE;MACvB,MAAMllB,IAA+B,GACnC,IAAI,CAAC8H,eAAe,CAAoBoyC,MAAM,CAAC;MACjDl6C,IAAI,CAAC6hC,IAAI,GAAGqY,MAAM;MAClBl6C,IAAI,CAAC06B,KAAK,GAAG,IAAI,CAAChD,eAAe,CAAC4rB,kBAAkB,CAAC;MACrDpJ,MAAM,GAAG,IAAI,CAACv1C,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;IACnD;IACA,OAAOk6C,MAAM;EACf;EAEAqJ,oBAAoB,GAAsB;IACxC,MAAMvjD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAChDzE,IAAI,CAACwjD,QAAQ,GAAG,IAAI,CAACJ,iBAAiB,EAAE;IACxC,IAAI,CAAC,IAAI,CAAC10B,qBAAqB,EAAE,IAAI,IAAI,CAAChM,KAAK,IAAO,EAAE;MACtD1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC0/C,oBAAoB,EAAE;IACnD;IACA,OAAO,IAAI,CAAC1+C,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAyjD,wBAAwB,CAACC,GAAiB,EAAqB;IAC7D,IAAI,CAAC1tC,IAAI,EAAE;IACX,MAAMhW,IAAI,GAAG,IAAI,CAAC8H,eAAe,CAAoB47C,GAAG,CAAC;IACzD1jD,IAAI,CAAC2jD,aAAa,GAAGD,GAAG;IACxB1jD,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAAC0rB,qBAAqB,CAAgB,KAAK,CAAC;IACtE5jD,IAAI,CAAC6jD,OAAO,GAAG,KAAK;IACpB,OAAO,IAAI,CAACl/C,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA8jD,mBAAmB,GAAiB;IAClC,MAAM9jD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgB;IAC3C,IAAI,CAACuR,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,YAAY,CAAC;EAC5C;EAEA+jD,gBAAgB,GAAkB;IAChC,MAAM/jD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5C,IAAI,CAACsqB,MAAM,CAAY;IACvB,IAAI,IAAI,CAACrM,KAAK,IAAY,EAAE;MAC1B1iB,IAAI,CAACgkD,QAAQ,GAAG,IAAI,CAACd,iBAAiB,EAAE;IAC1C,CAAC,MAAM;MACLljD,IAAI,CAACgkD,QAAQ,GAAG,IAAI,CAACZ,iBAAiB,EAAE;IAC1C;IACA,IAAI,CAAC,IAAI,CAAC10B,qBAAqB,EAAE,IAAI,IAAI,CAAChM,KAAK,IAAO,EAAE;MACtD1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC0/C,oBAAoB,EAAE;IACnD;IACA,OAAO,IAAI,CAAC1+C,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEAikD,qBAAqB,CAACjkD,IAAuB,EAAE;IAC7C,IAAI,CAAC2hD,gBAAgB,CAAC;MACpBC,QAAQ,EAAE5hD,IAAI;MACdshD,gBAAgB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAC/BO,mBAAmB,EAAE,CACnB,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,SAAS,EACT,UAAU,EACV,UAAU,CACX;MACDC,aAAa,EAAElF,QAAQ,CAACgC;IAC1B,CAAC,CAAC;EACJ;EAGAsF,oBAAoB,CAAClkD,IAAuB,EAAE;IAC5C,IAAI,CAAC2hD,gBAAgB,CAAC;MACpBC,QAAQ,EAAE5hD,IAAI;MACdshD,gBAAgB,EAAE,EAAE;MACpBO,mBAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAClCC,aAAa,EAAElF,QAAQ,CAACiC;IAC1B,CAAC,CAAC;EACJ;EAEAsF,oBAAoB,GAIC;IAAA,IAHnBC,cAES,uEAAG,IAAI,CAACF,oBAAoB,CAACxC,IAAI,CAAC,IAAI,CAAC;IAEhD,MAAM1hD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAEhD2/C,cAAc,CAACpkD,IAAI,CAAC;IAEpBA,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACmsD,wBAAwB,EAAE;IAC3CrkD,IAAI,CAACskD,UAAU,GAAG,IAAI,CAACC,kBAAkB,CAAa;IACtDvkD,IAAI,CAACi5B,OAAO,GAAG,IAAI,CAACsrB,kBAAkB,CAAO;IAC7C,OAAO,IAAI,CAAC5/C,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAwkD,wBAAwB,CACtBJ,cAA2D,EACV;IACjD,IAAI,IAAI,CAAC1hC,KAAK,IAAO,EAAE;MACrB,OAAO,IAAI,CAAC+hC,qBAAqB,CAACL,cAAc,CAAC;IACnD;EACF;EAEAK,qBAAqB,CACnBL,cAA2D,EAC3D;IACA,MAAMpkD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgC;IAE3D,IAAI,IAAI,CAACie,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,KAAgB,EAAE;MACnD,IAAI,CAAC1M,IAAI,EAAE;IACb,CAAC,MAAM;MACL,IAAI,CAAC9e,UAAU,EAAE;IACnB;IAEA,MAAMwrD,mBAAmB,GAAG;MAAEhzD,KAAK,EAAE,CAAC;KAAG;IAEzCsQ,IAAI,CAACwC,MAAM,GAAG,IAAI,CAACugD,oBAAoB,CACrC,2BAA2B,EAE3B,IAAI,CAACoB,oBAAoB,CAACzC,IAAI,CAAC,IAAI,EAAE0C,cAAc,CAAC,EACtC,KAAK,EACE,IAAI,EACzB1B,mBAAmB,CACpB;IACD,IAAI1iD,IAAI,CAACwC,MAAM,CAACpT,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAI,CAAC8W,KAAK,CAAC02C,QAAQ,CAACoB,mBAAmB,EAAE;QAAE73C,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACxD;IACA,IAAI0iD,mBAAmB,CAAChzD,KAAK,KAAK,CAAC,CAAC,EAAE;MACpC,IAAI,CAACs+B,QAAQ,CAAChuB,IAAI,EAAE,eAAe,EAAE0iD,mBAAmB,CAAChzD,KAAK,CAAC;IACjE;IACA,OAAO,IAAI,CAACiV,UAAU,CAAC3E,IAAI,EAAE,4BAA4B,CAAC;EAC5D;EAIA0kD,eAAe,CACbC,WAAsB,EACtBC,SAA2C,EACrC;IAEN,MAAMC,mBAAmB,GAAGF,WAAW,KAAa;IAGpD,MAAMG,SAAS,GAA6C,YAAY;IACxE,MAAMC,aAAa,GAEf,gBAAgB;IAEpBH,SAAS,CAACjhD,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,EAAE;IAC1D,IAAI,CAACz1B,MAAM,CAAW;IACtB61B,SAAS,CAACE,SAAS,CAAC,GAAG,IAAI,CAACE,8BAA8B,EAAE;IAC5D,IAAIH,mBAAmB,EAAE;MACvBD,SAAS,CAACG,aAAa,CAAC,GACtB,IAAI,CAACE,oCAAoC,CAACN,WAAW,CAAC;KACzD,MAAM,IAAI,IAAI,CAACjiC,KAAK,CAACiiC,WAAW,CAAC,EAAE;MAClCC,SAAS,CAACG,aAAa,CAAC,GACtB,IAAI,CAACE,oCAAoC,CAACN,WAAW,CAAC;IAC1D;EACF;EAEAK,8BAA8B,GAE5B;IACA,OAAO,KAAK,CACTE,gBAAgB,QAAuC,CACvDj1D,GAAG,CAACuQ,OAAO,IAAI;MACd,IACEA,OAAO,CAAClO,IAAI,KAAK,YAAY,IAC7BkO,OAAO,CAAClO,IAAI,KAAK,aAAa,IAC9BkO,OAAO,CAAClO,IAAI,KAAK,eAAe,IAChCkO,OAAO,CAAClO,IAAI,KAAK,cAAc,EAC/B;QACA,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAACiE,iCAAiC,EAAE;UACrD16C,EAAE,EAAE3F,OAAO;UACXlO,IAAI,EAAEkO,OAAO,CAAClO;QAChB,CAAC,CAAC;MACJ;MACA,OAAOkO,OAAO;IAChB,CAAC,CAAC;EACN;EAEA2kD,0BAA0B,GAAS;IACjC,IAAI,CAAC,IAAI,CAACjgC,GAAG,IAAU,IAAI,CAAC,IAAI,CAAC0J,gBAAgB,EAAE,EAAE;MACnD,IAAI,CAACG,MAAM,CAAS;IACtB;EACF;EAEAq2B,sBAAsB,CACpB1yD,IAAsE,EACtEsN,IAEC,EACiE;IAClE,IAAI,CAAC0kD,eAAe,CAAW1kD,QAAI,CAAC;IACpC,IAAI,CAACmlD,0BAA0B,EAAE;IACjC,OAAO,IAAI,CAACxgD,UAAU,CAAC3E,IAAI,EAAEtN,IAAI,CAAC;EACpC;EAEA2yD,+BAA+B,GAAG;IAChC,IAAI,CAACrvC,IAAI,EAAE;IACX,IAAIjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;MACtC,IAAI,CAAC0jB,IAAI,EAAE;MACX,OAAO,IAAI,CAAC0M,KAAK,CAAU;IAC7B;IACA,OAAO,KAAK;EACd;EAEA4iC,wBAAwB,CACtBtlD,IAAgC,EACO;IACvC,IACE,EACE,IAAI,CAAC0iB,KAAK,GAAa,IACvB,IAAI,CAAC6iC,WAAW,CAAC,IAAI,CAACF,+BAA+B,CAAC3D,IAAI,CAAC,IAAI,CAAC,CAAC,CAClE,EACD;MACA,OAAOtlC,SAAS;IAClB;IAEA,IAAI,CAAC2S,MAAM,CAAa;IACxB,MAAM9qB,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IACjCzzB,EAAE,CAACi0B,cAAc,GAAG,IAAI,CAAC0rB,qBAAqB,EAAE;IAChD,IAAI,CAACx7C,gBAAgB,CAACnE,EAAE,CAAC;IAEzB,IAAI,CAAC8qB,MAAM,CAAa;IACxB/uB,IAAI,CAACwlD,UAAU,GAAG,CAACvhD,EAAE,CAAC;IAEtB,MAAM3R,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;IAC5C,IAAInzD,IAAI,EAAE0N,IAAI,CAACk4B,cAAc,GAAG5lC,IAAI;IACpC,IAAI,CAAC6yD,0BAA0B,EAAE;IACjC,OAAO,IAAI,CAACxgD,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEA0lD,gCAAgC,CAC9B1lD,IAAiD,EACjD2lD,QAAiB,EAC4B;IAC7C,IAAI,IAAI,CAACzgC,GAAG,IAAa,EAAEllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;IAC/C,MAAMs/C,OAAY,GAAG5lD,IAAI;IAEzB,IAAI,IAAI,CAAC0iB,KAAK,IAAW,IAAI,IAAI,CAACA,KAAK,IAAO,EAAE;MAC9C,IAAIijC,QAAQ,EAAE;QACZ,IAAI,CAACz/C,KAAK,CAAC02C,QAAQ,CAAC8C,0BAA0B,EAAE;UAAEv5C,EAAE,EAAEnG;QAAK,CAAC,CAAC;MAC/D;MACA,MAAMuC,MAA2B,GAAGqjD,OAAO;MAC3C,IAAIrjD,MAAM,CAAC7P,IAAI,IAAI,IAAI,CAACgwB,KAAK,IAAO,EAAE;QACpC,IAAI,CAACxc,KAAK,CAAC02C,QAAQ,CAACM,+BAA+B,EAAE;UACnD/2C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;QAC5B,CAAC,CAAC;MACJ;MACA,IAAI,CAACikC,eAAe,CAAWniD,UAAM,CAAC;MACtC,IAAI,CAAC4iD,0BAA0B,EAAE;MACjC,MAAML,SAAS,GAEX,YAAY;MAChB,MAAMC,aAAa,GAEf,gBAAgB;MACpB,IAAIxiD,MAAM,CAAC7P,IAAI,KAAK,KAAK,EAAE;QACzB,IAAI6P,MAAM,CAACuiD,SAAS,CAAC,CAAC11D,MAAM,GAAG,CAAC,EAAE;UAChC,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAACvM,cAAc,EAAE;YAAEiT,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAAG,CAAC,CAAC;UACnE,IAAI,IAAI,CAACiiB,WAAW,CAACngC,MAAM,CAACuiD,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;YAC1C,IAAI,CAAC5+C,KAAK,CAAC02C,QAAQ,CAACK,iCAAiC,EAAE;cACrD92C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAC5B,CAAC,CAAC;UACJ;QACF;MACF,CAAC,MAAM,IAAIle,MAAM,CAAC7P,IAAI,KAAK,KAAK,EAAE;QAChC,IAAI6P,MAAM,CAACuiD,SAAS,CAAC,CAAC11D,MAAM,KAAK,CAAC,EAAE;UAClC,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAACtM,cAAc,EAAE;YAAEgT,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAAG,CAAC,CAAC;QACrE,CAAC,MAAM;UACL,MAAMolC,cAAc,GAAGtjD,MAAM,CAACuiD,SAAS,CAAC,CAAC,CAAC,CAAC;UAC3C,IAAI,IAAI,CAACpiB,WAAW,CAACmjB,cAAc,CAAC,EAAE;YACpC,IAAI,CAAC3/C,KAAK,CAAC02C,QAAQ,CAACK,iCAAiC,EAAE;cACrD92C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAC5B,CAAC,CAAC;UACJ;UACA,IACEolC,cAAc,CAACvzD,IAAI,KAAK,YAAY,IACpCuzD,cAAc,CAACv/C,QAAQ,EACvB;YACA,IAAI,CAACJ,KAAK,CAAC02C,QAAQ,CAACiD,qCAAqC,EAAE;cACzD15C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAC5B,CAAC,CAAC;UACJ;UACA,IAAIolC,cAAc,CAACvzD,IAAI,KAAK,aAAa,EAAE;YACzC,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAACkD,iCAAiC,EAAE;cACrD35C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;YAC5B,CAAC,CAAC;UACJ;QACF;QACA,IAAIle,MAAM,CAACwiD,aAAa,CAAC,EAAE;UACzB,IAAI,CAAC7+C,KAAK,CAAC02C,QAAQ,CAACmD,8BAA8B,EAAE;YAClD55C,EAAE,EAAE5D,MAAM,CAACwiD,aAAa;UAC1B,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLxiD,MAAM,CAAC7P,IAAI,GAAG,QAAQ;MACxB;MACA,OAAO,IAAI,CAACiS,UAAU,CAACpC,MAAM,EAAE,mBAAmB,CAAC;IACrD,CAAC,MAAM;MACL,MAAMwtB,QAA+B,GAAG61B,OAAO;MAC/C,IAAID,QAAQ,EAAE51B,QAAQ,CAAC41B,QAAQ,GAAG,IAAI;MACtC,MAAMrzD,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;MAC5C,IAAInzD,IAAI,EAAEy9B,QAAQ,CAACmI,cAAc,GAAG5lC,IAAI;MACxC,IAAI,CAAC6yD,0BAA0B,EAAE;MACjC,OAAO,IAAI,CAACxgD,UAAU,CAACorB,QAAQ,EAAE,qBAAqB,CAAC;IACzD;EACF;EAEA+1B,iBAAiB,GAAoB;IACnC,MAAM9lD,IAAS,GAAG,IAAI,CAACyE,SAAS,EAAE;IAElC,IAAI,IAAI,CAACie,KAAK,IAAW,IAAI,IAAI,CAACA,KAAK,IAAO,EAAE;MAC9C,OAAO,IAAI,CAAC0iC,sBAAsB,CAAC,4BAA4B,EAAEplD,IAAI,CAAC;IACxE;IAEA,IAAI,IAAI,CAAC0iB,KAAK,IAAS,EAAE;MACvB,MAAMze,EAAE,GAAG,IAAI,CAACQ,SAAS,EAAgB;MACzC,IAAI,CAACuR,IAAI,EAAE;MACX,IAAI,IAAI,CAAC0M,KAAK,IAAW,IAAI,IAAI,CAACA,KAAK,IAAO,EAAE;QAC9C,OAAO,IAAI,CAAC0iC,sBAAsB,CAChC,iCAAiC,EACjCplD,IAAI,CACL;MACH,CAAC,MAAM;QACLA,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACwuC,gBAAgB,CAAC/5B,EAAE,EAAE,KAAK,CAAC;QAC3C,OAAO,IAAI,CAACyhD,gCAAgC,CAAC1lD,IAAI,EAAE,KAAK,CAAC;MAC3D;IACF;IAEA,IAAI,CAAC2hD,gBAAgB,CAAC;MACpBC,QAAQ,EAAE5hD,IAAI;MACdshD,gBAAgB,EAAE,CAAC,UAAU,CAAC;MAC9BO,mBAAmB,EAAE,CACnB,SAAS,EACT,UAAU,EACV,SAAS,EACT,WAAW,EACX,QAAQ,EACR,QAAQ,EACR,UAAU;IAEd,CAAC,CAAC;IAEF,MAAMkE,GAAG,GAAG,IAAI,CAACT,wBAAwB,CAACtlD,IAAI,CAAC;IAC/C,IAAI+lD,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IAEA,KAAK,CAACC,iBAAiB,CAAChmD,IAAI,CAAC;IAC7B,IACE,CAACA,IAAI,CAAC0E,QAAQ,IACd1E,IAAI,CAACxQ,GAAG,CAAC8C,IAAI,KAAK,YAAY,KAC7B0N,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,KAAK,KAAK,IAAI8H,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,KAAK,KAAK,CAAC,IACpD,IAAI,CAACipD,wBAAwB,EAAE,EAC/B;MACAnhD,IAAI,CAACtN,IAAI,GAAGsN,IAAI,CAACxQ,GAAG,CAAC0I,IAAI;MACzB,KAAK,CAAC8tD,iBAAiB,CAAChmD,IAAI,CAAC;IAC/B;IACA,OAAO,IAAI,CAAC0lD,gCAAgC,CAAC1lD,IAAI,EAAE,CAAC,CAACA,IAAI,CAAC2lD,QAAQ,CAAC;EACrE;EAEAM,kBAAkB,GAAoB;IACpC,MAAMjmD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;IAC9CzE,IAAI,CAAC+nC,OAAO,GAAG,IAAI,CAACme,wBAAwB,EAAE;IAC9C,OAAO,IAAI,CAACvhD,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAkmD,wBAAwB,GAA2B;IACjD,IAAI,CAACn3B,MAAM,CAAW;IACtB,MAAMgZ,OAAO,GAAG,IAAI,CAACwa,WAAW,CAC9B,aAAa,EACb,IAAI,CAACuD,iBAAiB,CAACpE,IAAI,CAAC,IAAI,CAAC,CAClC;IACD,IAAI,CAAC3yB,MAAM,CAAW;IACtB,OAAOgZ,OAAO;EAChB;EAEAoe,qBAAqB,GAAY;IAC/B,IAAI,CAACnwC,IAAI,EAAE;IACX,IAAI,IAAI,CAACkP,GAAG,IAAY,EAAE;MACxB,OAAO,IAAI,CAAC+I,YAAY,CAAc;IACxC;IACA,IAAI,IAAI,CAACA,YAAY,KAAc,EAAE;MACnC,IAAI,CAACjY,IAAI,EAAE;IACb;IACA,IAAI,CAAC,IAAI,CAAC0M,KAAK,GAAa,EAAE;MAC5B,OAAO,KAAK;IACd;IACA,IAAI,CAAC1M,IAAI,EAAE;IACX,IAAI,CAAC,IAAI,CAACkrC,cAAc,EAAE,EAAE;MAC1B,OAAO,KAAK;IACd;IACA,IAAI,CAAClrC,IAAI,EAAE;IACX,OAAO,IAAI,CAAC0M,KAAK,CAAQ;EAC3B;EAEA0jC,0BAA0B,GAAsB;IAC9C,MAAMpmD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAChDzE,IAAI,CAAC9H,IAAI,GAAG,IAAI,CAACmsD,wBAAwB,EAAE;IAC3CrkD,IAAI,CAACskD,UAAU,GAAG,IAAI,CAAC+B,qBAAqB,CAAQ;IACpD,OAAO,IAAI,CAAC1hD,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAsmD,iBAAiB,GAAmB;IAClC,MAAMtmD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAkB;IAE7C,IAAI,CAACsqB,MAAM,CAAW;IAEtB,IAAI,IAAI,CAACrM,KAAK,IAAY,EAAE;MAC1B1iB,IAAI,CAAC2lD,QAAQ,GAAG,IAAI,CAAC3+C,KAAK,CAACtX,KAAK;MAChC,IAAI,CAACsmB,IAAI,EAAE;MACX,IAAI,CAACwY,gBAAgB,CAAc;IACrC,CAAC,MAAM,IAAI,IAAI,CAACD,aAAa,KAAc,EAAE;MAC3CvuB,IAAI,CAAC2lD,QAAQ,GAAG,IAAI;IACtB;IAEA,IAAI,CAAC52B,MAAM,CAAa;IACxB/uB,IAAI,CAACs7B,aAAa,GAAG,IAAI,CAAC8qB,0BAA0B,EAAE;IACtDpmD,IAAI,CAACumD,QAAQ,GAAG,IAAI,CAACh4B,aAAa,CAAQ,MAAG,IAAI,CAACi4B,WAAW,EAAE,GAAG,IAAI;IAEtE,IAAI,CAACz3B,MAAM,CAAa;IAExB,IAAI,IAAI,CAACrM,KAAK,IAAY,EAAE;MAC1B1iB,IAAI,CAACsG,QAAQ,GAAG,IAAI,CAACU,KAAK,CAACtX,KAAK;MAChC,IAAI,CAACsmB,IAAI,EAAE;MACX,IAAI,CAAC+Y,MAAM,CAAa;IAC1B,CAAC,MAAM,IAAI,IAAI,CAAC7J,GAAG,IAAa,EAAE;MAChCllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;IACtB;IAEAtG,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACuuB,cAAc,EAAE;IAC3C,IAAI,CAAC53B,SAAS,EAAE;IAChB,IAAI,CAACE,MAAM,CAAW;IAEtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEA0mD,gBAAgB,GAAkB;IAChC,MAAM1mD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5CzE,IAAI,CAAC2mD,YAAY,GAAG,IAAI,CAAC5D,oBAAoB,CAC3C,mBAAmB,EACnB,IAAI,CAAC6D,uBAAuB,CAAClF,IAAI,CAAC,IAAI,CAAC,EACzB,IAAI,EACG,KAAK,CAC3B;IAID,IAAImF,mBAAmB,GAAG,KAAK;IAC/B,IAAIC,eAA+B,GAAG,IAAI;IAC1C9mD,IAAI,CAAC2mD,YAAY,CAAC3gC,OAAO,CAAC+gC,WAAW,IAAI;MAAA;MACvC,MAAM;QAAEz0D;MAAK,CAAC,GAAGy0D,WAAW;MAE5B,IACEF,mBAAmB,IACnBv0D,IAAI,KAAK,YAAY,IACrBA,IAAI,KAAK,gBAAgB,IACzB,EAAEA,IAAI,KAAK,oBAAoB,IAAIy0D,WAAW,CAACzgD,QAAQ,CAAC,EACxD;QACA,IAAI,CAACJ,KAAK,CAAC02C,QAAQ,CAAC0C,0BAA0B,EAAE;UAC9Cn5C,EAAE,EAAE4gD;QACN,CAAC,CAAC;MACJ;MAEAF,mBAAmB,KAAnBA,mBAAmB,GAChBv0D,IAAI,KAAK,oBAAoB,IAAIy0D,WAAW,CAACzgD,QAAQ,IACtDhU,IAAI,KAAK,gBAAgB;MAG3B,IAAI00D,SAAS,GAAG10D,IAAI;MACpB,IAAIA,IAAI,KAAK,YAAY,EAAE;QACzBy0D,WAAW,GAAGA,WAAW,CAAC7uB,cAAc;QACxC8uB,SAAS,GAAGD,WAAW,CAACz0D,IAAI;MAC9B;MAEA,MAAM20D,SAAS,GAAGD,SAAS,KAAK,oBAAoB;MACpD,mCAAe,+BAAfF,eAAe,GAAKG,SAAS;MAC7B,IAAIH,eAAe,KAAKG,SAAS,EAAE;QACjC,IAAI,CAAC/gD,KAAK,CAAC02C,QAAQ,CAACuC,gCAAgC,EAAE;UACpDh5C,EAAE,EAAE4gD;QACN,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF,OAAO,IAAI,CAACpiD,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEA4mD,uBAAuB,GAAoC;IAGzD,MAAM;MAAEvhD;KAAU,GAAG,IAAI,CAAC2B,KAAK;IAE/B,MAAMxH,IAAI,GAAG,IAAI,CAAC0lB,GAAG,CAAa;IAClC,IAAI5yB,IAAqC,GAAG,IAAI,CAACk0D,WAAW,EAAE;IAC9D,MAAMlgD,QAAQ,GAAG,IAAI,CAAC4e,GAAG,CAAa;IACtC,MAAMgiC,OAAO,GAAG,IAAI,CAAChiC,GAAG,CAAU;IAElC,IAAIgiC,OAAO,EAAE;MACX,MAAMC,WAAW,GAAG,IAAI,CAACr/C,eAAe,CAAuBxV,IAAI,CAAC;MACpE60D,WAAW,CAAC7gD,QAAQ,GAAGA,QAAQ;MAE/B,IACEhU,IAAI,CAACA,IAAI,KAAK,iBAAiB,IAC/B,CAACA,IAAI,CAACqR,cAAc,IACpBrR,IAAI,CAACkxD,QAAQ,CAAClxD,IAAI,KAAK,YAAY,EACnC;QACA60D,WAAW,CAACh+C,KAAK,GAAG7W,IAAI,CAACkxD,QAAQ;MACnC,CAAC,MAAM;QACL,IAAI,CAACt9C,KAAK,CAAC02C,QAAQ,CAACqC,uBAAuB,EAAE;UAAE94C,EAAE,EAAE7T;QAAK,CAAC,CAAC;QAG1D60D,WAAW,CAACh+C,KAAK,GAAG7W,IAAI;MAC1B;MAEA60D,WAAW,CAACh8B,WAAW,GAAG,IAAI,CAACq7B,WAAW,EAAE;MAC5Cl0D,IAAI,GAAG,IAAI,CAACqS,UAAU,CAACwiD,WAAW,EAAE,oBAAoB,CAAC;KAC1D,MAAM,IAAI7gD,QAAQ,EAAE;MACnB,MAAM8gD,gBAAgB,GAAG,IAAI,CAACt/C,eAAe,CAAmBxV,IAAI,CAAC;MACrE80D,gBAAgB,CAAClvB,cAAc,GAAG5lC,IAAI;MACtCA,IAAI,GAAG,IAAI,CAACqS,UAAU,CAACyiD,gBAAgB,EAAE,gBAAgB,CAAC;IAC5D;IAEA,IAAI5nD,IAAI,EAAE;MACR,MAAM6nD,QAAQ,GAAG,IAAI,CAACx1B,WAAW,CAAexsB,QAAQ,CAAC;MACzDgiD,QAAQ,CAACnvB,cAAc,GAAG5lC,IAAI;MAC9BA,IAAI,GAAG,IAAI,CAACqS,UAAU,CAAC0iD,QAAQ,EAAE,YAAY,CAAC;IAChD;IAEA,OAAO/0D,IAAI;EACb;EAEAg1D,wBAAwB,GAA0B;IAChD,MAAMtnD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAyB;IACpD,IAAI,CAACsqB,MAAM,CAAW;IACtB/uB,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACsuB,WAAW,EAAE;IACxC,IAAI,CAACz3B,MAAM,CAAW;IACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAunD,gCAAgC,CAC9Bj1D,IAA4C,EAC5Ck1D,QAAkB,EACa;IAC/B,MAAMxnD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAExB;IACH,IAAInS,IAAI,KAAK,mBAAmB,EAAE;MAC/B0N,IAAI,CAAiCwnD,QAAQ,GAAG,CAAC,CAACA,QAAQ;MAC3D,IAAIA,QAAQ,EAAE,IAAI,CAACxxC,IAAI,EAAE;MACzB,IAAI,CAACA,IAAI,EAAE;IACb;IACA,IAAI,CAACyxC,gCAAgC,CAAC,MACpC,IAAI,CAAC/C,eAAe,KAAW1kD,IAAI,CAAC,CACrC;IACD,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE1N,IAAI,CAAC;EACpC;EAEAo1D,sBAAsB,GAAoB;IACxC,MAAM1nD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;IAE9CzE,IAAI,CAACynC,OAAO,GAAG,CAAC,MAAM;MACpB,QAAQ,IAAI,CAACzgC,KAAK,CAAC1U,IAAI;QACrB;QACA;QACA;QACA;QACA;UAEE,OAAO,KAAK,CAACumC,aAAa,EAAE;QAC9B;UACE,MAAM,IAAI,CAAC3hC,UAAU,EAAE;MAAA;IAE7B,CAAC,GAAG;IACJ,OAAO,IAAI,CAACyN,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA2nD,0BAA0B,GAAa;IACrC,MAAM3nD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;IAC9CzE,IAAI,CAACynC,OAAO,GAAG,KAAK,CAACmgB,aAAa,CAAC,KAAK,CAAC;IACzC,OAAO,IAAI,CAACjjD,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA6nD,yBAAyB,GAAsB;IAC7C,IAAI,IAAI,CAAC7gD,KAAK,CAACiY,MAAM,EAAE,OAAO,IAAI,CAACunC,WAAW,EAAE;IAChD,OAAO,KAAK,CAACqB,yBAAyB,EAAE;EAC1C;EAEAC,kCAAkC,GAAqC;IACrE,MAAMC,WAAW,GAAG,IAAI,CAACjE,mBAAmB,EAAE;IAC9C,IAAI,IAAI,CAAC71B,YAAY,CAAQ,QAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAC9D,OAAO,IAAI,CAAC+0B,wBAAwB,CAACsE,WAAW,CAAC;IACnD,CAAC,MAAM;MACL,OAAOA,WAAW;IACpB;EACF;EAEAC,mBAAmB,GAAa;IAC9B,QAAQ,IAAI,CAAChhD,KAAK,CAAC1U,IAAI;MACrB;MACA;MACA;MACA;MACA;QACE,OAAO,IAAI,CAACo1D,sBAAsB,EAAE;MACtC;QACE,IAAI,IAAI,CAAC1gD,KAAK,CAACtX,KAAK,KAAK,GAAG,EAAE;UAC5B,MAAMsQ,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;UAC9C,MAAMwgB,SAAS,GAAG,IAAI,CAACI,SAAS,EAAE;UAClC,IAAIJ,SAAS,CAAC3yB,IAAI,QAAW,IAAI2yB,SAAS,CAAC3yB,IAAI,QAAc,EAAE;YAC7D,MAAM,IAAI,CAAC4E,UAAU,EAAE;UACzB;UAEA8I,IAAI,CAACynC,OAAO,GAAG,IAAI,CAACwgB,eAAe,EAAE;UACrC,OAAO,IAAI,CAACtjD,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;QAC/C;QACA;MACF;QACE,OAAO,IAAI,CAAC8nD,kCAAkC,EAAE;MAClD;QACE,OAAO,IAAI,CAAC/D,gBAAgB,EAAE;MAChC;QACE,OAAO,IAAI,CAACb,iBAAiB,EAAE;MACjC;QACE,OAAO,IAAI,CAACqC,WAAW,CAAC,IAAI,CAACY,qBAAqB,CAACzE,IAAI,CAAC,IAAI,CAAC,CAAC,GAC1D,IAAI,CAAC4E,iBAAiB,EAAE,GACxB,IAAI,CAACL,kBAAkB,EAAE;MAC/B;QACE,OAAO,IAAI,CAACS,gBAAgB,EAAE;MAChC;QAaE,OAAO,IAAI,CAACY,wBAAwB,EAAE;MACxC;MACA;QACE,OAAO,IAAI,CAACK,0BAA0B,EAAE;MAC1C;QAAS;UACP,MAAM;YAAEr1D;WAAM,GAAG,IAAI,CAAC0U,KAAK;UAC3B,IACE+L,iBAAiB,CAACzgB,IAAI,CAAC,IACvBA,IAAI,KAAa,MACjBA,IAAI,OAAa,EACjB;YACA,MAAM41D,QAAQ,GACZ51D,IAAI,OAAa,GACb,eAAe,GACfA,IAAI,OAAa,GACjB,eAAe,GACfwuD,mBAAmB,CAAC,IAAI,CAAC95C,KAAK,CAACtX,KAAK,CAAC;YAC3C,IACEw4D,QAAQ,KAAK9rC,SAAS,IACtB,IAAI,CAACuJ,iBAAiB,EAAE,OAAkB,EAC1C;cACA,MAAM3lB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;cAC9C,IAAI,CAACuR,IAAI,EAAE;cACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAEkoD,QAAQ,CAAC;YACxC;YACA,OAAO,IAAI,CAAC3E,oBAAoB,EAAE;UACpC;QACF;IAAA;IAGF,MAAM,IAAI,CAACrsD,UAAU,EAAE;EACzB;EAEAixD,wBAAwB,GAAa;IACnC,IAAI71D,IAAI,GAAG,IAAI,CAAC01D,mBAAmB,EAAE;IACrC,OAAO,CAAC,IAAI,CAACt5B,qBAAqB,EAAE,IAAI,IAAI,CAACxJ,GAAG,GAAa,EAAE;MAC7D,IAAI,IAAI,CAACxC,KAAK,GAAa,EAAE;QAC3B,MAAM1iB,IAAI,GAAG,IAAI,CAAC8H,eAAe,CAAgBxV,IAAI,CAAC;QACtD0N,IAAI,CAACmrB,WAAW,GAAG74B,IAAI;QACvB,IAAI,CAACy8B,MAAM,CAAa;QACxBz8B,IAAI,GAAG,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;MAC7C,CAAC,MAAM;QACL,MAAMA,IAAI,GAAG,IAAI,CAAC8H,eAAe,CAAwBxV,IAAI,CAAC;QAC9D0N,IAAI,CAACm+B,UAAU,GAAG7rC,IAAI;QACtB0N,IAAI,CAACo+B,SAAS,GAAG,IAAI,CAACooB,WAAW,EAAE;QACnC,IAAI,CAACz3B,MAAM,CAAa;QACxBz8B,IAAI,GAAG,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;MACrD;IACF;IACA,OAAO1N,IAAI;EACb;EAEA81D,mBAAmB,GAAqB;IACtC,MAAMpoD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAoB;IAC/C,MAAM4jD,QAAQ,GAAG,IAAI,CAACrhD,KAAK,CAACtX,KAAK;IACjC,IAAI,CAACsmB,IAAI,EAAE;IACXhW,IAAI,CAACqoD,QAAQ,GAAGA,QAAQ;IACxBroD,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACowB,2BAA2B,EAAE;IAExD,IAAID,QAAQ,KAAK,UAAU,EAAE;MAC3B,IAAI,CAACE,gCAAgC,CAEnCvoD,IAAI,CACL;IACH;IAEA,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAuoD,gCAAgC,CAACvoD,IAAY,EAAE;IAC7C,QAAQA,IAAI,CAACk4B,cAAc,CAAC5lC,IAAI;MAC9B,KAAK,aAAa;MAClB,KAAK,aAAa;QAChB;MACF;QACE,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAAC4D,kBAAkB,EAAE;UAAEr6C,EAAE,EAAEnG;QAAK,CAAC,CAAC;IAAA;EAE3D;EAEAwoD,gBAAgB,GAAkB;IAChC,MAAMxoD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5C,IAAI,CAAC+pB,gBAAgB,CAAW;IAChC,MAAM8M,aAAa,GAAG,IAAI,CAAC72B,SAAS,EAAqB;IACzD62B,aAAa,CAACpjC,IAAI,GAAG,IAAI,CAACmsD,wBAAwB,EAAE;IACpD/oB,aAAa,CAACgpB,UAAU,GAAG,IAAI,CAAC7C,UAAU,CAAC,MACzC,IAAI,CAACgH,6BAA6B,EAAE,CACrC;IACDzoD,IAAI,CAACs7B,aAAa,GAAG,IAAI,CAAC32B,UAAU,CAAC22B,aAAa,EAAE,iBAAiB,CAAC;IACtE,OAAO,IAAI,CAAC32B,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEAyoD,6BAA6B,GAAG;IAC9B,IAAI,IAAI,CAACvjC,GAAG,IAAa,EAAE;MACzB,MAAMo/B,UAAU,GAAG,IAAI,CAACoE,mCAAmC,CAAC,MAC1D,IAAI,CAAClC,WAAW,EAAE,CACnB;MACD,IACE,IAAI,CAACx/C,KAAK,CAACsY,iCAAiC,IAC5C,CAAC,IAAI,CAACoD,KAAK,IAAa,EACxB;QACA,OAAO4hC,UAAU;MACnB;IACF;EACF;EAEAgE,2BAA2B,GAAa;IACtC,MAAMK,cAAc,GAClB/0C,qBAAqB,CAAC,IAAI,CAAC5M,KAAK,CAAC1U,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAW;IACnE,OAAO2oC,cAAc,GACjB,IAAI,CAACP,mBAAmB,EAAE,GAC1B,IAAI,CAACn6B,YAAY,KAAW,GAC5B,IAAI,CAACu6B,gBAAgB,EAAE,GACvB,IAAI,CAACf,gCAAgC,CAAC,MACpC,IAAI,CAACU,wBAAwB,EAAE,CAChC;EACP;EAEAS,8BAA8B,CAC5Bl2D,IAA0C,EAC1Cm2D,oBAAoC,EACpCR,QAAmB,EACT;IACV,MAAMroD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAwC;IACnE,MAAMqkD,kBAAkB,GAAG,IAAI,CAAC5jC,GAAG,CAACmjC,QAAQ,CAAC;IAC7C,MAAM7/C,KAAK,GAAG,EAAE;IAChB,GAAG;MACDA,KAAK,CAAC5E,IAAI,CAACilD,oBAAoB,EAAE,CAAC;IACpC,CAAC,QAAQ,IAAI,CAAC3jC,GAAG,CAACmjC,QAAQ,CAAC;IAC3B,IAAI7/C,KAAK,CAACpZ,MAAM,KAAK,CAAC,IAAI,CAAC05D,kBAAkB,EAAE;MAC7C,OAAOtgD,KAAK,CAAC,CAAC,CAAC;IACjB;IACAxI,IAAI,CAACwI,KAAK,GAAGA,KAAK;IAClB,OAAO,IAAI,CAAC7D,UAAU,CAAC3E,IAAI,EAAEtN,IAAI,CAAC;EACpC;EAEAq2D,+BAA+B,GAAa;IAC1C,OAAO,IAAI,CAACH,8BAA8B,CACxC,oBAAoB,EACpB,IAAI,CAACN,2BAA2B,CAAC5G,IAAI,CAAC,IAAI,CAAC,EAE5C;EACH;EAEAsH,wBAAwB,GAAG;IACzB,OAAO,IAAI,CAACJ,8BAA8B,CACxC,aAAa,EACb,IAAI,CAACG,+BAA+B,CAACrH,IAAI,CAAC,IAAI,CAAC,EAEhD;EACH;EAEAuH,uBAAuB,GAAG;IACxB,IAAI,IAAI,CAACvmC,KAAK,IAAO,EAAE;MACrB,OAAO,IAAI;IACb;IACA,OACE,IAAI,CAACA,KAAK,CAAW,OACrB,IAAI,CAAC6iC,WAAW,CAAC,IAAI,CAAC2D,oCAAoC,CAACxH,IAAI,CAAC,IAAI,CAAC,CAAC;EAE1E;EAEAyH,oBAAoB,GAAY;IAC9B,IAAIp2C,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAI,IAAI,CAACowB,KAAK,IAAU,EAAE;MAC9D,IAAI,CAAC1M,IAAI,EAAE;MACX,OAAO,IAAI;IACb;IAEA,IAAI,IAAI,CAAC0M,KAAK,GAAW,EAAE;MAEzB,MAAM;QAAE9D;OAAQ,GAAG,IAAI,CAAC5X,KAAK;MAC7B,MAAMoiD,kBAAkB,GAAGxqC,MAAM,CAACxvB,MAAM;MACxC,IAAI;QACF,IAAI,CAACi6D,eAAe,CAAY,OAAI,CAAC;QACrC,OAAOzqC,MAAM,CAACxvB,MAAM,KAAKg6D,kBAAkB;MAC7C,CAAC,CAAC,OAAMnoD;QACN,OAAO,KAAK;MACd;IACF;IAEA,IAAI,IAAI,CAACyhB,KAAK,GAAa,EAAE;MAC3B,IAAI,CAAC1M,IAAI,EAAE;MAEX,MAAM;QAAE4I;OAAQ,GAAG,IAAI,CAAC5X,KAAK;MAC7B,MAAMoiD,kBAAkB,GAAGxqC,MAAM,CAACxvB,MAAM;MACxC,IAAI;QACF,KAAK,CAAC81D,gBAAgB,CAGpB,WAAI,CACL;QACD,OAAOtmC,MAAM,CAACxvB,MAAM,KAAKg6D,kBAAkB;MAC7C,CAAC,CAAC,OAAME;QACN,OAAO,KAAK;MACd;IACF;IAEA,OAAO,KAAK;EACd;EAEAJ,oCAAoC,GAAY;IAC9C,IAAI,CAAClzC,IAAI,EAAE;IACX,IAAI,IAAI,CAAC0M,KAAK,IAAW,IAAI,IAAI,CAACA,KAAK,IAAa,EAAE;MAGpD,OAAO,IAAI;IACb;IACA,IAAI,IAAI,CAACymC,oBAAoB,EAAE,EAAE;MAC/B,IACE,IAAI,CAACzmC,KAAK,IAAU,IACpB,IAAI,CAACA,KAAK,IAAU,IACpB,IAAI,CAACA,KAAK,CAAa,OACvB,IAAI,CAACA,KAAK,IAAO,EACjB;QAKA,OAAO,IAAI;MACb;MACA,IAAI,IAAI,CAACA,KAAK,IAAW,EAAE;QACzB,IAAI,CAAC1M,IAAI,EAAE;QACX,IAAI,IAAI,CAAC0M,KAAK,IAAU,EAAE;UAExB,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK;EACd;EAEAuiC,oCAAoC,CAClCN,WAAsB,EACF;IACpB,OAAO,IAAI,CAAC4E,QAAQ,CAAC,MAAM;MACzB,MAAMC,CAAC,GAAG,IAAI,CAAC/kD,SAAS,EAAsB;MAC9C,IAAI,CAACsqB,MAAM,CAAC41B,WAAW,CAAC;MAExB,MAAM3kD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;MAEhD,MAAMo/C,OAAO,GAAG,CAAC,CAAC,IAAI,CAACpC,UAAU,CAC/B,IAAI,CAACgI,2BAA2B,CAAC/H,IAAI,CAAC,IAAI,CAAC,CAC5C;MAED,IAAImC,OAAO,IAAI,IAAI,CAACnhC,KAAK,IAAU,EAAE;QAGnC,IAAIgnC,iBAAiB,GAAG,IAAI,CAAC5B,kCAAkC,EAAE;QAGjE,IAAI4B,iBAAiB,CAACp3D,IAAI,KAAK,YAAY,EAAE;UAC3C0N,IAAI,CAAC2jD,aAAa,GAAG+F,iBAAiB;UACtC1pD,IAAI,CAAC6jD,OAAO,GAAG,IAAI;UAClB7jD,IAAI,CAAuBk4B,cAAc,GAAG,IAAI;UACjDwxB,iBAAiB,GAAG,IAAI,CAAC/kD,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;QAC9D,CAAC,MAAM;UACL,IAAI,CAAC8xB,0BAA0B,CAAC43B,iBAAiB,EAAE1pD,IAAI,CAAC;UACxD0pD,iBAAiB,CAAC7F,OAAO,GAAG,IAAI;QAClC;QACA2F,CAAC,CAACtxB,cAAc,GAAGwxB,iBAAiB;QACpC,OAAO,IAAI,CAAC/kD,UAAU,CAAC6kD,CAAC,EAAE,kBAAkB,CAAC;MAC/C;MAEA,MAAMG,qBAAqB,GACzB,IAAI,CAACzI,cAAc,EAAE,IACrB,IAAI,CAACO,UAAU,CAAC,IAAI,CAACmI,0BAA0B,CAAClI,IAAI,CAAC,IAAI,CAAC,CAAC;MAE7D,IAAI,CAACiI,qBAAqB,EAAE;QAC1B,IAAI,CAAC9F,OAAO,EAAE;UAEZ,OAAO,IAAI,CAACD,qBAAqB,CAAgB,KAAK,EAAE4F,CAAC,CAAC;QAC5D;QAGAxpD,IAAI,CAAC2jD,aAAa,GAAG,IAAI,CAACjsB,eAAe,EAAE;QAC3C13B,IAAI,CAAC6jD,OAAO,GAAGA,OAAO;QACrB7jD,IAAI,CAAuBk4B,cAAc,GAAG,IAAI;QACjDsxB,CAAC,CAACtxB,cAAc,GAAG,IAAI,CAACvzB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;QAC3D,OAAO,IAAI,CAAC2E,UAAU,CAAC6kD,CAAC,EAAE,kBAAkB,CAAC;MAC/C;MAGA,MAAMl3D,IAAI,GAAG,IAAI,CAACsxD,qBAAqB,CAAgB,KAAK,CAAC;MAC7D5jD,IAAI,CAAC2jD,aAAa,GAAGgG,qBAAqB;MAC1C3pD,IAAI,CAACk4B,cAAc,GAAG5lC,IAAI;MAC1B0N,IAAI,CAAC6jD,OAAO,GAAGA,OAAO;MACtB2F,CAAC,CAACtxB,cAAc,GAAG,IAAI,CAACvzB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;MAC3D,OAAO,IAAI,CAAC2E,UAAU,CAAC6kD,CAAC,EAAE,kBAAkB,CAAC;IAC/C,CAAC,CAAC;EACJ;EAEAK,uCAAuC,GAG9B;IACP,OAAO,IAAI,CAACnnC,KAAK,CAAU,MACvB,IAAI,CAACuiC,oCAAoC,CAAU,MACnD7oC,SAAS;EACf;EAEAqpC,wBAAwB,GAA0C;IAChE,OAAO,IAAI,CAAC/iC,KAAK,CAAU,MAAG,IAAI,CAACkhC,qBAAqB,EAAE,GAAGxnC,SAAS;EACxE;EAEAqqC,cAAc,GAAgC;IAC5C,OAAO,IAAI,CAAClC,kBAAkB,CAAU;EAC1C;EAEAqF,0BAA0B,GAAoC;IAC5D,MAAM3lD,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IACjC,IAAI,IAAI,CAACzJ,YAAY,CAAQ,QAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAC9D,IAAI,CAAC1Y,IAAI,EAAE;MACX,OAAO/R,EAAE;IACX;EACF;EAEAwlD,2BAA2B,GAAY;IACrC,IAAI,IAAI,CAACziD,KAAK,CAAC1U,IAAI,QAAgB,EAAE;MACnC,OAAO,KAAK;IACd;IACA,MAAM0tB,WAAW,GAAG,IAAI,CAAChZ,KAAK,CAACgZ,WAAW;IAC1C,IAAI,CAAChK,IAAI,EAAE;IACX,IAAI,CAACjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAI,CAAC,IAAI,CAACowB,KAAK,IAAU,EAAE;MAChE,OAAO,KAAK;IACd;IAEA,IAAI1C,WAAW,EAAE;MACf,IAAI,CAAC9Z,KAAK,CAACzG,MAAM,CAAChJ,0BAA0B,EAAE;QAC5C0P,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC,eAAe;QAC9BvQ,YAAY,EAAE;MAChB,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI;EACb;EAEAktD,qBAAqB,GAGC;IAAA,IAFpBkG,QAAQ,uEAAG,IAAI;IAAA,IACfN,CAA6B,uEAAG,IAAI,CAAC/kD,SAAS,EAAsB;IAEpE,IAAI,CAAC8kD,QAAQ,CAAC,MAAM;MAClB,IAAIO,QAAQ,EAAE,IAAI,CAAC/6B,MAAM,CAAU;MACnCy6B,CAAC,CAACtxB,cAAc,GAAG,IAAI,CAACsuB,WAAW,EAAE;IACvC,CAAC,CAAC;IACF,OAAO,IAAI,CAAC7hD,UAAU,CAAC6kD,CAAC,EAAE,kBAAkB,CAAC;EAC/C;EAGAhD,WAAW,GAAa;IAEtB7J,MAAM,CAAC,IAAI,CAAC31C,KAAK,CAACiY,MAAM,CAAC;IACzB,MAAM3sB,IAAI,GAAG,IAAI,CAACy3D,yBAAyB,EAAE;IAE7C,IACE,IAAI,CAAC/iD,KAAK,CAACsY,iCAAiC,IAC5C,IAAI,CAACoP,qBAAqB,EAAE,IAC5B,CAAC,IAAI,CAACxJ,GAAG,IAAa,EACtB;MACA,OAAO5yB,IAAI;IACb;IACA,MAAM0N,IAAI,GAAG,IAAI,CAAC8H,eAAe,CAAsBxV,IAAI,CAAC;IAC5D0N,IAAI,CAACgnD,SAAS,GAAG10D,IAAI;IAErB0N,IAAI,CAACgqD,WAAW,GAAG,IAAI,CAACtB,mCAAmC,CAAC,MAC1D,IAAI,CAACqB,yBAAyB,EAAE,CACjC;IAED,IAAI,CAACh7B,MAAM,CAAa;IACxB/uB,IAAI,CAACiqD,QAAQ,GAAG,IAAI,CAACxC,gCAAgC,CAAC,MACpD,IAAI,CAACjB,WAAW,EAAE,CACnB;IAED,IAAI,CAACz3B,MAAM,CAAU;IACrB/uB,IAAI,CAACkqD,SAAS,GAAG,IAAI,CAACzC,gCAAgC,CAAC,MACrD,IAAI,CAACjB,WAAW,EAAE,CACnB;IAED,OAAO,IAAI,CAAC7hD,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAmqD,8BAA8B,GAAY;IACxC,OACE,IAAI,CAACl8B,YAAY,CAAc,QAAI,IAAI,CAAC5I,SAAS,EAAE,CAAC/yB,IAAI,KAAY;EAExE;EAEAy3D,yBAAyB,GAAa;IACpC,IAAI,IAAI,CAACd,uBAAuB,EAAE,EAAE;MAClC,OAAO,IAAI,CAAC1B,gCAAgC,CAAC,gBAAgB,CAAC;IAChE;IACA,IAAI,IAAI,CAAC7kC,KAAK,IAAS,EAAE;MAEvB,OAAO,IAAI,CAAC6kC,gCAAgC,CAAC,mBAAmB,CAAC;IACnE,CAAC,MAAM,IAAI,IAAI,CAAC4C,8BAA8B,EAAE,EAAE;MAEhD,OAAO,IAAI,CAAC5C,gCAAgC,CAC1C,mBAAmB,EACJ,IAAI,CACpB;IACH;IACA,OAAO,IAAI,CAACyB,wBAAwB,EAAE;EACxC;EAEAoB,oBAAoB,GAAsB;IACxC,IAAI,IAAI,CAACtmD,eAAe,CAAC,YAAY,EAAE,0BAA0B,CAAC,EAAE;MAClE,IAAI,CAACoC,KAAK,CAAC02C,QAAQ,CAACgD,qBAAqB,EAAE;QAAEz5C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IACzE;IAEA,MAAMrF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAChDzE,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACqxB,QAAQ,CAAC,MAAM;MACxC,IAAI,CAACvzC,IAAI,EAAE;MACX,OAAO,IAAI,CAAC0M,KAAK,IAAW,GACxB,IAAI,CAAC6gC,oBAAoB,EAAE,GAC3B,IAAI,CAACiD,WAAW,EAAE;IACxB,CAAC,CAAC;IACF,IAAI,CAACz3B,MAAM,CAAO;IAClB/uB,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACqmD,eAAe,EAAE;IACxC,OAAO,IAAI,CAACtjD,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAqqD,qBAAqB,CACnBvsD,KAA+B,EACS;IACxC,MAAMwsD,gBAAgB,GAAG,IAAI,CAACtjD,KAAK,CAAC3B,QAAQ;IAE5C,MAAMklD,aAAa,GAAG,IAAI,CAAC9H,oBAAoB,CAC7C,uBAAuB,EACvB,MAAM;MACJ,MAAMziD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmC;MAC9DzE,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACwhD,iBAAiB,EAAE;MAC1C,IAAI,IAAI,CAAC1gC,KAAK,IAAO,EAAE;QACrB1iB,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC0/C,oBAAoB,EAAE;MACnD;MAEA,OAAO,IAAI,CAAC1+C,UAAU,CAAC3E,IAAI,EAAE,+BAA+B,CAAC;IAC/D,CAAC,CACF;IAED,IAAI,CAACuqD,aAAa,CAACn7D,MAAM,EAAE;MACzB,IAAI,CAAC8W,KAAK,CAAC02C,QAAQ,CAACkB,uBAAuB,EAAE;QAC3C33C,EAAE,EAAEmkD,gBAAgB;QACpBxsD;MACF,CAAC,CAAC;IACJ;IAEA,OAAOysD,aAAa;EACtB;EAEAC,2BAA2B,CACzBxqD,IAAsC,EAIO;IAAA,IAH7ClQ,UAEC,uEAAG,EAAE;IAEN,IAAI,IAAI,CAAC6+B,qBAAqB,EAAE,EAAE,OAAO,IAAI;IAC7C,IAAI,CAACH,gBAAgB,CAAe;IACpC,IAAI1+B,UAAU,CAAC6qC,OAAO,EAAE36B,IAAI,CAAC26B,OAAO,GAAG,IAAI;IAC3C,IAAI5nB,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;MACtC0N,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;MAChC,IAAI,CAAC+yB,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAE8T,iBAAiB,CAAC;IAClD,CAAC,MAAM;MACL/X,IAAI,CAACiE,EAAE,GAAG,IAAI;MACd,IAAI,CAACiC,KAAK,CAAC02C,QAAQ,CAACsC,oBAAoB,EAAE;QAAE/4C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IACxE;IAEArF,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,CACjD,IAAI,CAACP,qBAAqB,CAACvC,IAAI,CAAC,IAAI,CAAC,CACtC;IACD,IAAI,IAAI,CAACx8B,GAAG,IAAa,EAAE;MACzBllB,IAAI,CAAC05B,OAAO,GAAG,IAAI,CAAC2wB,qBAAqB,CAAC,SAAS,CAAC;IACtD;IACA,MAAMlnD,IAAI,GAAG,IAAI,CAACsB,SAAS,EAAqB;IAChDtB,IAAI,CAACA,IAAI,GAAG,IAAI,CAAComD,QAAQ,CAAC,IAAI,CAACrD,wBAAwB,CAACxE,IAAI,CAAC,IAAI,CAAC,CAAC;IACnE1hD,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACwB,UAAU,CAACxB,IAAI,EAAE,iBAAiB,CAAC;IACpD,OAAO,IAAI,CAACwB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEA0qD,2BAA2B,CACzB1qD,IAA8B,EACJ;IAC1BA,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAChC,IAAI,CAAC+yB,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAE+T,YAAY,CAAC;IAE3ChY,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACqxB,QAAQ,CAAC,MAAM;MACxCvpD,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,CACjD,IAAI,CAACP,qBAAqB,CAACvC,IAAI,CAAC,IAAI,CAAC,CACtC;MAED,IAAI,CAAC3yB,MAAM,CAAO;MAElB,IACE,IAAI,CAACd,YAAY,KAAe,IAChC,IAAI,CAAC5I,SAAS,EAAE,CAAC/yB,IAAI,OAAW,EAChC;QACA,MAAM0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;QAC9C,IAAI,CAACuR,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;MACpD;MAEA,OAAO,IAAI,CAACwmD,WAAW,EAAE;IAC3B,CAAC,CAAC;IAEF,IAAI,CAAC33B,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;EACxD;EAEA2qD,aAAa,CAAIC,EAAW,EAAK;IAC/B,MAAMC,UAAU,GAAG,IAAI,CAAC7jD,KAAK,CAACmN,OAAO;IACrC,IAAI,CAACnN,KAAK,CAACmN,OAAO,GAAG,CAAC02C,UAAU,CAAC,CAAC,CAAC,CAAC;IACpC,IAAI;MACF,OAAOD,EAAE,EAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC5jD,KAAK,CAACmN,OAAO,GAAG02C,UAAU;IACjC;EACF;EAOAtB,QAAQ,CAAIqB,EAAW,EAAK;IAC1B,MAAM5zB,SAAS,GAAG,IAAI,CAAChwB,KAAK,CAACiY,MAAM;IACnC,IAAI,CAACjY,KAAK,CAACiY,MAAM,GAAG,IAAI;IACxB,IAAI;MACF,OAAO2rC,EAAE,EAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC5jD,KAAK,CAACiY,MAAM,GAAG+X,SAAS;IAC/B;EACF;EAEA0xB,mCAAmC,CAAIkC,EAAW,EAAK;IACrD,MAAME,oCAAoC,GACxC,IAAI,CAAC9jD,KAAK,CAACsY,iCAAiC;IAC9C,IAAI,CAACtY,KAAK,CAACsY,iCAAiC,GAAG,IAAI;IACnD,IAAI;MACF,OAAOsrC,EAAE,EAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC5jD,KAAK,CAACsY,iCAAiC,GAC1CwrC,oCAAoC;IACxC;EACF;EAEArD,gCAAgC,CAAImD,EAAW,EAAK;IAClD,MAAME,oCAAoC,GACxC,IAAI,CAAC9jD,KAAK,CAACsY,iCAAiC;IAC9C,IAAI,CAACtY,KAAK,CAACsY,iCAAiC,GAAG,KAAK;IACpD,IAAI;MACF,OAAOsrC,EAAE,EAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC5jD,KAAK,CAACsY,iCAAiC,GAC1CwrC,oCAAoC;IACxC;EACF;EAEAvG,kBAAkB,CAACzmD,KAAgB,EAA+B;IAChE,OAAO,CAAC,IAAI,CAAC4kB,KAAK,CAAC5kB,KAAK,CAAC,GAAGse,SAAS,GAAG,IAAI,CAAC2uC,mBAAmB,EAAE;EACpE;EAEA1E,qBAAqB,CAACvoD,KAAgB,EAAY;IAChD,OAAO,IAAI,CAACktD,iBAAiB,CAAC,MAAM,IAAI,CAACj8B,MAAM,CAACjxB,KAAK,CAAC,CAAC;EACzD;EAEAitD,mBAAmB,GAAa;IAC9B,OAAO,IAAI,CAACC,iBAAiB,CAAC,MAAM,IAAI,CAACh1C,IAAI,EAAE,CAAC;EAClD;EAEAg1C,iBAAiB,CAACJ,EAAc,EAAY;IAC1C,OAAO,IAAI,CAACrB,QAAQ,CAAC,MAAM;MACzBqB,EAAE,EAAE;MACJ,OAAO,IAAI,CAACpE,WAAW,EAAE;IAC3B,CAAC,CAAC;EACJ;EAEAyE,iBAAiB,GAAmB;IAClC,MAAMjrD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAkB;IAE7CzE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACye,KAAK,CAAW,OAC3B,KAAK,CAACphB,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC,GAC1C,IAAI,CAACgoC,eAAe,CAAe,IAAI,CAAC;IAC5C,IAAI,IAAI,CAACxS,GAAG,IAAO,EAAE;MACnBllB,IAAI,CAACkrD,WAAW,GAAG,KAAK,CAAClrB,uBAAuB,EAAE;IACpD;IACA,OAAO,IAAI,CAACr7B,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAEAmrD,sBAAsB,CACpBnrD,IAAiC,EAKZ;IAAA,IAJrBlQ,UAGC,uEAAG,EAAE;IAEN,IAAIA,UAAU,CAACimC,KAAK,EAAE/1B,IAAI,CAAC+1B,KAAK,GAAG,IAAI;IACvC,IAAIjmC,UAAU,CAAC6qC,OAAO,EAAE36B,IAAI,CAAC26B,OAAO,GAAG,IAAI;IAC3C,IAAI,CAACnM,gBAAgB,CAAU;IAC/BxuB,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAChC,IAAI,CAAC+yB,eAAe,CAClBzqD,IAAI,CAACiE,EAAE,EACPjE,IAAI,CAAC+1B,KAAK,GAAG1d,kBAAkB,GAAGJ,YAAY,CAC/C;IAED,IAAI,CAAC8W,MAAM,CAAW;IACtB/uB,IAAI,CAAC+nC,OAAO,GAAG,IAAI,CAAC0a,oBAAoB,CACtC,aAAa,EACb,IAAI,CAACwI,iBAAiB,CAACvJ,IAAI,CAAC,IAAI,CAAC,CAClC;IACD,IAAI,CAAC3yB,MAAM,CAAW;IACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAorD,kBAAkB,GAAoB;IACpC,MAAMprD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAmB;IAC9C,IAAI,CAACgW,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;IAE7B,IAAI,CAAC2Y,MAAM,CAAW;IAEtB,KAAK,CAACs8B,2BAA2B,CAC9BrrD,IAAI,CAACmD,IAAI,GAAG,EAAE,EACEiZ,SAAS,EACX,IAAI,EAEpB;IACD,IAAI,CAAC3B,KAAK,CAACD,IAAI,EAAE;IACjB,OAAO,IAAI,CAAC7V,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAsrD,mCAAmC,CACjCtrD,IAAmC,EAEZ;IAAA,IADvBurD,MAAe,uEAAG,KAAK;IAEvBvrD,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAEhC,IAAI,CAAC6zB,MAAM,EAAE;MACX,IAAI,CAACd,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAEqU,iBAAiB,CAAC;IAClD;IAEA,IAAI,IAAI,CAAC4M,GAAG,IAAQ,EAAE;MACpB,MAAMsmC,KAAK,GAAG,IAAI,CAAC/mD,SAAS,EAAyB;MACrD,IAAI,CAAC6mD,mCAAmC,CAACE,KAAK,EAAE,IAAI,CAAC;MAErDxrD,IAAI,CAACmD,IAAI,GAAGqoD,KAAK;IACnB,CAAC,MAAM;MACL,IAAI,CAAC/wC,KAAK,CAACF,KAAK,CAAC1D,eAAe,CAAC;MACjC,IAAI,CAAC2Z,SAAS,CAACjW,KAAK,CAAC2S,KAAK,CAAC;MAC3BltB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACioD,kBAAkB,EAAE;MACrC,IAAI,CAAC56B,SAAS,CAAChW,IAAI,EAAE;MACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACnB;IACA,OAAO,IAAI,CAAC7V,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEAyrD,uCAAuC,CACrCzrD,IAA2B,EACJ;IACvB,IAAI,IAAI,CAACiuB,YAAY,KAAY,EAAE;MACjCjuB,IAAI,CAAC0rD,MAAM,GAAG,IAAI;MAClB1rD,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAClC,CAAC,MAAM,IAAI,IAAI,CAAChV,KAAK,KAAW,EAAE;MAChC1iB,IAAI,CAACiE,EAAE,GAAG,KAAK,CAAC3C,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;IACtD,CAAC,MAAM;MACL,IAAI,CAACwH,UAAU,EAAE;IACnB;IACA,IAAI,IAAI,CAACwrB,KAAK,GAAW,EAAE;MACzB,IAAI,CAACjI,KAAK,CAACF,KAAK,CAAC1D,eAAe,CAAC;MACjC,IAAI,CAAC2Z,SAAS,CAACjW,KAAK,CAAC2S,KAAK,CAAC;MAC3BltB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACioD,kBAAkB,EAAE;MACrC,IAAI,CAAC56B,SAAS,CAAChW,IAAI,EAAE;MACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACnB,CAAC,MAAM;MACL,IAAI,CAACqU,SAAS,EAAE;IAClB;IAEA,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAEA2rD,8BAA8B,CAC5B3rD,IAAyC,EACzC4rD,QAAkB,EACW;IAC7B5rD,IAAI,CAAC4rD,QAAQ,GAAGA,QAAQ,IAAI,KAAK;IACjC5rD,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;IAChC,IAAI,CAAC+yB,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAEyT,oBAAoB,CAAC;IACnD,IAAI,CAACqX,MAAM,CAAO;IAClB,MAAM88B,eAAe,GAAG,IAAI,CAACC,sBAAsB,EAAE;IACrD,IACE9rD,IAAI,CAAC41B,UAAU,KAAK,MAAM,IAC1Bi2B,eAAe,CAACv5D,IAAI,KAAK,2BAA2B,EACpD;MACA,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAACsB,wBAAwB,EAAE;QAC5C/3C,EAAE,EAAE0lD;MACN,CAAC,CAAC;IACJ;IACA7rD,IAAI,CAAC6rD,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACh9B,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,2BAA2B,CAAC;EAC3D;EAEA+rD,2BAA2B,GAAY;IACrC,OACE,IAAI,CAAC99B,YAAY,KAAa,IAC9B,IAAI,CAACtI,iBAAiB,EAAE,KAA8B;EAE1D;EAEAmmC,sBAAsB,GAAwB;IAC5C,OAAO,IAAI,CAACC,2BAA2B,EAAE,GACrC,IAAI,CAACC,8BAA8B,EAAE,GACrC,IAAI,CAAC5I,iBAAiB,CAA0B,KAAK,CAAC;EAC5D;EAEA4I,8BAA8B,GAAgC;IAC5D,MAAMhsD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA+B;IAC1D,IAAI,CAAC+pB,gBAAgB,CAAa;IAClC,IAAI,CAACO,MAAM,CAAW;IACtB,IAAI,CAAC,IAAI,CAACrM,KAAK,KAAW,EAAE;MAC1B,MAAM,IAAI,CAACxrB,UAAU,EAAE;IACzB;IAEA8I,IAAI,CAAC4B,UAAU,GAAG,KAAK,CAACi3B,aAAa,EAAqB;IAC1D,IAAI,CAAC9J,MAAM,CAAW;IACtB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,2BAA2B,CAAC;EAC3D;EAIAulD,WAAW,CAAI0G,CAAU,EAAK;IAC5B,MAAMjlD,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;IAChC,MAAMmjB,GAAG,GAAGkqC,CAAC,EAAE;IACf,IAAI,CAACjlD,KAAK,GAAGA,KAAK;IAClB,OAAO+a,GAAG;EACZ;EAEAmqC,kBAAkB,CAChBD,CAAU,EACY;IACtB,MAAMzrB,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAC1BiW,KAAK,IAEHgnB,CAAC,EAAE,IAAIhnB,KAAK,EAAE,CACjB;IAED,IAAIzE,MAAM,CAAClR,OAAO,IAAI,CAACkR,MAAM,CAACxgC,IAAI,EAAE,OAAOoc,SAAS;IACpD,IAAIokB,MAAM,CAACnW,KAAK,EAAE,IAAI,CAACrjB,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;IAE/C,OAAOoR,MAAM,CAACxgC,IAAI;EACpB;EAEAyhD,UAAU,CAAIwK,CAA8B,EAAiB;IAC3D,MAAMjlD,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;IAChC,MAAM4hC,MAAM,GAAGyrB,CAAC,EAAE;IAClB,IAAIzrB,MAAM,KAAKpkB,SAAS,IAAIokB,MAAM,KAAK,KAAK,EAAE;MAC5C,OAAOA,MAAM;IACf,CAAC,MAAM;MACL,IAAI,CAACx5B,KAAK,GAAGA,KAAK;MAClB,OAAOoV,SAAS;IAClB;EACF;EAEA+vC,iBAAiB,CAACC,IAAS,EAAoC;IAC7D,IAAI,IAAI,CAACx9B,gBAAgB,EAAE,EAAE;MAC3B;IACF;IACA,IAAIy9B,SAAS,GAAG,IAAI,CAACrlD,KAAK,CAAC1U,IAAI;IAC/B,IAAII,IAAkB;IAEtB,IAAI,IAAI,CAACu7B,YAAY,IAAS,EAAE;MAC9Bo+B,SAAS,GAAU;MACnB35D,IAAI,GAAG,KAAc;IACvB;IAGA,OAAO,IAAI,CAAC45D,kBAAkB,CAAC,MAAM;MACnC,IAAID,SAAS,OAAiB,EAAE;QAC9BD,IAAI,CAACzxB,OAAO,GAAG,IAAI;QACnB,OAAO,KAAK,CAAC4xB,sBAAsB,CACjCH,IAAI,EACQ,KAAK,EACU,KAAK,CACjC;MACH;MAEA,IAAIC,SAAS,OAAc,EAAE;QAG3BD,IAAI,CAACzxB,OAAO,GAAG,IAAI;QACnB,OAAO,IAAI,CAAC6xB,UAAU,CACpBJ,IAAI,EACc,IAAI,EACL,KAAK,CACvB;MACH;MAEA,IAAIC,SAAS,QAAa,EAAE;QAC1B,OAAO,IAAI,CAAClB,sBAAsB,CAACiB,IAAI,EAAE;UAAEzxB,OAAO,EAAE;QAAK,CAAC,CAAC;MAC7D;MAEA,IAAI0xB,SAAS,QAAe,EAAE;QAC5B,OAAO,IAAI,CAACZ,uCAAuC,CAACW,IAAI,CAAC;MAC3D;MAEA,IAAIC,SAAS,OAAc,IAAIA,SAAS,OAAY,EAAE;QACpD,IAAI,CAAC,IAAI,CAAC3pC,KAAK,CAAW,OAAI,CAAC,IAAI,CAAC4L,qBAAqB,CAAC,MAAM,CAAC,EAAE;UACjE89B,IAAI,CAACzxB,OAAO,GAAG,IAAI;UACnB,OAAO,IAAI,CAAC8xB,iBAAiB,CAACL,IAAI,EAAE15D,IAAI,IAAI,IAAI,CAACsU,KAAK,CAACtX,KAAK,EAAE,IAAI,CAAC;QACrE;QAGA,IAAI,CAACq/B,MAAM,CAAW;QACtB,OAAO,IAAI,CAACo8B,sBAAsB,CAACiB,IAAI,EAAE;UACvCr2B,KAAK,EAAE,IAAI;UACX4E,OAAO,EAAE;QACX,CAAC,CAAC;MACJ;MAEA,IAAI0xB,SAAS,QAAkB,EAAE;QAC/B,MAAM7rB,MAAM,GAAG,IAAI,CAACgqB,2BAA2B,CAAC4B,IAAI,EAAE;UACpDzxB,OAAO,EAAE;QACX,CAAC,CAAC;QACF,IAAI6F,MAAM,EAAE,OAAOA,MAAM;MAC3B;MAEA,IAAIztB,iBAAiB,CAACs5C,SAAS,CAAC,EAAE;QAChC,OAAO,IAAI,CAACK,kBAAkB,CAC5BN,IAAI,EACJ,IAAI,CAACplD,KAAK,CAACtX,KAAK,EACL,IAAI,EACE,IAAI,CACtB;MACH;IACF,CAAC,CAAC;EACJ;EAGAi9D,2BAA2B,GAAqC;IAC9D,OAAO,IAAI,CAACD,kBAAkB,CAC5B,IAAI,CAACjoD,SAAS,EAAE,EAChB,IAAI,CAACuC,KAAK,CAACtX,KAAK,EACL,IAAI,EACE,IAAI,CACtB;EACH;EAEAk9D,0BAA0B,CACxB5sD,IAAmC,EACnCk/B,IAAkB,EAClBp4B,UAAgC,EACE;IAClC,QAAQo4B,IAAI,CAAChnC,IAAI;MACf,KAAK,SAAS;QAAE;UACd,MAAMkP,WAAW,GAAG,IAAI,CAAC+kD,iBAAiB,CAACnsD,IAAI,CAAC;UAChD,IAAIoH,WAAW,EAAE;YACfA,WAAW,CAACuzB,OAAO,GAAG,IAAI;YAC1B,OAAOvzB,WAAW;UACpB;UACA;QACF;MACA,KAAK,QAAQ;QAGX,IAAI,IAAI,CAACsb,KAAK,GAAW,EAAE;UACzB,IAAI,CAACjI,KAAK,CAACF,KAAK,CAAC1D,eAAe,CAAC;UACjC,IAAI,CAAC2Z,SAAS,CAACjW,KAAK,CAAC2S,KAAK,CAAC;UAC3B,MAAM2/B,GAAG,GAAG7sD,IAAI;UAChB6sD,GAAG,CAACnB,MAAM,GAAG,IAAI;UACjBmB,GAAG,CAAC5oD,EAAE,GAAGi7B,IAAI;UACb2tB,GAAG,CAAC1pD,IAAI,GAAG,IAAI,CAACioD,kBAAkB,EAAE;UACpC,IAAI,CAAC3wC,KAAK,CAACD,IAAI,EAAE;UACjB,IAAI,CAACgW,SAAS,CAAChW,IAAI,EAAE;UACrB,OAAO,IAAI,CAAC7V,UAAU,CAACkoD,GAAG,EAAE,qBAAqB,CAAC;QACpD;QACA;MAEF;QACE,OAAO,IAAI,CAACH,kBAAkB,CAC5B1sD,IAAI,EACJk/B,IAAI,CAAChnC,IAAI,EACE,KAAK,EAChB4O,UAAU,CACX;IAAA;EAEP;EAGA4lD,kBAAkB,CAChB1sD,IAAS,EACTtQ,KAAa,EACbsmB,IAAa,EACblP,UAAgC,EACE;IAElC,QAAQpX,KAAK;MACX,KAAK,UAAU;QACb,IACE,IAAI,CAACo9D,qBAAqB,CAAC92C,IAAI,CAAC,KAC/B,IAAI,CAAC0M,KAAK,IAAW,IAAI3P,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,CAAC,EAC7D;UACA,OAAO,IAAI,CAACy6D,0BAA0B,CAAC/sD,IAAI,EAAE8G,UAAU,CAAC;QAC1D;QACA;MAEF,KAAK,QAAQ;QACX,IAAI,IAAI,CAACgmD,qBAAqB,CAAC92C,IAAI,CAAC,EAAE;UACpC,IAAI,IAAI,CAAC0M,KAAK,KAAW,EAAE;YACzB,OAAO,IAAI,CAAC+oC,uCAAuC,CAACzrD,IAAI,CAAC;WAC1D,MAAM,IAAI+S,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;YAC7C,OAAO,IAAI,CAACg5D,mCAAmC,CAACtrD,IAAI,CAAC;UACvD;QACF;QACA;MAEF,KAAK,WAAW;QACd,IACE,IAAI,CAAC8sD,qBAAqB,CAAC92C,IAAI,CAAC,IAChCjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAClC;UACA,OAAO,IAAI,CAACg5D,mCAAmC,CAACtrD,IAAI,CAAC;QACvD;QACA;MAEF,KAAK,MAAM;QACT,IACE,IAAI,CAAC8sD,qBAAqB,CAAC92C,IAAI,CAAC,IAChCjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAClC;UACA,OAAO,IAAI,CAACo4D,2BAA2B,CAAC1qD,IAAI,CAAC;QAC/C;QACA;IAAA;EAEN;EAEA8sD,qBAAqB,CAAC92C,IAAa,EAAE;IACnC,IAAIA,IAAI,EAAE;MACR,IAAI,IAAI,CAAC2Y,qBAAqB,EAAE,EAAE,OAAO,KAAK;MAC9C,IAAI,CAAC3Y,IAAI,EAAE;MACX,OAAO,IAAI;IACb;IACA,OAAO,CAAC,IAAI,CAAC4Y,gBAAgB,EAAE;EACjC;EAEAo+B,mCAAmC,CACjC3nD,QAAkB,EAC4B;IAC9C,IAAI,CAAC,IAAI,CAACqd,KAAK,IAAO,EAAE;MACtB,OAAOtG,SAAS;IAClB;IAEA,MAAM6wC,yBAAyB,GAAG,IAAI,CAACjmD,KAAK,CAACgY,sBAAsB;IACnE,IAAI,CAAChY,KAAK,CAACgY,sBAAsB,GAAG,IAAI;IAExC,MAAM+C,GAAyD,GAC7D,IAAI,CAACmqC,kBAAkB,CAAC,MAAM;MAC5B,MAAMlsD,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAA4BxsB,QAAQ,CAAC;MAClErF,IAAI,CAAC2D,cAAc,GAAG,IAAI,CAAC8gD,qBAAqB,EAAE;MAElD,KAAK,CAAClgB,mBAAmB,CAACvkC,IAAI,CAAC;MAC/BA,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAAC4xB,uCAAuC,EAAE;MAChE,IAAI,CAAC96B,MAAM,CAAU;MACrB,OAAO/uB,IAAI;IACb,CAAC,CAAC;IAEJ,IAAI,CAACgH,KAAK,CAACgY,sBAAsB,GAAGiuC,yBAAyB;IAE7D,IAAI,CAAClrC,GAAG,EAAE;MACR,OAAO3F,SAAS;IAClB;IAEA,OAAO,KAAK,CAACoqB,oBAAoB,CAC/BzkB,GAAG,EAC0B,IAAI,EACrB,IAAI,CACjB;EACH;EAIAmrC,gCAAgC,GAA0C;IACxE,IAAI,IAAI,CAACC,SAAS,EAAE,OAAU,EAAE;MAC9B,OAAO/wC,SAAS;IAClB;IACA,OAAO,IAAI,CAACinC,oBAAoB,EAAE;EACpC;EAEAA,oBAAoB,GAAmC;IACrD,MAAMrjD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAkC;IAC7DzE,IAAI,CAACwC,MAAM,GAAG,IAAI,CAAC+mD,QAAQ,CAAC,MAE1B,IAAI,CAACoB,aAAa,CAAC,MAAM;MACvB,IAAI,CAAC57B,MAAM,CAAO;MAClB,OAAO,IAAI,CAAC0zB,oBAAoB,CAC9B,2BAA2B,EAC3B,IAAI,CAAC+D,WAAW,CAAC9E,IAAI,CAAC,IAAI,CAAC,CAC5B;IACH,CAAC,CAAC,CACH;IACD,IAAI1hD,IAAI,CAACwC,MAAM,CAACpT,MAAM,KAAK,CAAC,EAAE;MAC5B,IAAI,CAAC8W,KAAK,CAAC02C,QAAQ,CAACmB,kBAAkB,EAAE;QAAE53C,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACvD;IACA,IAAI,CAAC+uB,MAAM,CAAO;IAClB,OAAO,IAAI,CAACpqB,UAAU,CAAC3E,IAAI,EAAE,8BAA8B,CAAC;EAC9D;EAEAotD,oBAAoB,GAAY;IAC9B,OAAOv5C,yBAAyB,CAAC,IAAI,CAAC7M,KAAK,CAAC1U,IAAI,CAAC;EACnD;EAMA8sC,wBAAwB,GAAY;IAClC,IAAI,IAAI,CAACguB,oBAAoB,EAAE,EAAE,OAAO,KAAK;IAC7C,OAAO,KAAK,CAAChuB,wBAAwB,EAAE;EACzC;EAEAiuB,uBAAuB,CACrB7oB,cAA0C,EAC1C19B,UAAyB,EACU;IAEnC,MAAMzB,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAEpC,IAAIg9C,aAAiD;IACrD,IAAIsD,QAAQ,GAAG,KAAK;IACpB,IAAI2H,QAAQ,GAAG,KAAK;IACpB,IAAI9oB,cAAc,KAAKpoB,SAAS,EAAE;MAChC,MAAMwlC,QAAsB,GAAG,EAAE;MACjC,IAAI,CAACD,gBAAgB,CAAC;QACpBC,QAAQ;QACRN,gBAAgB,EAAE,CAChB,QAAQ,EACR,SAAS,EACT,WAAW,EACX,UAAU,EACV,UAAU;MAEd,CAAC,CAAC;MACFe,aAAa,GAAGT,QAAQ,CAACS,aAAa;MACtCiL,QAAQ,GAAG1L,QAAQ,CAAC0L,QAAQ;MAC5B3H,QAAQ,GAAG/D,QAAQ,CAAC+D,QAAQ;MAC5B,IACEnhB,cAAc,KAAK,KAAK,KACvB6d,aAAa,IAAIsD,QAAQ,IAAI2H,QAAQ,CAAC,EACvC;QACA,IAAI,CAACpnD,KAAK,CAAC02C,QAAQ,CAAC2D,2BAA2B,EAAE;UAAEp6C,EAAE,EAAEd;QAAS,CAAC,CAAC;MACpE;IACF;IAEA,MAAMw8B,IAAI,GAAG,IAAI,CAACsB,iBAAiB,EAAE;IACrC,IAAI,CAACD,4BAA4B,CAACrB,IAAI,CAAC;IACvC,MAAM0rB,GAAG,GAAG,IAAI,CAACpqB,iBAAiB,CAACtB,IAAI,CAACnjC,GAAG,CAACnQ,KAAK,EAAEszC,IAAI,CAAC;IACxD,IAAIwgB,aAAa,IAAIsD,QAAQ,IAAI2H,QAAQ,EAAE;MACzC,MAAME,EAAE,GAAG,IAAI,CAAC37B,WAAW,CAAwBxsB,QAAQ,CAAC;MAC5D,IAAIyB,UAAU,CAAC1X,MAAM,EAAE;QACrBo+D,EAAE,CAAC1mD,UAAU,GAAGA,UAAU;MAC5B;MACA,IAAIu7C,aAAa,EAAEmL,EAAE,CAACnL,aAAa,GAAGA,aAAa;MACnD,IAAIsD,QAAQ,EAAE6H,EAAE,CAAC7H,QAAQ,GAAGA,QAAQ;MACpC,IAAI2H,QAAQ,EAAEE,EAAE,CAACF,QAAQ,GAAGA,QAAQ;MACpC,IAAIC,GAAG,CAACj7D,IAAI,KAAK,YAAY,IAAIi7D,GAAG,CAACj7D,IAAI,KAAK,mBAAmB,EAAE;QACjE,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAACgE,gCAAgC,EAAE;UAAEz6C,EAAE,EAAEqnD;QAAG,CAAC,CAAC;MACnE;MACAA,EAAE,CAACC,SAAS,GAAGF,GAAgD;MAC/D,OAAO,IAAI,CAAC5oD,UAAU,CAAC6oD,EAAE,EAAE,qBAAqB,CAAC;IACnD;IAEA,IAAI1mD,UAAU,CAAC1X,MAAM,EAAE;MACrByyC,IAAI,CAAC/6B,UAAU,GAAGA,UAAU;IAC9B;IAEA,OAAOymD,GAAG;EACZ;EAEAG,iBAAiB,CAAC1tD,IAAuC,EAAE;IACzD,OACGA,IAAI,CAAC1N,IAAI,KAAK,qBAAqB,IAClC,KAAK,CAACo7D,iBAAiB,CAAC1tD,IAAI,CAACytD,SAAS,CAAC,IACzC,KAAK,CAACC,iBAAiB,CAAC1tD,IAAI,CAAC;EAEjC;EAEA8+B,0BAA0B,CAMxB9+B,IAAe,EAAE1N,IAAe,EAAgC;IAAA,IAA9B+R,QAAiB,uEAAG,KAAK;IAC3D,IAAI,IAAI,CAACqe,KAAK,IAAU,EAAE;MACxB1iB,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAACgtB,oCAAoC,CAAU;IACvE;IAEA,MAAM0I,YAAY,GAChBr7D,IAAI,KAAK,qBAAqB,GAC1B,mBAAmB,GACnBA,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,oBAAoB,GACvD,iBAAiB,GACjB8pB,SAAS;IACf,IAAIuxC,YAAY,IAAI,CAAC,IAAI,CAACjrC,KAAK,CAAW,MAAI,IAAI,CAACkM,gBAAgB,EAAE,EAAE;MACrE,OAAO,IAAI,CAACjqB,UAAU,CAAC3E,IAAI,EAAE2tD,YAAY,CAAC;IAC5C;IACA,IAAIA,YAAY,KAAK,mBAAmB,IAAI,IAAI,CAAC3mD,KAAK,CAACoY,gBAAgB,EAAE;MACvE,IAAI,CAAClZ,KAAK,CAAC02C,QAAQ,CAACc,gCAAgC,EAAE;QAAEv3C,EAAE,EAAEnG;MAAK,CAAC,CAAC;MACnE,IAAKA,IAAI,CAAmC26B,OAAO,EAAE;QACnD,OAAO,KAAK,CAACmE,0BAA0B,CAAC9+B,IAAI,EAAE2tD,YAAY,EAAEtpD,QAAQ,CAAC;MACvE;IACF;IAEA,OAAO,KAAK,CAACy6B,0BAA0B,CAAC9+B,IAAI,EAAE1N,IAAI,EAAE+R,QAAQ,CAAC;EAC/D;EAEAupD,2BAA2B,CAAC5tD,IAAgB,EAAQ;IAClD,IAAI,CAACA,IAAI,CAACmD,IAAI,IAAInD,IAAI,CAACiE,EAAE,EAAE;MAGzB,IAAI,CAACwmD,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAEiU,eAAe,CAAC;IAChD,CAAC,MAAM;MACL,KAAK,CAAC01C,2BAA2B,CAAC5tD,IAAI,CAAC;IACzC;EACF;EAEA6tD,0BAA0B,CAACC,KAA6C,EAAE;IACxEA,KAAK,CAAC9nC,OAAO,CAAChmB,IAAI,IAAI;MACpB,IAAI,KAAI,IAAJA,oBAAI,CAAE1N,IAAI,MAAK,sBAAsB,EAAE;QACzC,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAAC6D,wBAAwB,EAAE;UAC5Ct6C,EAAE,EAAEnG,IAAI,CAACk4B;QACX,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;EAEA6J,gBAAgB,CACdD,QAAgD,EAEhDisB,UAAoB,EACoB;IAKxC,IAAI,CAACF,0BAA0B,CAAC/rB,QAAQ,CAAC;IACzC,OAAOA,QAAQ;EACjB;EAEAI,cAAc,CACZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB/8B,mBAA6C,EACN;IACvC,MAAMtF,IAAI,GAAG,KAAK,CAACkiC,cAAc,CAC/BC,KAAK,EACLC,YAAY,EACZC,OAAO,EACP/8B,mBAAmB,CACpB;IAED,IAAItF,IAAI,CAAC1N,IAAI,KAAK,iBAAiB,EAAE;MACnC,IAAI,CAACu7D,0BAA0B,CAAC7tD,IAAI,CAAC2c,QAAQ,CAAC;IAChD;IAEA,OAAO3c,IAAI;EACb;EAEAuH,cAAc,CACZC,IAAkB,EAElBnC,QAAkB,EAClBoC,OAAmC,EACnCT,KAA4B,EACd;IACd,IAAI,CAAC,IAAI,CAAC0nB,qBAAqB,EAAE,IAAI,IAAI,CAAChM,KAAK,IAAS,EAAE;MAIxD,IAAI,CAAC1b,KAAK,CAAC+Y,kBAAkB,GAAG,KAAK;MACrC,IAAI,CAAC/J,IAAI,EAAE;MAEX,MAAMg4C,iBAAiB,GACrB,IAAI,CAACn8B,WAAW,CAAwBxsB,QAAQ,CAAC;MACnD2oD,iBAAiB,CAACpsD,UAAU,GAAG4F,IAAI;MACnC,OAAO,IAAI,CAAC7C,UAAU,CAACqpD,iBAAiB,EAAE,qBAAqB,CAAC;IAClE;IAEA,IAAIC,cAAc,GAAG,KAAK;IAC1B,IACE,IAAI,CAACvrC,KAAK,CAAgB,OAC1B,IAAI,CAACiD,iBAAiB,EAAE,OAAuB,EAC/C;MACA,IAAIle,OAAO,EAAE;QACXT,KAAK,CAACY,IAAI,GAAG,IAAI;QACjB,OAAOJ,IAAI;MACb;MACAR,KAAK,CAACU,mBAAmB,GAAGumD,cAAc,GAAG,IAAI;MACjD,IAAI,CAACj4C,IAAI,EAAE;IACb;IAGA,IAAI,IAAI,CAAC0M,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,IAAc,EAAE;MACjD,IAAIwrC,oBAAoB;MAIxB,MAAM1tB,MAAM,GAAG,IAAI,CAAC0rB,kBAAkB,CAAC,MAAM;QAC3C,IAAI,CAACzkD,OAAO,IAAI,IAAI,CAAC0mD,oBAAoB,CAAC3mD,IAAI,CAAC,EAAE;UAG/C,MAAM4mD,YAAY,GAChB,IAAI,CAACpB,mCAAmC,CAAC3nD,QAAQ,CAAC;UACpD,IAAI+oD,YAAY,EAAE;YAChB,OAAOA,YAAY;UACrB;QACF;QAEA,MAAM/nB,aAAa,GAAG,IAAI,CAAC6mB,gCAAgC,EAAE;QAC7D,IAAI,CAAC7mB,aAAa,EAAE;QAEpB,IAAI4nB,cAAc,IAAI,CAAC,IAAI,CAACvrC,KAAK,IAAW,EAAE;UAC5CwrC,oBAAoB,GAAG,IAAI,CAAClnD,KAAK,CAACyZ,WAAW,EAAE;UAC/C;QACF;QAEA,IAAIxM,eAAe,CAAC,IAAI,CAACjN,KAAK,CAAC1U,IAAI,CAAC,EAAE;UACpC,MAAMkuC,MAAM,GAAG,KAAK,CAAC6tB,6BAA6B,CAChD7mD,IAAI,EAEJnC,QAAQ,EACR2B,KAAK,CACN;UACDw5B,MAAM,CAAC78B,cAAc,GAAG0iC,aAAa;UACrC,OAAO7F,MAAM;QACf;QAEA,IAAI,CAAC/4B,OAAO,IAAI,IAAI,CAACyd,GAAG,IAAW,EAAE;UACnC,MAAMllB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAE3BxsB,QAAQ,CAAC;UACXrF,IAAI,CAACuG,MAAM,GAAGiB,IAAI;UAGlBxH,IAAI,CAACyG,SAAS,GAAG,IAAI,CAACw/B,4BAA4B,KAE5B,KAAK,CAC1B;UAGD,IAAI,CAAC4nB,0BAA0B,CAAC7tD,IAAI,CAACyG,SAAS,CAAC;UAE/CzG,IAAI,CAAC2D,cAAc,GAAG0iC,aAAa;UACnC,IAAIr/B,KAAK,CAACU,mBAAmB,EAAE;YAC5B1H,IAAI,CAAsCsG,QAAQ,GACjD2nD,cAAc;UAClB;UAEA,OAAO,IAAI,CAAC7nD,oBAAoB,CAACpG,IAAI,EAAEgH,KAAK,CAACU,mBAAmB,CAAC;QACnE;QAEA,MAAM4mD,SAAS,GAAG,IAAI,CAACtnD,KAAK,CAAC1U,IAAI;QACjC,IAEEg8D,SAAS,KAAU,MAEnBA,SAAS,KAAiB,MAEzBA,SAAS,KAAc,MACtBl7C,uBAAuB,CAACk7C,SAAS,CAAC,IAClC,CAAC,IAAI,CAAC5/B,qBAAqB,EAAG,EAChC;UAEA;QACF;QAEA,MAAM1uB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAA8BxsB,QAAQ,CAAC;QACpErF,IAAI,CAAC4B,UAAU,GAAG4F,IAAI;QACtBxH,IAAI,CAAC2D,cAAc,GAAG0iC,aAAa;QACnC,OAAO,IAAI,CAAC1hC,UAAU,CAAC3E,IAAI,EAAE,2BAA2B,CAAC;MAC3D,CAAC,CAAC;MAEF,IAAIkuD,oBAAoB,EAAE;QACxB,IAAI,CAACh3D,UAAU,CAACg3D,oBAAoB,EAAY;MAClD;MAEA,IAAI1tB,MAAM,EAAE;QACV,IACEA,MAAM,CAACluC,IAAI,KAAK,2BAA2B,KAC1C,IAAI,CAACowB,KAAK,CAAQ,OAChB,IAAI,CAACA,KAAK,IAAgB,IACzB,IAAI,CAACiD,iBAAiB,EAAE,KAA+B,GAAC,EAC5D;UACA,IAAI,CAACzf,KAAK,CACR02C,QAAQ,CAACoC,iDAAiD,EAC1D;YAAE74C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UAAS,CAAC,CAC5B;QACH;QACA,OAAOm7B,MAAM;MACf;IACF;IAEA,OAAO,KAAK,CAACj5B,cAAc,CAACC,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAET,KAAK,CAAC;EAC7D;EAEAs/B,cAAc,CAACtmC,IAAqB,EAAQ;IAAA;IAC1C,KAAK,CAACsmC,cAAc,CAACtmC,IAAI,CAAC;IAE1B,MAAM;MAAEuG;IAAO,CAAC,GAAGvG,IAAI;IACvB,IACEuG,MAAM,CAACjU,IAAI,KAAK,2BAA2B,IAC3C,EAACiU,uBAAM,CAACzE,KAAK,KAAZ,sBAAca,aAAa,CAC5B;MACA3C,IAAI,CAAC2D,cAAc,GAAG4C,MAAM,CAAC5C,cAAc;MAC3C3D,IAAI,CAACuG,MAAM,GAAGA,MAAM,CAAC3E,UAAU;IACjC;EACF;EAEA2sD,WAAW,CACT1sB,IAAkB,EAClB2sB,YAAsB,EACtBC,OAAe,EACD;IACd,IAAIC,WAAoB;IACxB,IACE36C,uBAAuB,CAAQ,MAAG06C,OAAO,IACzC,CAAC,IAAI,CAAC//B,qBAAqB,EAAE,KAC5B,IAAI,CAACT,YAAY,IAAQ,KACvBygC,WAAW,GAAG,IAAI,CAACzgC,YAAY,KAAe,CAAC,CAAC,EACnD;MACA,MAAMjuB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAE3B28B,YAAY,CAAC;MACfxuD,IAAI,CAAC4B,UAAU,GAAGigC,IAAI;MACtB7hC,IAAI,CAACk4B,cAAc,GAAG,IAAI,CAACqxB,QAAQ,CAAC,MAAM;QACxC,IAAI,CAACvzC,IAAI,EAAE;QACX,IAAI,IAAI,CAAC0M,KAAK,IAAW,EAAE;UACzB,IAAIgsC,WAAW,EAAE;YACf,IAAI,CAACxoD,KAAK,CAACzG,MAAM,CAAC1E,iBAAiB,EAAE;cACnCoL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;cACvBrK,OAAO,EAAE;YACX,CAAC,CAAC;UACJ;UACA,OAAO,IAAI,CAACuoD,oBAAoB,EAAE;QACpC;QAEA,OAAO,IAAI,CAACiD,WAAW,EAAE;MAC3B,CAAC,CAAC;MACF,IAAI,CAAC7hD,UAAU,CACb3E,IAAI,EACJ0uD,WAAW,GAAG,uBAAuB,GAAG,gBAAgB,CACzD;MAED,IAAI,CAACC,YAAY,EAAE;MACnB,OAAO,IAAI,CAACJ,WAAW,CAErBvuD,IAAI,EACJwuD,YAAY,EACZC,OAAO,CACR;IACH;IAEA,OAAO,KAAK,CAACF,WAAW,CAAC1sB,IAAI,EAAE2sB,YAAY,EAAEC,OAAO,CAAC;EACvD;EAEApqB,iBAAiB,CACf9uB,IAAY,EACZlQ,QAAkB,EAClBupD,aAAsB,EACtBjpD,SAAkB,EACZ;IAGN,IAAI,CAAC,IAAI,CAACqB,KAAK,CAACoY,gBAAgB,EAAE;MAChC,KAAK,CAACilB,iBAAiB,CAAC9uB,IAAI,EAAElQ,QAAQ,EAAEupD,aAAa,EAAEjpD,SAAS,CAAC;IACnE;EACF;EAEA09B,qBAAqB,CAACrjC,IAAiC,EAAE;IACvD,KAAK,CAACqjC,qBAAqB,CAACrjC,IAAI,CAAC;IACjC,IAAIA,IAAI,CAACsjC,MAAM,IAAItjC,IAAI,CAAC41B,UAAU,KAAK,OAAO,EAAE;MAC9C,IAAI,CAAC1vB,KAAK,CAAC02C,QAAQ,CAAClpB,6BAA6B,EAAE;QACjDvtB,EAAE,EAAEnG,IAAI,CAACmH,UAAU,CAAC,CAAC,CAAC,CAACzI,GAAG,CAACnQ;MAC7B,CAAC,CAAC;IACJ;EACF;EAWAsgE,qBAAqB,GAAG;EAExB91B,WAAW,CACT/4B,IAA+D,EAClD;IACbA,IAAI,CAAC41B,UAAU,GAAG,OAAO;IACzB,IACE7iB,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAClC,IAAI,CAACowB,KAAK,CAAS,OACnB,IAAI,CAACA,KAAK,GAAW,EACrB;MACA,IAAIosC,KAAK,GAAG,IAAI,CAACzpC,SAAS,EAAE;MAE5B,IACE,IAAI,CAAC4I,YAAY,KAAU,IAE3B6gC,KAAK,CAACx8D,IAAI,OAAa,IAEvBw8D,KAAK,CAACx8D,IAAI,KAAa,MAEvBw8D,KAAK,CAACx8D,IAAI,OAAU,EACpB;QACA0N,IAAI,CAAC41B,UAAU,GAAG,MAAM;QACxB,IAAI,CAAC5f,IAAI,EAAE;QACX84C,KAAK,GAAG,IAAI,CAACzpC,SAAS,EAAE;MAC1B;MAEA,IAAItS,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAIw8D,KAAK,CAACx8D,IAAI,OAAU,EAAE;QAC9D,OAAO,IAAI,CAACq5D,8BAA8B,CACxC3rD,IAAI,CACL;MACH;IACF;IAEA,MAAM+uD,UAAU,GAAG,KAAK,CAACh2B,WAAW,CAAC/4B,IAAI,CAAgC;IAKzE,IACE+uD,UAAU,CAACn5B,UAAU,KAAK,MAAM,IAEhCm5B,UAAU,CAAC5nD,UAAU,CAAC/X,MAAM,GAAG,CAAC,IAEhC2/D,UAAU,CAAC5nD,UAAU,CAAC,CAAC,CAAC,CAAC7U,IAAI,KAAK,wBAAwB,EAC1D;MACA,IAAI,CAAC4T,KAAK,CAAC02C,QAAQ,CAACwD,sCAAsC,EAAE;QAC1Dj6C,EAAE,EAAE4oD;MACN,CAAC,CAAC;IACJ;IAEA,OAAOA,UAAU;EACnB;EAEAloD,WAAW,CACT7G,IAAoB,EACpB8G,UAAgC,EACnB;IACb,IAAI,IAAI,CAAC4b,KAAK,IAAY,EAAE;MAE1B,IAAI,CAAC1M,IAAI,EAAE;MACX,IACE,IAAI,CAACiY,YAAY,CAAU,QAC3B,IAAI,CAACtI,iBAAiB,EAAE,OAAuB,EAC/C;QACA3lB,IAAI,CAAC41B,UAAU,GAAG,MAAM;QACxB,IAAI,CAAC5f,IAAI,EAAE;MACb,CAAC,MAAM;QACLhW,IAAI,CAAC41B,UAAU,GAAG,OAAO;MAC3B;MACA,OAAO,IAAI,CAAC+1B,8BAA8B,CACxC3rD,IAAI,EACW,IAAI,CACpB;IACH,CAAC,MAAM,IAAI,IAAI,CAACklB,GAAG,IAAO,EAAE;MAE1B,MAAMz0B,MAAM,GAAGuP,IAAoC;MACnDvP,MAAM,CAACmR,UAAU,GAAG,KAAK,CAACw1B,eAAe,EAAE;MAC3C,IAAI,CAACvI,SAAS,EAAE;MAChB,OAAO,IAAI,CAAClqB,UAAU,CAAClU,MAAM,EAAE,oBAAoB,CAAC;IACtD,CAAC,MAAM,IAAI,IAAI,CAAC89B,aAAa,IAAQ,EAAE;MAErC,MAAMqS,IAAI,GAAG5gC,IAA8C;MAE3D,IAAI,CAACwuB,gBAAgB,CAAe;MACpCoS,IAAI,CAAC38B,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;MAChC,IAAI,CAAC7I,SAAS,EAAE;MAChB,OAAO,IAAI,CAAClqB,UAAU,CAACi8B,IAAI,EAAE,8BAA8B,CAAC;IAC9D,CAAC,MAAM;MACL,IACE,IAAI,CAAC3S,YAAY,KAAU,IAC3B,IAAI,CAAC5I,SAAS,EAAE,CAAC/yB,IAAI,MAAc,EACnC;QACA,IAAI,CAAC0jB,IAAI,EAAE;QACXhW,IAAI,CAACm5B,UAAU,GAAG,MAAM;MAC1B,CAAC,MAAM;QACLn5B,IAAI,CAACm5B,UAAU,GAAG,OAAO;MAC3B;MAEA,OAAO,KAAK,CAACtyB,WAAW,CACtB7G,IAAI,EACJ8G,UAAU,CACX;IACH;EACF;EAEAkoD,eAAe,GAAY;IACzB,OACE,IAAI,CAAC/gC,YAAY,CAAc,QAAI,IAAI,CAAC5I,SAAS,EAAE,CAAC/yB,IAAI,KAAc;EAE1E;EAEA+sC,4BAA4B,GAAiC;IAC3D,IAAI,IAAI,CAAC2vB,eAAe,EAAE,EAAE;MAC1B,MAAMC,GAAG,GAAG,IAAI,CAACxqD,SAAS,EAAW;MACrC,IAAI,CAACuR,IAAI,EAAE;MACXi5C,GAAG,CAACzH,QAAQ,GAAG,IAAI;MACnB,OAAO,IAAI,CAACgF,UAAU,CAACyC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC;IACzC;IAIA,IAAI,IAAI,CAACvsC,KAAK,KAAe,EAAE;MAC7B,MAAM8d,MAAM,GAAG,IAAI,CAACgqB,2BAA2B,CAC7C,IAAI,CAAC/lD,SAAS,EAA4B,CAC3C;MACD,IAAI+7B,MAAM,EAAE,OAAOA,MAAM;IAC3B;IAEA,OAAO,KAAK,CAACnB,4BAA4B,EAAE;EAC7C;EAEAotB,iBAAiB,CACfzsD,IAA2B,EAC3BtN,IAAuC,EAEvC;IAAA,IADAw8D,uBAAgC,uEAAG,KAAK;IAExC,MAAM;MAAE9vC;KAAkB,GAAG,IAAI,CAACpY,KAAK;IACvC,MAAMI,WAAW,GAAG,KAAK,CAACqlD,iBAAiB,CACzCzsD,IAAI,EACJtN,IAAI,EACJw8D,uBAAuB,IAAI9vC,gBAAgB,CAC5C;IAED,IAAI,CAACA,gBAAgB,EAAE,OAAOhY,WAAW;IAEzC,KAAK,MAAM;MAAEnD,EAAE;MAAEmc;IAAK,CAAC,IAAIhZ,WAAW,CAAC+nD,YAAY,EAAE;MAEnD,IAAI,CAAC/uC,IAAI,EAAE;MAGX,IAAI1tB,IAAI,KAAK,OAAO,IAAI,CAAC,CAACuR,EAAE,CAACi0B,cAAc,EAAE;QAC3C,IAAI,CAAChyB,KAAK,CAAC02C,QAAQ,CAAC8B,qCAAqC,EAAE;UACzDv4C,EAAE,EAAEia;QACN,CAAC,CAAC;MACJ,CAAC,MAAM,IACL,CAACgvC,8BAA8B,CAAChvC,IAAI,EAAE,IAAI,CAAC1Z,SAAS,CAAC,QAAQ,CAAC,CAAC,EAC/D;QACA,IAAI,CAACR,KAAK,CACR02C,QAAQ,CAACU,mEAAmE,EAC5E;UAAEn3C,EAAE,EAAEia;QAAK,CAAC,CACb;MACH;IACF;IAEA,OAAOhZ,WAAW;EACpB;EAEAioD,qBAAqB,CACnB5uD,KAAyB,EACzBqG,UAAiC,EACpB;IACb,IAAI,IAAI,CAAC4b,KAAK,CAAW,OAAI,IAAI,CAAC4L,qBAAqB,CAAC,MAAM,CAAC,EAAE;MAC/D,MAAMtuB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAuB;MAClD,IAAI,CAACsqB,MAAM,CAAW;MACtB,OAAO,IAAI,CAACo8B,sBAAsB,CAACnrD,IAAI,EAAE;QAAE+1B,KAAK,EAAE;MAAK,CAAC,CAAC;IAC3D;IAEA,IAAI,IAAI,CAAC9H,YAAY,KAAU,EAAE;MAC/B,OAAO,IAAI,CAACk9B,sBAAsB,CAChC,IAAI,CAAC1mD,SAAS,EAAuB,CACtC;IACH;IAEA,IAAI,IAAI,CAACwpB,YAAY,KAAe,EAAE;MACpC,MAAMuS,MAAM,GAAG,IAAI,CAACgqB,2BAA2B,CAAC,IAAI,CAAC/lD,SAAS,EAAE,CAAC;MACjE,IAAI+7B,MAAM,EAAE,OAAOA,MAAM;IAC3B;IAEA,OAAO,KAAK,CAAC6uB,qBAAqB,CAAC5uD,KAAK,EAAEqG,UAAU,CAAC;EACvD;EAEAwoD,mBAAmB,GAAuC;IACxD,OAAO,IAAI,CAACjO,eAAe,CAAC,CAAC,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,CAAC;EACjE;EAEAkO,kBAAkB,CAAC/tB,MAAW,EAAE4c,SAAgC,EAAW;IACzE,OAAOA,SAAS,CAAC3zB,IAAI,CAACmzB,QAAQ,IAAI;MAChC,IAAImD,kBAAkB,CAACnD,QAAQ,CAAC,EAAE;QAChC,OAAOpc,MAAM,CAAC6gB,aAAa,KAAKzE,QAAQ;MAC1C;MACA,OAAO,CAAC,CAACpc,MAAM,CAACoc,QAAQ,CAAC;IAC3B,CAAC,CAAC;EACJ;EAEA4D,uBAAuB,GAAG;IACxB,OACE,IAAI,CAACvzB,YAAY,KAAY,IAC7B,IAAI,CAACtI,iBAAiB,EAAE,KAA6B;EAEzD;EAEA4b,gBAAgB,CACdj+B,SAAsB,EACtBk+B,MAAW,EACXx6B,KAA8B,EACxB;IACN,MAAMo3C,SAAS,GAAG,CAChB,SAAS,EACT,SAAS,EACT,QAAQ,EACR,WAAW,EACX,UAAU,EACV,UAAU,EACV,UAAU,EACV,QAAQ,CACA;IACV,IAAI,CAACuD,gBAAgB,CAAC;MACpBC,QAAQ,EAAEpgB,MAAM;MAChB8f,gBAAgB,EAAElD,SAAS;MAC3ByD,mBAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC;MAClCN,6BAA6B,EAAE,IAAI;MACnCO,aAAa,EAAElF,QAAQ,CAACiC;IAC1B,CAAC,CAAC;IAEF,MAAM2Q,gCAAgC,GAAG,MAAM;MAC7C,IAAI,IAAI,CAAChO,uBAAuB,EAAE,EAAE;QAClC,IAAI,CAACxrC,IAAI,EAAE;QACX,IAAI,CAACA,IAAI,EAAE;QACX,IAAI,IAAI,CAACu5C,kBAAkB,CAAC/tB,MAAM,EAAE4c,SAAS,CAAC,EAAE;UAC9C,IAAI,CAACl4C,KAAK,CAAC02C,QAAQ,CAACsD,6BAA6B,EAAE;YACjD/5C,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;UAC5B,CAAC,CAAC;QACJ;QACA,KAAK,CAACgvC,qBAAqB,CAACnsD,SAAS,EAAEk+B,MAAM,CAAkB;MACjE,CAAC,MAAM;QACL,IAAI,CAACkuB,4BAA4B,CAC/BpsD,SAAS,EACTk+B,MAAM,EACNx6B,KAAK,EACL,CAAC,CAACw6B,MAAM,CAAC1F,MAAM,CAChB;MACH;KACD;IACD,IAAI0F,MAAM,CAAC7G,OAAO,EAAE;MAClB,IAAI,CAAC2xB,kBAAkB,CAACkD,gCAAgC,CAAC;IAC3D,CAAC,MAAM;MACLA,gCAAgC,EAAE;IACpC;EACF;EAEAE,4BAA4B,CAC1BpsD,SAAsB,EACtBk+B,MAAkD,EAClDx6B,KAA8B,EAC9B60B,QAAiB,EACX;IACN,MAAMkqB,GAAG,GAAG,IAAI,CAACT,wBAAwB,CACvC9jB,MAAM,CACP;IACD,IAAIukB,GAAG,EAAE;MACPziD,SAAS,CAACH,IAAI,CAACS,IAAI,CAACmiD,GAAG,CAAC;MAExB,IAAKvkB,MAAM,CAASgmB,QAAQ,EAAE;QAC5B,IAAI,CAACthD,KAAK,CAAC02C,QAAQ,CAACyB,yBAAyB,EAAE;UAAEl4C,EAAE,EAAEq7B;QAAO,CAAC,CAAC;MAChE;MACA,IAAKA,MAAM,CAAS6gB,aAAa,EAAE;QACjC,IAAI,CAACn8C,KAAK,CAAC02C,QAAQ,CAAC0B,8BAA8B,EAAE;UAClDn4C,EAAE,EAAEq7B,MAAM;UACVoc,QAAQ,EAAGpc,MAAM,CAAS6gB;QAC5B,CAAC,CAAC;MACJ;MACA,IAAK7gB,MAAM,CAAS7G,OAAO,EAAE;QAC3B,IAAI,CAACz0B,KAAK,CAAC02C,QAAQ,CAAC2B,wBAAwB,EAAE;UAAEp4C,EAAE,EAAEq7B;QAAO,CAAC,CAAC;MAC/D;MACA,IAAKA,MAAM,CAAS8rB,QAAQ,EAAE;QAC5B,IAAI,CAACpnD,KAAK,CAAC02C,QAAQ,CAAC4B,yBAAyB,EAAE;UAAEr4C,EAAE,EAAEq7B;QAAO,CAAC,CAAC;MAChE;MAEA;IACF;IAEA,IAAI,CAAC,IAAI,CAACx6B,KAAK,CAACqY,eAAe,IAAKmiB,MAAM,CAASgmB,QAAQ,EAAE;MAC3D,IAAI,CAACthD,KAAK,CAAC02C,QAAQ,CAACwC,iCAAiC,EAAE;QACrDj5C,EAAE,EAAEq7B;MACN,CAAC,CAAC;IACJ;IAEA,IAAKA,MAAM,CAAS8rB,QAAQ,EAAE;MAC5B,IAAI,CAACtmD,KAAK,CAAC2oD,aAAa,EAAE;QACxB,IAAI,CAACzpD,KAAK,CAAC02C,QAAQ,CAAC2C,qBAAqB,EAAE;UAAEp5C,EAAE,EAAEq7B;QAAO,CAAC,CAAC;MAC5D;IACF;IAIA,KAAK,CAACkuB,4BAA4B,CAChCpsD,SAAS,EACTk+B,MAAM,EACNx6B,KAAK,EACL60B,QAAQ,CACT;EACH;EAEA+zB,4BAA4B,CAC1BC,YAAsE,EAChE;IACN,MAAMvpD,QAAQ,GAAG,IAAI,CAAC4e,GAAG,CAAa;IACtC,IAAI5e,QAAQ,EAAEupD,YAAY,CAACvpD,QAAQ,GAAG,IAAI;IAE1C,IAAKupD,YAAY,CAASlK,QAAQ,IAAI,IAAI,CAACjjC,KAAK,IAAW,EAAE;MAC3D,IAAI,CAACxc,KAAK,CAAC02C,QAAQ,CAACS,sBAAsB,EAAE;QAAEl3C,EAAE,EAAE0pD;MAAa,CAAC,CAAC;IACnE;IAEA,IAAKA,YAAY,CAASl1B,OAAO,IAAI,IAAI,CAACjY,KAAK,IAAW,EAAE;MAC1D,IAAI,CAACxc,KAAK,CAAC02C,QAAQ,CAACQ,qBAAqB,EAAE;QAAEj3C,EAAE,EAAE0pD;MAAa,CAAC,CAAC;IAClE;EACF;EAOA5wB,wBAAwB,CACtBj/B,IAAmC,EACnCk/B,IAAkB,EAClBp4B,UAAgC,EACnB;IACb,MAAM85B,IAAI,GACR1B,IAAI,CAAC5sC,IAAI,KAAK,YAAY,GAEtB,IAAI,CAACs6D,0BAA0B,CAAC5sD,IAAI,EAAEk/B,IAAI,EAAEp4B,UAAU,CAAC,GACvDsV,SAAS;IACf,OAAOwkB,IAAI,IAAI,KAAK,CAAC3B,wBAAwB,CAACj/B,IAAI,EAAEk/B,IAAI,EAAEp4B,UAAU,CAAC;EACvE;EAIAq4B,4BAA4B,GAAY;IACtC,IAAI,IAAI,CAACiuB,oBAAoB,EAAE,EAAE,OAAO,IAAI;IAC5C,OAAO,KAAK,CAACjuB,4BAA4B,EAAE;EAC7C;EAGAG,gBAAgB,CACdJ,IAAkB,EAElB75B,QAAkB,EAClBC,mBAA6C,EAC/B;IAGd,IAAI,CAAC,IAAI,CAAC0B,KAAK,CAACgY,sBAAsB,IAAI,CAAC,IAAI,CAAC0D,KAAK,IAAa,EAAE;MAClE,OAAO,KAAK,CAAC4c,gBAAgB,CAC3BJ,IAAI,EAEJ75B,QAAQ,EACRC,mBAAmB,CACpB;IACH;IAEA,MAAMk7B,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAAC,MAC3B,KAAK,CAACsQ,gBAAgB,CAACJ,IAAI,EAAE75B,QAAQ,CAAC,CACvC;IAED,IAAI,CAACm7B,MAAM,CAACxgC,IAAI,EAAE;MAChB,IAAIwgC,MAAM,CAACnW,KAAK,EAAE;QAEhB,KAAK,CAACkV,0BAA0B,CAACj6B,mBAAmB,EAAEk7B,MAAM,CAACnW,KAAK,CAAC;MACrE;MAEA,OAAO6U,IAAI;IACb;IACA,IAAIsB,MAAM,CAACnW,KAAK,EAAE,IAAI,CAACrjB,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;IAC/C,OAAOoR,MAAM,CAACxgC,IAAI;EACpB;EAIAygC,cAAc,CACZzgC,IAAkB,EAElBqF,QAAkB,EACJ;IACdrF,IAAI,GAAG,KAAK,CAACygC,cAAc,CAACzgC,IAAI,EAAEqF,QAAQ,CAAC;IAC3C,IAAI,IAAI,CAAC6f,GAAG,IAAa,EAAE;MACzBllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;MAIpB,IAAI,CAAC8B,gBAAgB,CAACpI,IAAI,CAAC;IAC7B;IAEA,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MACxB,MAAMge,YAAY,GAAG,IAAI,CAAC7O,WAAW,CAAyBxsB,QAAQ,CAAC;MACvEq7B,YAAY,CAAC9+B,UAAU,GAAG5B,IAAI;MAC9B0gC,YAAY,CAACxI,cAAc,GAAG,IAAI,CAAC0rB,qBAAqB,EAAE;MAE1D,OAAO,IAAI,CAACj/C,UAAU,CAAC+7B,YAAY,EAAE,sBAAsB,CAAC;IAC9D;IAEA,OAAO1gC,IAAI;EACb;EAEA6gC,sBAAsB,CACpB7gC,IAA8B,EACI;IAClC,IAAI,CAAC,IAAI,CAACgH,KAAK,CAACoY,gBAAgB,IAAI,IAAI,CAAC6O,YAAY,KAAa,EAAE;MAClE,OAAO,IAAI,CAACq+B,kBAAkB,CAAC,MAAM,IAAI,CAACzrB,sBAAsB,CAAC7gC,IAAI,CAAC,CAAC;IACzE;IAGA,MAAMqF,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAEpC,MAAMyqD,SAAS,GAAG,IAAI,CAACvhC,aAAa,CAAa;IAEjD,IACEuhC,SAAS,KACR,IAAI,CAAC7hC,YAAY,KAAa,IAAI,CAAC,IAAI,CAACkR,4BAA4B,EAAE,CAAC,EACxE;MACA,MAAM,IAAI,CAACj5B,KAAK,CAAC02C,QAAQ,CAACqB,iCAAiC,EAAE;QAC3D93C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IAEA,MAAM0qD,YAAY,GAAGh9C,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC;IACvD,MAAM8U,WAA6C,GAChD2oD,YAAY,IAAI,IAAI,CAACpD,2BAA2B,EAAE,IACnD,KAAK,CAAC9rB,sBAAsB,CAAC7gC,IAAI,CAAC;IAEpC,IAAI,CAACoH,WAAW,EAAE,OAAO,IAAI;IAE7B,IACEA,WAAW,CAAC9U,IAAI,KAAK,wBAAwB,IAC7C8U,WAAW,CAAC9U,IAAI,KAAK,wBAAwB,IAC7Cw9D,SAAS,EACT;MACA9vD,IAAI,CAACm5B,UAAU,GAAG,MAAM;IAC1B;IAEA,IAAI22B,SAAS,EAAE;MAEb,IAAI,CAACxoD,kBAAkB,CAACF,WAAW,EAAE/B,QAAQ,CAAC;MAE9C+B,WAAW,CAACuzB,OAAO,GAAG,IAAI;IAC5B;IAEA,OAAOvzB,WAAW;EACpB;EAEAg6B,YAAY,CACVphC,IAAa,EACbqhC,WAAoB,EACpBC,UAA2B,EAE3B3mB,WAA0B,EACpB;IACN,IAAI,CAAC,CAAC0mB,WAAW,IAAIC,UAAU,KAAK,IAAI,CAACrT,YAAY,KAAgB,EAAE;MACrE;IACF;IAEA,KAAK,CAACmT,YAAY,CAChBphC,IAAI,EACJqhC,WAAW,EACXC,UAAU,EACTthC,IAAI,CAAS26B,OAAO,GAAGziB,eAAe,GAAGP,UAAU,CACrD;IACD,MAAMhU,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,CAClD,IAAI,CAACP,qBAAqB,CAACvC,IAAI,CAAC,IAAI,CAAC,CACtC;IACD,IAAI/9C,cAAc,EAAE3D,IAAI,CAAC2D,cAAc,GAAGA,cAAc;EAC1D;EAEAqsD,4BAA4B,CAC1BhwD,IAAwE,EAClE;IACN,IAAI,CAACA,IAAI,CAACsG,QAAQ,EAAE;MAClB,IAAI,IAAI,CAAC4e,GAAG,IAAS,EAAE;QACrBllB,IAAI,CAACiwD,QAAQ,GAAG,IAAI;MACtB,CAAC,MAAM,IAAI,IAAI,CAAC/qC,GAAG,IAAa,EAAE;QAChCllB,IAAI,CAACsG,QAAQ,GAAG,IAAI;MACtB;IACF;IAEA,MAAMhU,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;IAC5C,IAAInzD,IAAI,EAAE0N,IAAI,CAACk4B,cAAc,GAAG5lC,IAAI;EACtC;EAEAsS,kBAAkB,CAAC5E,IAAqB,EAAmB;IACzD,IAAI,CAACgwD,4BAA4B,CAAChwD,IAAI,CAAC;IAEvC,IACE,IAAI,CAACgH,KAAK,CAACoY,gBAAgB,IAC3B,EAAEpf,IAAI,CAAC2lD,QAAQ,IAAI,CAAC3lD,IAAI,CAACk4B,cAAc,CAAC,IACxC,IAAI,CAACxV,KAAK,IAAO,EACjB;MACA,IAAI,CAACxc,KAAK,CAAC02C,QAAQ,CAACa,+BAA+B,EAAE;QACnDt3C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IACA,IAAIrF,IAAI,CAACwnD,QAAQ,IAAI,IAAI,CAAC9kC,KAAK,IAAO,EAAE;MACtC,MAAM;QAAElzB;MAAI,CAAC,GAAGwQ,IAAI;MACpB,IAAI,CAACkG,KAAK,CAAC02C,QAAQ,CAACG,8BAA8B,EAAE;QAClD52C,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;QACvB23C,YAAY,EACVxtD,GAAG,CAAC8C,IAAI,KAAK,YAAY,IAAI,CAAC0N,IAAI,CAAC0E,QAAQ,GACvClV,GAAG,CAAC0I,IAAI,GACP,IAAG,IAAI,CAAC2lB,KAAK,CAAC+C,KAAK,CAACpxB,GAAG,CAACjB,KAAK,EAAEiB,GAAG,CAAChB,GAAG,CAAE;MACjD,CAAC,CAAC;IACJ;IAEA,OAAO,KAAK,CAACoW,kBAAkB,CAAC5E,IAAI,CAAC;EACvC;EAEA8E,yBAAyB,CACvB9E,IAA4B,EACJ;IAExB,IAAIA,IAAI,CAACwnD,QAAQ,EAAE;MACjB,IAAI,CAACthD,KAAK,CAAC02C,QAAQ,CAAC4C,yBAAyB,EAAE;QAAEr5C,EAAE,EAAEnG;MAAK,CAAC,CAAC;IAC9D;IAGA,IAAIA,IAAI,CAACqiD,aAAa,EAAE;MACtB,IAAI,CAACn8C,KAAK,CAAC02C,QAAQ,CAAC6C,8BAA8B,EAAE;QAClDt5C,EAAE,EAAEnG,IAAI;QAER49C,QAAQ,EAAE59C,IAAI,CAACqiD;MACjB,CAAC,CAAC;IACJ;IAEA,IAAI,CAAC2N,4BAA4B,CAAChwD,IAAI,CAAC;IACvC,OAAO,KAAK,CAAC8E,yBAAyB,CAAC9E,IAAI,CAAC;EAC9C;EAEAkwD,0BAA0B,CACxBlwD,IAA6B,EACJ;IACzB,IAAI,CAACgwD,4BAA4B,CAAChwD,IAAI,CAAC;IACvC,IAAIA,IAAI,CAACsG,QAAQ,EAAE;MACjB,IAAI,CAACJ,KAAK,CAAC02C,QAAQ,CAACO,wBAAwB,EAAE;QAAEh3C,EAAE,EAAEnG;MAAK,CAAC,CAAC;IAC7D;IACA,OAAO,KAAK,CAACkwD,0BAA0B,CAAClwD,IAAI,CAAC;EAC/C;EAEAqD,eAAe,CACbC,SAAsB,EACtBf,MAAqB,EACrBgB,WAAoB,EACpBpB,OAAgB,EAChBqB,aAAsB,EACtBC,iBAA0B,EACpB;IACN,MAAME,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,EAAE;IACtD,IAAI7gD,cAAc,IAAIH,aAAa,EAAE;MACnC,IAAI,CAAC0C,KAAK,CAAC02C,QAAQ,CAACW,4BAA4B,EAAE;QAChDp3C,EAAE,EAAExC;MACN,CAAC,CAAC;IACJ;IAGA,MAAM;MAAEg3B,OAAO,GAAG,KAAK;MAAEjoC;IAAK,CAAC,GAAG6P,MAAM;IAExC,IAAIo4B,OAAO,KAAKjoC,IAAI,KAAK,KAAK,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;MACjD,IAAI,CAACwT,KAAK,CAAC02C,QAAQ,CAACY,eAAe,EAAE;QAAEr3C,EAAE,EAAE5D,MAAM;QAAE7P;MAAK,CAAC,CAAC;IAC5D;IACA,IAAIiR,cAAc,EAAEpB,MAAM,CAACoB,cAAc,GAAGA,cAAc;IAC1D,KAAK,CAACN,eAAe,CACnBC,SAAS,EACTf,MAAM,EACNgB,WAAW,EACXpB,OAAO,EACPqB,aAAa,EACbC,iBAAiB,CAClB;EACH;EAEAk/B,sBAAsB,CACpBr/B,SAAsB,EACtBf,MAA4B,EAC5BgB,WAAoB,EACpBpB,OAAgB,EACV;IACN,MAAMwB,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,EAAE;IACtD,IAAI7gD,cAAc,EAAEpB,MAAM,CAACoB,cAAc,GAAGA,cAAc;IAC1D,KAAK,CAACg/B,sBAAsB,CAACr/B,SAAS,EAAEf,MAAM,EAAEgB,WAAW,EAAEpB,OAAO,CAAC;EACvE;EAEAguD,gCAAgC,CAC9BnwD,IAAyE,EACzEtN,IAAY,EACZ;IACA,IAAIsN,IAAI,CAAC1N,IAAI,KAAK,iBAAiB,EAAE;IAErC,IAAI0N,IAAI,CAAC1N,IAAI,KAAK,kBAAkB,IAAI,CAAC0N,IAAI,CAACtQ,KAAK,CAACyT,IAAI,EAAE;IAE1D,KAAK,CAACgtD,gCAAgC,CAACnwD,IAAI,EAAEtN,IAAI,CAAC;EACpD;EAEAkwC,eAAe,CAAC5iC,IAAa,EAAQ;IACnC,KAAK,CAAC4iC,eAAe,CAAC5iC,IAAI,CAAC;IAE3B,IAAIA,IAAI,CAACC,UAAU,KAAK,IAAI,CAACyiB,KAAK,CAAO,OAAI,IAAI,CAACA,KAAK,IAAc,CAAC,EAAE;MAEtE1iB,IAAI,CAAC6iC,mBAAmB,GAAG,IAAI,CAACqqB,gCAAgC,EAAE;IACpE;IACA,IAAI,IAAI,CAAC3+B,aAAa,KAAgB,EAAE;MACtCvuB,IAAI,CAAC25B,UAAU,GAAG,IAAI,CAAC0wB,qBAAqB,CAAC,YAAY,CAAC;IAC5D;EACF;EAEApnB,iBAAiB,CACfj+B,IAA+C,EAC/CK,QAAqC,EACrC9B,WAAoB,EACpBpB,OAAgB,EAChB8C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EAC7C;IACA,MAAM3B,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,EAAE;IACtD,IAAI7gD,cAAc,EAAEqB,IAAI,CAACrB,cAAc,GAAGA,cAAc;IAExD,OAAO,KAAK,CAACs/B,iBAAiB,CAC5Bj+B,IAAI,EAEJK,QAAQ,EACR9B,WAAW,EACXpB,OAAO,EACP8C,SAAS,EACTC,UAAU,EACVI,mBAAmB,CACpB;EACH;EAEAi/B,mBAAmB,CAACvkC,IAAgB,EAAEwkC,cAAwB,EAAQ;IACpE,MAAM7gC,cAAc,GAAG,IAAI,CAAC6gD,wBAAwB,EAAE;IACtD,IAAI7gD,cAAc,EAAE3D,IAAI,CAAC2D,cAAc,GAAGA,cAAc;IACxD,KAAK,CAAC4gC,mBAAmB,CAACvkC,IAAI,EAAEwkC,cAAc,CAAC;EACjD;EAGAC,UAAU,CACR7D,IAA0B,EAC1BluC,IAAuC,EACjC;IACN,KAAK,CAAC+xC,UAAU,CAAC7D,IAAI,EAAEluC,IAAI,CAAC;IAC5B,IACEkuC,IAAI,CAAC38B,EAAE,CAAC3R,IAAI,KAAK,YAAY,IAC7B,CAAC,IAAI,CAACo8B,qBAAqB,EAAE,IAC7B,IAAI,CAACxJ,GAAG,IAAS,EACjB;MACA0b,IAAI,CAACqvB,QAAQ,GAAG,IAAI;IACtB;IAEA,MAAM39D,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;IAC5C,IAAInzD,IAAI,EAAE;MACRsuC,IAAI,CAAC38B,EAAE,CAACi0B,cAAc,GAAG5lC,IAAI;MAC7B,IAAI,CAAC8V,gBAAgB,CAACw4B,IAAI,CAAC38B,EAAE,CAAC;IAChC;EACF;EAGAygC,iCAAiC,CAC/B1kC,IAA+B,EAC/B2kC,IAAsB,EACK;IAC3B,IAAI,IAAI,CAACjiB,KAAK,IAAU,EAAE;MACxB1iB,IAAI,CAACi4B,UAAU,GAAG,IAAI,CAAC2rB,qBAAqB,EAAE;IAChD;IACA,OAAO,KAAK,CAAClf,iCAAiC,CAAC1kC,IAAI,EAAE2kC,IAAI,CAAC;EAC5D;EAEA5E,gBAAgB,CACdz6B,mBAA6C,EAC7Cu/B,cAAyB,EACX;IAAA;IAGd,IAAI79B,KAA+B;IACnC,IAAI89B,GAAG;IACP,IAAIsrB,QAAQ;IAEZ,IACE,IAAI,CAAC1pD,SAAS,CAAC,KAAK,CAAC,KACpB,IAAI,CAACgc,KAAK,KAAgB,IAAI,IAAI,CAACA,KAAK,IAAO,CAAC,EACjD;MAEA1b,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;MAE1BkmC,GAAG,GAAG,IAAI,CAAC9V,QAAQ,CACjB,MAAM,KAAK,CAAC+Q,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC,EACjE79B,KAAK,CACN;MAID,IAAI,CAAC89B,GAAG,CAACza,KAAK,EAAE,OAAOya,GAAG,CAAC9kC,IAAI;MAK/B,MAAM;QAAEmU;OAAS,GAAG,IAAI,CAACnN,KAAK;MAC9B,MAAM+9B,cAAc,GAAG5wB,OAAO,CAACA,OAAO,CAAC/kB,MAAM,GAAG,CAAC,CAAC;MAClD,IAAI21C,cAAc,KAAK1wB,KAAE,CAAC3L,MAAM,IAAIq8B,cAAc,KAAK1wB,KAAE,CAACzL,MAAM,EAAE;QAChEuL,OAAO,CAACC,GAAG,EAAE;MACf;IACF;IAEA,IAAI,UAAC0wB,GAAG,aAAHE,IAAK3a,MAAK,CAAI,KAAC,IAAI,CAAC3H,KAAK,IAAO,EAAE;MACrC,OAAO,KAAK,CAACqd,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC;IACpE;IAOA,IAAI,CAAC79B,KAAK,IAAIA,KAAK,KAAK,IAAI,CAACA,KAAK,EAAEA,KAAK,GAAG,IAAI,CAACA,KAAK,CAACpI,KAAK,EAAE;IAE9D,IAAI+E,cAA+D;IACnE,MAAM8H,KAAK,GAAG,IAAI,CAACujB,QAAQ,CAACiW,KAAK,IAAI;MAAA;MAEnCthC,cAAc,GAAG,IAAI,CAAC8gD,qBAAqB,EAAE;MAC7C,MAAMvlB,IAAI,GAAG,KAAK,CAACa,gBAAgB,CACjCz6B,mBAAmB,EACnBu/B,cAAc,CACf;MAED,IACE3F,IAAI,CAAC5sC,IAAI,KAAK,yBAAyB,mBACvC4sC,IAAI,CAACp9B,KAAK,aAAVmgC,WAAYt/B,cAAa,EACzB;QACAsiC,KAAK,EAAE;MACT;MAGA,IAAI,kCAAc,KAAd,gCAAgBziC,MAAM,CAACpT,MAAM,MAAK,CAAC,EAAE;QACvC,IAAI,CAAC0iC,0BAA0B,CAACoN,IAAI,EAAEv7B,cAAc,CAAC;MACvD;MACAu7B,IAAI,CAACv7B,cAAc,GAAGA,cAAc;MAqBpC,OAAOu7B,IAAI;KACZ,EAAEl4B,KAAK,CAAC;IAGT,IAAI,CAACyE,KAAK,CAAC4e,KAAK,IAAI,CAAC5e,KAAK,CAAC6jB,OAAO,EAAE;MAIlC,IAAI3rB,cAAc,EAAE,IAAI,CAAC0sD,4BAA4B,CAAC1sD,cAAc,CAAC;MAErE,OAAO8H,KAAK,CAACzL,IAAI;IACnB;IAEA,IAAI,CAAC8kC,GAAG,EAAE;MAIR6X,MAAM,CAAC,CAAC,IAAI,CAACj2C,SAAS,CAAC,KAAK,CAAC,CAAC;MAI9B0pD,QAAQ,GAAG,IAAI,CAACphC,QAAQ,CACtB,MAAM,KAAK,CAAC+Q,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC,EACjE79B,KAAK,CACN;MAGD,IAAI,CAACopD,QAAQ,CAAC/lC,KAAK,EAAE,OAAO+lC,QAAQ,CAACpwD,IAAI;IAC3C;IAEA,aAAI8kC,GAAG,aAAHQ,KAAKtlC,KAAI,EAAE;MAEb,IAAI,CAACgH,KAAK,GAAG89B,GAAG,CAAC1V,SAAS;MAC1B,OAAO0V,GAAG,CAAC9kC,IAAI;IACjB;IAEA,IAAIyL,KAAK,CAACzL,IAAI,EAAE;MAEd,IAAI,CAACgH,KAAK,GAAGyE,KAAK,CAAC2jB,SAAS;MAC5B,IAAIzrB,cAAc,EAAE,IAAI,CAAC0sD,4BAA4B,CAAC1sD,cAAc,CAAC;MAErE,OAAO8H,KAAK,CAACzL,IAAI;IACnB;IAEA,iBAAIowD,QAAQ,aAARE,SAAUtwD,KAAI,EAAE;MAElB,IAAI,CAACgH,KAAK,GAAGopD,QAAQ,CAAChhC,SAAS;MAC/B,OAAOghC,QAAQ,CAACpwD,IAAI;IACtB;IAEA,IAAI8kC,YAAG,aAAHS,KAAKlW,OAAM,EAAE,MAAMyV,GAAG,CAACza,KAAK;IAChC,IAAI5e,KAAK,CAAC4jB,MAAM,EAAE,MAAM5jB,KAAK,CAAC4e,KAAK;IACnC,IAAI+lC,sBAAQ,aAARG,UAAUlhC,OAAM,EAAE,MAAM+gC,QAAQ,CAAC/lC,KAAK;IAE1C,MAAM,aAAG,KAAH,sBAAKA,KAAK,KAAI5e,KAAK,CAAC4e,KAAK,mBAAI+lC,QAAQ,qBAARI,WAAUnmC,KAAK;EACpD;EAEAgmC,4BAA4B,CAACrwD,IAAS,EAAE;IAAA;IACtC,IACEA,IAAI,CAACwC,MAAM,CAACpT,MAAM,KAAK,CAAC,IACxB,EAAC4Q,mBAAI,CAAC8B,KAAK,aAAV2uD,WAAYC,cAAa,CAC1B,QAAI,CAAC5sD,eAAe,CAAC,YAAY,EAAE,0BAA0B,CAAC,EAC9D;MACA,IAAI,CAACoC,KAAK,CAAC02C,QAAQ,CAAC+C,sBAAsB,EAAE;QAAEx5C,EAAE,EAAEnG;MAAK,CAAC,CAAC;IAC3D;EACF;EAGAioD,eAAe,CACb3iD,mBAA6C,EAC7CqrD,QAAkB,EACJ;IACd,IAAI,CAAC,IAAI,CAACjqD,SAAS,CAAC,KAAK,CAAC,IAAI,IAAI,CAACgc,KAAK,IAAO,EAAE;MAC/C,OAAO,IAAI,CAAC0nC,oBAAoB,EAAE;IACpC,CAAC,MAAM;MACL,OAAO,KAAK,CAACnC,eAAe,CAAC3iD,mBAAmB,EAAEqrD,QAAQ,CAAC;IAC7D;EACF;EAEAnrB,UAAU,CACRxlC,IAAuC,EACe;IACtD,IAAI,IAAI,CAAC0iB,KAAK,IAAU,EAAE;MAIxB,MAAM8d,MAAM,GAAG,IAAI,CAACxR,QAAQ,CAACiW,KAAK,IAAI;QACpC,MAAMhN,UAAU,GAAG,IAAI,CAACgtB,oCAAoC,CAE3D;QACD,IAAI,IAAI,CAACx2B,kBAAkB,EAAE,IAAI,CAAC,IAAI,CAAC/L,KAAK,IAAU,EAAEuiB,KAAK,EAAE;QAC/D,OAAOhN,UAAU;MACnB,CAAC,CAAC;MAEF,IAAIuI,MAAM,CAAClR,OAAO,EAAE;MAEpB,IAAI,CAACkR,MAAM,CAACnR,MAAM,EAAE;QAClB,IAAImR,MAAM,CAACnW,KAAK,EAAE,IAAI,CAACrjB,KAAK,GAAGw5B,MAAM,CAACpR,SAAS;QAE/CpvB,IAAI,CAACi4B,UAAU,GAAGuI,MAAM,CAACxgC,IAAI;MAC/B;IACF;IAEA,OAAO,KAAK,CAACwlC,UAAU,CAACxlC,IAAI,CAAC;EAC/B;EAGAkjC,4BAA4B,CAAC3E,KAAgB,EAAE;IAC7C,IAAI,IAAI,CAACrZ,GAAG,IAAa,EAAE;MACzB,IACEqZ,KAAK,CAACjsC,IAAI,KAAK,YAAY,IAC3B,CAAC,IAAI,CAAC0U,KAAK,CAACoY,gBAAgB,IAC5B,CAAC,IAAI,CAACpY,KAAK,CAACiY,MAAM,EAClB;QACA,IAAI,CAAC/Y,KAAK,CAAC02C,QAAQ,CAACzoB,iBAAiB,EAAE;UAAEhuB,EAAE,EAAEo4B;QAAM,CAAC,CAAC;MACvD;MAECA,KAAK,CAAyBj4B,QAAQ,GAAG,IAAI;IAChD;IACA,MAAMhU,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;IAC5C,IAAInzD,IAAI,EAAEisC,KAAK,CAACrG,cAAc,GAAG5lC,IAAI;IACrC,IAAI,CAAC8V,gBAAgB,CAACm2B,KAAK,CAAC;IAE5B,OAAOA,KAAK;EACd;EAEA74B,YAAY,CAAC1F,IAAY,EAAE2F,SAAmB,EAAW;IACvD,QAAQ3F,IAAI,CAAC1N,IAAI;MACf,KAAK,sBAAsB;QACzB,OAAO,IAAI,CAACoT,YAAY,CAAC1F,IAAI,CAAC4B,UAAU,EAAE+D,SAAS,CAAC;MACtD,KAAK,qBAAqB;QACxB,OAAO,IAAI;MACb;QACE,OAAO,KAAK,CAACD,YAAY,CAAC1F,IAAI,EAAE2F,SAAS,CAAC;IAAA;EAEhD;EAEAC,YAAY,CAAC5F,IAAY,EAAgC;IAAA,IAA9B6F,KAAc,uEAAG,KAAK;IAC/C,QAAQ7F,IAAI,CAAC1N,IAAI;MACf,KAAK,yBAAyB;QAC5B,IAAI,CAACs+D,mCAAmC,CAAC5wD,IAAI,EAAE6F,KAAK,CAAC;QACrD;MACF,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,qBAAqB;MAC1B,KAAK,iBAAiB;QACpB,IAAIA,KAAK,EAAE;UACT,IAAI,CAAC6qB,eAAe,CAAC/D,gCAAgC,CACnDiwB,QAAQ,CAAC8D,6BAA6B,EACtC;YAAEv6C,EAAE,EAAEnG;UAAK,CAAC,CACb;QACH,CAAC,MAAM;UACL,IAAI,CAACkG,KAAK,CAAC02C,QAAQ,CAAC8D,6BAA6B,EAAE;YAAEv6C,EAAE,EAAEnG;UAAK,CAAC,CAAC;QAClE;QACA,IAAI,CAAC4F,YAAY,CAAC5F,IAAI,CAAC4B,UAAU,EAAEiE,KAAK,CAAC;QACzC;MACF,KAAK,sBAAsB;QACzB,IAAI,CAACA,KAAK,IAAI7F,IAAI,CAAC6hC,IAAI,CAACvvC,IAAI,KAAK,sBAAsB,EAAE;UACvD0N,IAAI,CAAC6hC,IAAI,GAAG,IAAI,CAAClD,mBAAmB,CAAC3+B,IAAI,CAAC6hC,IAAI,CAAC;QACjD;MAEF;QACE,KAAK,CAACj8B,YAAY,CAAC5F,IAAI,EAAE6F,KAAK,CAAC;IAAA;EAErC;EAEA+qD,mCAAmC,CAAC5wD,IAAY,EAAE6F,KAAc,EAAQ;IACtE,QAAQ7F,IAAI,CAAC4B,UAAU,CAACtP,IAAI;MAC1B,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,qBAAqB;MAC1B,KAAK,iBAAiB;MACtB,KAAK,yBAAyB;QAC5B,IAAI,CAACsT,YAAY,CAAC5F,IAAI,CAAC4B,UAAU,EAAEiE,KAAK,CAAC;QACzC;MACF;QACE,KAAK,CAACD,YAAY,CAAC5F,IAAI,EAAE6F,KAAK,CAAC;IAAA;EAErC;EAEAgrD,qBAAqB,CAAC7wD,IAAY,EAAE8wD,YAAqB,EAAQ;IAC/D,QAAQ9wD,IAAI,CAAC1N,IAAI;MACf,KAAK,gBAAgB;MACrB,KAAK,uBAAuB;MAC5B,KAAK,iBAAiB;MACtB,KAAK,qBAAqB;QACxB,IAAI,CAACu+D,qBAAqB,CAAC7wD,IAAI,CAAC4B,UAAU,EAAE,KAAK,CAAC;QAClD;MACF;QACE,KAAK,CAACivD,qBAAqB,CAAC7wD,IAAI,EAAE8wD,YAAY,CAAC;IAAA;EAErD;EAGAvrD,WAAW,CACTjT,IAMqB,EACrBkT,yBAAkC,EAClCC,OAAqB,EACrB;IACA,OACE82C,QAAM,CACJ;MAIEwU,oBAAoB,EAAE,IAAI;MAC1BC,mBAAmB,EAAE,WAAW;MAChCC,mBAAmB,EAAE,YAAY;MACjCC,cAAc,EAAE,CAACzrD,OAAO,KAAK0S,SAAS,IACpC,CAAC3S,yBAAyB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;MACrD2rD,qBAAqB,EAAE,CAAC1rD,OAAO,KAAK0S,SAAS,IAC3C,CAAC3S,yBAAyB,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC;MACrD4rD,eAAe,EAAE,CAAC3rD,OAAO,KAAK0S,SAAS,IACrC,CAAC3S,yBAAyB,KAAK,CAAC,YAAY,EAAE,IAAI;IACtD,CAAC,EACDlT,IAAI,CACL,IAAI,KAAK,CAACiT,WAAW,CAACjT,IAAI,EAAEkT,yBAAyB,EAAEC,OAAO,CAAC;EAEpE;EAEA6+B,gBAAgB,GAAc;IAC5B,QAAQ,IAAI,CAACt9B,KAAK,CAAC1U,IAAI;MACrB;QAEE,OAAO,IAAI,CAAColC,eAAe,CAAe,IAAI,CAAC;MACjD;QACE,OAAO,KAAK,CAAC4M,gBAAgB,EAAE;IAAA;EAErC;EAEA+sB,4BAA4B,CAACnyB,IAAkB,EAAgB;IAE7D,IAAI,IAAI,CAACxc,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,IAAc,EAAE;MACjD,MAAM2jB,aAAa,GAAG,IAAI,CAAC6mB,gCAAgC,EAAE;MAE7D,IAAI,IAAI,CAACxqC,KAAK,IAAW,EAAE;QACzB,MAAMiiB,IAAI,GAAG,KAAK,CAAC0sB,4BAA4B,CAACnyB,IAAI,CAAC;QACrDyF,IAAI,CAAChhC,cAAc,GAAG0iC,aAAa;QACnC,OAAO1B,IAAI;MACb;MAEA,IAAI,CAACztC,UAAU,CAAC,IAAI,EAAY;IAClC;IAEA,OAAO,KAAK,CAACm6D,4BAA4B,CAACnyB,IAAI,CAAC;EACjD;EAEAoyB,mBAAmB,CACjBnvB,KAA+C,EACtC;IACT,IACE,IAAI,CAACn7B,KAAK,CAACoY,gBAAgB,IAC3B,IAAI,CAACsD,KAAK,IAAU,IACpB,IAAI,CAACiD,iBAAiB,EAAE,KAAKwc,KAAK,EAClC;MACA,IAAI,CAACnsB,IAAI,EAAE;MACX,OAAO,KAAK;IACd,CAAC,MAAM;MACL,OAAO,KAAK,CAACs7C,mBAAmB,CAACnvB,KAAK,CAAC;IACzC;EACF;EAOAI,aAAa,GAAY;IACvB,OAAO,IAAI,CAAC7f,KAAK,IAAO,IAAI,KAAK,CAAC6f,aAAa,EAAE;EACnD;EAEAC,eAAe,GAAY;IACzB,OACE,IAAI,CAAC9f,KAAK,IAAS,IAAI,IAAI,CAACA,KAAK,CAAU,OAAI,KAAK,CAAC8f,eAAe,EAAE;EAE1E;EAEAW,iBAAiB,CACf99B,QAA0B,EAC1Bw8B,IAAqB,EACV;IACX,MAAM7hC,IAAI,GAAG,KAAK,CAACmjC,iBAAiB,CAAC99B,QAAQ,EAAEw8B,IAAI,CAAC;IAEpD,IACE7hC,IAAI,CAAC1N,IAAI,KAAK,mBAAmB,IACjC0N,IAAI,CAACk4B,cAAc,IACnBl4B,IAAI,CAAC06B,KAAK,CAACnsC,KAAK,GAAGyR,IAAI,CAACk4B,cAAc,CAAC3pC,KAAK,EAC5C;MACA,IAAI,CAAC2X,KAAK,CAAC02C,QAAQ,CAACuD,yBAAyB,EAAE;QAC7Ch6C,EAAE,EAAEnG,IAAI,CAACk4B;MACX,CAAC,CAAC;IACJ;IAEA,OAAOl4B,IAAI;EACb;EAGAqmB,gBAAgB,CAACz1B,IAAY,EAAQ;IACnC,IAAI,IAAI,CAACoW,KAAK,CAACiY,MAAM,EAAE;MACrB,IAAIruB,IAAI,OAA0B,EAAE;QAClC,OAAO,IAAI,CAACw2B,QAAQ,KAAQ,CAAC,CAAC;MAChC;MACA,IAAIx2B,IAAI,OAAuB,EAAE;QAC/B,OAAO,IAAI,CAACw2B,QAAQ,KAAQ,CAAC,CAAC;MAChC;IACF;IACA,OAAO,KAAK,CAACf,gBAAgB,CAACz1B,IAAI,CAAC;EACrC;EAGA+9D,YAAY,GAAG;IACb,MAAM;MAAEr8D;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAI1U,IAAI,OAAU,EAAE;MAClB,IAAI,CAAC0U,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACopB,YAAY,EAAE;IACrB,CAAC,MAAM,IAAI51B,IAAI,OAAU,EAAE;MACzB,IAAI,CAAC0U,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACqpB,YAAY,EAAE;IACrB;EACF;EAEAglC,SAAS,GAAG;IACV,MAAM;MAAE76D;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAI1U,IAAI,OAAiB,EAAE;MACzB,IAAI,CAAC0U,KAAK,CAAClI,GAAG,IAAI,CAAC;MACnB,IAAI,CAACsoB,QAAQ,CAAQ,KAAC,CAAC;MACvB;IACF;IACA,OAAO90B,IAAI;EACb;EAEA+tC,gBAAgB,CACdyB,QAAsB,EACtBxB,gBAA6C,EAC7Cz6B,KAAc,EACR;IACN,KAAK,IAAIjW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkyC,QAAQ,CAAC1yC,MAAM,EAAEQ,CAAC,EAAE,EAAE;MACxC,MAAMsvC,IAAI,GAAG4C,QAAQ,CAAClyC,CAAC,CAAC;MACxB,IAAI,KAAI,IAAJsvC,oBAAI,CAAE5sC,IAAI,MAAK,sBAAsB,EAAE;QACzCwvC,QAAQ,CAAClyC,CAAC,CAAC,GAAG,IAAI,CAAC+uC,mBAAmB,CACpCO,IAAI,CACL;MACH;IACF;IACA,KAAK,CAACmB,gBAAgB,CAACyB,QAAQ,EAAExB,gBAAgB,EAAEz6B,KAAK,CAAC;EAC3D;EAEA84B,mBAAmB,CAAC3+B,IAA4B,EAAU;IACxDA,IAAI,CAAC4B,UAAU,CAACs2B,cAAc,GAAGl4B,IAAI,CAACk4B,cAAc;IAEpD,IAAI,CAAC9vB,gBAAgB,CAACpI,IAAI,CAAC4B,UAAU,EAAE5B,IAAI,CAACk4B,cAAc,CAACx5B,GAAG,CAAClQ,GAAG,CAAC;IAEnE,OAAOwR,IAAI,CAAC4B,UAAU;EACxB;EAEA6jC,gBAAgB,CAACjjC,MAAqB,EAAE;IACtC,IAAI,IAAI,CAACkgB,KAAK,IAAU,EAAE;MACxB,OAAOlgB,MAAM,CAAC49B,KAAK,CAAClB,IAAI,IAAI,IAAI,CAACx5B,YAAY,CAACw5B,IAAI,EAAE,IAAI,CAAC,CAAC;IAC5D;IACA,OAAO,KAAK,CAACuG,gBAAgB,CAACjjC,MAAM,CAAC;EACvC;EAEAoiC,qBAAqB,GAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,IAAU,IAAI,KAAK,CAACkiB,qBAAqB,EAAE;EAC9D;EAEA2sB,uBAAuB,GAAG;IAExB,OAAO,KAAK,CAACA,uBAAuB,EAAE,IAAI,IAAI,CAACvC,eAAe,EAAE;EAClE;EAEAhU,+BAA+B,CAC7Bh7C,IAAyB,EACJ;IAErB,IAAI,IAAI,CAAC0iB,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,IAAc,EAAE;MACjD,MAAM2jB,aAAa,GAAG,IAAI,CAAC6lB,kBAAkB,CAAC,MAE5C,IAAI,CAACgB,gCAAgC,EAAE,CACxC;MAED,IAAI7mB,aAAa,EAAErmC,IAAI,CAAC2D,cAAc,GAAG0iC,aAAa;IACxD;IACA,OAAO,KAAK,CAAC2U,+BAA+B,CAACh7C,IAAI,CAAC;EACpD;EAEAwxD,iCAAiC,CAC/BjvD,MAAsC,EAC9B;IACR,MAAMkvD,SAAS,GAAG,KAAK,CAACD,iCAAiC,CAACjvD,MAAM,CAAC;IACjE,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IACxD,MAAMmvD,UAAU,GAAGlvD,MAAM,CAAC,CAAC,CAAC;IAC5B,MAAMmvD,eAAe,GAAGD,UAAU,IAAI,IAAI,CAAChvB,WAAW,CAACgvB,UAAU,CAAC;IAElE,OAAOC,eAAe,GAAGF,SAAS,GAAG,CAAC,GAAGA,SAAS;EACpD;EAEAG,qBAAqB,GAAc;IACjC,MAAMrzB,KAAK,GAAG,KAAK,CAACqzB,qBAAqB,EAAE;IAC3C,MAAMt/D,IAAI,GAAG,IAAI,CAACmzD,wBAAwB,EAAE;IAE5C,IAAInzD,IAAI,EAAE;MACRisC,KAAK,CAACrG,cAAc,GAAG5lC,IAAI;MAC3B,IAAI,CAAC8V,gBAAgB,CAACm2B,KAAK,CAAC;IAC9B;IAEA,OAAOA,KAAK;EACd;EAEA+tB,kBAAkB,CAAI1B,EAAW,EAAK;IACpC,MAAMiH,mBAAmB,GAAG,IAAI,CAAC7qD,KAAK,CAACoY,gBAAgB;IACvD,IAAI,CAACpY,KAAK,CAACoY,gBAAgB,GAAG,IAAI;IAClC,IAAI;MACF,OAAOwrC,EAAE,EAAE;IACb,CAAC,SAAS;MACR,IAAI,CAAC5jD,KAAK,CAACoY,gBAAgB,GAAGyyC,mBAAmB;IACnD;EACF;EAEArF,UAAU,CACRxsD,IAAe,EACfqhC,WAAoB,EACpBC,UAAoB,EACjB;IACH,MAAMwwB,kBAAkB,GAAG,IAAI,CAAC9qD,KAAK,CAACqY,eAAe;IACrD,IAAI,CAACrY,KAAK,CAACqY,eAAe,GAAG,CAAC,CAAErf,IAAI,CAASwnD,QAAQ;IACrD,IAAI;MACF,OAAO,KAAK,CAACgF,UAAU,CAACxsD,IAAI,EAAEqhC,WAAW,EAAEC,UAAU,CAAC;IACxD,CAAC,SAAS;MACR,IAAI,CAACt6B,KAAK,CAACqY,eAAe,GAAGyyC,kBAAkB;IACjD;EACF;EAEA/E,0BAA0B,CACxB/sD,IAAS,EACT8G,UAAgC,EACkC;IAClE,IAAI,IAAI,CAAC4b,KAAK,IAAW,EAAE;MACzB1iB,IAAI,CAACwnD,QAAQ,GAAG,IAAI;MACpB,OAAO,IAAI,CAACuK,mBAAmB,CAC7BjrD,UAAU,EACV,IAAI,CAAC0lD,UAAU,CACbxsD,IAAI,EACc,IAAI,EACL,KAAK,CACvB,CACF;IACH,CAAC,MAAM,IAAI,IAAI,CAACiuB,YAAY,KAAe,EAAE;MAM3C,IAAI,CAAC,IAAI,CAACU,qBAAqB,EAAE,EAAE;QACjC3uB,IAAI,CAACwnD,QAAQ,GAAG,IAAI;QACpB,IAAI,CAACthD,KAAK,CAAC02C,QAAQ,CAACyC,wCAAwC,EAAE;UAC5Dl5C,EAAE,EAAEnG;QACN,CAAC,CAAC;QACF,OAAO,IAAI,CAACwqD,2BAA2B,CACrCxqD,IAAI,CACL;MACH;IACF,CAAC,MAAM;MACL,IAAI,CAAC9I,UAAU,CAAC,IAAI,EAAY;IAClC;EACF;EAEAwM,WAAW,CAGT1D,IAAe,EACfuD,WAAoB,EACpBpB,OAAgB,EAChBqB,aAAsB,EACtBc,gBAAyB,EACzBhS,IAAe,EACfiS,YAAsB,EACtB;IACA,MAAMhC,MAAM,GAAG,KAAK,CAACmB,WAAW,CAC9B1D,IAAI,EACJuD,WAAW,EACXpB,OAAO,EACPqB,aAAa,EACbc,gBAAgB,EAChBhS,IAAI,EACJiS,YAAY,CACb;IAED,IAAIhC,MAAM,CAACilD,QAAQ,EAAE;MACnB,MAAMwK,OAAO,GAAG,IAAI,CAACtrD,SAAS,CAAC,QAAQ,CAAC,GAEpC,CAAC,CAACnE,MAAM,CAAC7S,KAAK,CAACyT,IAAI,GACnB,CAAC,CAACZ,MAAM,CAACY,IAAI;MACjB,IAAI6uD,OAAO,EAAE;QACX,MAAM;UAAExiE;QAAI,CAAC,GAAG+S,MAAM;QACtB,IAAI,CAAC2D,KAAK,CAAC02C,QAAQ,CAACC,+BAA+B,EAAE;UACnD12C,EAAE,EAAE5D,MAAM;UACVu6C,UAAU,EACRttD,GAAG,CAAC8C,IAAI,KAAK,YAAY,IAAI,CAACiQ,MAAM,CAACmC,QAAQ,GACzClV,GAAG,CAAC0I,IAAI,GACP,IAAG,IAAI,CAAC2lB,KAAK,CAAC+C,KAAK,CAACpxB,GAAG,CAACjB,KAAK,EAAEiB,GAAG,CAAChB,GAAG,CAAE;QACjD,CAAC,CAAC;MACJ;IACF;IACA,OAAO+T,MAAM;EACf;EAEA8hD,wBAAwB,GAA0B;IAChD,MAAMb,QAAsB,GAAG,IAAI,CAAC9rB,eAAe,EAAE;IACrD,OAAiD8rB,QAAQ,CAACtrD,IAAI;EAChE;EAEA+5D,2BAA2B,GAAY;IACrC,OAAO,CAAC,CAAC,IAAI,CAACnuD,eAAe,CAAC,YAAY,EAAE,KAAK,CAAC;EACpD;EAEA3D,KAAK,GAAG;IACN,IAAI,IAAI,CAAC8xD,2BAA2B,EAAE,EAAE;MACtC,IAAI,CAACjrD,KAAK,CAACoY,gBAAgB,GAAG,IAAI;IACpC;IACA,OAAO,KAAK,CAACjf,KAAK,EAAE;EACtB;EAEA+xD,aAAa,GAAG;IACd,IAAI,IAAI,CAACD,2BAA2B,EAAE,EAAE;MACtC,IAAI,CAACjrD,KAAK,CAACoY,gBAAgB,GAAG,IAAI;IACpC;IACA,OAAO,KAAK,CAAC8yC,aAAa,EAAE;EAC9B;EAEAC,oBAAoB,CAClBnyD,IAA+B,EAC/BoyD,QAAiB,EACjBC,cAAuB,EACvBtuB,eAAwB,EACxB;IACA,IAAI,CAACquB,QAAQ,IAAIruB,eAAe,EAAE;MAChC,IAAI,CAACuuB,kCAAkC,CACrCtyD,IAAI,EACW,KAAK,EACpBqyD,cAAc,CACf;MACD,OAAO,IAAI,CAAC1tD,UAAU,CAAoB3E,IAAI,EAAE,iBAAiB,CAAC;IACpE;IACAA,IAAI,CAACm5B,UAAU,GAAG,OAAO;IACzB,OAAO,KAAK,CAACg5B,oBAAoB,CAC/BnyD,IAAI,EACJoyD,QAAQ,EACRC,cAAc,EACdtuB,eAAe,CAChB;EACH;EAEAH,oBAAoB,CAClBJ,SAAoC,EACpCK,gBAAyB,EACzBC,kBAA2B,EAC3BC,eAAwB,EAExBppB,WAAqC,EAClB;IACnB,IAAI,CAACkpB,gBAAgB,IAAIE,eAAe,EAAE;MACxC,IAAI,CAACuuB,kCAAkC,CACrC9uB,SAAS,EACM,IAAI,EACnBM,kBAAkB,CACnB;MACD,OAAO,IAAI,CAACn/B,UAAU,CAAoB6+B,SAAS,EAAE,iBAAiB,CAAC;IACzE;IACAA,SAAS,CAAC5N,UAAU,GAAG,OAAO;IAC9B,OAAO,KAAK,CAACgO,oBAAoB,CAC/BJ,SAAS,EACTK,gBAAgB,EAChBC,kBAAkB,EAClBC,eAAe,EACfD,kBAAkB,GAAGvrB,mBAAmB,GAAGb,oBAAoB,CAChE;EACH;EAEA46C,kCAAkC,CAChCtyD,IAAS,EACTuyD,QAAiB,EACjBC,wBAAiC,EAC3B;IACN,MAAMC,WAAW,GAAGF,QAAQ,GAAG,UAAU,GAAG,OAAO;IACnD,MAAMG,YAAY,GAAGH,QAAQ,GAAG,OAAO,GAAG,UAAU;IAEpD,IAAII,QAAQ,GAAG3yD,IAAI,CAACyyD,WAAW,CAAC;IAChC,IAAIG,SAAS;IAEb,IAAIC,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,iBAAiB,GAAG,IAAI;IAE5B,MAAMp0D,GAAG,GAAGi0D,QAAQ,CAACj0D,GAAG,CAACnQ,KAAK;IAO9B,IAAI,IAAI,CAAC0/B,YAAY,IAAQ,EAAE;MAE7B,MAAM8kC,OAAO,GAAG,IAAI,CAACr7B,eAAe,EAAE;MACtC,IAAI,IAAI,CAACzJ,YAAY,IAAQ,EAAE;QAE7B,MAAM+kC,QAAQ,GAAG,IAAI,CAACt7B,eAAe,EAAE;QACvC,IAAIzkB,0BAA0B,CAAC,IAAI,CAACjM,KAAK,CAAC1U,IAAI,CAAC,EAAE;UAE/CugE,gBAAgB,GAAG,IAAI;UACvBF,QAAQ,GAAGI,OAAO;UAClBH,SAAS,GAAGL,QAAQ,GAChB,IAAI,CAAC76B,eAAe,EAAE,GACtB,IAAI,CAACu7B,qBAAqB,EAAE;UAChCH,iBAAiB,GAAG,KAAK;QAC3B,CAAC,MAAM;UAELF,SAAS,GAAGI,QAAQ;UACpBF,iBAAiB,GAAG,KAAK;QAC3B;OACD,MAAM,IAAI7/C,0BAA0B,CAAC,IAAI,CAACjM,KAAK,CAAC1U,IAAI,CAAC,EAAE;QAEtDwgE,iBAAiB,GAAG,KAAK;QACzBF,SAAS,GAAGL,QAAQ,GAChB,IAAI,CAAC76B,eAAe,EAAE,GACtB,IAAI,CAACu7B,qBAAqB,EAAE;MAClC,CAAC,MAAM;QAELJ,gBAAgB,GAAG,IAAI;QACvBF,QAAQ,GAAGI,OAAO;MACpB;KACD,MAAM,IAAI9/C,0BAA0B,CAAC,IAAI,CAACjM,KAAK,CAAC1U,IAAI,CAAC,EAAE;MAEtDugE,gBAAgB,GAAG,IAAI;MACvB,IAAIN,QAAQ,EAAE;QACZI,QAAQ,GAAG,IAAI,CAACj7B,eAAe,CAAC,IAAI,CAAC;QACrC,IAAI,CAAC,IAAI,CAACzJ,YAAY,IAAQ,EAAE;UAC9B,IAAI,CAACoW,iBAAiB,CACpBsuB,QAAQ,CAACz6D,IAAI,EACby6D,QAAQ,CAACj0D,GAAG,CAACnQ,KAAK,EAClB,IAAI,EACJ,IAAI,CACL;QACH;MACF,CAAC,MAAM;QACLokE,QAAQ,GAAG,IAAI,CAACM,qBAAqB,EAAE;MACzC;IACF;IACA,IAAIJ,gBAAgB,IAAIL,wBAAwB,EAAE;MAChD,IAAI,CAACtsD,KAAK,CACRqsD,QAAQ,GACJ3V,QAAQ,CAAC0D,+BAA+B,GACxC1D,QAAQ,CAACyD,+BAA+B,EAC5C;QAAEl6C,EAAE,EAAEzH;MAAI,CAAC,CACZ;IACH;IAEAsB,IAAI,CAACyyD,WAAW,CAAC,GAAGE,QAAQ;IAC5B3yD,IAAI,CAAC0yD,YAAY,CAAC,GAAGE,SAAS;IAE9B,MAAMM,OAAO,GAAGX,QAAQ,GAAG,YAAY,GAAG,YAAY;IACtDvyD,IAAI,CAACkzD,OAAO,CAAC,GAAGL,gBAAgB,GAAG,MAAM,GAAG,OAAO;IAEnD,IAAIC,iBAAiB,IAAI,IAAI,CAACvkC,aAAa,IAAQ,EAAE;MACnDvuB,IAAI,CAAC0yD,YAAY,CAAC,GAAGH,QAAQ,GACzB,IAAI,CAAC76B,eAAe,EAAE,GACtB,IAAI,CAACu7B,qBAAqB,EAAE;IAClC;IACA,IAAI,CAACjzD,IAAI,CAAC0yD,YAAY,CAAC,EAAE;MACvB1yD,IAAI,CAAC0yD,YAAY,CAAC,GAAGnhC,eAAe,CAACvxB,IAAI,CAACyyD,WAAW,CAAC,CAAC;IACzD;IACA,IAAIF,QAAQ,EAAE;MACZ,IAAI,CAAC9H,eAAe,CAClBzqD,IAAI,CAAC0yD,YAAY,CAAC,EAClBG,gBAAgB,GAAGt6C,mBAAmB,GAAGb,oBAAoB,CAC9D;IACH;EACF;AACF,CAAC;AAEH,SAASy7C,qBAAqB,CAACvxD,UAAwB,EAAW;EAChE,IAAIA,UAAU,CAACtP,IAAI,KAAK,kBAAkB,EAAE,OAAO,KAAK;EAExD,MAAM;IAAEoS,QAAQ;IAAEqrB;EAAS,CAAC,GAAGnuB,UAAU;EAEzC,IACE8C,QAAQ,IACRqrB,QAAQ,CAACz9B,IAAI,KAAK,eAAe,KAChCy9B,QAAQ,CAACz9B,IAAI,KAAK,iBAAiB,IAAIy9B,QAAQ,CAACqjC,WAAW,CAAChkE,MAAM,GAAG,CAAC,CAAC,EACxE;IACA,OAAO,KAAK;EACd;EAEA,OAAOikE,iCAAiC,CAACzxD,UAAU,CAACrS,MAAM,CAAC;AAC7D;AAQA,SAAS6/D,8BAA8B,CACrCxtD,UAAwB,EACxB0xD,MAAe,EACN;EAAA;EACT,MAAM;IAAEhhE;EAAK,CAAC,GAAGsP,UAAU;EAC3B,yBAAIA,UAAU,CAACE,KAAK,KAAhB,0BAAkBa,aAAa,EAAE;IACnC,OAAO,KAAK;EACd;EACA,IAAI2wD,MAAM,EAAE;IACV,IAAIhhE,IAAI,KAAK,SAAS,EAAE;MACtB,MAAM;QAAE5C;MAAM,CAAC,GAAGkS,UAAU;MAC5B,IAAI,OAAOlS,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,SAAS,EAAE;QAC3D,OAAO,IAAI;MACb;IACF;EACF,CAAC,MAAM;IACL,IAAI4C,IAAI,KAAK,eAAe,IAAIA,IAAI,KAAK,gBAAgB,EAAE;MACzD,OAAO,IAAI;IACb;EACF;EACA,IAAIihE,QAAQ,CAAC3xD,UAAU,EAAE0xD,MAAM,CAAC,IAAIE,gBAAgB,CAAC5xD,UAAU,EAAE0xD,MAAM,CAAC,EAAE;IACxE,OAAO,IAAI;EACb;EACA,IAAIhhE,IAAI,KAAK,iBAAiB,IAAIsP,UAAU,CAACwxD,WAAW,CAAChkE,MAAM,KAAK,CAAC,EAAE;IACrE,OAAO,IAAI;EACb;EACA,IAAI+jE,qBAAqB,CAACvxD,UAAU,CAAC,EAAE;IACrC,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd;AAEA,SAAS2xD,QAAQ,CAAC3xD,UAAwB,EAAE0xD,MAAe,EAAW;EACpE,IAAIA,MAAM,EAAE;IACV,OACE1xD,UAAU,CAACtP,IAAI,KAAK,SAAS,KAC5B,OAAOsP,UAAU,CAAClS,KAAK,KAAK,QAAQ,IAAI,QAAQ,IAAIkS,UAAU,CAAC;EAEpE,CAAC,MAAM;IACL,OACEA,UAAU,CAACtP,IAAI,KAAK,gBAAgB,IACpCsP,UAAU,CAACtP,IAAI,KAAK,eAAe;EAEvC;AACF;AAEA,SAASkhE,gBAAgB,CAAC5xD,UAAwB,EAAE0xD,MAAe,EAAW;EAC5E,IAAI1xD,UAAU,CAACtP,IAAI,KAAK,iBAAiB,EAAE;IACzC,MAAM;MAAE+1D,QAAQ;MAAErpD;IAAS,CAAC,GAAG4C,UAA+B;IAC9D,IAAIymD,QAAQ,KAAK,GAAG,IAAIkL,QAAQ,CAACv0D,QAAQ,EAAEs0D,MAAM,CAAC,EAAE;MAClD,OAAO,IAAI;IACb;EACF;EACA,OAAO,KAAK;AACd;AAEA,SAASD,iCAAiC,CAACzxD,UAAwB,EAAW;EAC5E,IAAIA,UAAU,CAACtP,IAAI,KAAK,YAAY,EAAE,OAAO,IAAI;EACjD,IAAIsP,UAAU,CAACtP,IAAI,KAAK,kBAAkB,EAAE,OAAO,KAAK;EACxD,IAAIsP,UAAU,CAAC8C,QAAQ,EAAE,OAAO,KAAK;EAErC,OAAO2uD,iCAAiC,CAACzxD,UAAU,CAACrS,MAAM,CAAC;AAC7D;AC1iIA,MAAMkkE,iBAAiB,GAAG10D,cAAe,cAAa,CAAC;EACrD20D,mBAAmB,EAAE,2BAA2B;EAChDC,eAAe,EAAE;AACnB,CAAC,CAAC;AAIF,mBAAgB1zD,UAAyB,IACvC,MAAM2zD,uBAAuB,SAAS3zD,UAAU,CAAmB;EACjE4zD,gBAAgB,CACdniC,YAAe,EAC+C;IAC9D,IAAI,IAAI,CAAChP,KAAK,KAAgB,EAAE;MAC9B,MAAM1iB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7B,IAAI,CAACuR,IAAI,EAAE;MACX,IAAI,CAAC89C,aAAa,EAAE;MAIpB9zD,IAAI,CAAC9H,IAAI,GAAG,KAAK,CAACw/B,eAAe,CAAe,IAAI,CAAC;MAErD,IAAI,CAACo8B,aAAa,EAAE;MACpB,IAAI,CAAC/kC,MAAM,CAAgB;MAE3B,OAAO,IAAI,CAACglC,iBAAiB,CAAC/zD,IAAI,EAAE0xB,YAAY,CAAC;IACnD;EACF;EAEAqiC,iBAAiB,CACf/zD,IAAY,EACZ0xB,YAAe,EAC2B;IAC1C,MAAMsiC,UAAU,GAAG,CAAC,EAAEh0D,IAAI,CAAC0xB,YAAY,IAAI1xB,IAAI,CAAC1N,IAAI,KAAK,aAAa,CAAC;IACvE0N,IAAI,CAAC0xB,YAAY,GAAGA,YAAY;IAGhC,OAAOsiC,UAAU,GAAGh0D,IAAI,GAAG,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EACjE;EAMAqmB,gBAAgB,CAACz1B,IAAY,EAAE;IAC7B,IACEA,IAAI,KAA0B,MAC9B,IAAI,CAACitB,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC9W,KAAK,CAAClI,GAAG,GAAG,CAAC,CAAC,OAA0B,EACnE;MACA,OAAO,IAAI,CAACsoB,QAAQ,MAAiB,CAAC,CAAC;IACzC;IAEA,OAAO,KAAK,CAACf,gBAAgB,CAACz1B,IAAI,CAAC;EACrC;EAMAioC,aAAa,CACXvzB,mBAA6C,EACb;IAChC,OACE,IAAI,CAACuuD,gBAAgB,CAAC,YAAY,CAAC,IACnC,KAAK,CAACh7B,aAAa,CAACvzB,mBAAmB,CAAC;EAE5C;EAEAoyB,eAAe,CAAC+C,OAAiB,EAAkC;IAKjE,OACE,IAAI,CAACo5B,gBAAgB,CAAC,YAAY,CAAC,IAAI,KAAK,CAACn8B,eAAe,CAAC+C,OAAO,CAAC;EAEzE;EAEA4J,iBAAiB,CACf9uB,IAAY,EACZlQ,QAAkB,EAClBupD,aAAsB,EACtBjpD,SAAkB,EAClB;IAIA,IAAI4P,IAAI,KAAK6G,SAAS,EAAE;MACtB,KAAK,CAACioB,iBAAiB,CAAC9uB,IAAI,EAAElQ,QAAQ,EAAEupD,aAAa,EAAEjpD,SAAS,CAAC;IACnE;EACF;EAMA2+B,gBAAgB,GAAgC;IAC9C,OAAO,IAAI,CAACuvB,gBAAgB,CAAC,SAAS,CAAC,IAAI,KAAK,CAACvvB,gBAAgB,EAAE;EACrE;EAEA/+B,WAAW,CAACjT,IAAY,EAAEgwC,eAAwB,EAAE78B,OAAqB,EAAE;IACzE,OACEnT,IAAI,KAAK,aAAa,IACtB,KAAK,CAACiT,WAAW,CAACjT,IAAI,EAAEgwC,eAAe,EAAE78B,OAAO,CAAC;EAErD;EAEAG,YAAY,CAAC5F,IAAY,EAAE6F,KAAc,EAAQ;IAC/C,IACE7F,IAAI,IACJA,IAAI,CAAC1N,IAAI,KAAK,aAAa,IAC3B0N,IAAI,CAAC0xB,YAAY,KAAK,YAAY,EAClC;MACA1xB,IAAI,CAAC0xB,YAAY,GAAG,SAAS;IAC/B,CAAC,MAAM;MACL,KAAK,CAAC9rB,YAAY,CAAC5F,IAAI,EAAE6F,KAAK,CAAC;IACjC;EACF;EAMAouD,yBAAyB,CAAC9yC,EAAU,EAAEriB,GAAW,EAAW;IAC1D,IAAI,KAAK,CAACm1D,yBAAyB,CAAC9yC,EAAE,EAAEriB,GAAG,CAAC,EAAE;MAC5C,OAAO,IAAI;IACb;IAIA,MAAMmmB,SAAS,GAAG,IAAI,CAACI,SAAS,EAAE;IAClC,IAAIJ,SAAS,CAAC3yB,IAAI,QAAmB,EAAE;MACrC,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA4hE,mBAAmB,CACjBl0D,IAA4C,EAC5Cm0D,OAAgB,EAChB;IAEA,IAAIn0D,IAAI,CAACmJ,KAAK,IAAInJ,IAAI,CAACmJ,KAAK,CAAC7W,IAAI,KAAK,aAAa,EAAE;IACrD,KAAK,CAAC4hE,mBAAmB,CAACl0D,IAAI,EAAEm0D,OAAO,CAAC;EAC1C;EAGAl1B,wBAAwB,CACtBj/B,IAAmC,EACnCk/B,IAAkB,EACa;IAC/B,IACEA,IAAI,CAAC5sC,IAAI,KAAK,aAAa,IAC1B4sC,IAAI,CAACp9B,KAAK,IAAIo9B,IAAI,CAACp9B,KAAK,CAACa,aAAc,EACxC;MAEA,OAAO,KAAK,CAACs8B,wBAAwB,CAACj/B,IAAI,EAAEk/B,IAAI,CAAC;IACnD;IAEA,IAAI,IAAI,CAACxc,KAAK,IAAU,EAAE;MAExB,MAAM1gB,IAAwB,GAAGhC,IAAI;MACrCgC,IAAI,CAACmH,KAAK,GAAG,IAAI,CAAC4qD,iBAAiB,CAAC70B,IAAI,EAAE,YAAY,CAAC;MACvD,IAAI,CAAClpB,IAAI,EAAE;MACXhU,IAAI,CAACmB,IAAI,GAAG,KAAK,CAACixD,mCAAmC,CAAC,KAAK,CAAC;MAC5D,OAAO,IAAI,CAACzvD,UAAU,CAAC3C,IAAI,EAAE,kBAAkB,CAAC;IAClD;IAEA,IAAI,CAAC6sB,SAAS,EAAE;IAChB7uB,IAAI,CAAC9H,IAAI,GAAGgnC,IAAI,CAAChnC,IAAI;IACrB,OAAO,IAAI,CAAC67D,iBAAiB,CAAC/zD,IAAI,EAAE,WAAW,CAAC;EAClD;EAEAq0D,UAAU,CACRxxD,eAAyB,EACzByxD,qBAA+B,EAC/BvxD,eAA2D,EACvB;IACpC,OACE,IAAI,CAAC8wD,gBAAgB,CAAC,gBAAgB,CAAC,IACvC,KAAK,CAACQ,UAAU,CACdxxD,eAAe,EACfyxD,qBAAqB,EACrBvxD,eAAe,CAChB;EAEL;EAEAwxD,eAAe,CACbC,SAAmB,EACgC;IACnD,OACE,IAAI,CAACX,gBAAgB,CAAC,YAAY,CAAC,IAAI,KAAK,CAACU,eAAe,CAACC,SAAS,CAAC;EAE3E;EAEAhI,UAAU,CACRxsD,IAAO,EACPqhC,WAAiD,EACjDC,UAAoB,EACjB;IACH,MAAMhvC,IAAI,GAAG+uC,WAAW,GAAG,kBAAkB,GAAG,iBAAiB;IAEjE,IAAI,CAACrrB,IAAI,EAAE;IACX,MAAMy+C,SAAS,GAAG,IAAI,CAACztD,KAAK,CAACkO,MAAM;IAEnC,MAAMpC,WAAW,GAAG,IAAI,CAAC+gD,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI/gD,WAAW,EAAE;MACf,IACE,IAAI,CAAC4P,KAAK,IAAa,IACvB,IAAI,CAACA,KAAK,KAAgB,IAC1B,IAAI,CAACA,KAAK,GAAW,EACrB;QACA1iB,IAAI,CAACiE,EAAE,GAAG6O,WAAW;MACvB,CAAC,MAAM,IAAIwuB,UAAU,IAAI,CAACD,WAAW,EAAE;QACrCrhC,IAAI,CAACiE,EAAE,GAAG,IAAI;QACdjE,IAAI,CAACmD,IAAI,GAAG,IAAI,CAAC4wD,iBAAiB,CAACjhD,WAAW,EAAE,WAAW,CAAC;QAC5D,OAAO,IAAI,CAACnO,UAAU,CAAC3E,IAAI,EAAE1N,IAAI,CAAC;MACpC,CAAC,MAAM;QACL,MAAM,IAAI,CAAC4T,KAAK,CAACutD,iBAAiB,CAACC,mBAAmB,EAAE;UACtDvtD,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACL,IAAI,CAAC+7B,YAAY,CAACphC,IAAI,EAAEqhC,WAAW,EAAEC,UAAU,CAAC;IAClD;IAEA,KAAK,CAACsB,eAAe,CAAC5iC,IAAI,CAAC;IAC3BA,IAAI,CAACmD,IAAI,GACP,IAAI,CAAC0wD,gBAAgB,CAAC,WAAW,CAAC,IAClC,KAAK,CAACa,cAAc,CAAC,CAAC,CAAC10D,IAAI,CAACC,UAAU,EAAEw0D,SAAS,CAAC;IACpD,OAAO,IAAI,CAAC9vD,UAAU,CAAC3E,IAAI,EAAE1N,IAAI,CAAC;EACpC;EAEAuU,WAAW,CAAC7G,IAAY,EAAE8G,UAAgC,EAAe;IACvE,MAAMgM,WAAW,GAAG,IAAI,CAAC+gD,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI,CAAC/gD,WAAW,EAAE,OAAO,KAAK,CAACjM,WAAW,CAAC7G,IAAI,EAAE8G,UAAU,CAAC;IAE5D,IAAI,CAAC,IAAI,CAACmnB,YAAY,IAAU,IAAI,CAAC,IAAI,CAACvL,KAAK,IAAU,EAAE;MAEzD1iB,IAAI,CAACmH,UAAU,GAAG,EAAE;MACpBnH,IAAI,CAACwG,MAAM,GAAG,IAAI;MAClBxG,IAAI,CAACoH,WAAW,GAAG,IAAI,CAAC2sD,iBAAiB,CAACjhD,WAAW,EAAE,aAAa,CAAC;MACrE,OAAO,IAAI,CAACnO,UAAU,CAAC3E,IAAI,EAAE,wBAAwB,CAAC;IACxD;IAGA,IAAI,CAACknB,YAAY,CAAC,mBAAmB,CAAC;IACtC,MAAMsc,SAAS,GAAG,IAAI,CAAC/+B,SAAS,EAAE;IAClC++B,SAAS,CAACt8B,QAAQ,GAAG4L,WAAW;IAChC9S,IAAI,CAACmH,UAAU,GAAG,CAAC,IAAI,CAACxC,UAAU,CAAC6+B,SAAS,EAAE,wBAAwB,CAAC,CAAC;IAExE,OAAO,KAAK,CAAC38B,WAAW,CAAC7G,IAAI,EAAE8G,UAAU,CAAC;EAC5C;EAEAs4B,wBAAwB,GAAY;IAClC,IAAI,IAAI,CAAC1c,KAAK,IAAa,EAAE;MAC3B,MAAM1M,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;MAClC,IAAI,IAAI,CAAC0I,oBAAoB,CAAClY,IAAI,EAAE,MAAM,CAAC,EAAE;QAC3C,IACE,IAAI,CAAC6H,KAAK,CAAC82C,UAAU,CACnB7gD,cAAc,CAAgB,MAC9B,IAAI,CAAC2R,mBAAmB,CAACzP,IAAI,GAAG,CAAC,CAAC,CACnC,EACD;UACA,OAAO,IAAI;QACb;MACF;IACF;IACA,OAAO,KAAK,CAACopB,wBAAwB,EAAE;EACzC;EAEAw1B,gCAAgC,CAAC50D,IAAY,EAAW;IACtD,IAAIA,IAAI,CAACmH,UAAU,IAAInH,IAAI,CAACmH,UAAU,CAAC/X,MAAM,GAAG,CAAC,EAAE;MAEjD,OAAO,IAAI;IACb;IACA,OAAO,KAAK,CAACwlE,gCAAgC,CAAC50D,IAAI,CAAC;EACrD;EAEA60D,WAAW,CAAC70D,IAA8B,EAAQ;IAChD,MAAM;MAAEmH;IAAW,CAAC,GAAGnH,IAAI;IAC3B,IAAImH,UAAU,YAAVA,UAAU,CAAE/X,MAAM,EAAE;MACtB4Q,IAAI,CAACmH,UAAU,GAAGA,UAAU,CAACjX,MAAM,CAEjC8P,IAAI,IAAIA,IAAI,CAACkH,QAAQ,CAAC5U,IAAI,KAAK,aAAa,CAC7C;IACH;IACA,KAAK,CAACuiE,WAAW,CAAC70D,IAAI,CAAC;IACvBA,IAAI,CAACmH,UAAU,GAAGA,UAAU;EAC9B;EAEA4xB,WAAW,CACT/4B,IAAiC,EACkB;IACnD,MAAM8S,WAAW,GAAG,IAAI,CAAC+gD,gBAAgB,CAAC,YAAY,CAAC;IACvD,IAAI,CAAC/gD,WAAW,EAAE,OAAO,KAAK,CAACimB,WAAW,CAAC/4B,IAAI,CAAC;IAEhDA,IAAI,CAACmH,UAAU,GAAG,EAAE;IAEpB,IAAI,CAAC,IAAI,CAAC8mB,YAAY,IAAU,IAAI,CAAC,IAAI,CAACvL,KAAK,IAAU,EAAE;MAEzD1iB,IAAI,CAACwG,MAAM,GAAG,IAAI,CAACutD,iBAAiB,CAACjhD,WAAW,EAAE,eAAe,CAAC;MAClE,IAAI,CAAC+b,SAAS,EAAE;MAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;IACnD;IAGA,MAAMwjC,SAAS,GACb,IAAI,CAAC17B,eAAe,CAA2BgL,WAAW,CAAC;IAC7D0wB,SAAS,CAACC,KAAK,GAAG3wB,WAAW;IAC7B9S,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAClB,IAAI,CAACe,UAAU,CAAC6+B,SAAS,EAAE,wBAAwB,CAAC,CACrD;IAED,IAAI,IAAI,CAACte,GAAG,IAAU,EAAE;MAEtB,MAAM4vC,aAAa,GAAG,IAAI,CAACC,6BAA6B,CAAC/0D,IAAI,CAAC;MAG9D,IAAI,CAAC80D,aAAa,EAAE,IAAI,CAACE,0BAA0B,CAACh1D,IAAI,CAAC;IAC3D;IAEA,IAAI,CAACwuB,gBAAgB,CAAU;IAC/BxuB,IAAI,CAACwG,MAAM,GAAG,IAAI,CAACyuD,iBAAiB,EAAE;IACtC,IAAI,CAACpmC,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAi1D,iBAAiB,GAAsC;IAGrD,OACE,IAAI,CAACpB,gBAAgB,CAAC,eAAe,CAAC,IAAI,KAAK,CAACoB,iBAAiB,EAAE;EAEvE;EAGAnB,aAAa,GAAS;IACpB,IAAI,IAAI,CAAC9sD,KAAK,CAACzY,KAAK,GAAG,IAAI,CAACyY,KAAK,CAACqB,aAAa,CAACja,KAAK,EAAE;MACrD,IAAI,CAAC8X,KAAK,CAACutD,iBAAiB,CAACE,eAAe,EAAE;QAC5CxtD,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB;MACjB,CAAC,CAAC;IACJ;EACF;AACF,CAAC;ACpXH,kBAAgBpI,UAAyB,IACvC,MAAMi1D,gBAAgB,SAASj1D,UAAU,CAAmB;EAC1Dk1D,gBAAgB,GAAiB;IAC/B,IAAI,IAAI,CAACzyC,KAAK,IAAW,EAAE;MACzB,MAAM0yC,mBAAmB,GAAG,IAAI,CAACpuD,KAAK,CAAC3B,QAAQ;MAE/C,MAAMrF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgB;MAC3C,IAAI,CAACuR,IAAI,EAAE;MACX,IAAIjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;QACtC,MAAM4F,IAAI,GAAG,IAAI,CAACm9D,mBAAmB,EAAE;QACvC,MAAMC,UAAU,GAAG,IAAI,CAACt3B,gBAAgB,CAACh+B,IAAI,EAAE9H,IAAI,CAAC;QAEpDo9D,UAAU,CAAChjE,IAAI,GAAG,uBAAuB;QACzC,IAAI,IAAI,CAACowB,KAAK,IAAW,EAAE;UACzB,OAAO4yC,UAAU;QACnB;MACF;MACA,IAAI,CAACp+D,UAAU,CAACk+D,mBAAmB,CAAC;IACtC;EACF;EAMAv8B,aAAa,CAACvzB,mBAA6C,EAAgB;IACzE,OACE,IAAI,CAAC6vD,gBAAgB,EAAE,IAAI,KAAK,CAACt8B,aAAa,CAACvzB,mBAAmB,CAAC;EAEvE;AACF,CAAC;ACfI,SAASoB,SAAS,CACvBiV,OAAmB,EACnB45C,cAA4B,EACnB;EAIT,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GACnC,OAAOF,cAAc,KAAK,QAAQ,GAAG,CAACA,cAAc,EAAE,EAAE,CAAC,GAAGA,cAAc;EAE5E,MAAMG,YAAY,GAAG1lE,MAAM,CAACd,IAAI,CAACumE,eAAe,CAAC;EAEjD,MAAME,sBAAsB,GAAGD,YAAY,CAACtmE,MAAM,KAAK,CAAC;EAExD,OAAOusB,OAAO,CAAC8O,IAAI,CAACmrC,CAAC,IAAI;IACvB,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAAE;MACzB,OAAOD,sBAAsB,IAAIC,CAAC,KAAKJ,YAAY;IACrD,CAAC,MAAM;MACL,MAAM,CAAC55C,UAAU,EAAEC,aAAa,CAAC,GAAG+5C,CAAC;MACrC,IAAIh6C,UAAU,KAAK45C,YAAY,EAAE;QAC/B,OAAO,KAAK;MACd;MACA,KAAK,MAAMhmE,GAAG,IAAIkmE,YAAY,EAAE;QAE9B,IAAI75C,aAAa,CAACrsB,GAAG,CAAC,KAAKimE,eAAe,CAACjmE,GAAG,CAAC,EAAE;UAC/C,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb;EACF,CAAC,CAAC;AACJ;AAEO,SAASsU,eAAe,CAG7B6X,OAAmB,EAAEzjB,IAAgB,EAAE29D,MAAkB,EAAE;EAC3D,MAAM95C,MAAM,GAAGJ,OAAO,CAACm6C,IAAI,CAAC/5C,MAAM,IAAI;IACpC,IAAI7c,KAAK,CAACC,OAAO,CAAC4c,MAAM,CAAC,EAAE;MACzB,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK7jB,IAAI;IAC3B,CAAC,MAAM;MACL,OAAO6jB,MAAM,KAAK7jB,IAAI;IACxB;EACF,CAAC,CAAC;EAEF,IAAI6jB,MAAM,IAAI7c,KAAK,CAACC,OAAO,CAAC4c,MAAM,CAAC,IAAIA,MAAM,CAAC3sB,MAAM,GAAG,CAAC,EAAE;IACxD,OAAQ2sB,MAAM,CAAC,CAAC,CAAC,CAA+B85C,MAAM,CAAC;EACzD;EAEA,OAAO,IAAI;AACb;AAEA,MAAME,kBAAkB,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC;AACjE,MAAMC,YAAY,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;AAChD,MAAMC,6BAA6B,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC;AAE9C,SAASC,eAAe,CAACv6C,OAAmB,EAAE;EACnD,IAAIjV,SAAS,CAACiV,OAAO,EAAE,YAAY,CAAC,EAAE;IACpC,IAAIjV,SAAS,CAACiV,OAAO,EAAE,mBAAmB,CAAC,EAAE;MAC3C,MAAM,IAAIkb,KAAK,CACb,iEAAiE,CAClE;IACH;IAEA,MAAMs/B,sBAAsB,GAAGryD,eAAe,CAC5C6X,OAAO,EACP,YAAY,EACZ,wBAAwB,CACzB;IACD,IACEw6C,sBAAsB,IAAI,IAAI,IAC9B,OAAOA,sBAAsB,KAAK,SAAS,EAC3C;MACA,MAAM,IAAIt/B,KAAK,CAAC,6CAA6C,CAAC;IAChE;IAEA,MAAMu/B,sBAAsB,GAAGtyD,eAAe,CAC5C6X,OAAO,EACP,YAAY,EACZ,wBAAwB,CACzB;IACD,IACEy6C,sBAAsB,IAAI,IAAI,IAC9B,OAAOA,sBAAsB,KAAK,SAAS,EAC3C;MACA,MAAM,IAAIv/B,KAAK,CAAC,6CAA6C,CAAC;IAChE;EACF;EAEA,IAAInwB,SAAS,CAACiV,OAAO,EAAE,MAAM,CAAC,IAAIjV,SAAS,CAACiV,OAAO,EAAE,YAAY,CAAC,EAAE;IAClE,MAAM,IAAIkb,KAAK,CAAC,6CAA6C,CAAC;EAChE;EAEA,IAAInwB,SAAS,CAACiV,OAAO,EAAE,cAAc,CAAC,IAAIjV,SAAS,CAACiV,OAAO,EAAE,aAAa,CAAC,EAAE;IAC3E,MAAM,IAAIkb,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,IAAInwB,SAAS,CAACiV,OAAO,EAAE,kBAAkB,CAAC,EAAE;IAC1C,MAAMiM,QAAQ,GAAG9jB,eAAe,CAAC6X,OAAO,EAAE,kBAAkB,EAAE,UAAU,CAAC;IAEzE,IAAI,CAACo6C,kBAAkB,CAAC/sC,QAAQ,CAACpB,QAAQ,CAAC,EAAE;MAC1C,MAAMyuC,YAAY,GAAGN,kBAAkB,CAAC9lE,GAAG,CAAC2lE,CAAC,IAAQA,KAAE,GAAE,CAAC,CAACv9D,IAAI,CAAC,IAAI,CAAC;MACrE,MAAM,IAAIw+B,KAAK,CACgEw/B,yFAAa,GAAE,CAC7F;IACH;IAEA,MAAMC,iBAAiB,GAAG5vD,SAAS,CAACiV,OAAO,EAAE,CAC3C,gBAAgB,EAChB;MAAE46C,UAAU,EAAE;IAAO,CAAC,CACvB,CAAC;IAEF,IAAI3uC,QAAQ,KAAK,MAAM,EAAE;MACvB,IAAIlhB,SAAS,CAACiV,OAAO,EAAE,cAAc,CAAC,EAAE;QACtC,MAAM,IAAIkb,KAAK,CACb,0DAA0D,CAC3D;MACH;MAEA,IAAInwB,SAAS,CAACiV,OAAO,EAAE,aAAa,CAAC,EAAE;QACrC,MAAM,IAAIkb,KAAK,CACb,yDAAyD,CAC1D;MACH;MAEA,MAAMhP,UAAU,GAAG/jB,eAAe,CAChC6X,OAAO,EACP,kBAAkB,EAClB,YAAY,CACb;MAED,IAAI,CAACq6C,YAAY,CAAChtC,QAAQ,CAACnB,UAAU,CAAC,EAAE;QACtC,MAAM2uC,SAAS,GAAGR,YAAY,CAAC/lE,GAAG,CAACu5D,CAAC,IAAQA,KAAE,GAAE,CAAC,CAACnxD,IAAI,CAAC,IAAI,CAAC;QAE5D,MAAM,IAAIw+B,KAAK,CACoG2/B,0HAAU,GAAE,CAC9H;MACH;MAEA,IAAI3uC,UAAU,KAAK,GAAG,IAAIyuC,iBAAiB,EAAE;QAC3C,MAAM,IAAIz/B,KAAK,CACb,wIAAwI,CACzI;MACH;IACF,CAAC,MAAM,IAAIjP,QAAQ,KAAK,OAAO,IAAI0uC,iBAAiB,EAAE;MACpD,MAAM,IAAIz/B,KAAK,CACb,wHAAwH,CACzH;IACH;EACF;EAEA,IAAInwB,SAAS,CAACiV,OAAO,EAAE,kBAAkB,CAAC,EAAE;IAKnC;MACL,IAAIjV,SAAS,CAACiV,OAAO,EAAE,kBAAkB,CAAC,EAAE;QAC1C,MAAM,IAAIkb,KAAK,CACb,+DAA+D,CAChE;MACH;MACA,MAAM4/B,mCAAmC,GAAG3yD,eAAe,CACzD6X,OAAO,EACP,kBAAkB,EAClB,SAAS,CACV;MACD,IAAI86C,mCAAmC,KAAK,UAAU,EAAE;QACtD,MAAM,IAAI5/B,KAAK,CACb,4DAA4D,GAC1D,wDAAwD,GACxD,sCAAsC,CACzC;MACH;IACF;EACF;EAEA,IACEnwB,SAAS,CAACiV,OAAO,EAAE,gBAAgB,CAAC,IACpC7X,eAAe,CAAC6X,OAAO,EAAE,gBAAgB,EAAE,YAAY,CAAC,IAAI,IAAI,IAChE,CAACs6C,6BAA6B,CAACjtC,QAAQ,CACrCllB,eAAe,CAAC6X,OAAO,EAAE,gBAAgB,EAAE,YAAY,CAAC,CACzD,EACD;IACA,MAAM,IAAIkb,KAAK,CACb,yEAAyE,GACvEo/B,6BAA6B,CAAChmE,GAAG,CAAC2lE,CAAC,IAAQA,KAAE,GAAE,CAAC,CAACv9D,IAAI,CAAC,IAAI,CAAC,CAC9D;EACH;EAEA,IACEqO,SAAS,CAACiV,OAAO,EAAE,oBAAoB,CAAC,IACxC,CAACjV,SAAS,CAACiV,OAAO,EAAE,eAAe,CAAC,EACpC;IACA,MAAM0O,KAAK,GAAG,IAAIwM,KAAK,CACrB,8FAA8F,CAC/F;IAEDxM,KAAK,CAACqsC,cAAc,GAAG,eAAe;IACtC,MAAMrsC,KAAK;EACb;AACF;AAYO,MAAMssC,YAAY,GAAG;EAC1BrD,MAAM;EACNxuB,GAAG;EACH8xB,IAAI;EACJC,UAAU;EACVC,WAAW;EACXC;AACF,CAAC;AAEM,MAAMC,gBAAgB,GAAGhnE,MAAM,CAACd,IAAI,CAACynE,YAAY,CAEvD;AC1NM,MAAMM,cAAuB,GAAG;EAErC32C,UAAU,EAAE,QAAQ;EAEpB42C,cAAc,EAAE96C,SAAS;EAGzBoE,WAAW,EAAE,CAAC;EAGdD,SAAS,EAAE,CAAC;EAGZ42C,yBAAyB,EAAE,KAAK;EAGhCC,0BAA0B,EAAE,KAAK;EAGjCC,2BAA2B,EAAE,KAAK;EAElCC,uBAAuB,EAAE,KAAK;EAE9BC,sBAAsB,EAAE,KAAK;EAE7B57C,OAAO,EAAE,EAAE;EAEX0E,UAAU,EAAE,IAAI;EAShB2Q,MAAM,EAAE,KAAK;EAEb1wB,MAAM,EAAE,KAAK;EAGbk3D,8BAA8B,EAAE,KAAK;EAGrC/yC,aAAa,EAAE,KAAK;EAKpBkC,aAAa,EAAE;AACjB,CAAC;AAIM,SAAS8wC,UAAU,CAACC,IAAqB,EAAW;EACzD,MAAMr3D,OAAY,GAAG,EAAE;EACvB,KAAK,MAAM7Q,GAAG,IAAIQ,MAAM,CAACd,IAAI,CAAC+nE,cAAc,CAAC,EAAE;IAE7C52D,OAAO,CAAC7Q,GAAG,CAAC,GAAGkoE,IAAI,IAAIA,IAAI,CAACloE,GAAG,CAAC,IAAI,IAAI,GAAGkoE,IAAI,CAACloE,GAAG,CAAC,GAAGynE,cAAc,CAACznE,GAAG,CAAC;EAC5E;EACA,OAAO6Q,OAAO;AAChB;AClDA,MAAMk8C,MAAM,GAAG,CAAehtD,MAAS,EAAEC,GAAY,KACnDQ,MAAM,CAACwsD,cAAc,CAAC7X,IAAI,CAACp1C,MAAM,EAAEC,GAAG,CAAC,IAAID,MAAM,CAACC,GAAG,CAAC;AAExD,MAAMmoE,6BAA6B,GAAI33D,IAAU,IAAW;EAC1D,OAAOA,IAAI,CAAC1N,IAAI,KAAK,yBAAyB,GAC1CqlE,6BAA6B,CAAC33D,IAAI,CAAC4B,UAAU,CAAC,GAC9C5B,IAAI;AACV,CAAC;AAEc,MAAe43D,UAAU,SAAShmC,SAAS,CAAC;EAqDzDhsB,YAAY,CAAC5F,IAAU,EAAgC;IAAA,IAA9B6F,KAAc,uEAAG,KAAK;IAAQ;IACrD,IAAIlD,aAAa,GAAGyZ,SAAS;IAC7B,IAAIpc,IAAI,CAAC1N,IAAI,KAAK,yBAAyB,mBAAI0N,IAAI,CAAC8B,KAAK,aAAV2uD,WAAY9tD,cAAa,EAAE;MACxEA,aAAa,GAAGg1D,6BAA6B,CAAC33D,IAAI,CAAC;MACnD,IAAI6F,KAAK,EAAE;QAKT,IAAIlD,aAAa,CAACrQ,IAAI,KAAK,YAAY,EAAE;UACvC,IAAI,CAACo+B,eAAe,CAAC/D,gCAAgC,CACnDltB,MAAM,CAACtI,8BAA8B,EACrC;YAAEgP,EAAE,EAAEnG;UAAK,CAAC,CACb;QACH,CAAC,MAAM,IAAI2C,aAAa,CAACrQ,IAAI,KAAK,kBAAkB,EAAE;UAIpD,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACtI,8BAA8B,EAAE;YAAEgP,EAAE,EAAEnG;UAAK,CAAC,CAAC;QACjE;MACF,CAAC,MAAM;QACL,IAAI,CAACkG,KAAK,CAACzG,MAAM,CAACtI,8BAA8B,EAAE;UAAEgP,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACjE;IACF;IAEA,QAAQA,IAAI,CAAC1N,IAAI;MACf,KAAK,YAAY;MACjB,KAAK,eAAe;MACpB,KAAK,cAAc;MACnB,KAAK,mBAAmB;MACxB,KAAK,aAAa;QAChB;MAEF,KAAK,kBAAkB;QACrB0N,IAAI,CAAC1N,IAAI,GAAG,eAAe;QAC3B,KACE,IAAI1C,CAAC,GAAG,CAAC,EAAER,MAAM,GAAG4Q,IAAI,CAAClQ,UAAU,CAACV,MAAM,EAAED,IAAI,GAAGC,MAAM,GAAG,CAAC,EAC7DQ,CAAC,GAAGR,MAAM,EACVQ,CAAC,EAAE,EACH;UAAA;UACA,MAAMoV,IAAI,GAAGhF,IAAI,CAAClQ,UAAU,CAACF,CAAC,CAAC;UAC/B,MAAMqW,MAAM,GAAGrW,CAAC,KAAKT,IAAI;UACzB,IAAI,CAAC6W,gCAAgC,CAAChB,IAAI,EAAEiB,MAAM,EAAEJ,KAAK,CAAC;UAE1D,IACEI,MAAM,IACNjB,IAAI,CAAC1S,IAAI,KAAK,aAAa,IAC3B0N,oBAAI,CAAC8B,KAAK,KAAV,qBAAYw+B,gBAAgB,EAC5B;YACA,IAAI,CAACp6B,KAAK,CAACzG,MAAM,CAACvF,iBAAiB,EAAE;cACnCiM,EAAE,EAAEnG,IAAI,CAAC8B,KAAK,CAACw+B;YACjB,CAAC,CAAC;UACJ;QACF;QACA;MAEF,KAAK,gBAAgB;QAAE;UACrB,MAAM;YAAE9wC,GAAG;YAAEE;UAAM,CAAC,GAAGsQ,IAAI;UAC3B,IAAI,IAAI,CAACkE,aAAa,CAAC1U,GAAG,CAAC,EAAE;YAC3B,IAAI,CAACsW,UAAU,CAACC,cAAc,CAC5B,IAAI,CAAC/B,gBAAgB,CAACxU,GAAG,CAAC,EAC1BA,GAAG,CAACkP,GAAG,CAACnQ,KAAK,CACd;UACH;UACA,IAAI,CAACqX,YAAY,CAAClW,KAAK,EAAEmW,KAAK,CAAC;UAC/B;QACF;MAEA,KAAK,eAAe;QAAE;UACpB,MAAM,IAAIgxB,KAAK,CACb,iEAAiE,GAC/D,+DAA+D,CAClE;QACH;MAEA,KAAK,iBAAiB;QACpB72B,IAAI,CAAC1N,IAAI,GAAG,cAAc;QAC1B,IAAI,CAAC+tC,gBAAgB,CACnBrgC,IAAI,CAAC2c,QAAQ,kBACb3c,IAAI,CAAC8B,KAAK,KAAV,6BAAYw+B,gBAAgB,EAC5Bz6B,KAAK,CACN;QACD;MAEF,KAAK,sBAAsB;QACzB,IAAI7F,IAAI,CAACqoD,QAAQ,KAAK,GAAG,EAAE;UACzB,IAAI,CAACniD,KAAK,CAACzG,MAAM,CAAC3H,qBAAqB,EAAE;YAAEqO,EAAE,EAAEnG,IAAI,CAAC6hC,IAAI,CAACnjC,GAAG,CAAClQ;UAAI,CAAC,CAAC;QACrE;QAEAwR,IAAI,CAAC1N,IAAI,GAAG,mBAAmB;QAC/B,OAAO0N,IAAI,CAACqoD,QAAQ;QACpB,IAAI,CAACziD,YAAY,CAAC5F,IAAI,CAAC6hC,IAAI,EAAEh8B,KAAK,CAAC;QACnC;MAEF,KAAK,yBAAyB;QAE5B,IAAI,CAACD,YAAY,CAACjD,aAAa,EAAEkD,KAAK,CAAC;QACvC;IAAA;EAMN;EAEAG,gCAAgC,CAC9BhB,IAAU,EACViB,MAAe,EACfJ,KAAc,EACd;IACA,IAAIb,IAAI,CAAC1S,IAAI,KAAK,cAAc,EAAE;MAChC,IAAI,CAAC4T,KAAK,CACRlB,IAAI,CAACtS,IAAI,KAAK,KAAK,IAAIsS,IAAI,CAACtS,IAAI,KAAK,KAAK,GACtC+M,MAAM,CAAC/F,kBAAkB,GACzB+F,MAAM,CAAC9F,gBAAgB,EAC3B;QAAEwM,EAAE,EAAEnB,IAAI,CAACxV;MAAI,CAAC,CACjB;IACH,CAAC,MAAM,IAAIwV,IAAI,CAAC1S,IAAI,KAAK,eAAe,EAAE;MACxC0S,IAAI,CAAC1S,IAAI,GAAG,aAAa;MACzB,MAAMulE,GAAG,GAAG7yD,IAAI,CAAChG,QAAQ;MACzB,IAAI,CAAC6xD,qBAAqB,CAACgH,GAAG,EAAqB,KAAK,CAAC;MACzD,IAAI,CAACjyD,YAAY,CAACiyD,GAAG,EAAEhyD,KAAK,CAAC;MAE7B,IAAI,CAACI,MAAM,EAAE;QACX,IAAI,CAACC,KAAK,CAACzG,MAAM,CAACvF,iBAAiB,EAAE;UAAEiM,EAAE,EAAEnB;QAAK,CAAC,CAAC;MACpD;IACF,CAAC,MAAM;MACL,IAAI,CAACY,YAAY,CAACZ,IAAI,EAAEa,KAAK,CAAC;IAChC;EACF;EAIAw6B,gBAAgB,CACdyB,QAAsB,EACtBxB,gBAA6C,EAC7Cz6B,KAAc,EACR;IACN,MAAMrX,GAAG,GAAGszC,QAAQ,CAAC1yC,MAAM,GAAG,CAAC;IAE/B,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIpB,GAAG,EAAEoB,CAAC,EAAE,EAAE;MAC7B,MAAM29D,GAAG,GAAGzrB,QAAQ,CAAClyC,CAAC,CAAC;MACvB,IAAI,CAAC29D,GAAG,EAAE;MAEV,IAAIA,GAAG,CAACj7D,IAAI,KAAK,eAAe,EAAE;QAChCi7D,GAAG,CAACj7D,IAAI,GAAG,aAAa;QACxB,MAAMulE,GAAG,GAAGtK,GAAG,CAACvuD,QAAQ;QACxB,IAAI,CAAC6xD,qBAAqB,CAACgH,GAAG,EAAqB,IAAI,CAAC;QACxD,IAAI,CAACjyD,YAAY,CAACiyD,GAAG,EAAEhyD,KAAK,CAAC;MAC/B,CAAC,MAAM;QACL,IAAI,CAACD,YAAY,CAAC2nD,GAAG,EAAE1nD,KAAK,CAAC;MAC/B;MAEA,IAAI0nD,GAAG,CAACj7D,IAAI,KAAK,aAAa,EAAE;QAC9B,IAAI1C,CAAC,GAAGpB,GAAG,EAAE;UACX,IAAI,CAAC0X,KAAK,CAACzG,MAAM,CAACvF,iBAAiB,EAAE;YAAEiM,EAAE,EAAEonD;UAAI,CAAC,CAAC;SAClD,MAAM,IAAIjtB,gBAAgB,EAAE;UAC3B,IAAI,CAACp6B,KAAK,CAACzG,MAAM,CAACvF,iBAAiB,EAAE;YAAEiM,EAAE,EAAEm6B;UAAiB,CAAC,CAAC;QAChE;MACF;IACF;EACF;EAEA56B,YAAY,CAAC1F,IAAU,EAAE2F,SAAmB,EAAW;IACrD,QAAQ3F,IAAI,CAAC1N,IAAI;MACf,KAAK,YAAY;MACjB,KAAK,eAAe;MACpB,KAAK,cAAc;MACnB,KAAK,mBAAmB;MACxB,KAAK,aAAa;QAChB,OAAO,IAAI;MAEb,KAAK,kBAAkB;QAAE;UACvB,MAAMnD,IAAI,GAAG6Q,IAAI,CAAClQ,UAAU,CAACV,MAAM,GAAG,CAAC;UACvC,OAAQ4Q,IAAI,CAAClQ,UAAU,CAAoCswC,KAAK,CAC9D,CAACp7B,IAAI,EAAEpV,CAAC,KAAK;YACX,OACEoV,IAAI,CAAC1S,IAAI,KAAK,cAAc,KAC3B1C,CAAC,KAAKT,IAAI,IAAI6V,IAAI,CAAC1S,IAAI,KAAK,eAAe,CAAC,IAC7C,IAAI,CAACoT,YAAY,CAACV,IAAI,CAAC;UAE3B,CAAC,CACF;QACH;MAEA,KAAK,gBAAgB;QACnB,OAAO,IAAI,CAACU,YAAY,CAAC1F,IAAI,CAACtQ,KAAK,CAAC;MAEtC,KAAK,eAAe;QAClB,OAAO,IAAI,CAACgW,YAAY,CAAC1F,IAAI,CAAChB,QAAQ,CAAC;MAEzC,KAAK,iBAAiB;QACpB,OAAQgB,IAAI,CAAqB2c,QAAQ,CAACyjB,KAAK,CAC7C0iB,OAAO,IAAIA,OAAO,KAAK,IAAI,IAAI,IAAI,CAACp9C,YAAY,CAACo9C,OAAO,CAAC,CAC1D;MAEH,KAAK,sBAAsB;QACzB,OAAO9iD,IAAI,CAACqoD,QAAQ,KAAK,GAAG;MAE9B,KAAK,yBAAyB;QAC5B,OAAO,IAAI,CAAC3iD,YAAY,CAAC1F,IAAI,CAAC4B,UAAU,CAAC;MAE3C,KAAK,kBAAkB;MACvB,KAAK,0BAA0B;QAC7B,OAAO,CAAC+D,SAAS;MAEnB;QACE,OAAO,KAAK;IAAA;EAElB;EAIAo8B,gBAAgB,CACdD,QAAsD,EAEtDE,mBAA6B,EACiB;IAC9C,OAAOF,QAAQ;EACjB;EAEAg2B,oBAAoB,CAClBh2B,QAAsD,EACtDE,mBAA6B,EACvB;IACN,IAAI,CAACD,gBAAgB,CAACD,QAAQ,EAAEE,mBAAmB,CAAC;IAEpD,KAAK,MAAM9C,IAAI,IAAI4C,QAAQ,EAAE;MAC3B,IAAI,KAAI,IAAJ5C,oBAAI,CAAE5sC,IAAI,MAAK,iBAAiB,EAAE;QACpC,IAAI,CAACwlE,oBAAoB,CAAC54B,IAAI,CAACviB,QAAQ,CAAC;MAC1C;IACF;EACF;EAIAo7C,WAAW,CAETzyD,mBAA6C,EAC9B;IACf,MAAMtF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5C,IAAI,CAACuR,IAAI,EAAE;IACXhW,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACghC,uBAAuB,CAC1C16B,mBAAmB,EACnB8W,SAAS,CACV;IACD,OAAO,IAAI,CAACzX,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAIAg4D,gBAAgB,GAA4B;IAC1C,MAAMh4D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAe;IAC1C,IAAI,CAACuR,IAAI,EAAE;IACXhW,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACslC,gBAAgB,EAAE;IACvC,OAAO,IAAI,CAAC3/B,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGAskC,gBAAgB,GAAwB;IAEtC,QAAQ,IAAI,CAACt9B,KAAK,CAAC1U,IAAI;MACrB;QAAkB;UAChB,MAAM0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgB;UAC3C,IAAI,CAACuR,IAAI,EAAE;UAEXhW,IAAI,CAAC2c,QAAQ,GAAG,IAAI,CAACuoC,gBAAgB,QAGnC,IAAI,CACL;UACD,OAAO,IAAI,CAACvgD,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;QAC9C;MAEA;QACE,OAAO,IAAI,CAACqpD,eAAe,IAAY,IAAI,CAAC;IAAA;IAIhD,OAAO,IAAI,CAAC3xB,eAAe,EAAE;EAC/B;EAGAwtB,gBAAgB,CAEd/iB,KAAgB,EAChB81B,aAAuD,EACvDC,UAAoB,EACpB1zB,cAAwB,EACc;IACtC,MAAM2zB,IAA0C,GAAG,EAAE;IACrD,IAAI16B,KAAK,GAAG,IAAI;IAChB,OAAO,CAAC,IAAI,CAACvY,GAAG,CAACid,KAAK,CAAC,EAAE;MACvB,IAAI1E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAAU;MACvB;MACA,IAAImpC,UAAU,IAAI,IAAI,CAACx1C,KAAK,IAAU,EAAE;QACtCy1C,IAAI,CAACv0D,IAAI,CAAC,IAAI,CAAC;OAChB,MAAM,IAAI,IAAI,CAACshB,GAAG,CAACid,KAAK,CAAC,EAAE;QAC1B;MACF,CAAC,MAAM,IAAI,IAAI,CAACzf,KAAK,IAAa,EAAE;QAClCy1C,IAAI,CAACv0D,IAAI,CAAC,IAAI,CAACs/B,4BAA4B,CAAC,IAAI,CAAC80B,gBAAgB,EAAE,CAAC,CAAC;QACrE,IAAI,CAAC,IAAI,CAAC1G,mBAAmB,CAAC2G,aAAa,CAAC,EAAE;UAC5C,IAAI,CAAClpC,MAAM,CAACoT,KAAK,CAAC;UAClB;QACF;MACF,CAAC,MAAM;QACL,MAAMr7B,UAAU,GAAG,EAAE;QACrB,IAAI,IAAI,CAAC4b,KAAK,CAAO,OAAI,IAAI,CAAChc,SAAS,CAAC,YAAY,CAAC,EAAE;UACrD,IAAI,CAACR,KAAK,CAACzG,MAAM,CAACtD,6BAA6B,EAAE;YAC/CgK,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QAEA,OAAO,IAAI,CAACqd,KAAK,IAAO,EAAE;UACxB5b,UAAU,CAAClD,IAAI,CAAC,IAAI,CAACw0D,cAAc,EAAE,CAAC;QACxC;QACAD,IAAI,CAACv0D,IAAI,CAAC,IAAI,CAACypD,uBAAuB,CAAC7oB,cAAc,EAAE19B,UAAU,CAAC,CAAC;MACrE;IACF;IACA,OAAOqxD,IAAI;EACb;EAGAE,wBAAwB,CAEtBrzD,IAAyB,EACZ;IACb,IAAI,CAACgR,IAAI,EAAE;IAEXhR,IAAI,CAAChG,QAAQ,GAAG,IAAI,CAAC04B,eAAe,EAAE;IACtC,IAAI,CAAC45B,mBAAmB,CAA2B;IACnD,OAAO,IAAI,CAAC3sD,UAAU,CAACK,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGAszD,oBAAoB,GAA2C;IAC7D,MAAMtzD,IAAI,GAAG,IAAI,CAACP,SAAS,EAA8B;IACzD,MAAM;MAAEnS,IAAI;MAAE+S;KAAU,GAAG,IAAI,CAAC2B,KAAK;IACrC,IAAI1U,IAAI,OAAgB,EAAE;MACxB,OAAO,IAAI,CAAC+lE,wBAAwB,CAACrzD,IAAI,CAAwB;IACnE,CAAC,MAAM,IAAI1S,IAAI,QAAmB,EAAE;MAClC,IAAI,CAAC40B,YAAY,CAAC,sBAAsB,EAAE7hB,QAAQ,CAAC;MACnD,IAAI,CAACS,UAAU,CAACC,cAAc,CAAC,IAAI,CAACiB,KAAK,CAACtX,KAAK,EAAE2V,QAAQ,CAAC;MACzDL,IAAI,CAA0BxV,GAAG,GAAG,IAAI,CAACqU,gBAAgB,EAAE;IAC9D,CAAC,MAAM;MACL,IAAI,CAACmiD,iBAAiB,CAAChhD,IAAI,CAAyB;IACtD;IACCA,IAAI,CAA0BzC,MAAM,GAAG,KAAK;IAC7C,OAAO,IAAI,CAAC0gC,iBAAiB,CAC3Bj+B,IAAI,EACJK,QAAQ,EACR,KAAK,EACL,KAAK,EACL,IAAI,EACJ,KAAK,CACN;EACH;EAEAgoD,uBAAuB,CAErB7oB,cAA0C,EAC1C19B,UAAuB,EACQ;IAC/B,MAAM+6B,IAAI,GAAG,IAAI,CAACsB,iBAAiB,EAAE;IACrC,IAAI,CAACD,4BAA4B,CAACrB,IAAI,CAAC;IACvC,MAAM0rB,GAAG,GAAG,IAAI,CAACpqB,iBAAiB,CAACtB,IAAI,CAACnjC,GAAG,CAACnQ,KAAK,EAAEszC,IAAI,CAAC;IACxD,IAAI/6B,UAAU,CAAC1X,MAAM,EAAE;MACrByyC,IAAI,CAAC/6B,UAAU,GAAGA,UAAU;IAC9B;IACA,OAAOymD,GAAG;EACZ;EAGArqB,4BAA4B,CAAC3E,KAAc,EAAW;IACpD,OAAOA,KAAK;EACd;EAIA4E,iBAAiB,CAEf99B,QAA0B,EAC1Bw8B,IAAqB,EACZ;IAAA;IACT,qBAAQ,wBAARx8B,QAAQ,GAAK,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAChCw8B,IAAI,YAAGA,IAAI,oBAAI,IAAI,CAACyC,gBAAgB,EAAE;IACtC,IAAI,CAAC,IAAI,CAACpf,GAAG,CAAO,KAAE,OAAO2c,IAAI;IAEjC,MAAM7hC,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAoBxsB,QAAQ,CAAC;IAC1DrF,IAAI,CAAC6hC,IAAI,GAAGA,IAAI;IAChB7hC,IAAI,CAAC06B,KAAK,GAAG,IAAI,CAACsF,uBAAuB,EAAE;IAC3C,OAAO,IAAI,CAACr7B,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EA8BAuF,WAAW,CACTjT,IAAY,EAEZkT,yBAAkC,EAElCC,OAAqB,EACH;IAClB,OAAO82C,MAAM,CACX;MACEtrD,iBAAiB,EAAE,MAAM;MACzBc,WAAW,EAAE,UAAU;MACvBwmE,cAAc,EAAE,OAAO;MACvBzmE,uBAAuB,EAAE,YAAY;MACrCf,YAAY,EAAE,UAAU;MACxBc,aAAa,EAAE;KAChB,EAEDS,IAAI,CACL;EACH;EA+BAkmE,SAAS,CACP52D,UAAmD,UAgB7C;IAAA,IAfN;MACE62D,EAAE,EAAE5hE,QAAQ;MACZ4O,OAAO,GAAG0S,SAAS;MACnBugD,YAAY,GAAG,KAAK;MACpB7yB,iBAAiB,GAAG,KAAK;MACzB8yB,wBAAwB,GAAG,EAAElzD,OAAO,GAAGyR,kBAAkB,CAAC;MAC1D0hD,wBAAwB,GAAG;IAQ7B,CAAC;IACK;IACN,MAAMtmE,IAAI,GAAGsP,UAAU,CAACtP,IAAI;IAK5B,IAAI,IAAI,CAAC2V,cAAc,CAACrG,UAAU,CAAC,EAAE;IAErC,IAAItP,IAAI,KAAK,kBAAkB,EAAE;MAC/B,IAAImT,OAAO,KAAK0S,SAAS,EAAE;QACzB,IAAI,CAACjS,KAAK,CAACzG,MAAM,CAACpI,6BAA6B,EAAE;UAAE8O,EAAE,EAAEvE;QAAW,CAAC,CAAC;MACtE;MACA;IACF;IAEA,IAAIA,UAAU,CAACtP,IAAI,KAAK,YAAY,EAAE;MACpC,IAAI,CAACm4D,eAAe,CAClB7oD,UAAU,EACV6D,OAAO,EACPogC,iBAAiB,EACjB8yB,wBAAwB,CACzB;MAED,MAAM;QAAEzgE;MAAK,CAAC,GAAG0J,UAAwB;MAEzC,IAAI82D,YAAY,EAAE;QAChB,IAAIA,YAAY,CAAChjD,GAAG,CAACxd,IAAI,CAAC,EAAE;UAC1B,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAAChG,SAAS,EAAE;YAAE0M,EAAE,EAAEvE;UAAW,CAAC,CAAC;QAClD,CAAC,MAAM;UACL82D,YAAY,CAAC79C,GAAG,CAAC3iB,IAAI,CAAC;QACxB;MACF;MAEA;IACF;IAEA,MAAM2gE,QAAQ,GAAG,IAAI,CAACtzD,WAAW,CAC/B3D,UAAU,CAACtP,IAAI,EACf,EAAEsmE,wBAAwB,IAAIh3D,+BAAU,CAACE,KAAK,KAAhB,0BAAkBa,aAAa,CAAC,IAC5D9L,QAAQ,CAACvE,IAAI,KAAK,sBAAsB,EAC1CmT,OAAO,CACR;IAED,IAAIozD,QAAQ,KAAK,IAAI,EAAE;IACvB,IAAIA,QAAQ,KAAK,KAAK,EAAE;MACtB,MAAMC,eAAe,GACnBrzD,OAAO,KAAK0S,SAAS,GAAG1Y,MAAM,CAAC7I,UAAU,GAAG6I,MAAM,CAAC3I,iBAAiB;MAEtE,IAAI,CAACoP,KAAK,CAAC4yD,eAAe,EAAE;QAC1B3yD,EAAE,EAAEvE,UAAU;QACd/K,QAAQ,EACNA,QAAQ,CAACvE,IAAI,KAAK,kBAAkB,GAChC;UAAEA,IAAI,EAAE,kBAAkB;UAAEC,MAAM,EAAEsE,QAAQ,CAACtE;QAAO,CAAC,GACrD;UAAED,IAAI,EAAEuE,QAAQ,CAACvE;QAAK;MAC9B,CAAC,CAAC;MACF;IACF;IAEA,MAAM,CAAC9C,GAAG,EAAEupE,yBAAyB,CAAC,GAAG75D,KAAK,CAACC,OAAO,CAAC05D,QAAQ,CAAC,GAC5DA,QAAQ,GACR,CAACA,QAAQ,EAAEvmE,IAAI,KAAK,yBAAyB,CAAC;IAClD,MAAM0mE,YAAY,GAChBp3D,UAAU,CAACtP,IAAI,KAAK,cAAc,IAClCsP,UAAU,CAACtP,IAAI,KAAK,eAAe,IACnCsP,UAAU,CAACtP,IAAI,KAAK,yBAAyB,GACzCsP,UAAU,GACV/K,QAAQ;IAGd,KAAK,MAAMoiE,KAAK,IAAI,EAAE,CAAC71D,MAAM,CAACxB,UAAU,CAACpS,GAAG,CAAC,CAAC,EAAE;MAC9C,IAAIypE,KAAK,EAAE;QACT,IAAI,CAACT,SAAS,CAACS,KAAK,EAAE;UAEpBR,EAAE,EAAEO,YAAY;UAChBvzD,OAAO;UACPizD,YAAY;UACZC,wBAAwB;UACxB9yB,iBAAiB;UACjB+yB,wBAAwB,EAAEG;QAC5B,CAAC,CAAC;MACJ;IACF;EACF;EAEAtO,eAAe,CACbtkD,EAAc,EACdwU,WAAyB,EAGzB;IAAA,IAFAkrB,iBAA0B,uEAAG,KAAK;IAAA,IAClCqzB,eAAwB,uEAAG,EAAEv+C,WAAW,GAAGzD,kBAAkB,CAAC;IAE9D,IACE,IAAI,CAAClQ,KAAK,CAACkO,MAAM,KAChB2wB,iBAAiB,GACdjwB,wBAAwB,CAACzP,EAAE,CAACjO,IAAI,EAAE,IAAI,CAACsd,QAAQ,CAAC,GAChDG,4BAA4B,CAACxP,EAAE,CAACjO,IAAI,CAAC,CAAC,EAC1C;MACA,IAAIyiB,WAAW,KAAKxC,SAAS,EAAE;QAC7B,IAAI,CAACjS,KAAK,CAACzG,MAAM,CAACzC,mBAAmB,EAAE;UAAEmJ,EAAE;UAAElJ,aAAa,EAAEkJ,EAAE,CAACjO;QAAK,CAAC,CAAC;MACxE,CAAC,MAAM;QACL,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAACvC,0BAA0B,EAAE;UAC5CiJ,EAAE;UACFhJ,WAAW,EAAEgJ,EAAE,CAACjO;QAClB,CAAC,CAAC;MACJ;IACF;IAEA,IAAI,CAACghE,eAAe,IAAI/yD,EAAE,CAACjO,IAAI,KAAK,KAAK,EAAE;MACzC,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAAC/H,mBAAmB,EAAE;QAAEyO;MAAG,CAAC,CAAC;IAChD;IAEA,IAAI,EAAEwU,WAAW,GAAGxC,SAAS,CAAC,EAAE;MAC9B,IAAI,CAACghD,yBAAyB,CAAChzD,EAAE,EAAEwU,WAAW,CAAC;IACjD;EACF;EAEAw+C,yBAAyB,CAAC7D,UAAsB,EAAE7vD,OAAqB,EAAE;IACvE,IAAI,CAACgV,KAAK,CAACC,WAAW,CAAC46C,UAAU,CAACp9D,IAAI,EAAEuN,OAAO,EAAE6vD,UAAU,CAAC52D,GAAG,CAACnQ,KAAK,CAAC;EACxE;EAEAsiE,qBAAqB,CAAC7wD,IAAU,EAAE8wD,YAAqB,EAAQ;IAC7D,QAAQ9wD,IAAI,CAAC1N,IAAI;MACf,KAAK,yBAAyB;QAC5B,IAAI,CAACu+D,qBAAqB,CAAC7wD,IAAI,CAAC4B,UAAU,EAAEkvD,YAAY,CAAC;QACzD;MACF,KAAK,YAAY;MACjB,KAAK,kBAAkB;QACrB;MACF,KAAK,iBAAiB;MACtB,KAAK,kBAAkB;QACrB,IAAIA,YAAY,EAAE;MAEpB;QACE,IAAI,CAAC5qD,KAAK,CAACzG,MAAM,CAAClI,4BAA4B,EAAE;UAAE4O,EAAE,EAAEnG;QAAK,CAAC,CAAC;IAAA;EAEnE;EAEAsxD,mBAAmB,CACjBnvB,KAA+C,EACtC;IACT,IAAI,CAAC,IAAI,CAACzf,KAAK,IAAU,EAAE;MACzB,OAAO,KAAK;IACd;IAEA,IAAI,CAACxc,KAAK,CACR,IAAI,CAACyf,iBAAiB,EAAE,KAAKwc,KAAK,GAC9B1iC,MAAM,CAACvF,iBAAiB,GACxBuF,MAAM,CAAChL,gBAAgB,EAC3B;MAAE0R,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;IAAS,CAAC,CAC5B;IAED,OAAO,IAAI;EACb;AACF;ACzpBe,MAAe+zD,gBAAgB,SAASxB,UAAU,CAAC;EA0ChEyB,UAAU,CACRr0D,IAAsC,EACtCs0D,QAAoC,EACpCC,QAEC,EACDj0D,mBAA6C,EACvC;IACN,IACEN,IAAI,CAAC1S,IAAI,KAAK,eAAe,IAC7B,IAAI,CAAC2V,cAAc,CAACjD,IAAI,CAAC,IACzBA,IAAI,CAACN,QAAQ,IAEbM,IAAI,CAACG,SAAS,EACd;MACA;IACF;IAEA,MAAM3V,GAAG,GAAGwV,IAAI,CAACxV,GAAG;IAEpB,MAAM0I,IAAI,GAAG1I,GAAG,CAAC8C,IAAI,KAAK,YAAY,GAAG9C,GAAG,CAAC0I,IAAI,GAAG1I,GAAG,CAACE,KAAK;IAE7D,IAAIwI,IAAI,KAAK,WAAW,EAAE;MACxB,IAAIohE,QAAQ,EAAE;QACZ,IAAI,CAACpzD,KAAK,CAACzG,MAAM,CAACxF,aAAa,EAAE;UAAEkM,EAAE,EAAE3W;QAAI,CAAC,CAAC;QAC7C;MACF;MACA,IAAI+pE,QAAQ,CAACC,IAAI,EAAE;QACjB,IAAIl0D,mBAAmB,EAAE;UAGvB,IAAIA,mBAAmB,CAACoqB,cAAc,KAAK,IAAI,EAAE;YAC/CpqB,mBAAmB,CAACoqB,cAAc,GAAGlgC,GAAG,CAACkP,GAAG,CAACnQ,KAAK;UACpD;QACF,CAAC,MAAM;UACL,IAAI,CAAC2X,KAAK,CAACzG,MAAM,CAAClL,cAAc,EAAE;YAAE4R,EAAE,EAAE3W;UAAI,CAAC,CAAC;QAChD;MACF;MAEA+pE,QAAQ,CAACC,IAAI,GAAG,IAAI;IACtB;EACF;EAEAC,oBAAoB,CAACv6B,IAAkB,EAAErgB,gBAAwB,EAAW;IAC1E,OACEqgB,IAAI,CAAC5sC,IAAI,KAAK,yBAAyB,IAAI4sC,IAAI,CAAC3wC,KAAK,KAAKswB,gBAAgB;EAE9E;EAGAqzC,aAAa,GAA8C;IACzD,IAAI,CAACvhC,kBAAkB,EAAE;IACzB,IAAI,CAAC1L,SAAS,EAAE;IAChB,MAAMia,IAAI,GAAG,IAAI,CAAC9H,eAAe,EAAE;IACnC,IAAI,CAAC,IAAI,CAAC1U,KAAK,KAAQ,EAAE;MACvB,IAAI,CAACxrB,UAAU,EAAE;IACnB;IAGA,IAAI,CAAC6mB,yBAAyB,EAAE;IAChCmhB,IAAI,CAAChjB,QAAQ,GAAG,IAAI,CAAClV,KAAK,CAACkV,QAAQ;IACnCgjB,IAAI,CAACtgB,MAAM,GAAG,IAAI,CAAC5X,KAAK,CAAC4X,MAAM;IAC/B,IAAI,IAAI,CAACve,OAAO,CAACC,MAAM,EAAE;MACvB4+B,IAAI,CAAC5+B,MAAM,GAAG,IAAI,CAACA,MAAM;IAC3B;IAEA,OAAO4+B,IAAI;EACb;EAqBA9H,eAAe,CAEbsiC,UAAoB,EACpBp0D,mBAAsC,EACxB;IACd,IAAIo0D,UAAU,EAAE;MACd,OAAO,IAAI,CAACC,aAAa,CAAC,MACxB,IAAI,CAACC,mBAAmB,CAACt0D,mBAAmB,CAAC,CAC9C;IACH;IACA,OAAO,IAAI,CAACu0D,UAAU,CAAC,MAAM,IAAI,CAACD,mBAAmB,CAACt0D,mBAAmB,CAAC,CAAC;EAC7E;EAGAs0D,mBAAmB,CAEjBt0D,mBAAsC,EACxB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAM65B,IAAI,GAAG,IAAI,CAACa,gBAAgB,CAACz6B,mBAAmB,CAAC;IACvD,IAAI,IAAI,CAACod,KAAK,IAAU,EAAE;MACxB,MAAM1iB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;MACvCrF,IAAI,CAACozD,WAAW,GAAG,CAACl0B,IAAI,CAAC;MACzB,OAAO,IAAI,CAACha,GAAG,IAAU,EAAE;QACzBllB,IAAI,CAACozD,WAAW,CAACxvD,IAAI,CAAC,IAAI,CAACm8B,gBAAgB,CAACz6B,mBAAmB,CAAC,CAAC;MACnE;MACA,IAAI,CAACy8B,gBAAgB,CAAC/hC,IAAI,CAACozD,WAAW,CAAC;MACvC,OAAO,IAAI,CAACzuD,UAAU,CAAC3E,IAAI,EAAE,oBAAoB,CAAC;IACpD;IACA,OAAOk/B,IAAI;EACb;EAGA46B,0BAA0B,CAExBx0D,mBAA6C,EAC7Cu/B,cAAyB,EACzB;IACA,OAAO,IAAI,CAAC80B,aAAa,CAAC,MACxB,IAAI,CAAC55B,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC,CAC3D;EACH;EAGA7E,uBAAuB,CAErB16B,mBAA6C,EAC7Cu/B,cAAyB,EACzB;IACA,OAAO,IAAI,CAACg1B,UAAU,CAAC,MACrB,IAAI,CAAC95B,gBAAgB,CAACz6B,mBAAmB,EAAEu/B,cAAc,CAAC,CAC3D;EACH;EAIAtF,0BAA0B,CACxBj6B,mBAAqC,EACrCy0D,WAA6B,EAC7B;IAAA;IACAz0D,mBAAmB,CAACsqB,qBAAqB,GACvCmqC,+BAAW,IAAXA,2BAAW,CAAEr7D,GAAG,KAAI,8BAAI,CAACsI,KAAK,CAAC3B,QAAQ;EAC3C;EAKA06B,gBAAgB,CAEdz6B,mBAA6C,EAC7Cu/B,cAAyB,EACX;IACd,MAAMx/B,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,IAAI,IAAI,CAAC4oB,YAAY,KAAW,EAAE;MAChC,IAAI,IAAI,CAACuC,SAAS,CAAC7C,QAAQ,EAAE;QAC3B,IAAIkU,IAAI,GAAG,IAAI,CAACm4B,UAAU,EAAE;QAC5B,IAAIn1B,cAAc,EAAE;UAClBhD,IAAI,GAAGgD,cAAc,CAACF,IAAI,CAAC,IAAI,EAAE9C,IAAI,EAAEx8B,QAAQ,CAAC;QAClD;QACA,OAAOw8B,IAAI;MACb;IACF;IAEA,IAAIo4B,mBAAmB;IACvB,IAAI30D,mBAAmB,EAAE;MACvB20D,mBAAmB,GAAG,KAAK;IAC7B,CAAC,MAAM;MACL30D,mBAAmB,GAAG,IAAIwrB,gBAAgB,EAAE;MAC5CmpC,mBAAmB,GAAG,IAAI;IAC5B;IACA,MAAM;MAAE3nE;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAE3B,IAAI1U,IAAI,KAAc,MAAIygB,iBAAiB,CAACzgB,IAAI,CAAC,EAAE;MACjD,IAAI,CAAC0U,KAAK,CAAC6X,gBAAgB,GAAG,IAAI,CAAC7X,KAAK,CAACzY,KAAK;IAChD;IAEA,IAAIszC,IAAI,GAAG,IAAI,CAACq4B,qBAAqB,CAAC50D,mBAAmB,CAAC;IAC1D,IAAIu/B,cAAc,EAAE;MAClBhD,IAAI,GAAGgD,cAAc,CAACF,IAAI,CAAC,IAAI,EAAE9C,IAAI,EAAEx8B,QAAQ,CAAC;IAClD;IACA,IAAIgO,iBAAiB,CAAC,IAAI,CAACrM,KAAK,CAAC1U,IAAI,CAAC,EAAE;MACtC,MAAM0N,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAyBxsB,QAAQ,CAAC;MAC/D,MAAMgjD,QAAQ,GAAG,IAAI,CAACrhD,KAAK,CAACtX,KAAK;MACjCsQ,IAAI,CAACqoD,QAAQ,GAAGA,QAAQ;MAExB,IAAI,IAAI,CAAC3lC,KAAK,IAAO,EAAE;QACrB,IAAI,CAAC9c,YAAY,CAACi8B,IAAI,EAAc,IAAI,CAAC;QACzC7hC,IAAI,CAAC6hC,IAAI,GAAGA,IAAI;QAEhB,MAAMs4B,UAAU,GAAG90D,QAAQ,CAACjX,KAAK;QACjC,IACEkX,mBAAmB,CAACoqB,cAAc,IAAI,IAAI,IAC1CpqB,mBAAmB,CAACoqB,cAAc,CAACthC,KAAK,IAAI+rE,UAAU,EACtD;UACA70D,mBAAmB,CAACoqB,cAAc,GAAG,IAAI;QAC3C;QACA,IACEpqB,mBAAmB,CAACmqB,kBAAkB,IAAI,IAAI,IAC9CnqB,mBAAmB,CAACmqB,kBAAkB,CAACrhC,KAAK,IAAI+rE,UAAU,EAC1D;UACA70D,mBAAmB,CAACmqB,kBAAkB,GAAG,IAAI;QAC/C;QACA,IACEnqB,mBAAmB,CAACqqB,aAAa,IAAI,IAAI,IACzCrqB,mBAAmB,CAACqqB,aAAa,CAACvhC,KAAK,IAAI+rE,UAAU,EACrD;UACA,IAAI,CAACtpC,yBAAyB,CAACvrB,mBAAmB,CAAC;UACnDA,mBAAmB,CAACqqB,aAAa,GAAG,IAAI;QAC1C;MACF,CAAC,MAAM;QACL3vB,IAAI,CAAC6hC,IAAI,GAAGA,IAAI;MAClB;MAEA,IAAI,CAAC7rB,IAAI,EAAE;MACXhW,IAAI,CAAC06B,KAAK,GAAG,IAAI,CAACqF,gBAAgB,EAAE;MACpC,IAAI,CAACy4B,SAAS,CAAC32B,IAAI,EAAE;QACnB42B,EAAE,EAAE,IAAI,CAAC9zD,UAAU,CAAC3E,IAAI,EAAE,sBAAsB;MAClD,CAAC,CAAC;MAEF,OAAOA,IAAI;KACZ,MAAM,IAAIi6D,mBAAmB,EAAE;MAC9B,IAAI,CAAC1qC,qBAAqB,CAACjqB,mBAAmB,EAAE,IAAI,CAAC;IACvD;IAEA,OAAOu8B,IAAI;EACb;EAKAq4B,qBAAqB,CAEnB50D,mBAAqC,EACvB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMwZ,gBAAgB,GAAG,IAAI,CAAC7X,KAAK,CAAC6X,gBAAgB;IACpD,MAAMqgB,IAAI,GAAG,IAAI,CAACk7B,YAAY,CAAC90D,mBAAmB,CAAC;IAEnD,IAAI,IAAI,CAACm0D,oBAAoB,CAACv6B,IAAI,EAAErgB,gBAAgB,CAAC,EAAE;MACrD,OAAOqgB,IAAI;IACb;IAEA,OAAO,IAAI,CAACI,gBAAgB,CAACJ,IAAI,EAAE75B,QAAQ,EAAEC,mBAAmB,CAAC;EACnE;EAEAg6B,gBAAgB,CAEdJ,IAAkB,EAClB75B,QAAkB,EAElBC,mBAA6C,EAC/B;IACd,IAAI,IAAI,CAAC4f,GAAG,IAAa,EAAE;MACzB,MAAMllB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;MACvCrF,IAAI,CAAC8U,IAAI,GAAGoqB,IAAI;MAChBl/B,IAAI,CAACy/B,UAAU,GAAG,IAAI,CAACO,uBAAuB,EAAE;MAChD,IAAI,CAACjR,MAAM,CAAU;MACrB/uB,IAAI,CAAC8/B,SAAS,GAAG,IAAI,CAACC,gBAAgB,EAAE;MACxC,OAAO,IAAI,CAACp7B,UAAU,CAAC3E,IAAI,EAAE,uBAAuB,CAAC;IACvD;IACA,OAAOk/B,IAAI;EACb;EAEAm7B,wBAAwB,CAEtB/0D,mBAAsC,EACR;IAC9B,OAAO,IAAI,CAACod,KAAK,KAAgB,GAC7B,IAAI,CAAC7e,gBAAgB,EAAE,GACvB,IAAI,CAACokD,eAAe,CAAC3iD,mBAAmB,CAAC;EAC/C;EAKA80D,YAAY,CAEV90D,mBAAqC,EACvB;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMwZ,gBAAgB,GAAG,IAAI,CAAC7X,KAAK,CAAC6X,gBAAgB;IACpD,MAAMqgB,IAAI,GAAG,IAAI,CAACm7B,wBAAwB,CAAC/0D,mBAAmB,CAAC;IAE/D,IAAI,IAAI,CAACm0D,oBAAoB,CAACv6B,IAAI,EAAErgB,gBAAgB,CAAC,EAAE;MACrD,OAAOqgB,IAAI;IACb;IAEA,OAAO,IAAI,CAACqvB,WAAW,CAACrvB,IAAI,EAAE75B,QAAQ,EAAE,CAAC,CAAC,CAAC;EAC7C;EAQAkpD,WAAW,CAET1sB,IAAkC,EAClC2sB,YAAsB,EACtBC,OAAe,EACD;IACd,IAAI,IAAI,CAACvqD,aAAa,CAAC29B,IAAI,CAAC,EAAE;MAK5B,MAAMnyC,KAAK,GAAG,IAAI,CAACsU,gBAAgB,CAAC69B,IAAI,CAAC;MAEzC,IACE4sB,OAAO,IAAI16C,uBAAuB,CAAQ,OAC1C,CAAC,IAAI,CAACyc,SAAS,CAAC3C,KAAK,IACrB,CAAC,IAAI,CAACnL,KAAK,IAAQ,EACnB;QACA,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAAC7F,mBAAmB,EAAE;UACrCuM,EAAE,EAAE07B,IAAI;UACRnzC,cAAc,EAAEgB;QAClB,CAAC,CAAC;MACJ;MAEA,IAAI,CAACoW,UAAU,CAACC,cAAc,CAACrW,KAAK,EAAEmyC,IAAI,CAACnjC,GAAG,CAACnQ,KAAK,CAAC;IACvD;IAEA,MAAM+rE,EAAE,GAAG,IAAI,CAACtzD,KAAK,CAAC1U,IAAI;IAC1B,IAAImhB,eAAe,CAAC6mD,EAAE,CAAC,KAAK,IAAI,CAAC9pC,SAAS,CAAC3C,KAAK,IAAI,CAAC,IAAI,CAACnL,KAAK,IAAQ,CAAC,EAAE;MACxE,IAAI63C,IAAI,GAAGxmD,uBAAuB,CAACumD,EAAE,CAAC;MACtC,IAAIC,IAAI,GAAG9L,OAAO,EAAE;QAClB,IAAI6L,EAAE,OAAgB,EAAE;UACtB,IAAI,CAACpzC,YAAY,CAAC,kBAAkB,CAAC;UACrC,IAAI,IAAI,CAAClgB,KAAK,CAAC2Y,0BAA0B,EAAE;YACzC,OAAOkiB,IAAI;UACb;UACA,IAAI,CAAC24B,4BAA4B,CAAC34B,IAAI,EAAE2sB,YAAY,CAAC;QACvD;QACA,MAAMxuD,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAC3B28B,YAAY,CACb;QACDxuD,IAAI,CAAC6hC,IAAI,GAAGA,IAAI;QAChB7hC,IAAI,CAACqoD,QAAQ,GAAG,IAAI,CAACrhD,KAAK,CAACtX,KAAK;QAEhC,MAAM+qE,OAAO,GAAGH,EAAE,KAAiB,MAAIA,EAAE,KAAkB;QAC3D,MAAMI,QAAQ,GAAGJ,EAAE,KAAyB;QAE5C,IAAII,QAAQ,EAAE;UAGZH,IAAI,GAAGxmD,uBAAuB,CAAe;QAC/C;QAEA,IAAI,CAACiC,IAAI,EAAE;QAEX,IACEskD,EAAE,OAAgB,IAClB,IAAI,CAAC5zD,SAAS,CAAC,CAAC,kBAAkB,EAAE;UAAEkhB,QAAQ,EAAE;SAAW,CAAC,CAAC,EAC7D;UACA,IAAI,IAAI,CAAC5gB,KAAK,CAAC1U,IAAI,OAAc,IAAI,IAAI,CAACk+B,SAAS,CAAC9C,QAAQ,EAAE;YAC5D,MAAM,IAAI,CAACxnB,KAAK,CAACzG,MAAM,CAAC7E,gCAAgC,EAAE;cACxDuL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;YACjB,CAAC,CAAC;UACJ;QACF;QAEArF,IAAI,CAAC06B,KAAK,GAAG,IAAI,CAACigC,oBAAoB,CAACL,EAAE,EAAEC,IAAI,CAAC;QAChD,MAAMK,YAAY,GAAG,IAAI,CAACj2D,UAAU,CAClC3E,IAAI,EACJy6D,OAAO,IAAIC,QAAQ,GAAG,mBAAmB,GAAG,kBAAkB,CAC/D;QAMD,MAAMG,MAAM,GAAG,IAAI,CAAC7zD,KAAK,CAAC1U,IAAI;QAC9B,IACGooE,QAAQ,KAAKG,MAAM,OAAiB,IAAIA,MAAM,KAAkB,GAAC,IACjEJ,OAAO,IAAII,MAAM,OAA0B,EAC5C;UACA,MAAM,IAAI,CAAC30D,KAAK,CAACzG,MAAM,CAACjH,yBAAyB,EAAE;YACjD2N,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QAEA,OAAO,IAAI,CAACkpD,WAAW,CAACqM,YAAY,EAAEpM,YAAY,EAAEC,OAAO,CAAC;MAC9D;IACF;IACA,OAAO5sB,IAAI;EACb;EAKA84B,oBAAoB,CAElBL,EAAa,EACbC,IAAY,EACE;IACd,MAAMl1D,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,QAAQi1D,EAAE;MACR;QACE,QAAQ,IAAI,CAACx2D,eAAe,CAAC,kBAAkB,EAAE,UAAU,CAAC;UAC1D,KAAK,MAAM;YACT,OAAO,IAAI,CAACg3D,uBAAuB,CAAC,MAAM;cACxC,OAAO,IAAI,CAACC,iBAAiB,EAAE;YACjC,CAAC,CAAC;UAEJ,KAAK,OAAO;YACV,OAAO,IAAI,CAACD,uBAAuB,CAAC,MAAM;cACxC,IAAI,IAAI,CAACtqC,SAAS,CAAC7C,QAAQ,IAAI,IAAI,CAACM,YAAY,KAAW,EAAE;gBAC3D,MAAM,IAAI,CAAC/nB,KAAK,CAACzG,MAAM,CAAC/B,iBAAiB,EAAE;kBACzCyI,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;gBACjB,CAAC,CAAC;cACJ;cACA,OAAO,IAAI,CAAC21D,6BAA6B,CACvC,IAAI,CAACC,wBAAwB,CAACX,EAAE,EAAEC,IAAI,CAAC,EACvCl1D,QAAQ,CACT;YACH,CAAC,CAAC;UAEJ,KAAK,QAAQ;YACX,OAAO,IAAI,CAAC61D,8BAA8B,CAAC,MAAM;cAC/C,OAAO,IAAI,CAACC,uBAAuB,CAACZ,IAAI,CAAC;YAC3C,CAAC,CAAC;QAAA;MAIR;QACE,OAAO,IAAI,CAACU,wBAAwB,CAACX,EAAE,EAAEC,IAAI,CAAC;IAAA;EAEpD;EAKAU,wBAAwB,CAEtBX,EAAa,EACbC,IAAY,EACE;IACd,MAAMl1D,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAEpC,OAAO,IAAI,CAACkpD,WAAW,CACrB,IAAI,CAAC8L,wBAAwB,EAAE,EAC/Bh1D,QAAQ,EACR2O,uBAAuB,CAACsmD,EAAE,CAAC,GAAGC,IAAI,GAAG,CAAC,GAAGA,IAAI,CAC9C;EACH;EAEAQ,iBAAiB,GAA6B;IAAA;IAC5C,MAAM;MAAE11D;KAAU,GAAG,IAAI,CAAC2B,KAAK;IAC/B,MAAM7D,IAAI,GAAG,IAAI,CAAC48B,gBAAgB,EAAE;IACpC,MAAMq7B,mBAAmB,GAAG59D,mCAAmC,CAACkY,GAAG,CAEjEvS,IAAI,CAAC7Q,IAAI,CACV;IAGD,IAAI8oE,mBAAmB,IAAI,EAACj4D,mBAAI,CAACrB,KAAK,aAAVu5D,WAAY14D,cAAa,CAAE;MACrD,IAAI,CAACuD,KAAK,CAACzG,MAAM,CAACzB,uBAAuB,EAAE;QACzCmI,EAAE,EAAEd,QAAQ;QAEZ/S,IAAI,EAAE6Q,IAAI,CAAC7Q;MACb,CAAC,CAAC;IACJ;IACA,IAAI,CAAC,IAAI,CAACgpE,qCAAqC,EAAE,EAAE;MAEjD,IAAI,CAACp1D,KAAK,CAACzG,MAAM,CAAC1B,eAAe,EAAE;QAAEoI,EAAE,EAAEd;MAAS,CAAC,CAAC;IACtD;IAEA,OAAOlC,IAAI;EACb;EAEAo4D,0BAA0B,CACxBv7D,IAAmD,EACnD;IACA,IAAI,IAAI,CAAC0iB,KAAK,IAAa,EAAE;MAC3B,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAAC/D,kCAAkC,EAAE;QACpDyK,EAAE,EAAEnG,IAAI,CAAChB;MACX,CAAC,CAAC;IACJ;EACF;EAIAipD,eAAe,CAEb3iD,mBAA6C,EAC7CqrD,QAAkB,EACJ;IACd,MAAMtrD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMm2D,OAAO,GAAG,IAAI,CAACvtC,YAAY,CAAW;IAE5C,IAAIutC,OAAO,IAAI,IAAI,CAACC,cAAc,EAAE,EAAE;MACpC,IAAI,CAACzlD,IAAI,EAAE;MACX,MAAMkpB,IAAI,GAAG,IAAI,CAACw8B,UAAU,CAACr2D,QAAQ,CAAC;MACtC,IAAI,CAACsrD,QAAQ,EAAE,IAAI,CAAC4K,0BAA0B,CAACr8B,IAAI,CAAC;MACpD,OAAOA,IAAI;IACb;IACA,MAAMy8B,MAAM,GAAG,IAAI,CAACj5C,KAAK,CAAW;IACpC,MAAM1iB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA0C;IACrE,IAAIkP,aAAa,CAAC,IAAI,CAAC3M,KAAK,CAAC1U,IAAI,CAAC,EAAE;MAClC0N,IAAI,CAACqoD,QAAQ,GAAG,IAAI,CAACrhD,KAAK,CAACtX,KAAK;MAChCsQ,IAAI,CAACzN,MAAM,GAAG,IAAI;MAElB,IAAI,IAAI,CAACmwB,KAAK,IAAW,EAAE;QACzB,IAAI,CAACwE,YAAY,CAAC,kBAAkB,CAAC;MACvC;MACA,MAAM00C,QAAQ,GAAG,IAAI,CAACl5C,KAAK,CAAY;MACvC,IAAI,CAAC1M,IAAI,EAAE;MAEXhW,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACipD,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;MAEhD,IAAI,CAAC14B,qBAAqB,CAACjqB,mBAAmB,EAAE,IAAI,CAAC;MAErD,IAAI,IAAI,CAAC0B,KAAK,CAACkO,MAAM,IAAI0mD,QAAQ,EAAE;QACjC,MAAM/D,GAAG,GAAG73D,IAAI,CAAChB,QAAQ;QAEzB,IAAI64D,GAAG,CAACvlE,IAAI,KAAK,YAAY,EAAE;UAC7B,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC1C,YAAY,EAAE;YAAEoJ,EAAE,EAAEnG;UAAK,CAAC,CAAC;SAC9C,MAAM,IAAI,IAAI,CAAC+H,wBAAwB,CAAC8vD,GAAG,CAAC,EAAE;UAC7C,IAAI,CAAC3xD,KAAK,CAACzG,MAAM,CAACxL,kBAAkB,EAAE;YAAEkS,EAAE,EAAEnG;UAAK,CAAC,CAAC;QACrD;MACF;MAEA,IAAI,CAAC27D,MAAM,EAAE;QACX,IAAI,CAAChL,QAAQ,EAAE;UACb,IAAI,CAAC4K,0BAA0B,CAACv7D,IAAI,CAA8B;QACpE;QACA,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;MACjD;IACF;IAEA,MAAMk/B,IAAI,GAAG,IAAI,CAAC28B,WAAW,CAE3B77D,IAAI,EACJ27D,MAAM,EACNr2D,mBAAmB,CACpB;IAED,IAAIk2D,OAAO,EAAE;MACX,MAAM;QAAElpE;OAAM,GAAG,IAAI,CAAC0U,KAAK;MAC3B,MAAM8B,UAAU,GAAG,IAAI,CAACpC,SAAS,CAAC,aAAa,CAAC,GAC5C0M,uBAAuB,CAAC9gB,IAAI,CAAC,GAC7B8gB,uBAAuB,CAAC9gB,IAAI,CAAC,IAAI,CAAC,IAAI,CAACowB,KAAK,CAAW;MAC3D,IAAI5Z,UAAU,IAAI,CAAC,IAAI,CAACgzD,gBAAgB,EAAE,EAAE;QAC1C,IAAI,CAACxxC,cAAc,CAAC7qB,MAAM,CAACzM,sBAAsB,EAAE;UAAEmT,EAAE,EAAEd;QAAS,CAAC,CAAC;QACpE,OAAO,IAAI,CAACq2D,UAAU,CAACr2D,QAAQ,CAAC;MAClC;IACF;IAEA,OAAO65B,IAAI;EACb;EAGA28B,WAAW,CAET77D,IAAkB,EAClB27D,MAAe,EACfr2D,mBAA6C,EAC/B;IACd,IAAIq2D,MAAM,EAAE;MAEV,MAAMI,oBAAoB,GAAG/7D,IAAkC;MAC/D,IAAI,CAACw4D,SAAS,CAACuD,oBAAoB,CAAC/8D,QAAQ,EAAE;QAC5Cy5D,EAAE,EAAE,IAAI,CAAC9zD,UAAU,CAACo3D,oBAAoB,EAAE,kBAAkB;MAC9D,CAAC,CAAC;MACF,OAAO/7D,IAAI;IACb;IAEA,MAAMqF,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,IAAI65B,IAAI,GAAG,IAAI,CAAC88B,mBAAmB,CAAC12D,mBAAmB,CAAC;IACxD,IAAI,IAAI,CAACiqB,qBAAqB,CAACjqB,mBAAmB,EAAE,KAAK,CAAC,EAAE,OAAO45B,IAAI;IACvE,OAAOxrB,cAAc,CAAC,IAAI,CAAC1M,KAAK,CAAC1U,IAAI,CAAC,IAAI,CAAC,IAAI,CAACm8B,kBAAkB,EAAE,EAAE;MACpE,MAAMzuB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAqBxsB,QAAQ,CAAC;MAC3DrF,IAAI,CAACqoD,QAAQ,GAAG,IAAI,CAACrhD,KAAK,CAACtX,KAAK;MAChCsQ,IAAI,CAACzN,MAAM,GAAG,KAAK;MACnByN,IAAI,CAAChB,QAAQ,GAAGkgC,IAAI;MACpB,IAAI,CAAClpB,IAAI,EAAE;MACX,IAAI,CAACwiD,SAAS,CAACt5B,IAAI,EAAE;QACnBu5B,EAAE,EAAGv5B,IAAI,GAAG,IAAI,CAACv6B,UAAU,CAAC3E,IAAI,EAAE,kBAAkB;MACtD,CAAC,CAAC;IACJ;IACA,OAAOk/B,IAAI;EACb;EAIA88B,mBAAmB,CAEjB12D,mBAA6C,EAC/B;IACd,MAAMD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMwZ,gBAAgB,GAAG,IAAI,CAAC7X,KAAK,CAAC6X,gBAAgB;IACpD,MAAMqgB,IAAI,GAAG,IAAI,CAACrG,aAAa,CAACvzB,mBAAmB,CAAC;IAEpD,IAAI,IAAI,CAACm0D,oBAAoB,CAACv6B,IAAI,EAAErgB,gBAAgB,CAAC,EAAE;MACrD,OAAOqgB,IAAI;IACb;IAEA,OAAO,IAAI,CAAC8G,eAAe,CAAC9G,IAAI,EAAE75B,QAAQ,CAAC;EAC7C;EAEA2gC,eAAe,CAEbx+B,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAwB,EACV;IACd,MAAMT,KAAK,GAAG;MACZU,mBAAmB,EAAE,KAAK;MAC1Bu0D,eAAe,EAAE,IAAI,CAAC9N,oBAAoB,CAAC3mD,IAAI,CAAC;MAChDI,IAAI,EAAE;KACP;IACD,GAAG;MACDJ,IAAI,GAAG,IAAI,CAACD,cAAc,CAACC,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAET,KAAK,CAAC;MAG1DA,KAAK,CAACi1D,eAAe,GAAG,KAAK;IAC/B,CAAC,QAAQ,CAACj1D,KAAK,CAACY,IAAI;IACpB,OAAOJ,IAAI;EACb;EAMAD,cAAc,CAEZC,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAmC,EACnCT,KAA4B,EACd;IACd,MAAM;MAAE1U;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAI,CAACS,OAAO,IAAInV,IAAI,OAAmB,EAAE;MACvC,OAAO,IAAI,CAAC4pE,SAAS,CAAC10D,IAAI,EAAEnC,QAAQ,EAAEoC,OAAO,EAAET,KAAK,CAAC;IACvD,CAAC,MAAM,IAAIiN,eAAe,CAAC3hB,IAAI,CAAC,EAAE;MAChC,OAAO,IAAI,CAAC+7D,6BAA6B,CAAC7mD,IAAI,EAAEnC,QAAQ,EAAE2B,KAAK,CAAC;IAClE;IAEA,IAAIV,QAAQ,GAAG,KAAK;IAEpB,IAAIhU,IAAI,OAAmB,EAAE;MAC3B,IAAImV,OAAO,IAAI,IAAI,CAACke,iBAAiB,EAAE,OAA8B,EAAE;QAErE3e,KAAK,CAACY,IAAI,GAAG,IAAI;QACjB,OAAOJ,IAAI;MACb;MACAR,KAAK,CAACU,mBAAmB,GAAGpB,QAAQ,GAAG,IAAI;MAC3C,IAAI,CAAC0P,IAAI,EAAE;IACb;IAEA,IAAI,CAACvO,OAAO,IAAI,IAAI,CAACib,KAAK,IAAW,EAAE;MACrC,OAAO,IAAI,CAACy5C,+BAA+B,CACzC30D,IAAI,EACJnC,QAAQ,EACR2B,KAAK,EACLV,QAAQ,CACT;IACH,CAAC,MAAM;MACL,MAAM5B,QAAQ,GAAG,IAAI,CAACwgB,GAAG,CAAa;MACtC,IAAIxgB,QAAQ,IAAI4B,QAAQ,IAAI,IAAI,CAAC4e,GAAG,IAAQ,EAAE;QAC5C,OAAO,IAAI,CAACk3C,WAAW,CAAC50D,IAAI,EAAEnC,QAAQ,EAAE2B,KAAK,EAAEtC,QAAQ,EAAE4B,QAAQ,CAAC;MACpE,CAAC,MAAM;QACLU,KAAK,CAACY,IAAI,GAAG,IAAI;QACjB,OAAOJ,IAAI;MACb;IACF;EACF;EAMA40D,WAAW,CAET50D,IAAkB,EAClBnC,QAAkB,EAClB2B,KAA4B,EAC5BtC,QAAiB,EACjB4B,QAAiB,EACgC;IACjD,MAAMtG,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAE3BxsB,QAAQ,CAAC;IACXrF,IAAI,CAACzQ,MAAM,GAAGiY,IAAI;IAClBxH,IAAI,CAAC0E,QAAQ,GAAGA,QAAQ;IACxB,IAAIA,QAAQ,EAAE;MACZ1E,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAACqH,eAAe,EAAE;MACtC,IAAI,CAACrI,MAAM,CAAa;IAC1B,CAAC,MAAM,IAAI,IAAI,CAACrM,KAAK,KAAgB,EAAE;MACrC,IAAIlb,IAAI,CAAClV,IAAI,KAAK,OAAO,EAAE;QACzB,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACnF,iBAAiB,EAAE;UAAE6L,EAAE,EAAEd;QAAS,CAAC,CAAC;MACxD;MACA,IAAI,CAACS,UAAU,CAACC,cAAc,CAAC,IAAI,CAACiB,KAAK,CAACtX,KAAK,EAAE,IAAI,CAACsX,KAAK,CAAC3B,QAAQ,CAAC;MACrErF,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAAClsB,gBAAgB,EAAE;IACzC,CAAC,MAAM;MACL7D,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAAC2H,eAAe,CAAC,IAAI,CAAC;IAC5C;IAEA,IAAI1wB,KAAK,CAACU,mBAAmB,EAAE;MAC5B1H,IAAI,CAAgCsG,QAAQ,GAAGA,QAAQ;MACxD,OAAO,IAAI,CAAC3B,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;IAC1D,CAAC,MAAM;MACL,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;IAClD;EACF;EAGAk8D,SAAS,CAEP10D,IAAkB,EAClBnC,QAAkB,EAClBoC,OAAmC,EACnCT,KAA4B,EACd;IACd,MAAMhH,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;IACvCrF,IAAI,CAACzQ,MAAM,GAAGiY,IAAI;IAClB,IAAI,CAACwO,IAAI,EAAE;IACXhW,IAAI,CAACuG,MAAM,GAAG,IAAI,CAAC81D,eAAe,EAAE;IACpCr1D,KAAK,CAACY,IAAI,GAAG,IAAI;IACjB,OAAO,IAAI,CAACo+B,eAAe,CACzB,IAAI,CAACrhC,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC,EACvCqF,QAAQ,EACRoC,OAAO,CACR;EACH;EAMA00D,+BAA+B,CAE7B30D,IAAkB,EAClBnC,QAAkB,EAClB2B,KAA4B,EAC5BV,QAAiB,EACH;IACd,MAAM2mD,yBAAyB,GAAG,IAAI,CAACjmD,KAAK,CAACgY,sBAAsB;IACnE,IAAI1Z,mBAA4C,GAAG,IAAI;IAEvD,IAAI,CAAC0B,KAAK,CAACgY,sBAAsB,GAAG,IAAI;IACxC,IAAI,CAAChJ,IAAI,EAAE;IAEX,MAAMhW,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAC3BxsB,QAAQ,CACT;IACDrF,IAAI,CAACuG,MAAM,GAAGiB,IAAI;IAClB,MAAM;MAAEy0D,eAAe;MAAEv0D;IAAoB,CAAC,GAAGV,KAAK;IAEtD,IAAIi1D,eAAe,EAAE;MACnB,IAAI,CAACvrC,eAAe,CAACnW,KAAK,CAACyS,kBAAkB,EAAE,CAAC;MAChD1nB,mBAAmB,GAAG,IAAIwrB,gBAAgB,EAAE;IAC9C;IAEA,IAAIppB,mBAAmB,EAAE;MAEvB1H,IAAI,CAACsG,QAAQ,GAAGA,QAAQ;IAC1B;IAEA,IAAIA,QAAQ,EAAE;MACZtG,IAAI,CAACyG,SAAS,GAAG,IAAI,CAACw/B,4BAA4B,CAAW;IAC/D,CAAC,MAAM;MACLjmC,IAAI,CAACyG,SAAS,GAAG,IAAI,CAACw/B,4BAA4B,KAEhDz+B,IAAI,CAAClV,IAAI,KAAK,QAAQ,EACtBkV,IAAI,CAAClV,IAAI,KAAK,OAAO,EAErB0N,IAAI,EACJsF,mBAAmB,CACpB;IACH;IACA,IAAIs1D,YAGyB,GAAG,IAAI,CAACx0D,oBAAoB,CACvDpG,IAAI,EACJ0H,mBAAmB,CACpB;IAED,IAAIu0D,eAAe,IAAI,IAAI,CAACr3B,qBAAqB,EAAE,IAAI,CAACt+B,QAAQ,EAAE;MAEhEU,KAAK,CAACY,IAAI,GAAG,IAAI;MACjB,IAAI,CAACipB,yBAAyB,CAACvrB,mBAAmB,CAAC;MACnD,IAAI,CAACorB,eAAe,CAAC7D,iBAAiB,EAAE;MACxC,IAAI,CAAC6D,eAAe,CAAClW,IAAI,EAAE;MAC3BogD,YAAY,GAAG,IAAI,CAACl2B,iCAAiC,CACnD,IAAI,CAAC7S,WAAW,CAA4BxsB,QAAQ,CAAC,EACrDu1D,YAAY,CACb;IACH,CAAC,MAAM;MACL,IAAIqB,eAAe,EAAE;QACnB,IAAI,CAAC1sC,qBAAqB,CAACjqB,mBAAmB,EAAE,IAAI,CAAC;QACrD,IAAI,CAACorB,eAAe,CAAClW,IAAI,EAAE;MAC7B;MACA,IAAI,CAAC5T,qBAAqB,CAACg0D,YAAY,CAAC;IAC1C;IAEA,IAAI,CAAC5zD,KAAK,CAACgY,sBAAsB,GAAGiuC,yBAAyB;IAE7D,OAAO2N,YAAY;EACrB;EAEAh0D,qBAAqB,CACnB5G,IAAiD,EACjDgiC,mBAA6B,EAC7B;IACA,IAAI,CAAC81B,oBAAoB,CAAC93D,IAAI,CAACyG,SAAS,EAAEu7B,mBAAmB,CAAC;EAChE;EAIAqsB,6BAA6B,CAE3B7mD,IAAkB,EAClBnC,QAAkB,EAClB2B,KAA4B,EACA;IAC5B,MAAMhH,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAA6BxsB,QAAQ,CAAC;IACnErF,IAAI,CAACs8D,GAAG,GAAG90D,IAAI;IACfxH,IAAI,CAACu8D,KAAK,GAAG,IAAI,CAAC3U,aAAa,CAAC,IAAI,CAAC;IACrC,IAAI5gD,KAAK,CAACU,mBAAmB,EAAE;MAC7B,IAAI,CAACxB,KAAK,CAACzG,MAAM,CAAClG,0BAA0B,EAAE;QAAE4M,EAAE,EAAEd;MAAS,CAAC,CAAC;IACjE;IACA,OAAO,IAAI,CAACV,UAAU,CAAC3E,IAAI,EAAE,0BAA0B,CAAC;EAC1D;EAEAmuD,oBAAoB,CAAC3mD,IAAkB,EAAW;IAChD,OACEA,IAAI,CAAClV,IAAI,KAAK,YAAY,IAC1BkV,IAAI,CAACtP,IAAI,KAAK,OAAO,IACrB,IAAI,CAAC8O,KAAK,CAACqB,aAAa,CAACja,KAAK,KAAKoZ,IAAI,CAAChZ,GAAG,IAC3C,CAAC,IAAI,CAACigC,kBAAkB,EAAE,IAE1BjnB,IAAI,CAAChZ,GAAG,GAAGgZ,IAAI,CAACjZ,KAAK,KAAK,CAAC,IAC3BiZ,IAAI,CAACjZ,KAAK,KAAK,IAAI,CAACyY,KAAK,CAAC6X,gBAAgB;EAE9C;EAEAzY,oBAAoB,CAClBpG,IAAe,EACfsG,QAAiB,EACd;IACH,IAAItG,IAAI,CAACuG,MAAM,CAACjU,IAAI,KAAK,QAAQ,EAAE;MACjC,IAAI0N,IAAI,CAACyG,SAAS,CAACrX,MAAM,KAAK,CAAC,EAAE;QAGxB;UACL,IAAI,CAAC,IAAI,CAACsX,SAAS,CAAC,kBAAkB,CAAC,EAAE;YACvC,IAAI,CAACwgB,YAAY,CAAC,kBAAkB,CAAC;UACvC;QACF;MACF;MACA,IAAIlnB,IAAI,CAACyG,SAAS,CAACrX,MAAM,KAAK,CAAC,IAAI4Q,IAAI,CAACyG,SAAS,CAACrX,MAAM,GAAG,CAAC,EAAE;QAC5D,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAChK,eAAe,EAAE;UACjC0Q,EAAE,EAAEnG,IAAI;UACRtK,gBAAgB,EACd,IAAI,CAACgR,SAAS,CAAC,kBAAkB,CAAC,IAClC,IAAI,CAACA,SAAS,CAAC,kBAAkB,CAAC,GAC9B,CAAC,GACD;QACR,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,KAAK,MAAMmxD,GAAG,IAAI73D,IAAI,CAACyG,SAAS,EAAE;UAChC,IAAIoxD,GAAG,CAACvlE,IAAI,KAAK,eAAe,EAAE;YAChC,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC7J,wBAAwB,EAAE;cAAEuQ,EAAE,EAAE0xD;YAAI,CAAC,CAAC;UAC1D;QACF;MACF;IACF;IACA,OAAO,IAAI,CAAClzD,UAAU,CACpB3E,IAAI,EACJsG,QAAQ,GAAG,wBAAwB,GAAG,gBAAgB,CACvD;EACH;EAEA2/B,4BAA4B,CAE1B9D,KAAgB,EAChBq6B,aAAuB,EACvBC,gBAA0B,EAC1BC,YAA4B,EAC5Bp3D,mBAA6C,EACL;IACxC,MAAM6yD,IAAoB,GAAG,EAAE;IAC/B,IAAI16B,KAAK,GAAG,IAAI;IAChB,MAAMk/B,6BAA6B,GAAG,IAAI,CAAC31D,KAAK,CAAC2Y,0BAA0B;IAC3E,IAAI,CAAC3Y,KAAK,CAAC2Y,0BAA0B,GAAG,KAAK;IAE7C,OAAO,CAAC,IAAI,CAACuF,GAAG,CAACid,KAAK,CAAC,EAAE;MACvB,IAAI1E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAAU;QACrB,IAAI,IAAI,CAACrM,KAAK,CAACyf,KAAK,CAAC,EAAE;UACrB,IACEq6B,aAAa,IACb,CAAC,IAAI,CAAC91D,SAAS,CAAC,kBAAkB,CAAC,IACnC,CAAC,IAAI,CAACA,SAAS,CAAC,kBAAkB,CAAC,EACnC;YACA,IAAI,CAACR,KAAK,CAACzG,MAAM,CAACjK,+BAA+B,EAAE;cACjD2Q,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;YACjB,CAAC,CAAC;UACJ;UACA,IAAIy1D,YAAY,EAAE;YAChB,IAAI,CAACE,2BAA2B,CAACF,YAAY,CAAC;UAChD;UACA,IAAI,CAAC1mD,IAAI,EAAE;UACX;QACF;MACF;MAEAmiD,IAAI,CAACv0D,IAAI,CACP,IAAI,CAACi5D,iBAAiB,CAAC,KAAK,EAAEv3D,mBAAmB,EAAEm3D,gBAAgB,CAAC,CACrE;IACH;IAEA,IAAI,CAACz1D,KAAK,CAAC2Y,0BAA0B,GAAGg9C,6BAA6B;IAErE,OAAOxE,IAAI;EACb;EAEAvzB,qBAAqB,GAAY;IAC/B,OAAO,IAAI,CAACliB,KAAK,IAAU,IAAI,CAAC,IAAI,CAAC+L,kBAAkB,EAAE;EAC3D;EAEAiW,iCAAiC,CAE/B1kC,IAAuC,EACvC2kC,IAAsB,EACK;IAAA;IAC3B,IAAI,CAAC3mB,iCAAiC,CAAC2mB,IAAI,CAAC;IAC5C,IAAI,CAAC5V,MAAM,CAAU;IACrB,IAAI,CAACyX,oBAAoB,CACvBxmC,IAAI,EACJ2kC,IAAI,CAACl+B,SAAS,EACd,IAAI,iBACJk+B,IAAI,CAAC7iC,KAAK,KAAV,4BAAYw+B,gBAAgB,CAC7B;IAED,IAAIqE,IAAI,CAACloB,aAAa,EAAE;MACtBD,gBAAgB,CAACxc,IAAI,EAAE2kC,IAAI,CAACloB,aAAa,CAAC;IAC5C;IAEA,IAAIkoB,IAAI,CAACp+B,MAAM,CAAC4V,gBAAgB,EAAE;MAChCK,gBAAgB,CAACxc,IAAI,EAAE2kC,IAAI,CAACp+B,MAAM,CAAC4V,gBAAgB,CAAC;IACtD;IACA,OAAOnc,IAAI;EACb;EAIAq8D,eAAe,GAA6B;IAC1C,MAAMh3D,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,OAAO,IAAI,CAAC2gC,eAAe,CAAC,IAAI,CAACnN,aAAa,EAAE,EAAExzB,QAAQ,EAAE,IAAI,CAAC;EACnE;EAcAwzB,aAAa,CAEXvzB,mBAA6C,EAC/B;IACd,IAAItF,IAAI;IACR,IAAI8G,UAAgC,GAAG,IAAI;IAE3C,MAAM;MAAExU;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,QAAQ1U,IAAI;MACV;QACE,OAAO,IAAI,CAACwqE,UAAU,EAAE;MAE1B;QACE98D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA6B;QAClD,IAAI,CAACuR,IAAI,EAAE;QAEX,IAAI,IAAI,CAAC0M,KAAK,IAAQ,EAAE;UACtB,OAAO,IAAI,CAACq6C,uBAAuB,CAAC/8D,IAAI,CAA2B;QACrE;QAEA,IAAI,CAAC,IAAI,CAAC0iB,KAAK,IAAW,EAAE;UAC1B,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAAC1D,iBAAiB,EAAE;YACnCoK,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;UACjB,CAAC,CAAC;QACJ;QACA,OAAO,IAAI,CAACtC,UAAU,CAAC3E,IAAI,EAAE,QAAQ,CAAC;MACxC;QACEA,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;QACvB,IAAI,CAACuR,IAAI,EAAE;QACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;MAEhD;QAAa;UACX,OAAO,IAAI,CAACg9D,OAAO,CAAC,IAAI,CAACv4D,SAAS,EAAE,EAAE,KAAK,CAAC;QAC9C;MAEA;MACA;QAAqB;UACnB,IAAI,CAACkkB,UAAU,EAAE;UACjB,OAAO,IAAI,CAACpoB,kBAAkB,CAAC,IAAI,CAACyG,KAAK,CAACtX,KAAK,CAAC;QAClD;MAEA;QACE,OAAO,IAAI,CAAC6R,mBAAmB,CAAC,IAAI,CAACyF,KAAK,CAACtX,KAAK,CAAC;MAEnD;QACE,OAAO,IAAI,CAACoR,kBAAkB,CAAC,IAAI,CAACkG,KAAK,CAACtX,KAAK,CAAC;MAElD;QACE,OAAO,IAAI,CAACyR,mBAAmB,CAAC,IAAI,CAAC6F,KAAK,CAACtX,KAAK,CAAC;MAEnD;QACE,OAAO,IAAI,CAAC4R,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;MAElD;QACE,OAAO,IAAI,CAAC8R,gBAAgB,EAAE;MAEhC;QACE,OAAO,IAAI,CAACC,mBAAmB,CAAC,IAAI,CAAC;MACvC;QACE,OAAO,IAAI,CAACA,mBAAmB,CAAC,KAAK,CAAC;MAExC;QAAgB;UACd,MAAMskC,UAAU,GAAG,IAAI,CAAC/+B,KAAK,CAAC6X,gBAAgB,KAAK,IAAI,CAAC7X,KAAK,CAACzY,KAAK;UACnE,OAAO,IAAI,CAACu3C,kCAAkC,CAACC,UAAU,CAAC;QAC5D;MAEA;MACA;QAAsB;UACpB,OAAO,IAAI,CAAC7D,cAAc,CACxB,IAAI,CAACl7B,KAAK,CAAC1U,IAAI,MAAmB,GAA+B,OAC9C,KAAK,EACV,IAAI,CACnB;QACH;MACA;QAAkB;UAChB,OAAO,IAAI,CAAC4vC,cAAc,IAEL,IAAI,EACT,KAAK,EACnB58B,mBAAmB,CACpB;QACH;MACA;MACA;QAAoB;UAClB,OAAO,IAAI,CAAC+jD,eAAe,CACzB,IAAI,CAACriD,KAAK,CAAC1U,IAAI,MAAiB,GAA2B,OAC3C,KAAK,EACN,IAAI,CACpB;QACH;MACA;QAAgB;UACd,OAAO,IAAI,CAAC+2D,eAAe,IAET,KAAK,EACN,KAAK,EACpB/jD,mBAAmB,CACpB;QACH;MACA;QACE,OAAO,IAAI,CAAC23D,2BAA2B,EAAE;MAE3C;QACEn2D,UAAU,GAAG,IAAI,CAACo2D,eAAe,EAAE;MAErC;QACE,OAAO,IAAI,CAAC1Q,UAAU,CACpB,IAAI,CAACuF,mBAAmB,CAACjrD,UAAU,EAAE,IAAI,CAACrC,SAAS,EAAE,CAAC,EACtD,KAAK,CACN;MAEH;QACE,OAAO,IAAI,CAAC04D,mBAAmB,EAAE;MAEnC;MACA;QACE,OAAO,IAAI,CAACvV,aAAa,CAAC,KAAK,CAAC;MAIlC;QAAqB;UACnB5nD,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;UACvB,IAAI,CAACuR,IAAI,EAAE;UACXhW,IAAI,CAACzQ,MAAM,GAAG,IAAI;UAClB,MAAMgX,MAAM,GAAIvG,IAAI,CAACuG,MAAM,GAAG,IAAI,CAAC81D,eAAe,EAAG;UACrD,IAAI91D,MAAM,CAACjU,IAAI,KAAK,kBAAkB,EAAE;YACtC,OAAO,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;UAChD,CAAC,MAAM;YACL,MAAM,IAAI,CAACkG,KAAK,CAACzG,MAAM,CAAC7D,eAAe,EAAE;cAAEuK,EAAE,EAAEI;YAAO,CAAC,CAAC;UAC1D;QACF;MAEA;QAAqB;UAOnB,IAAI,CAACL,KAAK,CAACzG,MAAM,CAAC7F,mBAAmB,EAAE;YACrCuM,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;YACvB3W,cAAc,EAAE,IAAI,CAACsY,KAAK,CAACtX;UAC7B,CAAC,CAAC;UACF,OAAO,IAAI,CAACmU,gBAAgB,EAAE;QAChC;MAEA;QAAsB;UACpB,OAAO,IAAI,CAACu5D,iCAAiC,KAAY,GAAG,CAAC;QAC/D;MAEA;QAAmB;UACjB,OAAO,IAAI,CAACA,iCAAiC,KAAgB,GAAG,CAAC;QACnE;MAEA;MACA;QAAkB;UAChB,OAAO,IAAI,CAACC,mBAAmB,CAAC,MAAM,CAAC;QACzC;MAEA;MACA;MACA;QAAc;UACZ,MAAMC,YAAY,GAAG,IAAI,CAACx5D,eAAe,CACvC,kBAAkB,EAClB,UAAU,CACX;UAED,IAAIw5D,YAAY,EAAE;YAChB,OAAO,IAAI,CAACD,mBAAmB,CAACC,YAAY,CAAC;UAC/C,CAAC,MAAM;YACL,MAAM,IAAI,CAACpmE,UAAU,EAAE;UACzB;QACF;MAEA;QAAY;UACV,MAAM4wB,WAAW,GAAG,IAAI,CAACjK,KAAK,CAACkK,WAAW,CAAC,IAAI,CAACvC,cAAc,EAAE,CAAC;UACjE,IACE3Q,iBAAiB,CAACiT,WAAW,CAAC,IAC9BA,WAAW,OAA0B,EACrC;YACA,IAAI,CAACyC,eAAe,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;YACnD;UACF,CAAC,MAAM;YACL,MAAM,IAAI,CAACrzB,UAAU,EAAE;UACzB;QACF;MAEA;QACE,IAAI6b,iBAAiB,CAACzgB,IAAI,CAAC,EAAE;UAC3B,IACE,IAAI,CAAC27B,YAAY,CAAY,QAC7B,IAAI,CAACtI,iBAAiB,EAAE,QAA6B,IACrD,CAAC,IAAI,CAACgJ,qBAAqB,EAAE,EAC7B;YACA,OAAO,IAAI,CAAC4uC,qBAAqB,EAAE;UACrC;UACA,MAAMx3B,UAAU,GAAG,IAAI,CAAC/+B,KAAK,CAAC6X,gBAAgB,KAAK,IAAI,CAAC7X,KAAK,CAACzY,KAAK;UACnE,MAAMyxB,WAAW,GAAG,IAAI,CAAChZ,KAAK,CAACgZ,WAAW;UAC1C,MAAM/b,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;UAEjC,IACE,CAAC1X,WAAW,IACZ/b,EAAE,CAAC/L,IAAI,KAAK,OAAO,IACnB,CAAC,IAAI,CAACu2B,kBAAkB,EAAE,EAC1B;YACA,MAAM;cAAEn8B;aAAM,GAAG,IAAI,CAAC0U,KAAK;YAC3B,IAAI1U,IAAI,OAAiB,EAAE;cACzB,IAAI,CAAC0rB,iCAAiC,CAAC/Z,EAAE,CAAC;cAC1C,IAAI,CAAC+R,IAAI,EAAE;cACX,OAAO,IAAI,CAACwnD,4BAA4B,CACtC,IAAI,CAAC11D,eAAe,CAAC7D,EAAE,CAAC,CACzB;YACH,CAAC,MAAM,IAAI8O,iBAAiB,CAACzgB,IAAI,CAAC,EAAE;cAIlC,IAAI,IAAI,CAACqzB,iBAAiB,EAAE,OAAuB,EAAE;gBAInD,OAAO,IAAI,CAAC83C,4BAA4B,CACtC,IAAI,CAAC31D,eAAe,CAAC7D,EAAE,CAAC,CACzB;cACH,CAAC,MAAM;gBAGL,OAAOA,EAAE;cACX;YACF,CAAC,MAAM,IAAI3R,IAAI,OAAW,EAAE;cAC1B,IAAI,CAAC0rB,iCAAiC,CAAC/Z,EAAE,CAAC;cAC1C,OAAO,IAAI,CAAC+4D,OAAO,CAAC,IAAI,CAACl1D,eAAe,CAAC7D,EAAE,CAAC,EAAE,IAAI,CAAC;YACrD;UACF;UAEA,IACE8hC,UAAU,IACV,IAAI,CAACrjB,KAAK,IAAU,IACpB,CAAC,IAAI,CAAC+L,kBAAkB,EAAE,EAC1B;YACA,IAAI,CAACzY,IAAI,EAAE;YACX,OAAO,IAAI,CAACwwB,oBAAoB,CAC9B,IAAI,CAAC1+B,eAAe,CAAC7D,EAAE,CAAC,EACxB,CAACA,EAAE,CAAC,EACJ,KAAK,CACN;UACH;UAEA,OAAOA,EAAE;QACX,CAAC,MAAM;UACL,MAAM,IAAI,CAAC/M,UAAU,EAAE;QACzB;IAAA;EAEN;EAYAkmE,iCAAiC,CAC/BM,cAAyB,EACzBC,eAAuB,EACT;IACd,MAAML,YAAY,GAAG,IAAI,CAACx5D,eAAe,CAAC,kBAAkB,EAAE,UAAU,CAAC;IAEzE,IAAIw5D,YAAY,EAAE;MAKhB,IAAI,CAACt2D,KAAK,CAAC1U,IAAI,GAAGorE,cAAc;MAChC,IAAI,CAAC12D,KAAK,CAACtX,KAAK,GAAGiuE,eAAe;MAGlC,IAAI,CAAC32D,KAAK,CAAClI,GAAG,EAAE;MAChB,IAAI,CAACkI,KAAK,CAACxY,GAAG,EAAE;MAGhB,IAAI,CAACwY,KAAK,CAACmB,MAAM,GAAGxZ,8BAA8B,CAAC,IAAI,CAACqY,KAAK,CAACmB,MAAM,EAAE,CAAC,CAAC,CAAC;MAEzE,OAAO,IAAI,CAACk1D,mBAAmB,CAACC,YAAY,CAAC;IAC/C,CAAC,MAAM;MACL,MAAM,IAAI,CAACpmE,UAAU,EAAE;IACzB;EACF;EAQAmmE,mBAAmB,CAACC,YAAoB,EAAgB;IACtD,MAAMt9D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAoB;IAC/C,MAAMY,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IACpC,MAAMipD,SAAS,GAAG,IAAI,CAACtnD,KAAK,CAAC1U,IAAI;IAGjC,IAAI,CAAC0jB,IAAI,EAAE;IAKX,OAAO,IAAI,CAAC4nD,oBAAoB,CAAC59D,IAAI,EAAEqF,QAAQ,EAAEi4D,YAAY,EAAEhP,SAAS,CAAC;EAC3E;EAeAsP,oBAAoB,CAClB59D,IAAoB,EACpBqF,QAAkB,EAClBi4D,YAAoB,EACpBhP,SAAoB,EACN;IACd,IACE,IAAI,CAACuP,+BAA+B,CAACP,YAAY,EAAEj4D,QAAQ,EAAEipD,SAAS,CAAC,EACvE;MAMA,MAAMpG,QAAQ,GACZoV,YAAY,KAAK,OAAO,GACpB,+BAA+B,GAG/B,gBAAgB;MAEtB,IAAI,CAAC,IAAI,CAACQ,uCAAuC,EAAE,EAAE;QACnD,IAAI,CAAC53D,KAAK,CAIRo3D,YAAY,KAAK,OAAO,GACpB79D,MAAM,CAACpB,sBAAsB,GAE7BoB,MAAM,CAAC7B,gBAAgB,EAC3B;UAAEuI,EAAE,EAAEd;QAAS,CAAC,CACjB;MACH;MAIA,IAAI,CAAC04D,sBAAsB,EAAE;MAE7B,OAAO,IAAI,CAACp5D,UAAU,CAAC3E,IAAI,EAAEkoD,QAAQ,CAAC;IACxC,CAAC,MAAM;MAEL,MAAM,IAAI,CAAChiD,KAAK,CAACzG,MAAM,CAAC5B,0BAA0B,EAAE;QAClDsI,EAAE,EAAEd,QAAQ;QACZvH,KAAK,EAAEgW,cAAc,CAACw6C,SAAS;MACjC,CAAC,CAAC;IACJ;EACF;EAWAuP,+BAA+B,CAC7BP,YAAoB,EACpBj4D,QAAkB,EAClBipD,SAAoB,EACX;IACT,QAAQgP,YAAY;MAClB,KAAK,MAAM;QAAE;UACX,OAAO,IAAI,CAAC52D,SAAS,CAAC,CACpB,kBAAkB,EAClB;YAEEmhB,UAAU,EAAE/T,cAAc,CAACw6C,SAAS;UACtC,CAAC,CACF,CAAC;QACJ;MACA,KAAK,OAAO;QACV,OAAOA,SAAS,KAAY;MAC9B;QACE,MAAM,IAAI,CAACpoD,KAAK,CAACzG,MAAM,CAAC9B,0BAA0B,EAAE;UAAEwI,EAAE,EAAEd;QAAS,CAAC,CAAC;IAAA;EAE3E;EAGAo4D,4BAA4B,CAE1Bz9D,IAAuC,EACZ;IAG3B,IAAI,CAACwwB,SAAS,CAACjW,KAAK,CAACuT,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC0C,SAAS,CAAC7C,QAAQ,CAAC,CAAC;IAClE,MAAMnrB,MAAM,GAAG,CAAC,IAAI,CAACk1B,eAAe,EAAE,CAAC;IACvC,IAAI,CAAClH,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,IAAI,CAACkU,qBAAqB,EAAE,EAAE;MAChC,IAAI,CAACxoB,KAAK,CAACzG,MAAM,CAAC9H,yBAAyB,EAAE;QAC3CwO,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW;MAC5B,CAAC,CAAC;IACJ;IACA,IAAI,CAACsO,MAAM,CAAU;IAErB,OAAO,IAAI,CAACyX,oBAAoB,CAACxmC,IAAI,EAAEwC,MAAM,EAAE,IAAI,CAAC;EACtD;EAIAw6D,OAAO,CAELh9D,IAA4B,EAC5BmC,OAAgB,EACA;IAChB,IAAI,CAAC+kB,YAAY,CAAC,eAAe,CAAC;IAClC,IAAI/kB,OAAO,EAAE;MACX,IAAI,CAAC+kB,YAAY,CAAC,oBAAoB,CAAC;IACzC;IACAlnB,IAAI,CAACqlC,KAAK,GAAGljC,OAAO;IACpB,IAAI,CAAC6T,IAAI,EAAE;IACX,MAAMia,SAAS,GAAG,IAAI,CAACjpB,KAAK,CAAC4Y,MAAM;IACnC,IAAI,CAAC5Y,KAAK,CAAC4Y,MAAM,GAAG,EAAE;IACtB,IAAIzd,OAAO,EAAE;MAGX,IAAI,CAACquB,SAAS,CAACjW,KAAK,CAAC6S,WAAW,CAAC;MACjCptB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACkxD,UAAU,EAAE;MAC7B,IAAI,CAAC7jC,SAAS,CAAChW,IAAI,EAAE;IACvB,CAAC,MAAM;MACLxa,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACkxD,UAAU,EAAE;IAC/B;IAEA,IAAI,CAACrtD,KAAK,CAAC4Y,MAAM,GAAGqQ,SAAS;IAC7B,OAAO,IAAI,CAACtrB,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAGA88D,UAAU,GAAY;IACpB,MAAM98D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAW;IACtC,IAAI,CAACuR,IAAI,EAAE;IACX,IACE,IAAI,CAAC0M,KAAK,IAAW,IACrB,CAAC,IAAI,CAACjI,KAAK,CAACnW,gBAAgB,IAC5B,CAAC,IAAI,CAACjE,OAAO,CAACi3D,uBAAuB,EACrC;MACA,IAAI,CAACpxD,KAAK,CAACzG,MAAM,CAACpF,eAAe,EAAE;QAAE8L,EAAE,EAAEnG;MAAK,CAAC,CAAC;IAClD,CAAC,MAAM,IACL,CAAC,IAAI,CAACya,KAAK,CAACX,UAAU,IACtB,CAAC,IAAI,CAACzZ,OAAO,CAACi3D,uBAAuB,EACrC;MACA,IAAI,CAACpxD,KAAK,CAACzG,MAAM,CAAClE,eAAe,EAAE;QAAE4K,EAAE,EAAEnG;MAAK,CAAC,CAAC;IAClD;IAEA,IACE,CAAC,IAAI,CAAC0iB,KAAK,IAAW,IACtB,CAAC,IAAI,CAACA,KAAK,GAAa,IACxB,CAAC,IAAI,CAACA,KAAK,IAAQ,EACnB;MACA,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAACpD,gBAAgB,EAAE;QAAE8J,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACnD;IAEA,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,OAAO,CAAC;EACvC;EAEA6D,gBAAgB,GAAkB;IAChC,MAAM7D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5C,MAAMR,EAAE,GAAG,IAAI,CAAC4tB,WAAW,CAGzBljC,8BAA8B,CAAC,IAAI,CAACqY,KAAK,CAAC3B,QAAQ,EAAE,CAAC,CAAC,CACvD;IACD,MAAMnN,IAAI,GAAG,IAAI,CAAC8O,KAAK,CAACtX,KAAK;IAC7B,IAAI,CAACsmB,IAAI,EAAE;IACXhW,IAAI,CAACiE,EAAE,GAAG,IAAI,CAAC+5B,gBAAgB,CAAC/5B,EAAE,EAAE/L,IAAI,CAAC;IACzC,OAAO,IAAI,CAACyM,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEAi9D,2BAA2B,GAEc;IACvC,MAAMj9D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAyC;IAOpE,IAAI,CAACuR,IAAI,EAAE;IAEX,IAAI,IAAI,CAACwa,SAAS,CAAC7C,QAAQ,IAAI,IAAI,CAACjL,KAAK,IAAQ,EAAE;MACjD,MAAMs7C,IAAI,GAAG,IAAI,CAAChgC,gBAAgB,CAChC,IAAI,CAACl2B,eAAe,CAAe9H,IAAI,CAAC,EACxC,UAAU,CACX;MACD,IAAI,CAACgW,IAAI,EAAE;MAEX,IAAI,IAAI,CAAC0M,KAAK,KAAU,EAAE;QACxB,IAAI,CAACwE,YAAY,CAAC,cAAc,CAAC;OAClC,MAAM,IAAI,CAAC,IAAI,CAACxgB,SAAS,CAAC,cAAc,CAAC,EAAE;QAE1C,IAAI,CAACxP,UAAU,EAAE;MACnB;MACA,OAAO,IAAI,CAAC+mE,iBAAiB,CAC3Bj+D,IAAI,EACJg+D,IAAI,EACJ,MAAM,CACP;IACH;IACA,OAAO,IAAI,CAACE,aAAa,CAACl+D,IAAI,CAAiC;EACjE;EAEAi+D,iBAAiB,CACfj+D,IAA4B,EAC5Bg+D,IAAkB,EAClBhhB,YAAoB,EACJ;IAChBh9C,IAAI,CAACg+D,IAAI,GAAGA,IAAI;IAEhB,MAAMh+C,WAAW,GAAG,IAAI,CAAChZ,KAAK,CAACgZ,WAAW;IAE1ChgB,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAAC2H,eAAe,CAAC,IAAI,CAAC;IAE1C,IAAI13B,IAAI,CAAC+vB,QAAQ,CAAC73B,IAAI,KAAK8kD,YAAY,IAAIh9B,WAAW,EAAE;MACtD,IAAI,CAAC9Z,KAAK,CAACzG,MAAM,CAACzD,uBAAuB,EAAE;QACzCmK,EAAE,EAAEnG,IAAI,CAAC+vB,QAAQ;QACjB9zB,MAAM,EAAE+hE,IAAI,CAAC9lE,IAAI;QACjBgE,qBAAqB,EAAE8gD;MACzB,CAAC,CAAC;IACJ;IAEA,OAAO,IAAI,CAACr4C,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAGA+8D,uBAAuB,CAAC/8D,IAA4B,EAAkB;IACpE,MAAMiE,EAAE,GAAG,IAAI,CAAC+5B,gBAAgB,CAC9B,IAAI,CAACl2B,eAAe,CAAe9H,IAAI,CAAC,EACxC,QAAQ,CACT;IACD,IAAI,CAACgW,IAAI,EAAE;IAEX,IAAI,IAAI,CAACiY,YAAY,KAAU,EAAE;MAC/B,IAAI,CAAC,IAAI,CAACzY,QAAQ,EAAE;QAClB,IAAI,CAACtP,KAAK,CAACzG,MAAM,CAAC/O,uBAAuB,EAAE;UAAEyV,EAAE,EAAElC;QAAG,CAAC,CAAC;MACxD;MACA,IAAI,CAACuX,iBAAiB,GAAG,IAAI;IAC/B;IAEA,OAAO,IAAI,CAACyiD,iBAAiB,CAACj+D,IAAI,EAAEiE,EAAE,EAAE,MAAM,CAAC;EACjD;EAEA85B,kBAAkB,CAChBruC,KAAU,EACV4C,IAAe,EACf0N,IAAS,EACN;IACH,IAAI,CAACguB,QAAQ,CAAChuB,IAAI,EAAE,UAAU,EAAEtQ,KAAK,CAAC;IACtC,IAAI,CAACs+B,QAAQ,CAAChuB,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC6d,KAAK,CAAC+C,KAAK,CAAC5gB,IAAI,CAACzR,KAAK,EAAE,IAAI,CAACyY,KAAK,CAACxY,GAAG,CAAC,CAAC;IACxEwR,IAAI,CAACtQ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACsmB,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAI3E,IAAI,EAAE1N,IAAI,CAAC;EACvC;EAEA+O,YAAY,CAAmB3R,KAAU,EAAE4C,IAAe,EAAK;IAC7D,MAAM0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,OAAO,IAAI,CAACs5B,kBAAkB,CAACruC,KAAK,EAAE4C,IAAI,EAAE0N,IAAI,CAAC;EACnD;EAEAsB,kBAAkB,CAAC5R,KAAU,EAAE;IAC7B,OAAO,IAAI,CAAC2R,YAAY,CAAkB3R,KAAK,EAAE,eAAe,CAAC;EACnE;EAEA6R,mBAAmB,CAAC7R,KAAU,EAAE;IAC9B,OAAO,IAAI,CAAC2R,YAAY,CAAmB3R,KAAK,EAAE,gBAAgB,CAAC;EACrE;EAEAoR,kBAAkB,CAACpR,KAAU,EAAE;IAC7B,OAAO,IAAI,CAAC2R,YAAY,CAAkB3R,KAAK,EAAE,eAAe,CAAC;EACnE;EAEAyR,mBAAmB,CAACzR,KAAU,EAAE;IAC9B,OAAO,IAAI,CAAC2R,YAAY,CAAmB3R,KAAK,EAAE,gBAAgB,CAAC;EACrE;EAEA6Q,kBAAkB,CAAC7Q,KAIlB,EAAE;IACD,MAAMsQ,IAAI,GAAG,IAAI,CAACqB,YAAY,CAC5B3R,KAAK,CAACA,KAAK,EACX,eAAe,CAChB;IACDsQ,IAAI,CAACQ,OAAO,GAAG9Q,KAAK,CAAC8Q,OAAO;IAC5BR,IAAI,CAACS,KAAK,GAAG/Q,KAAK,CAAC+Q,KAAK;IACxB,OAAOT,IAAI;EACb;EAEAyB,mBAAmB,CAAC/R,KAAc,EAAE;IAClC,MAAMsQ,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAoB;IAC/CzE,IAAI,CAACtQ,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACsmB,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAwB,gBAAgB,GAAG;IACjB,MAAMxB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAiB;IAC5C,IAAI,CAACuR,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAGA8lC,kCAAkC,CAEhCC,UAAmB,EACL;IACd,MAAM1gC,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAEpC,IAAIsb,GAAG;IACP,IAAI,CAAC3K,IAAI,EAAE;IACX,IAAI,CAAC0a,eAAe,CAACnW,KAAK,CAACwS,iBAAiB,EAAE,CAAC;IAE/C,MAAMkgC,yBAAyB,GAAG,IAAI,CAACjmD,KAAK,CAACgY,sBAAsB;IACnE,MAAM29C,6BAA6B,GAAG,IAAI,CAAC31D,KAAK,CAAC2Y,0BAA0B;IAC3E,IAAI,CAAC3Y,KAAK,CAACgY,sBAAsB,GAAG,IAAI;IACxC,IAAI,CAAChY,KAAK,CAAC2Y,0BAA0B,GAAG,KAAK;IAE7C,MAAMw+C,aAAa,GAAG,IAAI,CAACn3D,KAAK,CAAC3B,QAAQ;IACzC,MAAMy8B,QAAwB,GAAG,EAAE;IACnC,MAAMx8B,mBAAmB,GAAG,IAAIwrB,gBAAgB,EAAE;IAClD,IAAI2M,KAAK,GAAG,IAAI;IAChB,IAAI2gC,cAAc;IAClB,IAAIC,qBAAqB;IAEzB,OAAO,CAAC,IAAI,CAAC37C,KAAK,IAAW,EAAE;MAC7B,IAAI+a,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAETzpB,uBAAmB,CAACsqB,qBAAqB,KAAK,IAAI,GAC9C,IAAI,GACJtqB,mBAAmB,CAACsqB,qBAAqB,CAC9C;QACD,IAAI,IAAI,CAAClN,KAAK,IAAW,EAAE;UACzB27C,qBAAqB,GAAG,IAAI,CAACr3D,KAAK,CAAC3B,QAAQ;UAC3C;QACF;MACF;MAEA,IAAI,IAAI,CAACqd,KAAK,IAAa,EAAE;QAC3B,MAAM47C,kBAAkB,GAAG,IAAI,CAACt3D,KAAK,CAAC3B,QAAQ;QAC9C+4D,cAAc,GAAG,IAAI,CAACp3D,KAAK,CAAC3B,QAAQ;QACpCy8B,QAAQ,CAACl+B,IAAI,CACX,IAAI,CAAC68B,cAAc,CAAC,IAAI,CAACu3B,gBAAgB,EAAE,EAAEsG,kBAAkB,CAAC,CACjE;QAED,IAAI,CAAC,IAAI,CAAChN,mBAAmB,IAA4B,EAAE;UACzD;QACF;MACF,CAAC,MAAM;QACLxvB,QAAQ,CAACl+B,IAAI,CACX,IAAI,CAACo8B,uBAAuB,CAC1B16B,mBAAmB,EACnB,IAAI,CAACm7B,cAAc,CACpB,CACF;MACH;IACF;IAEA,MAAM89B,WAAW,GAAG,IAAI,CAACv3D,KAAK,CAACqB,aAAa;IAC5C,IAAI,CAAC0mB,MAAM,CAAW;IAEtB,IAAI,CAAC/nB,KAAK,CAACgY,sBAAsB,GAAGiuC,yBAAyB;IAC7D,IAAI,CAACjmD,KAAK,CAAC2Y,0BAA0B,GAAGg9C,6BAA6B;IAErE,IAAI6B,SAAS,GAAG,IAAI,CAAC3sC,WAAW,CAA4BxsB,QAAQ,CAAC;IACrE,IACE0gC,UAAU,IACV,IAAI,CAACN,gBAAgB,CAAC3D,QAAQ,CAAC,KAC9B08B,SAAS,GAAG,IAAI,CAACh5B,UAAU,CAACg5B,SAAS,CAAC,CAAC,EACxC;MACA,IAAI,CAAC3tC,yBAAyB,CAACvrB,mBAAmB,CAAC;MACnD,IAAI,CAACorB,eAAe,CAAC7D,iBAAiB,EAAE;MACxC,IAAI,CAAC6D,eAAe,CAAClW,IAAI,EAAE;MAC3B,IAAI,CAACgsB,oBAAoB,CAACg4B,SAAS,EAAE18B,QAAQ,EAAE,KAAK,CAAC;MAErD,OAAO08B,SAAS;IAClB;IACA,IAAI,CAAC9tC,eAAe,CAAClW,IAAI,EAAE;IAE3B,IAAI,CAACsnB,QAAQ,CAAC1yC,MAAM,EAAE;MACpB,IAAI,CAAC8H,UAAU,CAAC,IAAI,CAAC8P,KAAK,CAACC,eAAe,CAAC;IAC7C;IACA,IAAIo3D,qBAAqB,EAAE,IAAI,CAACnnE,UAAU,CAACmnE,qBAAqB,CAAC;IACjE,IAAID,cAAc,EAAE,IAAI,CAAClnE,UAAU,CAACknE,cAAc,CAAC;IACnD,IAAI,CAAC7uC,qBAAqB,CAACjqB,mBAAmB,EAAE,IAAI,CAAC;IAErD,IAAI,CAACwyD,oBAAoB,CAACh2B,QAAQ,EAA4B,IAAI,CAAC;IACnE,IAAIA,QAAQ,CAAC1yC,MAAM,GAAG,CAAC,EAAE;MACvBuxB,GAAG,GAAG,IAAI,CAACkR,WAAW,CAAuBssC,aAAa,CAAC;MAC3Dx9C,GAAG,CAACyyC,WAAW,GAAGtxB,QAAQ;MAE1B,IAAI,CAACn9B,UAAU,CAACgc,GAAG,EAAE,oBAAoB,CAAC;MAC1C,IAAI,CAACvY,gBAAgB,CAACuY,GAAG,EAAE49C,WAAW,CAAC;IACzC,CAAC,MAAM;MACL59C,GAAG,GAAGmhB,QAAQ,CAAC,CAAC,CAAC;IACnB;IAEA,OAAO,IAAI,CAAC28B,eAAe,CACzBp5D,QAAQ,EAERsb,GAAG,CACJ;EACH;EAEA89C,eAAe,CAACp5D,QAAkB,EAAEzD,UAAwB,EAAgB;IAC1E,IAAI,CAAC,IAAI,CAACvB,OAAO,CAACm3D,8BAA8B,EAAE;MAChD,IAAI,CAACxpC,QAAQ,CAACpsB,UAAU,EAAE,eAAe,EAAE,IAAI,CAAC;MAChD,IAAI,CAACosB,QAAQ,CAACpsB,UAAU,EAAE,YAAY,EAAEyD,QAAQ,CAACjX,KAAK,CAAC;MAEvD,IAAI,CAAC6vB,uBAAuB,CAC1Brc,UAAU,EACVyD,QAAQ,CAACjX,KAAK,EACd,IAAI,CAAC4Y,KAAK,CAACqB,aAAa,CAACja,KAAK,CAC/B;MAED,OAAOwT,UAAU;IACnB;IAEA,MAAM88D,eAAe,GACnB,IAAI,CAAC7sC,WAAW,CAA4BxsB,QAAQ,CAAC;IACvDq5D,eAAe,CAAC98D,UAAU,GAAGA,UAAU;IACvC,OAAO,IAAI,CAAC+C,UAAU,CAAC+5D,eAAe,EAAE,yBAAyB,CAAC;EACpE;EAGAj5B,gBAAgB,CAACjjC,MAAqB,EAAW;IAC/C,OAAO,CAAC,IAAI,CAACisB,kBAAkB,EAAE;EACnC;EAEA+W,UAAU,CACRxlC,IAAuC,EACQ;IAC/C,IAAI,IAAI,CAACklB,GAAG,IAAU,EAAE;MACtB,OAAOllB,IAAI;IACb;EACF;EAEAygC,cAAc,CACZzgC,IAAkB,EAElBqF,QAAkB,EACJ;IACd,OAAOrF,IAAI;EACb;EAEAm9D,mBAAmB,GAAiD;IAClE,MAAMn9D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAoC;IAC/D,IAAI,CAACuR,IAAI,EAAE;IACX,IAAI,IAAI,CAAC0M,KAAK,IAAQ,EAAE;MAEtB,MAAMs7C,IAAI,GAAG,IAAI,CAAChgC,gBAAgB,CAChC,IAAI,CAACl2B,eAAe,CAAe9H,IAAI,CAAC,EACxC,KAAK,CACN;MACD,IAAI,CAACgW,IAAI,EAAE;MACX,MAAM2oD,QAAQ,GAAG,IAAI,CAACV,iBAAiB,CACrCj+D,IAAI,EACJg+D,IAAI,EACJ,QAAQ,CACT;MAED,IAAI,CAAC,IAAI,CAACvjD,KAAK,CAACN,kBAAkB,IAAI,CAAC,IAAI,CAACM,KAAK,CAACT,OAAO,EAAE;QACzD,IAAI,CAAC9T,KAAK,CAACzG,MAAM,CAACtE,mBAAmB,EAAE;UAAEgL,EAAE,EAAEw4D;QAAS,CAAC,CAAC;MAC1D;MAEA,OAAOA,QAAQ;IACjB;IAEA,OAAO,IAAI,CAACC,QAAQ,CAAC5+D,IAAI,CAA4B;EACvD;EAQA4+D,QAAQ,CAAe5+D,IAA6B,EAAmB;IACrE,IAAI,CAACsmC,cAAc,CAACtmC,IAAI,CAAC;IAEzB,IAAI,IAAI,CAACklB,GAAG,IAAW,EAAE;MACvB,MAAM25C,IAAI,GAAG,IAAI,CAACC,aAAa,CAAW;MAC1C,IAAI,CAAC/8B,gBAAgB,CAAC88B,IAAI,CAAC;MAE3B7+D,IAAI,CAACyG,SAAS,GAAGo4D,IAAI;IACvB,CAAC,MAAM;MACL7+D,IAAI,CAACyG,SAAS,GAAG,EAAE;IACrB;IAEA,OAAO,IAAI,CAAC9B,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAsmC,cAAc,CAAetmC,IAA6B,EAAQ;IAChEA,IAAI,CAACuG,MAAM,GAAG,IAAI,CAAC81D,eAAe,EAAE;IACpC,IAAIr8D,IAAI,CAACuG,MAAM,CAACjU,IAAI,KAAK,QAAQ,EAAE;MACjC,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC9J,0BAA0B,EAAE;QAAEwQ,EAAE,EAAEnG,IAAI,CAACuG;MAAO,CAAC,CAAC;KACnE,MAAM,IAAI,IAAI,CAACyB,eAAe,CAAChI,IAAI,CAACuG,MAAM,CAAC,EAAE;MAC5C,IAAI,CAACL,KAAK,CAACzG,MAAM,CAACnG,qBAAqB,EAAE;QACvC6M,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB;MACjB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,IAAI,CAAC6c,GAAG,IAAgB,EAAE;MACnC,IAAI,CAAChf,KAAK,CAACzG,MAAM,CAACnG,qBAAqB,EAAE;QACvC6M,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;EACF;EAIA05D,oBAAoB,CAACC,QAAiB,EAAqB;IACzD,MAAM;MAAEzwE,KAAK;MAAE8W,QAAQ;MAAE7W,GAAG;MAAEkB;KAAO,GAAG,IAAI,CAACsX,KAAK;IAClD,MAAMi4D,SAAS,GAAG1wE,KAAK,GAAG,CAAC;IAC3B,MAAM2wE,IAAI,GAAG,IAAI,CAACrtC,WAAW,CAC3BljC,8BAA8B,CAAC0W,QAAQ,EAAE,CAAC,CAAC,CAC5C;IACD,IAAI3V,KAAK,KAAK,IAAI,EAAE;MAClB,IAAI,CAACsvE,QAAQ,EAAE;QACb,IAAI,CAAC94D,KAAK,CAACzG,MAAM,CAACjJ,6BAA6B,EAAE;UAE/C2P,EAAE,EAAExX,8BAA8B,CAChC,IAAI,CAACqY,KAAK,CAACiZ,6BAA6B,EACxC,CAAC;QAEL,CAAC,CAAC;MACJ;IACF;IAEA,MAAMk/C,MAAM,GAAG,IAAI,CAACz8C,KAAK,CAAiB;IAC1C,MAAM08C,SAAS,GAAGD,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAClC,MAAME,OAAO,GAAG7wE,GAAG,GAAG4wE,SAAS;IAC/BF,IAAI,CAACxvE,KAAK,GAAG;MACXmS,GAAG,EAAE,IAAI,CAACgc,KAAK,CAAC+C,KAAK,CAACq+C,SAAS,EAAEI,OAAO,CAAC,CAACn2C,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;MACjEo2C,MAAM,EAAE5vE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACkxB,KAAK,CAAC,CAAC,EAAEw+C,SAAS;KACzD;IACDF,IAAI,CAACK,IAAI,GAAGJ,MAAM;IAClB,IAAI,CAACnpD,IAAI,EAAE;IACX,MAAM4kD,YAAY,GAAG,IAAI,CAACj2D,UAAU,CAACu6D,IAAI,EAAE,iBAAiB,CAAC;IAC7D,IAAI,CAAC92D,gBAAgB,CACnBwyD,YAAY,EACZjsE,8BAA8B,CAAC,IAAI,CAACqY,KAAK,CAACqB,aAAa,EAAE+2D,SAAS,CAAC,CACpE;IACD,OAAOxE,YAAY;EACrB;EAGAhT,aAAa,CAAeoX,QAAiB,EAAqB;IAChE,MAAMh/D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAChDzE,IAAI,CAACozD,WAAW,GAAG,EAAE;IACrB,IAAIoM,MAAM,GAAG,IAAI,CAACT,oBAAoB,CAACC,QAAQ,CAAC;IAChDh/D,IAAI,CAACy/D,MAAM,GAAG,CAACD,MAAM,CAAC;IACtB,OAAO,CAACA,MAAM,CAACD,IAAI,EAAE;MACnBv/D,IAAI,CAACozD,WAAW,CAACxvD,IAAI,CAAC,IAAI,CAACikD,yBAAyB,EAAE,CAAC;MACvD,IAAI,CAACh+B,wBAAwB,EAAE;MAC/B7pB,IAAI,CAACy/D,MAAM,CAAC77D,IAAI,CAAE47D,MAAM,GAAG,IAAI,CAACT,oBAAoB,CAACC,QAAQ,CAAC,CAAE;IAClE;IACA,OAAO,IAAI,CAACr6D,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGA6nD,yBAAyB,GAA6B;IACpD,OAAO,IAAI,CAACzwB,eAAe,EAAE;EAC/B;EAsBAiyB,eAAe,CAEblnB,KAAgB,EAChBl9B,SAAkB,EAClBq0D,QAAyB,EACzBh0D,mBAA6C,EAC1C;IACH,IAAIg0D,QAAQ,EAAE;MACZ,IAAI,CAACpyC,YAAY,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAMy1C,6BAA6B,GAAG,IAAI,CAAC31D,KAAK,CAAC2Y,0BAA0B;IAC3E,IAAI,CAAC3Y,KAAK,CAAC2Y,0BAA0B,GAAG,KAAK;IAC7C,MAAM+/C,QAAa,GAAG1vE,MAAM,CAACyhC,MAAM,CAAC,IAAI,CAAC;IACzC,IAAIgM,KAAK,GAAG,IAAI;IAChB,MAAMz9B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAExB;IAEHzE,IAAI,CAAClQ,UAAU,GAAG,EAAE;IACpB,IAAI,CAACkmB,IAAI,EAAE;IAEX,OAAO,CAAC,IAAI,CAAC0M,KAAK,CAACyf,KAAK,CAAC,EAAE;MACzB,IAAI1E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAAU;QACrB,IAAI,IAAI,CAACrM,KAAK,CAACyf,KAAK,CAAC,EAAE;UACrB,IAAI,CAACy6B,2BAA2B,CAE9B58D,IAAI,CACL;UACD;QACF;MACF;MAEA,IAAIgF,IAAI;MACR,IAAIC,SAAS,EAAE;QACbD,IAAI,GAAG,IAAI,CAACszD,oBAAoB,EAAE;MACpC,CAAC,MAAM;QACLtzD,IAAI,GAAG,IAAI,CAAC26D,uBAAuB,CAACr6D,mBAAmB,CAAC;QACxD,IAAI,CAAC+zD,UAAU,CAACr0D,IAAI,EAAEs0D,QAAQ,EAAEoG,QAAQ,EAAEp6D,mBAAmB,CAAC;MAChE;MAEA,IACEg0D,QAAQ,IACR,CAAC,IAAI,CAACj3D,gBAAgB,CAAC2C,IAAI,CAAC,IAC5BA,IAAI,CAAC1S,IAAI,KAAK,eAAe,EAC7B;QACA,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACnI,qBAAqB,EAAE;UAAE6O,EAAE,EAAEnB;QAAK,CAAC,CAAC;MACxD;MAGA,IAAIA,IAAI,CAACG,SAAS,EAAE;QAClB,IAAI,CAAC6oB,QAAQ,CAAChpB,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC;MACxC;MAGAhF,IAAI,CAAClQ,UAAU,CAAC8T,IAAI,CAACoB,IAAI,CAAC;IAC5B;IAEA,IAAI,CAACgR,IAAI,EAAE;IAEX,IAAI,CAAChP,KAAK,CAAC2Y,0BAA0B,GAAGg9C,6BAA6B;IACrE,IAAIrqE,IAAI,GAAG,kBAAkB;IAC7B,IAAI2S,SAAS,EAAE;MACb3S,IAAI,GAAG,eAAe;KACvB,MAAM,IAAIgnE,QAAQ,EAAE;MACnBhnE,IAAI,GAAG,kBAAkB;IAC3B;IAEA,OAAO,IAAI,CAACqS,UAAU,CAAC3E,IAAI,EAAE1N,IAAI,CAAC;EACpC;EAEAsqE,2BAA2B,CAAC58D,IAAY,EAAQ;IAC9C,IAAI,CAACguB,QAAQ,CAAChuB,IAAI,EAAE,eAAe,EAAE,IAAI,CAACgH,KAAK,CAAC6Y,YAAY,CAAC;IAC7D,IAAI,CAACmO,QAAQ,CAAChuB,IAAI,EAAE,kBAAkB,EAAE,IAAI,CAACgH,KAAK,CAACC,eAAe,EAAE,KAAK,CAAC;EAC5E;EAKA24D,wBAAwB,CAAC56D,IAA8B,EAAW;IAChE,OACE,CAACA,IAAI,CAACN,QAAQ,IACdM,IAAI,CAACxV,GAAG,CAAC8C,IAAI,KAAK,YAAY,KAC7B,IAAI,CAACw9B,qBAAqB,EAAE,IAC3B,IAAI,CAACpN,KAAK,CAAa,MACvB,IAAI,CAACA,KAAK,IAAS,CAAC;EAE1B;EAGAi9C,uBAAuB,CAErBr6D,mBAA6C,EACX;IAClC,IAAIwB,UAAU,GAAG,EAAE;IACnB,IAAI,IAAI,CAAC4b,KAAK,IAAO,EAAE;MACrB,IAAI,IAAI,CAAChc,SAAS,CAAC,YAAY,CAAC,EAAE;QAChC,IAAI,CAACR,KAAK,CAACzG,MAAM,CAACrD,4BAA4B,EAAE;UAC9C+J,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MAIA,OAAO,IAAI,CAACqd,KAAK,IAAO,EAAE;QACxB5b,UAAU,CAAClD,IAAI,CAAC,IAAI,CAACw0D,cAAc,EAAE,CAAC;MACxC;IACF;IAEA,MAAMpzD,IAAI,GAAG,IAAI,CAACP,SAAS,EAAoB;IAC/C,IAAItC,OAAO,GAAG,KAAK;IACnB,IAAI+C,UAAU,GAAG,KAAK;IACtB,IAAIG,QAAQ;IAEZ,IAAI,IAAI,CAACqd,KAAK,IAAa,EAAE;MAC3B,IAAI5b,UAAU,CAAC1X,MAAM,EAAE,IAAI,CAAC8H,UAAU,EAAE;MACxC,OAAO,IAAI,CAAC6gE,WAAW,EAAE;IAC3B;IAEA,IAAIjxD,UAAU,CAAC1X,MAAM,EAAE;MACrB4V,IAAI,CAAC8B,UAAU,GAAGA,UAAU;MAC5BA,UAAU,GAAG,EAAE;IACjB;IAEA9B,IAAI,CAACzC,MAAM,GAAG,KAAK;IAEnB,IAAI+C,mBAAmB,EAAE;MACvBD,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAChC;IAEA,IAAI9B,WAAW,GAAG,IAAI,CAAC2hB,GAAG,CAAS;IACnC,IAAI,CAAC8d,+BAA+B,CAACh+B,IAAI,CAAC;IAC1C,MAAMgb,WAAW,GAAG,IAAI,CAAChZ,KAAK,CAACgZ,WAAW;IAC1C,MAAMxwB,GAAG,GAAG,IAAI,CAACw2D,iBAAiB,CAAChhD,IAAI,EAAEM,mBAAmB,CAAC;IAE7D,IAAI,CAAC/B,WAAW,IAAI,CAACyc,WAAW,IAAI,IAAI,CAAC4/C,wBAAwB,CAAC56D,IAAI,CAAC,EAAE;MACvE,MAAM66D,OAAO,GAAGrwE,GAAG,CAAC0I,IAAI;MAGxB,IAAI2nE,OAAO,KAAK,OAAO,IAAI,CAAC,IAAI,CAACnxC,qBAAqB,EAAE,EAAE;QACxDvsB,OAAO,GAAG,IAAI;QACd,IAAI,CAAC6b,iCAAiC,CAACxuB,GAAG,CAAC;QAC3C+T,WAAW,GAAG,IAAI,CAAC2hB,GAAG,CAAS;QAC/B,IAAI,CAAC8gC,iBAAiB,CAAChhD,IAAI,CAAC;MAC9B;MAGA,IAAI66D,OAAO,KAAK,KAAK,IAAIA,OAAO,KAAK,KAAK,EAAE;QAC1C36D,UAAU,GAAG,IAAI;QACjB,IAAI,CAAC8Y,iCAAiC,CAACxuB,GAAG,CAAC;QAC3CwV,IAAI,CAACtS,IAAI,GAAGmtE,OAAO;QACnB,IAAI,IAAI,CAACn9C,KAAK,IAAS,EAAE;UACvBnf,WAAW,GAAG,IAAI;UAClB,IAAI,CAAC2C,KAAK,CAACzG,MAAM,CAAChN,mBAAmB,EAAE;YACrC0T,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW,EAAE;YAC5B/tB,IAAI,EAAEmtE;UACR,CAAC,CAAC;UACF,IAAI,CAAC7pD,IAAI,EAAE;QACb;QACA,IAAI,CAACgwC,iBAAiB,CAAChhD,IAAI,CAAC;MAC9B;IACF;IAEA,OAAO,IAAI,CAACi+B,iBAAiB,CAC3Bj+B,IAAI,EACJK,QAAQ,EACR9B,WAAW,EACXpB,OAAO,EACP,KAAK,EACL+C,UAAU,EACVI,mBAAmB,CACpB;EACH;EAEAksD,iCAAiC,CAC/BjvD,MAAsC,EAC9B;IACR,OAAOA,MAAM,CAAC7P,IAAI,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC;EACtC;EAGA4P,4BAA4B,CAACC,MAAsC,EAAE;IACnE,OAAOA,MAAM,CAACC,MAAM;EACtB;EAIAugC,uBAAuB,CAACxgC,MAAsC,EAAQ;IAAA;IACpE,MAAM26B,UAAU,GAAG,IAAI,CAACs0B,iCAAiC,CAACjvD,MAAM,CAAC;IACjE,MAAMC,MAAM,GAAG,IAAI,CAACF,4BAA4B,CAACC,MAAM,CAAC;IAExD,IAAIC,MAAM,CAACpT,MAAM,KAAK8tC,UAAU,EAAE;MAChC,IAAI,CAACh3B,KAAK,CACR3D,MAAM,CAAC7P,IAAI,KAAK,KAAK,GAAG+M,MAAM,CAACvM,cAAc,GAAGuM,MAAM,CAACtM,cAAc,EACrE;QAAEgT,EAAE,EAAE5D;MAAO,CAAC,CACf;IACH;IAEA,IACEA,MAAM,CAAC7P,IAAI,KAAK,KAAK,IACrB,kBAAM,CAAC8P,MAAM,CAACpT,MAAM,GAAG,CAAC,CAAC,qBAAzB0wE,QAA2BxtE,IAAI,MAAK,aAAa,EACjD;MACA,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACrM,sBAAsB,EAAE;QAAE+S,EAAE,EAAE5D;MAAO,CAAC,CAAC;IAC3D;EACF;EAGAwC,iBAAiB,CAEfC,IAA4B,EAC5BzB,WAAoB,EACpBpB,OAAgB,EAChB8C,SAAkB,EAClBC,UAAmB,EACgB;IACnC,IAAIA,UAAU,EAAE;MAEd,MAAM66D,YAAY,GAAG,IAAI,CAACr8D,WAAW,CACnCsB,IAAI,EAGJzB,WAAW,EACG,KAAK,EACC,KAAK,EACzB,KAAK,EACL,cAAc,CACf;MACD,IAAI,CAACw/B,uBAAuB,CAACg9B,YAAY,CAAC;MAC1C,OAAOA,YAAY;IACrB;IAEA,IAAI59D,OAAO,IAAIoB,WAAW,IAAI,IAAI,CAACmf,KAAK,IAAW,EAAE;MACnD,IAAIzd,SAAS,EAAE,IAAI,CAAC/N,UAAU,EAAE;MAChC8N,IAAI,CAACtS,IAAI,GAAG,QAAQ;MACpBsS,IAAI,CAACzC,MAAM,GAAG,IAAI;MAClB,OAAO,IAAI,CAACmB,WAAW,CACrBsB,IAAI,EACJzB,WAAW,EACXpB,OAAO,EACa,KAAK,EACzB,KAAK,EACL,cAAc,CACf;IACH;EACF;EAIAiD,mBAAmB,CAEjBJ,IAA8B,EAC9BK,QAAqC,EACrCJ,SAAkB,EAClBK,mBAA6C,EACR;IACrCN,IAAI,CAACG,SAAS,GAAG,KAAK;IAEtB,IAAI,IAAI,CAAC+f,GAAG,IAAU,EAAE;MACtBlgB,IAAI,CAACtV,KAAK,GAAGuV,SAAS,GAClB,IAAI,CAACk+B,iBAAiB,CAAC,IAAI,CAACn8B,KAAK,CAAC3B,QAAQ,CAAC,GAC3C,IAAI,CAAC26B,uBAAuB,CAAC16B,mBAAmB,CAAC;MAErD,OAAO,IAAI,CAACX,UAAU,CAACK,IAAI,EAAE,gBAAgB,CAAC;IAChD;IAEA,IAAI,CAACA,IAAI,CAACN,QAAQ,IAAIM,IAAI,CAACxV,GAAG,CAAC8C,IAAI,KAAK,YAAY,EAAE;MAKpD,IAAI,CAAC+xC,iBAAiB,CAACr/B,IAAI,CAACxV,GAAG,CAAC0I,IAAI,EAAE8M,IAAI,CAACxV,GAAG,CAACkP,GAAG,CAACnQ,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;MAEtE,IAAI0W,SAAS,EAAE;QACbD,IAAI,CAACtV,KAAK,GAAG,IAAI,CAACyzC,iBAAiB,CACjC99B,QAAQ,EACRksB,eAAe,CAACvsB,IAAI,CAACxV,GAAG,CAAC,CAC1B;MACH,CAAC,MAAM,IAAI,IAAI,CAACkzB,KAAK,IAAO,EAAE;QAC5B,MAAM+M,kBAAkB,GAAG,IAAI,CAACzoB,KAAK,CAAC3B,QAAQ;QAC9C,IAAIC,mBAAmB,IAAI,IAAI,EAAE;UAC/B,IAAIA,mBAAmB,CAACmqB,kBAAkB,KAAK,IAAI,EAAE;YACnDnqB,mBAAmB,CAACmqB,kBAAkB,GAAGA,kBAAkB;UAC7D;QACF,CAAC,MAAM;UACL,IAAI,CAACvpB,KAAK,CAACzG,MAAM,CAACtJ,2BAA2B,EAAE;YAC7CgQ,EAAE,EAAEspB;UACN,CAAC,CAAC;QACJ;QACAzqB,IAAI,CAACtV,KAAK,GAAG,IAAI,CAACyzC,iBAAiB,CACjC99B,QAAQ,EACRksB,eAAe,CAACvsB,IAAI,CAACxV,GAAG,CAAC,CAC1B;MACH,CAAC,MAAM;QACLwV,IAAI,CAACtV,KAAK,GAAG6hC,eAAe,CAACvsB,IAAI,CAACxV,GAAG,CAAC;MACxC;MACAwV,IAAI,CAACG,SAAS,GAAG,IAAI;MAErB,OAAO,IAAI,CAACR,UAAU,CAACK,IAAI,EAAE,gBAAgB,CAAC;IAChD;EACF;EAEAi+B,iBAAiB,CAEfj+B,IAA+C,EAC/CK,QAAqC,EACrC9B,WAAoB,EACpBpB,OAAgB,EAChB8C,SAAkB,EAClBC,UAAmB,EACnBI,mBAA6C,EACV;IACnC,MAAMtF,IAAI,GACR,IAAI,CAAC+E,iBAAiB,CACpBC,IAAI,EACJzB,WAAW,EACXpB,OAAO,EACP8C,SAAS,EACTC,UAAU,CACX,IACD,IAAI,CAACE,mBAAmB,CACtBJ,IAAI,EACJK,QAAQ,EACRJ,SAAS,EACTK,mBAAmB,CACpB;IAEH,IAAI,CAACtF,IAAI,EAAE,IAAI,CAAC9I,UAAU,EAAE;IAE5B,OAAO8I,IAAI;EACb;EAKAgmD,iBAAiB,CAEfhhD,IAE4B,EAC5BM,mBAA6C,EAChB;IAC7B,IAAI,IAAI,CAAC4f,GAAG,GAAa,EAAE;MACxBlgB,IAAI,CAAmCN,QAAQ,GAAG,IAAI;MACvDM,IAAI,CAACxV,GAAG,GAAG,IAAI,CAACwwC,uBAAuB,EAAE;MACzC,IAAI,CAACjR,MAAM,CAAa;IAC1B,CAAC,MAAM;MAEL,MAAM;QAAEz8B,IAAI;QAAE5C;OAAO,GAAG,IAAI,CAACsX,KAAK;MAClC,IAAIxX,GAAG;MAEP,IAAIyjB,0BAA0B,CAAC3gB,IAAI,CAAC,EAAE;QACpC9C,GAAG,GAAG,IAAI,CAACkoC,eAAe,CAAC,IAAI,CAAC;MAClC,CAAC,MAAM;QACL,QAAQplC,IAAI;UACV;YACE9C,GAAG,GAAG,IAAI,CAAC+R,mBAAmB,CAAC7R,KAAK,CAAC;YACrC;UACF;YACEF,GAAG,GAAG,IAAI,CAAC8R,kBAAkB,CAAC5R,KAAK,CAAC;YACpC;UACF;YACEF,GAAG,GAAG,IAAI,CAACsR,kBAAkB,CAACpR,KAAK,CAAC;YACpC;UACF;YACEF,GAAG,GAAG,IAAI,CAAC2R,mBAAmB,CAACzR,KAAK,CAAC;YACrC;UACF;YAAqB;cAEnB,MAAMigC,aAAa,GAAG,IAAI,CAAC3oB,KAAK,CAAC3B,QAAQ;cACzC,IAAIC,mBAAmB,IAAI,IAAI,EAAE;gBAC/B,IAAIA,mBAAmB,CAACqqB,aAAa,KAAK,IAAI,EAAE;kBAC9CrqB,mBAAmB,CAACqqB,aAAa,GAAGA,aAAa;gBACnD;cACF,CAAC,MAAM;gBACL,IAAI,CAACzpB,KAAK,CAACzG,MAAM,CAACpE,sBAAsB,EAAE;kBACxC8K,EAAE,EAAEwpB;gBACN,CAAC,CAAC;cACJ;cACAngC,GAAG,GAAG,IAAI,CAACqU,gBAAgB,EAAE;cAC7B;YACF;UACA;YACE,MAAM,IAAI,CAAC3M,UAAU,EAAE;QAAA;MAE7B;MACC8N,IAAI,CAASxV,GAAG,GAAGA,GAAG;MACvB,IAAI8C,IAAI,QAAmB,EAAE;QAE3B0S,IAAI,CAACN,QAAQ,GAAG,KAAK;MACvB;IACF;IAEA,OAAOM,IAAI,CAACxV,GAAG;EACjB;EAIA0S,YAAY,CAAClC,IAAoC,EAAEmC,OAAgB,EAAQ;IACzEnC,IAAI,CAACiE,EAAE,GAAG,IAAI;IACdjE,IAAI,CAACggE,SAAS,GAAG,KAAK;IACtBhgE,IAAI,CAACqlC,KAAK,GAAGljC,OAAO;EACtB;EAIAuB,WAAW,CAET1D,IAAe,EACfuD,WAAoB,EACpBpB,OAAgB,EAChBqB,aAAsB,EACtBc,gBAAyB,EACzBhS,IAAe,EAEZ;IAAA,IADHiS,YAAqB,uEAAG,KAAK;IAE7B,IAAI,CAACrC,YAAY,CAAClC,IAAI,EAAEmC,OAAO,CAAC;IAChCnC,IAAI,CAACggE,SAAS,GAAGz8D,WAAW;IAC5B,MAAMihC,cAAc,GAAGhhC,aAAa;IACpC,IAAI,CAACiX,KAAK,CAACF,KAAK,CACdjE,cAAc,GACZG,WAAW,IACVlS,YAAY,GAAGoS,WAAW,GAAG,CAAC,CAAC,IAC/BrS,gBAAgB,GAAGoS,kBAAkB,GAAG,CAAC,CAAC,CAC9C;IACD,IAAI,CAAC8Z,SAAS,CAACjW,KAAK,CAACuT,aAAa,CAAC3rB,OAAO,EAAEnC,IAAI,CAACggE,SAAS,CAAC,CAAC;IAC5D,IAAI,CAACz7B,mBAAmB,CAACvkC,IAAI,EAAEwkC,cAAc,CAAC;IAC9C,MAAMo2B,YAAY,GAAG,IAAI,CAAC97B,0BAA0B,CAAC9+B,IAAI,EAAE1N,IAAI,EAAE,IAAI,CAAC;IACtE,IAAI,CAACk+B,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IAEjB,OAAOogD,YAAY;EACrB;EAKA14B,cAAc,CAEZC,KAAgB,EAChBC,YAAqB,EACrBC,OAAgB,EAChB/8B,mBAA6C,EACN;IACvC,IAAI+8B,OAAO,EAAE;MACX,IAAI,CAACnb,YAAY,CAAC,gBAAgB,CAAC;IACrC;IACA,MAAMy1C,6BAA6B,GAAG,IAAI,CAAC31D,KAAK,CAAC2Y,0BAA0B;IAC3E,IAAI,CAAC3Y,KAAK,CAAC2Y,0BAA0B,GAAG,KAAK;IAC7C,MAAM3f,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAyC;IACpE,IAAI,CAACuR,IAAI,EAAE;IACXhW,IAAI,CAAC2c,QAAQ,GAAG,IAAI,CAACmiD,aAAa,CAChC38B,KAAK,EACY,CAACE,OAAO,EACzB/8B,mBAAmB,EAEnBtF,IAAI,CACL;IACD,IAAI,CAACgH,KAAK,CAAC2Y,0BAA0B,GAAGg9C,6BAA6B;IACrE,OAAO,IAAI,CAACh4D,UAAU,CACpB3E,IAAI,EACJqiC,OAAO,GAAG,iBAAiB,GAAG,iBAAiB,CAChD;EACH;EAKAmE,oBAAoB,CAElBxmC,IAAuC,EACvCwC,MAAyC,EACzCL,OAAgB,EAChBm+B,gBAAkC,EACP;IAC3B,IAAI,CAAC7lB,KAAK,CAACF,KAAK,CAACjE,cAAc,GAAGC,WAAW,CAAC;IAC9C,IAAI9V,KAAK,GAAGqtB,aAAa,CAAC3rB,OAAO,EAAE,KAAK,CAAC;IAIzC,IAAI,CAAC,IAAI,CAACugB,KAAK,GAAW,IAAI,IAAI,CAAC8N,SAAS,CAAC3C,KAAK,EAAE;MAClDptB,KAAK,IAAI6sB,QAAQ;IACnB;IACA,IAAI,CAACkD,SAAS,CAACjW,KAAK,CAAC9Z,KAAK,CAAC;IAC3B,IAAI,CAACyB,YAAY,CAAClC,IAAI,EAAEmC,OAAO,CAAC;IAChC,MAAM8qD,yBAAyB,GAAG,IAAI,CAACjmD,KAAK,CAACgY,sBAAsB;IAEnE,IAAIxc,MAAM,EAAE;MACV,IAAI,CAACwE,KAAK,CAACgY,sBAAsB,GAAG,IAAI;MACxC,IAAI,CAAC0mB,0BAA0B,CAAC1lC,IAAI,EAAEwC,MAAM,EAAE89B,gBAAgB,CAAC;IACjE;IACA,IAAI,CAACt5B,KAAK,CAACgY,sBAAsB,GAAG,KAAK;IACzC,IAAI,CAAC7a,iBAAiB,CAACnE,IAAI,EAAE,IAAI,CAAC;IAElC,IAAI,CAACwwB,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxT,KAAK,CAACgY,sBAAsB,GAAGiuC,yBAAyB;IAE7D,OAAO,IAAI,CAACtoD,UAAU,CAAC3E,IAAI,EAAE,yBAAyB,CAAC;EACzD;EAEA0lC,0BAA0B,CACxB1lC,IAAuC,EACvCwC,MAAsB,EACtB89B,gBAAkC,EAC5B;IACN,IAAI,CAACD,gBAAgB,CAAC79B,MAAM,EAAE89B,gBAAgB,EAAE,KAAK,CAAC;IACtDtgC,IAAI,CAACwC,MAAM,GAAGA,MAA+C;EAC/D;EAEAs8B,0BAA0B,CAMxB9+B,IAAe,EAAE1N,IAAe,EAAgC;IAAA,IAA9B+R,QAAiB,uEAAG,KAAK;IAE3D,IAAI,CAACF,iBAAiB,CAACnE,IAAI,EAAE,KAAK,EAAEqE,QAAQ,CAAC;IAC7C,OAAO,IAAI,CAACM,UAAU,CAAC3E,IAAI,EAAE1N,IAAI,CAAC;EACpC;EAGA6R,iBAAiB,CAEfnE,IAAwB,EACxBoE,eAAgC,EAE1B;IAAA,IADNC,QAAiB,uEAAG,KAAK;IAEzB,MAAM47D,YAAY,GAAG77D,eAAe,IAAI,CAAC,IAAI,CAACse,KAAK,CAAW;IAC9D,IAAI,CAACgO,eAAe,CAACnW,KAAK,CAAC0S,kBAAkB,EAAE,CAAC;IAEhD,IAAIgzC,YAAY,EAAE;MAEfjgE,IAAI,CAAuCmD,IAAI,GAC9C,IAAI,CAAC48B,gBAAgB,EAAE;MACzB,IAAI,CAACQ,WAAW,CAACvgC,IAAI,EAAE,KAAK,EAAEoE,eAAe,EAAE,KAAK,CAAC;IACvD,CAAC,MAAM;MACL,MAAMqwD,SAAS,GAAG,IAAI,CAACztD,KAAK,CAACkO,MAAM;MAGnC,MAAM+a,SAAS,GAAG,IAAI,CAACjpB,KAAK,CAAC4Y,MAAM;MACnC,IAAI,CAAC5Y,KAAK,CAAC4Y,MAAM,GAAG,EAAE;MAItB,IAAI,CAAC4Q,SAAS,CAACjW,KAAK,CAAC,IAAI,CAACiW,SAAS,CAAC/C,YAAY,EAAE,GAAGJ,YAAY,CAAC;MAClErtB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACkxD,UAAU,CACzB,IAAI,EACJ,KAAK,EAEJ6L,sBAA+B,IAAK;QACnC,MAAMC,SAAS,GAAG,CAAC,IAAI,CAACC,iBAAiB,CAACpgE,IAAI,CAACwC,MAAM,CAAC;QAEtD,IAAI09D,sBAAsB,IAAIC,SAAS,EAAE;UAEvC,IAAI,CAACj6D,KAAK,CAACzG,MAAM,CAACrK,4BAA4B,EAAE;YAC9C+Q,EAAE,EAEA,CAACnG,IAAI,CAACtN,IAAI,KAAK,QAAQ,IAAIsN,IAAI,CAACtN,IAAI,KAAK,aAAa,KAEtD,CAAC,CAACsN,IAAI,CAACxQ,GAAG,GAENwQ,IAAI,CAACxQ,GAAG,CAACkP,GAAG,CAAClQ,GAAG,GAChBwR;UACR,CAAC,CAAC;QACJ;QAEA,MAAM6lC,iBAAiB,GAAG,CAAC4uB,SAAS,IAAI,IAAI,CAACztD,KAAK,CAACkO,MAAM;QAIzD,IAAI,CAACqrB,WAAW,CACdvgC,IAAI,EACJ,CAAC,IAAI,CAACgH,KAAK,CAACkO,MAAM,IAAI,CAAC9Q,eAAe,IAAI,CAACC,QAAQ,IAAI,CAAC87D,SAAS,EACjE/7D,eAAe,EACfyhC,iBAAiB,CAClB;QAGD,IAAI,IAAI,CAAC7+B,KAAK,CAACkO,MAAM,IAAIlV,IAAI,CAACiE,EAAE,EAAE;UAChC,IAAI,CAACwmD,eAAe,CAACzqD,IAAI,CAACiE,EAAE,EAAEmU,YAAY,EAAEytB,iBAAiB,CAAC;QAChE;MACF,CAAC,CACF;MACD,IAAI,CAACrV,SAAS,CAAChW,IAAI,EAAE;MACrB,IAAI,CAACxT,KAAK,CAAC4Y,MAAM,GAAGqQ,SAAS;IAC/B;IACA,IAAI,CAACS,eAAe,CAAClW,IAAI,EAAE;EAC7B;EAEAkzC,iBAAiB,CAAC1tD,IAAuC,EAAE;IACzD,OAAOA,IAAI,CAAC1N,IAAI,KAAK,YAAY;EACnC;EAEA8tE,iBAAiB,CACf59D,MAAwD,EAC/C;IACT,KAAK,IAAI5S,CAAC,GAAG,CAAC,EAAEkzB,GAAG,GAAGtgB,MAAM,CAACpT,MAAM,EAAEQ,CAAC,GAAGkzB,GAAG,EAAElzB,CAAC,EAAE,EAAE;MACjD,IAAI,CAAC,IAAI,CAAC89D,iBAAiB,CAAClrD,MAAM,CAAC5S,CAAC,CAAC,CAAC,EAAE,OAAO,KAAK;IACtD;IACA,OAAO,IAAI;EACb;EAEA2wC,WAAW,CACTvgC,IAAwB,EACxB2lC,eAAwB,EAExBC,eAAgC,EAE1B;IAAA,IADNC,iBAA0B,uEAAG,IAAI;IAEjC,MAAM6yB,YAAY,GAAG,CAAC/yB,eAAe,IAAI,IAAIloC,GAAG,EAAU;IAO1D,MAAM4iE,gBAAgB,GAAG;MAAE/tE,IAAI,EAAE;KAA6B;IAC9D,KAAK,MAAMisC,KAAK,IAAIv+B,IAAI,CAACwC,MAAM,EAAE;MAC/B,IAAI,CAACg2D,SAAS,CAACj6B,KAAK,EAAE;QACpBk6B,EAAE,EAAE4H,gBAAgB;QACpB56D,OAAO,EAAEoS,QAAQ;QACjB6gD,YAAY;QACZ7yB;MACF,CAAC,CAAC;IACJ;EACF;EAQAi5B,aAAa,CAEX38B,KAAgB,EAChB+1B,UAAoB,EACpB5yD,mBAA6C,EAC7Co3D,YAA4B,EACH;IACzB,MAAMvE,IAA6B,GAAG,EAAE;IACxC,IAAI16B,KAAK,GAAG,IAAI;IAEhB,OAAO,CAAC,IAAI,CAACvY,GAAG,CAACid,KAAK,CAAC,EAAE;MACvB,IAAI1E,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAAU;QACrB,IAAI,IAAI,CAACrM,KAAK,CAACyf,KAAK,CAAC,EAAE;UACrB,IAAIu6B,YAAY,EAAE;YAChB,IAAI,CAACE,2BAA2B,CAACF,YAAY,CAAC;UAChD;UACA,IAAI,CAAC1mD,IAAI,EAAE;UACX;QACF;MACF;MAEAmiD,IAAI,CAACv0D,IAAI,CAAC,IAAI,CAACi5D,iBAAiB,CAAC3E,UAAU,EAAE5yD,mBAAmB,CAAC,CAAC;IACpE;IACA,OAAO6yD,IAAI;EACb;EAcA0E,iBAAiB,CAEf3E,UAA2B,EAC3B5yD,mBAA6C,EAC7Cm3D,gBAAiC,EACZ;IACrB,IAAIlP,GAAG;IACP,IAAI,IAAI,CAAC7qC,KAAK,IAAU,EAAE;MACxB,IAAI,CAACw1C,UAAU,EAAE;QACf,IAAI,CAAChyD,KAAK,CAACzG,MAAM,CAACjE,eAAe,EAAE;UACjC2K,EAAE,EAAE,IAAI,CAACa,KAAK,CAACyZ,WAAW,EAAE;UAC5BvpB,UAAU,EAAE;QACd,CAAC,CAAC;MACJ;MACAq2D,GAAG,GAAG,IAAI;IACZ,CAAC,MAAM,IAAI,IAAI,CAAC7qC,KAAK,IAAa,EAAE;MAClC,MAAM47C,kBAAkB,GAAG,IAAI,CAACt3D,KAAK,CAAC3B,QAAQ;MAE9CkoD,GAAG,GAAG,IAAI,CAAC9sB,cAAc,CACvB,IAAI,CAACs3B,WAAW,CAACzyD,mBAAmB,CAAC,EACrCg5D,kBAAkB,CACnB;IACH,CAAC,MAAM,IAAI,IAAI,CAAC57C,KAAK,IAAa,EAAE;MAClC,IAAI,CAACwE,YAAY,CAAC,oBAAoB,CAAC;MACvC,IAAI,CAACu1C,gBAAgB,EAAE;QACrB,IAAI,CAACv2D,KAAK,CAACzG,MAAM,CAAC9E,6BAA6B,EAAE;UAC/CwL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACA,MAAMrF,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7B,IAAI,CAACuR,IAAI,EAAE;MACXu3C,GAAG,GAAG,IAAI,CAAC5oD,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;IACpD,CAAC,MAAM;MACLutD,GAAG,GAAG,IAAI,CAACvtB,uBAAuB,CAChC16B,mBAAmB,EACnB,IAAI,CAACm7B,cAAc,CACpB;IACH;IACA,OAAO8sB,GAAG;EACZ;EAQA71B,eAAe,CAAC+C,OAAiB,EAAgB;IAC/C,MAAMz6B,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAgB;IAC3C,MAAMvM,IAAI,GAAG,IAAI,CAACm9D,mBAAmB,CAAC56B,OAAO,CAAC;IAE9C,OAAO,IAAI,CAACuD,gBAAgB,CAACh+B,IAAI,EAAE9H,IAAI,CAAC;EAC1C;EAEA8lC,gBAAgB,CACdh+B,IAAgC,EAChC9H,IAAY,EACE;IACd8H,IAAI,CAAC9H,IAAI,GAAGA,IAAI;IAChB8H,IAAI,CAACtB,GAAG,CAAChQ,cAAc,GAAGwJ,IAAI;IAE9B,OAAO,IAAI,CAACyM,UAAU,CAAC3E,IAAI,EAAE,YAAY,CAAC;EAC5C;EAEAq1D,mBAAmB,CAAC56B,OAAiB,EAAU;IAC7C,IAAIviC,IAAY;IAEhB,MAAM;MAAEmN,QAAQ;MAAE/S;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAErC,IAAIiM,0BAA0B,CAAC3gB,IAAI,CAAC,EAAE;MACpC4F,IAAI,GAAG,IAAI,CAAC8O,KAAK,CAACtX,KAAK;IACzB,CAAC,MAAM;MACL,MAAM,IAAI,CAACwH,UAAU,EAAE;IACzB;IAEA,MAAMsc,cAAc,GAAGR,iCAAiC,CAAC1gB,IAAI,CAAC;IAE9D,IAAImoC,OAAO,EAAE;MAGX,IAAIjnB,cAAc,EAAE;QAClB,IAAI,CAACsT,YAAY,CAAS;MAC5B;IACF,CAAC,MAAM;MACL,IAAI,CAACud,iBAAiB,CAACnsC,IAAI,EAAEmN,QAAQ,EAAEmO,cAAc,EAAE,KAAK,CAAC;IAC/D;IAEA,IAAI,CAACwC,IAAI,EAAE;IAEX,OAAO9d,IAAI;EACb;EAEAmsC,iBAAiB,CACf9uB,IAAY,EACZlQ,QAAkB,EAClBupD,aAAsB,EACtBjpD,SAAkB,EACZ;IAEN,IAAI4P,IAAI,CAACnmB,MAAM,GAAG,EAAE,EAAE;MACpB;IACF;IAGA,IAAI,CAAC+mB,iBAAiB,CAACZ,IAAI,CAAC,EAAE;MAC5B;IACF;IAEA,IAAIA,IAAI,KAAK,OAAO,EAAE;MACpB,IAAI,IAAI,CAACib,SAAS,CAAC7C,QAAQ,EAAE;QAC3B,IAAI,CAACznB,KAAK,CAACzG,MAAM,CAAC7C,sBAAsB,EAAE;UAAEuJ,EAAE,EAAEd;QAAS,CAAC,CAAC;QAC3D;MACF;IACF,CAAC,MAAM,IAAIkQ,IAAI,KAAK,OAAO,EAAE;MAC3B,IAAI,IAAI,CAACib,SAAS,CAAC9C,QAAQ,EAAE;QAC3B,IAAI,CAACxnB,KAAK,CAACzG,MAAM,CAAC5M,sBAAsB,EAAE;UAAEsT,EAAE,EAAEd;QAAS,CAAC,CAAC;QAC3D;MACF;MAEA,IAAI,IAAI,CAACoV,KAAK,CAACP,aAAa,EAAE;QAC5B,IAAI,CAAChU,KAAK,CAACzG,MAAM,CAAC3M,mCAAmC,EAAE;UACrDqT,EAAE,EAAEd;QACN,CAAC,CAAC;QACF;MACF;MAEA,IAAI,CAACqrB,eAAe,CAAC9D,+BAA+B,CAAC;QAAEzmB,EAAE,EAAEd;MAAS,CAAC,CAAC;IACxE,CAAC,MAAM,IAAIkQ,IAAI,KAAK,WAAW,EAAE;MAC/B,IAAI,IAAI,CAACkF,KAAK,CAACR,+BAA+B,EAAE;QAC9C,IAAI,CAAC/T,KAAK,CAACzG,MAAM,CAAC9M,gBAAgB,EAAE;UAAEwT,EAAE,EAAEd;QAAS,CAAC,CAAC;QACrD;MACF;IACF;IAEA,IAAIupD,aAAa,IAAI/4C,SAAS,CAACN,IAAI,CAAC,EAAE;MACpC,IAAI,CAACrP,KAAK,CAACzG,MAAM,CAAC1E,iBAAiB,EAAE;QACnCoL,EAAE,EAAEd,QAAQ;QACZrK,OAAO,EAAEua;MACX,CAAC,CAAC;MACF;IACF;IAEA,MAAM+qD,YAAY,GAAG,CAAC,IAAI,CAACt5D,KAAK,CAACkO,MAAM,GACnCI,cAAc,GACd3P,SAAS,GACTiQ,wBAAwB,GACxBH,oBAAoB;IAExB,IAAI6qD,YAAY,CAAC/qD,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC,EAAE;MACrC,IAAI,CAACtP,KAAK,CAACzG,MAAM,CAACnE,sBAAsB,EAAE;QACxC6K,EAAE,EAAEd,QAAQ;QACZ3O,YAAY,EAAE6e;MAChB,CAAC,CAAC;IACJ;EACF;EAEAkmD,cAAc,GAAY;IACxB,IAAI,IAAI,CAACjrC,SAAS,CAAC9C,QAAQ,EAAE,OAAO,IAAI;IACxC,IAAI,IAAI,CAACrtB,OAAO,CAAC82D,yBAAyB,IAAI,CAAC,IAAI,CAAC18C,KAAK,CAACb,UAAU,EAAE;MACpE,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAIA8hD,UAAU,CAAer2D,QAAkB,EAAqB;IAC9D,MAAMrF,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAAoBxsB,QAAQ,CAAC;IAE1D,IAAI,CAACqrB,eAAe,CAACjE,+BAA+B,CAClDhtB,MAAM,CAAC1M,8BAA8B,EACrC;MAEEoT,EAAE,EAAEnG;IACN,CAAC,CACF;IAED,IAAI,IAAI,CAACklB,GAAG,IAAS,EAAE;MACrB,IAAI,CAAChf,KAAK,CAACzG,MAAM,CAACpG,iBAAiB,EAAE;QAAE8M,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACpD;IAEA,IAAI,CAAC,IAAI,CAACya,KAAK,CAACb,UAAU,IAAI,CAAC,IAAI,CAACvZ,OAAO,CAAC82D,yBAAyB,EAAE;MACrE,IAAI,IAAI,CAAC2E,gBAAgB,EAAE,EAAE;QAC3B,IAAI,CAACrgD,2BAA2B,GAAG,IAAI;MACzC,CAAC,MAAM;QACL,IAAI,CAACD,iBAAiB,GAAG,IAAI;MAC/B;IACF;IAEA,IAAI,CAAC,IAAI,CAACxU,KAAK,CAAC0Y,SAAS,EAAE;MACzB1f,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACipD,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC;IAClD;IAEA,OAAO,IAAI,CAACtjD,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEA87D,gBAAgB,GAAY;IAC1B,IAAI,IAAI,CAACptC,qBAAqB,EAAE,EAAE,OAAO,IAAI;IAC7C,MAAM;MAAEp8B;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,OAGE1U,IAAI,KAAe,MACnBA,IAAI,OAAc,IAClBA,IAAI,MAAgB,IACpB2hB,eAAe,CAAC3hB,IAAI,CAAC,IACpBA,IAAI,QAAW,IAAI,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAY,IAG5C1tB,IAAI,QAAc,IAClBA,IAAI,OAAa,IAGhB,IAAI,CAACoU,SAAS,CAAC,aAAa,CAAC,IAAIpU,IAAI,KAAe;EAEzD;EAIA0nE,UAAU,GAAkC;IAC1C,MAAMh6D,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;IAEhD,IAAI,CAACisB,eAAe,CAACjE,+BAA+B,CAClDhtB,MAAM,CAAC5C,gBAAgB,EACvB;MAEEsJ,EAAE,EAAEnG;IACN,CAAC,CACF;IAED,IAAI,CAACgW,IAAI,EAAE;IACX,IAAIuqD,UAAU,GAAG,KAAK;IACtB,IAAIvhE,QAA6B,GAAG,IAAI;IACxC,IAAI,CAAC,IAAI,CAAC0vB,qBAAqB,EAAE,EAAE;MACjC6xC,UAAU,GAAG,IAAI,CAACr7C,GAAG,CAAS;MAC9B,QAAQ,IAAI,CAACle,KAAK,CAAC1U,IAAI;QACrB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;UAIE,IAAI,CAACiuE,UAAU,EAAE;QAEnB;UACEvhE,QAAQ,GAAG,IAAI,CAAC+gC,gBAAgB,EAAE;MAAA;IAExC;IACA//B,IAAI,CAACwgE,QAAQ,GAAGD,UAAU;IAC1BvgE,IAAI,CAAChB,QAAQ,GAAGA,QAAQ;IACxB,OAAO,IAAI,CAAC2F,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAKAw6D,4BAA4B,CAAC34B,IAAkB,EAAE2sB,YAAsB,EAAE;IACvE,IAAI,IAAI,CAAC9nD,SAAS,CAAC,CAAC,kBAAkB,EAAE;MAAEkhB,QAAQ,EAAE;KAAS,CAAC,CAAC,EAAE;MAC/D,IAAIia,IAAI,CAACvvC,IAAI,KAAK,oBAAoB,EAAE;QAGtC,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACtB,8BAA8B,EAAE;UAChDgI,EAAE,EAAEqoD;QACN,CAAC,CAAC;MACJ;IACF;EACF;EAEAwM,6BAA6B,CAACyF,SAAuB,EAAEp7D,QAAkB,EAAE;IACzE,IAAI,IAAI,CAACq7D,iBAAiB,CAACD,SAAS,CAAC,EAAE;MACrC,MAAM3nC,QAAQ,GAAG,IAAI,CAACjH,WAAW,CAAyBxsB,QAAQ,CAAC;MACnEyzB,QAAQ,CAACvyB,MAAM,GAAGk6D,SAAS;MAC3B,OAAO,IAAI,CAAC97D,UAAU,CAACm0B,QAAQ,EAAE,sBAAsB,CAAC;IAC1D,CAAC,MAAM;MACL,MAAMA,QAAQ,GAAG,IAAI,CAACjH,WAAW,CAA4BxsB,QAAQ,CAAC;MACtE,IAAI,CAACs7D,kCAAkC,CAACt7D,QAAQ,CAAC;MACjDyzB,QAAQ,CAACl3B,UAAU,GAAG6+D,SAAS;MAC/B,OAAO,IAAI,CAAC97D,UAAU,CAACm0B,QAAQ,EAAE,yBAAyB,CAAC;IAC7D;EACF;EAEA4nC,iBAAiB,CAAC9+D,UAAwB,EAAW;IACnD,QAAQA,UAAU,CAACtP,IAAI;MACrB,KAAK,kBAAkB;QACrB,OACE,CAACsP,UAAU,CAAC8C,QAAQ,IAAI,IAAI,CAACg8D,iBAAiB,CAAC9+D,UAAU,CAACrS,MAAM,CAAC;MAErE,KAAK,YAAY;QACf,OAAO,IAAI;MACb;QACE,OAAO,KAAK;IAAA;EAElB;EAMAoxE,kCAAkC,CAACt7D,QAAkB,EAAQ;IAO3D,IAAI,IAAI,CAACqd,KAAK,IAAU,EAAE;MACxB,MAAM,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAACxB,mBAAmB,EAAE;QAAEkI,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IAC3E;IAGA,IAAI,CAAC,IAAI,CAACi2D,qCAAqC,EAAE,EAAE;MACjD,IAAI,CAACp1D,KAAK,CAACzG,MAAM,CAACrB,mBAAmB,EAAE;QAAE+H,EAAE,EAAEd;MAAS,CAAC,CAAC;IAC1D;EACF;EAQAy1D,uBAAuB,CAAI8F,QAAiB,EAAK;IAC/C,MAAMC,sBAAsB,GAAG,IAAI,CAAC75D,KAAK,CAACuY,YAAY;IACtD,IAAI,CAACvY,KAAK,CAACuY,YAAY,GAAG;MAExBC,wBAAwB,EAAE,CAAC;MAE3BC,aAAa,EAAE;KAChB;IAED,IAAI;MACF,OAAOmhD,QAAQ,EAAE;IACnB,CAAC,SAAS;MACR,IAAI,CAAC55D,KAAK,CAACuY,YAAY,GAAGshD,sBAAsB;IAClD;EACF;EAUAC,kCAAkC,CAAIF,QAAiB,EAAK;IAC1D,IAAI,IAAI,CAACl6D,SAAS,CAAC,CAAC,kBAAkB,EAAE;MAAEkhB,QAAQ,EAAE;KAAS,CAAC,CAAC,EAAE;MAE/D,MAAMi5C,sBAAsB,GAAG,IAAI,CAAC75D,KAAK,CAACuY,YAAY;MACtD,IAAI,CAACvY,KAAK,CAACuY,YAAY,GAAG;QAExBC,wBAAwB,EAAE,CAAC;QAE3BC,aAAa,EAAE;OAChB;MAED,IAAI;QACF,OAAOmhD,QAAQ,EAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAAC55D,KAAK,CAACuY,YAAY,GAAGshD,sBAAsB;MAClD;IACF,CAAC,MAAM;MAKL,OAAOD,QAAQ,EAAE;IACnB;EACF;EAEA1F,8BAA8B,CAAI0F,QAAiB,EAAK;IACtD,MAAMG,0BAA0B,GAAG,IAAI,CAAC/5D,KAAK,CAAC0Y,SAAS;IACvD,IAAI,CAAC1Y,KAAK,CAAC0Y,SAAS,GAAG,IAAI;IAE3B,IAAI;MACF,OAAOkhD,QAAQ,EAAE;IACnB,CAAC,SAAS;MACR,IAAI,CAAC55D,KAAK,CAAC0Y,SAAS,GAAGqhD,0BAA0B;IACnD;EACF;EAEAlH,UAAU,CAAI+G,QAAiB,EAAK;IAClC,MAAMngE,KAAK,GAAG,IAAI,CAAC+vB,SAAS,CAAC/C,YAAY,EAAE;IAC3C,MAAMuzC,cAAc,GAAG1zC,QAAQ,GAAG,CAAC7sB,KAAK;IACxC,IAAIugE,cAAc,EAAE;MAClB,IAAI,CAACxwC,SAAS,CAACjW,KAAK,CAAC9Z,KAAK,GAAG6sB,QAAQ,CAAC;MACtC,IAAI;QACF,OAAOszC,QAAQ,EAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAACpwC,SAAS,CAAChW,IAAI,EAAE;MACvB;IACF;IACA,OAAOomD,QAAQ,EAAE;EACnB;EAEAjH,aAAa,CAAIiH,QAAiB,EAAK;IACrC,MAAMngE,KAAK,GAAG,IAAI,CAAC+vB,SAAS,CAAC/C,YAAY,EAAE;IAC3C,MAAMwzC,gBAAgB,GAAG3zC,QAAQ,GAAG7sB,KAAK;IACzC,IAAIwgE,gBAAgB,EAAE;MACpB,IAAI,CAACzwC,SAAS,CAACjW,KAAK,CAAC9Z,KAAK,GAAG,CAAC6sB,QAAQ,CAAC;MACvC,IAAI;QACF,OAAOszC,QAAQ,EAAE;MACnB,CAAC,SAAS;QACR,IAAI,CAACpwC,SAAS,CAAChW,IAAI,EAAE;MACvB;IACF;IACA,OAAOomD,QAAQ,EAAE;EACnB;EAIA7C,sBAAsB,GAAS;IAC7B,IAAI,CAAC/2D,KAAK,CAACuY,YAAY,CAACE,aAAa,GAAG,CAAC;EAC3C;EAEAq+C,uCAAuC,GAAY;IACjD,OAAO,IAAI,CAAC92D,KAAK,CAACuY,YAAY,CAACC,wBAAwB,IAAI,CAAC;EAC9D;EAEA87C,qCAAqC,GAAY;IAC/C,OACE,IAAI,CAACt0D,KAAK,CAACuY,YAAY,CAACE,aAAa,IAAI,IAAI,IAC7C,IAAI,CAACzY,KAAK,CAACuY,YAAY,CAACE,aAAa,IAAI,CAAC;EAE9C;EAEA07C,uBAAuB,CAAeZ,IAAY,EAAgB;IAChE,MAAMl1D,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;IAEpC,IAAI,CAAC2B,KAAK,CAAC6X,gBAAgB,GAAG,IAAI,CAAC7X,KAAK,CAACzY,KAAK;IAC9C,MAAMouE,6BAA6B,GAAG,IAAI,CAAC31D,KAAK,CAAC2Y,0BAA0B;IAC3E,IAAI,CAAC3Y,KAAK,CAAC2Y,0BAA0B,GAAG,IAAI;IAE5C,MAAMuhD,GAAG,GAAG,IAAI,CAAC3S,WAAW,CAC1B,IAAI,CAAC8L,wBAAwB,EAAE,EAC/Bh1D,QAAQ,EACRk1D,IAAI,CACL;IAED,IAAI,CAACvzD,KAAK,CAAC2Y,0BAA0B,GAAGg9C,6BAA6B;IAErE,OAAOuE,GAAG;EACZ;EAGA3D,qBAAqB,GAAmC;IACtD,IAAI,CAACr2C,YAAY,CAAC,cAAc,CAAC;IACjC,MAAMlnB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAsB;IACjD,IAAI,CAACuR,IAAI,EAAE;IACX,IAAI,CAAC,IAAI,CAAC0M,KAAK,GAAW,EAAE;MAC1B,IAAI,CAACxrB,UAAU,CAAC,IAAI,EAAY;IAClC;IAEA,MAAMwvC,OAAO,GAAG,IAAI,CAAC7U,WAAW,CAAY,IAAI,CAAC7qB,KAAK,CAACmB,MAAM,CAAC;IAC9D,IAAI,CAAC6N,IAAI,EAAE;IAEX,MAAMmrD,YAAY,GAAG,IAAI,CAACnxC,gBAAgB,CAAiB,IAAI,CAAC;IAChE,IAAI,CAACW,kBAAkB,EAAE;IAEzB,IAAI;MACF3wB,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACi+D,YAAY,CAAC16B,OAAO,EAAa,WAAQ,CAAC;IAC7D,CAAC,SAAS;MACRy6B,YAAY,EAAE;IAChB;IACA,OAAO,IAAI,CAACx8D,UAAU,CAAqB3E,IAAI,EAAE,kBAAkB,CAAC;EACtE;EAGAgjC,+BAA+B,CAE7Bh+B,IAAmD,EAC7C;AACV;AC5iGA,MAAMq8D,SAAS,GAAG;IAAE3uE,IAAI,EAAE;GAAiB;EACzC4uE,WAAW,GAAG;IAAE5uE,IAAI,EAAE;GAAmB;AAE3C,IAAkB6uE,iBAAiB;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAQnC,IAAkBC,kBAAkB;EAAAC;EAAAC;EAAAC;EAAAC;EAAAC;AAAA;AAQpC,MAAMC,aAAa,GAAG,kBAAkB;AAExC,MAAMC,yBAAyB,GAAG,kBAAkB;AAUpD,SAASC,kBAAkB,CAAC/hE,MAA6B,EAAEud,KAAa,EAAE;EACxE,KAAK,IAAIjuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0Q,MAAM,CAAClR,MAAM,EAAEQ,CAAC,EAAE,EAAE;IACtC,MAAMkO,KAAK,GAAGwC,MAAM,CAAC1Q,CAAC,CAAC;IACvB,MAAM;MAAE0C;IAAK,CAAC,GAAGwL,KAAK;IACtB,IAAI,OAAOxL,IAAI,KAAK,QAAQ,EAAE;MACO;QACjC,IAAIA,IAAI,QAAmB,EAAE;UAC3B,MAAM;YAAEoM,GAAG;YAAEnQ,KAAK;YAAEmB,KAAK;YAAElB;UAAI,CAAC,GAAGsP,KAAK;UACxC,MAAMwkE,UAAU,GAAG/zE,KAAK,GAAG,CAAC;UAC5B,MAAMg0E,UAAU,GAAG5zE,8BAA8B,CAAC+P,GAAG,CAACnQ,KAAK,EAAE,CAAC,CAAC;UAC/D+R,MAAM,CAACod,MAAM,CACX9tB,CAAC,EACD,CAAC,EACD,IAAIy0B,KAAK,CAAC;YAER/xB,IAAI,EAAE4hB,gBAAgB,CAAS;YAC/BxkB,KAAK,EAAE,GAAG;YACVnB,KAAK,EAAEA,KAAK;YACZC,GAAG,EAAE8zE,UAAU;YACfj9D,QAAQ,EAAE3G,GAAG,CAACnQ,KAAK;YACnB4Z,MAAM,EAAEo6D;UACV,CAAC,CAAC,EACF,IAAIl+C,KAAK,CAAC;YAER/xB,IAAI,EAAE4hB,gBAAgB,CAAS;YAC/BxkB,KAAK,EAAEA,KAAK;YACZnB,KAAK,EAAE+zE,UAAU;YACjB9zE,GAAG,EAAEA,GAAG;YACR6W,QAAQ,EAAEk9D,UAAU;YACpBp6D,MAAM,EAAEzJ,GAAG,CAAClQ;UACd,CAAC,CAAC,CACH;UACDoB,CAAC,EAAE;UACH;QACF;QAEA,IAAIqkB,eAAe,CAAC3hB,IAAI,CAAC,EAAE;UACzB,MAAM;YAAEoM,GAAG;YAAEnQ,KAAK;YAAEmB,KAAK;YAAElB;UAAI,CAAC,GAAGsP,KAAK;UACxC,MAAM0kE,YAAY,GAAGj0E,KAAK,GAAG,CAAC;UAC9B,MAAMk0E,eAAe,GAAG9zE,8BAA8B,CAAC+P,GAAG,CAACnQ,KAAK,EAAE,CAAC,CAAC;UACpE,IAAIm0E,UAAU;UACd,IAAI7kD,KAAK,CAACC,UAAU,CAACvvB,KAAK,CAAC,OAA0B,EAAE;YACrDm0E,UAAU,GAAG,IAAIr+C,KAAK,CAAC;cAErB/xB,IAAI,EAAE4hB,gBAAgB,CAAc;cACpCxkB,KAAK,EAAE,GAAG;cACVnB,KAAK,EAAEA,KAAK;cACZC,GAAG,EAAEg0E,YAAY;cACjBn9D,QAAQ,EAAE3G,GAAG,CAACnQ,KAAK;cACnB4Z,MAAM,EAAEs6D;YACV,CAAC,CAAC;UACJ,CAAC,MAAM;YACLC,UAAU,GAAG,IAAIr+C,KAAK,CAAC;cAErB/xB,IAAI,EAAE4hB,gBAAgB,CAAW;cACjCxkB,KAAK,EAAE,GAAG;cACVnB,KAAK,EAAEA,KAAK;cACZC,GAAG,EAAEg0E,YAAY;cACjBn9D,QAAQ,EAAE3G,GAAG,CAACnQ,KAAK;cACnB4Z,MAAM,EAAEs6D;YACV,CAAC,CAAC;UACJ;UACA,IAAIE,aAAa,EACfC,kBAAkB,EAClBC,qBAAqB,EACrBC,QAAQ;UACV,IAAIxwE,IAAI,OAAoB,EAAE;YAE5BswE,kBAAkB,GAAGp0E,GAAG,GAAG,CAAC;YAC5Bq0E,qBAAqB,GAAGl0E,8BAA8B,CAAC+P,GAAG,CAAClQ,GAAG,EAAE,CAAC,CAAC,CAAC;YACnEm0E,aAAa,GAAGjzE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACkxB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1DkiD,QAAQ,GAAG,IAAIz+C,KAAK,CAAC;cAEnB/xB,IAAI,EAAE4hB,gBAAgB,CAAc;cACpCxkB,KAAK,EAAE,GAAG;cACVnB,KAAK,EAAEq0E,kBAAkB;cACzBp0E,GAAG,EAAEA,GAAG;cACR6W,QAAQ,EAAEw9D,qBAAqB;cAC/B16D,MAAM,EAAEzJ,GAAG,CAAClQ;YACd,CAAC,CAAC;UACJ,CAAC,MAAM;YAELo0E,kBAAkB,GAAGp0E,GAAG,GAAG,CAAC;YAC5Bq0E,qBAAqB,GAAGl0E,8BAA8B,CAAC+P,GAAG,CAAClQ,GAAG,EAAE,CAAC,CAAC,CAAC;YACnEm0E,aAAa,GAAGjzE,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGA,KAAK,CAACkxB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1DkiD,QAAQ,GAAG,IAAIz+C,KAAK,CAAC;cAEnB/xB,IAAI,EAAE4hB,gBAAgB,CAAiB;cACvCxkB,KAAK,EAAE,IAAI;cACXnB,KAAK,EAAEq0E,kBAAkB;cACzBp0E,GAAG,EAAEA,GAAG;cACR6W,QAAQ,EAAEw9D,qBAAqB;cAC/B16D,MAAM,EAAEzJ,GAAG,CAAClQ;YACd,CAAC,CAAC;UACJ;UACA8R,MAAM,CAACod,MAAM,CACX9tB,CAAC,EACD,CAAC,EACD8yE,UAAU,EACV,IAAIr+C,KAAK,CAAC;YAER/xB,IAAI,EAAE4hB,gBAAgB,CAAa;YACnCxkB,KAAK,EAAEizE,aAAa;YACpBp0E,KAAK,EAAEi0E,YAAY;YACnBh0E,GAAG,EAAEo0E,kBAAkB;YACvBv9D,QAAQ,EAAEo9D,eAAe;YACzBt6D,MAAM,EAAE06D;WACT,CAAC,EACFC,QAAQ,CACT;UACDlzE,CAAC,IAAI,CAAC;UACN;QACF;MACF;MAEAkO,KAAK,CAACxL,IAAI,GAAG4hB,gBAAgB,CAAC5hB,IAAI,CAAC;IACrC;EACF;EACA,OAAOgO,MAAM;AACf;AACe,MAAeyiE,eAAe,SAAS3J,gBAAgB,CAAC;EAQrE3yB,aAAa,CAAermC,IAAY,EAAEsmC,OAAkB,EAAU;IACpEtmC,IAAI,CAACsmC,OAAO,GAAG,IAAI,CAAC06B,YAAY,CAAC16B,OAAO,CAAC;IACzCtmC,IAAI,CAAC8b,QAAQ,GAAG,IAAI,CAAClV,KAAK,CAACkV,QAAQ;IAEnC,IAAI,IAAI,CAAC7b,OAAO,CAACC,MAAM,EAAE;MACvBF,IAAI,CAACE,MAAM,GAAG+hE,kBAAkB,CAAC,IAAI,CAAC/hE,MAAM,EAAE,IAAI,CAACud,KAAK,CAAC;IAC3D;IAEA,OAAO,IAAI,CAAClZ,UAAU,CAACvE,IAAI,EAAE,MAAM,CAAC;EACtC;EAEAghE,YAAY,CAEV16B,OAA0B,EAGf;IAAA,IAFXl4C,GAAc,uEAAS;IAAA,IACvB8xB,UAAsB,uEAAG,IAAI,CAACjgB,OAAO,CAACigB,UAAU;IAEhDomB,OAAO,CAACpmB,UAAU,GAAGA,UAAU;IAC/BomB,OAAO,CAACs8B,WAAW,GAAG,IAAI,CAACC,yBAAyB,EAAE;IACtD,IAAI,CAACrgE,cAAc,CAAC8jC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAEl4C,GAAG,CAAC;IAC7C,IACE,IAAI,CAACgnB,QAAQ,IACb,CAAC,IAAI,CAACnV,OAAO,CAACk3D,sBAAsB,IACpC,IAAI,CAAC98C,KAAK,CAAChB,gBAAgB,CAAC2O,IAAI,GAAG,CAAC,EACpC;MACA,KAAK,MAAM,CAACxzB,SAAS,EAAEuR,EAAE,CAAC,IAAIjH,KAAK,CAAC+rB,IAAI,CAAC,IAAI,CAACxQ,KAAK,CAAChB,gBAAgB,CAAC,EAAE;QACrE,IAAI,CAACvT,KAAK,CAACzG,MAAM,CAAC1G,qBAAqB,EAAE;UAAEoN,EAAE;UAAEvR;QAAU,CAAC,CAAC;MAC7D;IACF;IACA,IAAIsuE,eAA0B;IAC9B,IAAI10E,GAAG,QAAW,EAAE;MAElB00E,eAAe,GAAG,IAAI,CAACv+D,UAAU,CAAC+hC,OAAO,EAAE,SAAS,CAAC;IACvD,CAAC,MAAM;MAELw8B,eAAe,GAAG,IAAI,CAACh7D,YAAY,CACjCw+B,OAAO,EACP,SAAS,EACT/3C,8BAA8B,CAAC,IAAI,CAACqY,KAAK,CAAC3B,QAAQ,EAAE,CAAC,CAAC,CAAC,CACxD;IACH;IACA,OAAO69D,eAAe;EACxB;EAKAC,eAAe,CAACnhE,IAAiB,EAAe;IAC9C,MAAML,SAAS,GAAGK,IAAW;IAC7BL,SAAS,CAACrP,IAAI,GAAG,WAAW;IAC5BqP,SAAS,CAACjS,KAAK,GAAGiS,SAAS,CAACC,UAAU;IACtC,OAAOD,SAAS,CAACC,UAAU;IAE3B,MAAMwhE,gBAAgB,GAAGzhE,SAAS,CAACjS,KAAK;IACxC,MAAMqS,eAAe,GAAGqhE,gBAAgB,CAAC1zE,KAAK;IAC9C,MAAMmS,GAAG,GAAG,IAAI,CAACgc,KAAK,CAAC+C,KAAK,CAACwiD,gBAAgB,CAAC70E,KAAK,EAAE60E,gBAAgB,CAAC50E,GAAG,CAAC;IAC1E,MAAMmyB,GAAG,GAAIyiD,gBAAgB,CAAC1zE,KAAK,GAAGmS,GAAG,CAAC+e,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE;IAEvD,IAAI,CAACoN,QAAQ,CAACo1C,gBAAgB,EAAE,KAAK,EAAEvhE,GAAG,CAAC;IAC3C,IAAI,CAACmsB,QAAQ,CAACo1C,gBAAgB,EAAE,UAAU,EAAEziD,GAAG,CAAC;IAChD,IAAI,CAACqN,QAAQ,CAACo1C,gBAAgB,EAAE,iBAAiB,EAAErhE,eAAe,CAAC;IAEnEqhE,gBAAgB,CAAC9wE,IAAI,GAAG,kBAAkB;IAE1C,OAAOqP,SAAS;EAClB;EAEAshE,yBAAyB,GAAkC;IACzD,IAAI,CAAC,IAAI,CAACvgD,KAAK,IAAyB,EAAE;MACxC,OAAO,IAAI;IACb;IAEA,MAAM1iB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAA0B;IACrDzE,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACsX,KAAK,CAACtX,KAAK;IAC7B,IAAI,CAACsmB,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAEAk5B,KAAK,GAAY;IACf,IAAI,CAAC,IAAI,CAACjL,YAAY,IAAS,EAAE;MAC/B,OAAO,KAAK;IACd;IACA,OAAO,IAAI,CAACo1C,uBAAuB,EAAE;EACvC;EAEApP,yBAAyB,CAAC9yC,EAAU,EAAEriB,GAAW,EAAE;IACjD,IAAI+V,iBAAiB,CAACsM,EAAE,CAAC,EAAE;MACzBihD,yBAAyB,CAAC18C,SAAS,GAAG5mB,GAAG;MACzC,IAAIsjE,yBAAyB,CAACttD,IAAI,CAAC,IAAI,CAAC+I,KAAK,CAAC,EAAE;QAG9C,MAAMylD,KAAK,GAAG,IAAI,CAAC19C,cAAc,CAACw8C,yBAAyB,CAAC18C,SAAS,CAAC;QACtE,IAAI,CAAC1Q,gBAAgB,CAACsuD,KAAK,CAAC,IAAIA,KAAK,OAAwB,EAAE;UAC7D,OAAO,KAAK;QACd;MACF;MACA,OAAO,IAAI;IACb,CAAC,MAAM,IAAIniD,EAAE,OAAwB,EAAE;MACrC,OAAO,IAAI;IACb,CAAC,MAAM;MACL,OAAO,KAAK;IACd;EACF;EAEAoiD,sBAAsB,CAACpiD,EAAU,EAAE;IACjC,OACEA,EAAE,OAAgC,IAAIA,EAAE,KAA6B;EAEzE;EAMAkiD,uBAAuB,GAAY;IACjC,MAAMrtD,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,MAAM6I,MAAM,GAAG,IAAI,CAACzI,cAAc,CAAC5P,IAAI,CAAC;IACxC,OACE,IAAI,CAACutD,sBAAsB,CAACl1C,MAAM,CAAC,IACnC,IAAI,CAAC4lC,yBAAyB,CAAC5lC,MAAM,EAAErY,IAAI,CAAC;EAEhD;EAMAwtD,6BAA6B,GAAY;IACvC,MAAMxtD,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,MAAM6I,MAAM,GAAG,IAAI,CAACzI,cAAc,CAAC5P,IAAI,CAAC;IACxC,OAAO,IAAI,CAACi+C,yBAAyB,CAAC5lC,MAAM,EAAErY,IAAI,CAAC;EACrD;EAEAytD,gBAAgB,GAAY;IAC1B,MAAMp+C,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;IAClC,IAAIA,SAAS,CAAC/yB,IAAI,QAAW,IAAI,CAAC+yB,SAAS,CAACrF,WAAW,EAAE;MAEvD,OAAO,KAAK;IACd,CAAC,MAAM;MACL,IAAI,CAACkH,YAAY,CAAC,4BAA4B,CAAC;MAC/C,OAAO,IAAI;IACb;EACF;EAGAw8C,eAAe,GAAe;IAC5B,OAAO,IAAI,CAAC3kC,kBAAkB,CAC5B8iC,kBAAkB,CAACE,iBAAiB,GAClCF,kBAAkB,CAACG,gBAAgB,GACnCH,kBAAkB,CAACI,wBAAwB,GAC3CJ,kBAAkB,CAACK,oBAAoB,CAC1C;EACH;EAGAyB,sBAAsB,GAAe;IACnC,OAAO,IAAI,CAAC5kC,kBAAkB,CAC5B8iC,kBAAkB,CAACG,gBAAgB,GACjCH,kBAAkB,CAACI,wBAAwB,GAC3CJ,kBAAkB,CAACK,oBAAoB,CAC1C;EACH;EAEA9N,mCAAmC,CAEjCwP,uBAAgC,EAChC;IACA,OAAO,IAAI,CAAC7kC,kBAAkB,CAC5B8iC,kBAAkB,CAACI,wBAAwB,IACxC2B,uBAAuB,GAAG,CAAC,GAAG/B,kBAAkB,CAACK,oBAAoB,CAAC,CAC1E;EACH;EASA2B,cAAc,GAAe;IAC3B,OAAO,IAAI,CAAC9kC,kBAAkB,CAAC8iC,kBAAkB,CAACC,aAAa,CAAC;EAClE;EAIA/iC,kBAAkB,CAEhBt+B,KAAyB,EAOA;IACzB,IAAIqG,UAAgC,GAAG,IAAI;IAE3C,IAAI,IAAI,CAAC4b,KAAK,IAAO,EAAE;MACrB5b,UAAU,GAAG,IAAI,CAACo2D,eAAe,CAAC,IAAI,CAAC;IACzC;IACA,OAAO,IAAI,CAAC7N,qBAAqB,CAAC5uD,KAAK,EAAEqG,UAAU,CAAC;EACtD;EAEAuoD,qBAAqB,CAEnB5uD,KAAyB,EACzBqG,UAAiC,EACpB;IACb,MAAMulD,SAAS,GAAG,IAAI,CAACrlD,KAAK,CAAC1U,IAAI;IACjC,MAAM0N,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;IAC7B,MAAMq/D,gBAAgB,GAAG,CAAC,EAAErjE,KAAK,GAAGohE,kBAAkB,CAACG,gBAAgB,CAAC;IACxE,MAAM+B,wBAAwB,GAAG,CAAC,EAChCtjE,KAAK,GAAGohE,kBAAkB,CAACI,wBAAwB,CACpD;IACD,MAAMn/D,QAAQ,GAAGrC,KAAK,GAAGohE,kBAAkB,CAACE,iBAAiB;IAM7D,QAAQ1V,SAAS;MACf;QACE,OAAO,IAAI,CAAC2X,2BAA2B,CAAChkE,IAAI,EAAgB,IAAI,CAAC;MACnE;QACE,OAAO,IAAI,CAACgkE,2BAA2B,CAAChkE,IAAI,EAAgB,KAAK,CAAC;MACpE;QACE,OAAO,IAAI,CAACikE,sBAAsB,CAACjkE,IAAI,CAAgC;MACzE;QACE,OAAO,IAAI,CAACkkE,qBAAqB,CAAClkE,IAAI,CAA+B;MACvE;QACE,OAAO,IAAI,CAACmkE,iBAAiB,CAACnkE,IAAI,CAA2B;MAC/D;QACE,IAAI,IAAI,CAAC2lB,iBAAiB,EAAE,OAAkB,EAAE;QAChD,IAAI,CAACm+C,gBAAgB,EAAE;UACrB,IAAI,IAAI,CAAC98D,KAAK,CAACkO,MAAM,EAAE;YACrB,IAAI,CAAChP,KAAK,CAACzG,MAAM,CAACrC,cAAc,EAAE;cAAE+I,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;YAAS,CAAC,CAAC;UAChE,CAAC,MAAM,IAAI,CAAC0+D,wBAAwB,EAAE;YACpC,IAAI,CAAC79D,KAAK,CAACzG,MAAM,CAACtF,cAAc,EAAE;cAAEgM,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;YAAS,CAAC,CAAC;UAChE;QACF;QACA,OAAO,IAAI,CAACknD,sBAAsB,CAChCvsD,IAAI,EACJ,KAAK,EACL,CAAC8jE,gBAAgB,IAAIC,wBAAwB,CAC9C;MACH;QACE,IAAI,CAACD,gBAAgB,EAAE,IAAI,CAAC5sE,UAAU,EAAE;QACxC,OAAO,IAAI,CAACs1D,UAAU,CACpB,IAAI,CAACuF,mBAAmB,CACtBjrD,UAAU,EACV9G,IAAI,CACL,EACD,IAAI,CACL;MAEH;QACE,OAAO,IAAI,CAACokE,gBAAgB,CAACpkE,IAAI,CAA0B;MAC7D;QACE,OAAO,IAAI,CAACqkE,oBAAoB,CAACrkE,IAAI,CAA8B;MACrE;QACE,OAAO,IAAI,CAACskE,oBAAoB,CAACtkE,IAAI,CAA8B;MACrE;QACE,OAAO,IAAI,CAACukE,mBAAmB,CAACvkE,IAAI,CAA6B;MACnE;QACE,OAAO,IAAI,CAACwkE,iBAAiB,CAACxkE,IAAI,CAA2B;MAE/D;QAEE,IACE,IAAI,CAAC2uB,qBAAqB,EAAE,IAC5B,IAAI,CAAC3nB,KAAK,CAACgZ,WAAW,IACtB,CAAC,IAAI,CAACwjD,6BAA6B,EAAE,EACrC;UACA;QACF;QACA,IAAI,CAACt8C,YAAY,CAAC,4BAA4B,CAAC;QAC/C,IAAI,CAAC,IAAI,CAACzM,KAAK,CAACjF,QAAQ,IAAI,IAAI,CAACiF,KAAK,CAACf,UAAU,EAAE;UACjD,IAAI,CAACxT,KAAK,CAACzG,MAAM,CAAC9D,0BAA0B,EAAE;YAC5CwK,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ,CAAC,MAAM,IAAI,CAACy+D,gBAAgB,EAAE;UAC5B,IAAI,CAAC59D,KAAK,CAACzG,MAAM,CAACvE,4BAA4B,EAAE;YAC9CiL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QACA,OAAO,IAAI,CAAConD,iBAAiB,CAC3BzsD,IAAI,EACJ,OAAO,CACR;MACH;QAAc;UACZ,IAAI,IAAI,CAACgH,KAAK,CAACgZ,WAAW,EAAE;YAC1B;UACF;UAGA,MAAMhK,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;UAClC,MAAM6I,MAAM,GAAG,IAAI,CAACzI,cAAc,CAAC5P,IAAI,CAAC;UACxC,IAAIqY,MAAM,OAAgC,EAAE;YAC1C,IAAI,CAACy1C,gBAAgB,IAAI,IAAI,CAACn1C,qBAAqB,EAAE,EAAE;YACvD,IACE,CAAC,IAAI,CAACslC,yBAAyB,CAAC5lC,MAAM,EAAErY,IAAI,CAAC,IAC7CqY,MAAM,QAA6B,EACnC;cACA;YACF;UACF;QACF;MAEA;QAAgB;UACd,IAAI,CAACy1C,gBAAgB,EAAE;YACrB,IAAI,CAAC59D,KAAK,CAACzG,MAAM,CAACvE,4BAA4B,EAAE;cAC9CiL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;YACjB,CAAC,CAAC;UACJ;QACF;MAEA;QAAc;UACZ,MAAM3S,IAAI,GAAG,IAAI,CAACsU,KAAK,CAACtX,KAAK;UAC7B,OAAO,IAAI,CAAC+8D,iBAAiB,CAC3BzsD,IAAI,EACJtN,IAAI,CACL;QACH;MACA;QACE,OAAO,IAAI,CAAC+xE,mBAAmB,CAACzkE,IAAI,CAA6B;MACnE;QACE,OAAO,IAAI,CAAC0kE,kBAAkB,CAAC1kE,IAAI,CAA4B;MACjE;QACE,OAAO,IAAI,CAACq0D,UAAU,EAAE;MAC1B;QACE,OAAO,IAAI,CAACsQ,mBAAmB,CAAC3kE,IAAI,CAA6B;MACnE;QAAiB;UACf,MAAM4kE,iBAAiB,GAAG,IAAI,CAACj/C,iBAAiB,EAAE;UAClD,IACEi/C,iBAAiB,OAA8B,IAC/CA,iBAAiB,OAAkB,EACnC;YACA;UACF;QACF;MAEA;QAAiB;UACf,IAAI,CAAC,IAAI,CAACvkE,OAAO,CAACg3D,2BAA2B,IAAI,CAACv0D,QAAQ,EAAE;YAC1D,IAAI,CAACoD,KAAK,CAACzG,MAAM,CAAC3E,sBAAsB,EAAE;cACxCqL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;YACjB,CAAC,CAAC;UACJ;UAEA,IAAI,CAAC2Q,IAAI,EAAE;UAEX,IAAIwqB,MAAM;UACV,IAAI6rB,SAAS,OAAe,EAAE;YAC5B7rB,MAAM,GAAG,IAAI,CAACzH,WAAW,CAAC/4B,IAAI,CAAgC;YAE9D,IACEwgC,MAAM,CAACluC,IAAI,KAAK,mBAAmB,KAClC,CAACkuC,MAAM,CAAC5K,UAAU,IAAI4K,MAAM,CAAC5K,UAAU,KAAK,OAAO,CAAC,EACrD;cACA,IAAI,CAACpa,iBAAiB,GAAG,IAAI;YAC/B;UACF,CAAC,MAAM;YACLglB,MAAM,GAAG,IAAI,CAAC35B,WAAW,CACvB7G,IAAI,EAKJ8G,UAAU,CACX;YAED,IACG05B,MAAM,CAACluC,IAAI,KAAK,wBAAwB,KACtC,CAACkuC,MAAM,CAACrH,UAAU,IAAIqH,MAAM,CAACrH,UAAU,KAAK,OAAO,CAAC,IACtDqH,MAAM,CAACluC,IAAI,KAAK,sBAAsB,KACpC,CAACkuC,MAAM,CAACrH,UAAU,IAAIqH,MAAM,CAACrH,UAAU,KAAK,OAAO,CAAE,IACxDqH,MAAM,CAACluC,IAAI,KAAK,0BAA0B,EAC1C;cACA,IAAI,CAACkpB,iBAAiB,GAAG,IAAI;YAC/B;UACF;UAEA,IAAI,CAACmlB,uBAAuB,CAACH,MAAM,CAAC;UAEpC,OAAOA,MAAM;QACf;MAEA;QAAS;UACP,IAAI,IAAI,CAACqkC,eAAe,EAAE,EAAE;YAC1B,IAAI,CAACf,gBAAgB,EAAE;cACrB,IAAI,CAAC59D,KAAK,CAACzG,MAAM,CAAC7M,qCAAqC,EAAE;gBACvDuT,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;cACjB,CAAC,CAAC;YACJ;YACA,IAAI,CAAC2Q,IAAI,EAAE;YACX,OAAO,IAAI,CAACu2C,sBAAsB,CAChCvsD,IAAI,EACJ,IAAI,EACJ,CAAC8jE,gBAAgB,IAAIC,wBAAwB,CAC9C;UACH;QACF;IAAA;IAQF,MAAMe,SAAS,GAAG,IAAI,CAAC99D,KAAK,CAACtX,KAAK;IAClC,MAAMwvC,IAAI,GAAG,IAAI,CAAC9H,eAAe,EAAE;IAEnC,IACErkB,iBAAiB,CAACs5C,SAAS,CAAC,IAC5BntB,IAAI,CAAC5sC,IAAI,KAAK,YAAY,IAC1B,IAAI,CAAC4yB,GAAG,IAAU,EAClB;MACA,OAAO,IAAI,CAAC6/C,qBAAqB,CAC/B/kE,IAAI,EACJ8kE,SAAS,EAET5lC,IAAI,EACJz+B,KAAK,CACN;IACH,CAAC,MAAM;MACL,OAAO,IAAI,CAACw+B,wBAAwB,CAClCj/B,IAAI,EACJk/B,IAAI,EACJp4B,UAAU,CACX;IACH;EACF;EAEA65B,uBAAuB,CAAC3gC,IAAY,EAAQ;IAC1C,IAAI,CAAC,IAAI,CAACK,OAAO,CAACg3D,2BAA2B,IAAI,CAAC,IAAI,CAAC7hD,QAAQ,EAAE;MAC/D,IAAI,CAACtP,KAAK,CAACzG,MAAM,CAAC5O,mBAAmB,EAAE;QAAEsV,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACtD;EACF;EAEAglE,6BAA6B,GAAY;IACvC,IAAI,IAAI,CAACt+D,SAAS,CAAC,mBAAmB,CAAC,EAAE,OAAO,IAAI;IACpD,OACE,IAAI,CAACA,SAAS,CAAC,YAAY,CAAC,IAC5B,CAAC,CAAC,IAAI,CAAC5C,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC;EAElE;EAQAiuD,mBAAmB,CACjBkT,eAAqC,EACrCC,SAAY,EACZC,UAA0E,EACvE;IACH,IAAIF,eAAe,EAAE;MACnBC,SAAS,CAACp+D,UAAU,GAAGm+D,eAAe;MACtC,IAAI,CAACnzC,0BAA0B,CAACozC,SAAS,EAAED,eAAe,CAAC,CAAC,CAAC,CAAC;MAC9D,IAAIE,UAAU,EAAE,IAAI,CAACrzC,0BAA0B,CAACqzC,UAAU,EAAED,SAAS,CAAC;IACxE;IACA,OAAOA,SAAS;EAClB;EAEA3T,uBAAuB,GAAY;IACjC,OAAO,IAAI,CAAC7uC,KAAK,CAAW;EAC9B;EAEAw6C,eAAe,CAAekI,WAAqB,EAAiB;IAClE,MAAMt+D,UAAU,GAAG,EAAE;IACrB,GAAG;MACDA,UAAU,CAAClD,IAAI,CAAC,IAAI,CAACw0D,cAAc,EAAE,CAAC;IACxC,CAAC,QAAQ,IAAI,CAAC11C,KAAK,CAAO;IAE1B,IAAI,IAAI,CAACA,KAAK,IAAY,EAAE;MAC1B,IAAI,CAAC0iD,WAAW,EAAE;QAChB,IAAI,CAACluE,UAAU,EAAE;MACnB;MAEA,IAAI,CAAC,IAAI,CAAC8tE,6BAA6B,EAAE,EAAE;QACzC,IAAI,CAAC9+D,KAAK,CAACzG,MAAM,CAAC3L,oBAAoB,EAAE;UAAEqS,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QAAS,CAAC,CAAC;MACtE;IACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAACksD,uBAAuB,EAAE,EAAE;MAC1C,MAAM,IAAI,CAACrrD,KAAK,CAACzG,MAAM,CAACxE,0BAA0B,EAAE;QAClDkL,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IAEA,OAAOyB,UAAU;EACnB;EAEAsxD,cAAc,GAA4B;IACxC,IAAI,CAAC7tC,eAAe,CAAC,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;IAEzD,MAAMvqB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAe;IAC1C,IAAI,CAACuR,IAAI,EAAE;IAEX,IAAI,IAAI,CAACtP,SAAS,CAAC,YAAY,CAAC,EAAE;MAChC,MAAMrB,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;MACpC,IAAI65B,IAAkB;MAEtB,IAAI,IAAI,CAACxc,KAAK,IAAW,EAAE;QACzB,MAAMrd,QAAQ,GAAG,IAAI,CAAC2B,KAAK,CAAC3B,QAAQ;QACpC,IAAI,CAAC2Q,IAAI,EAAE;QACXkpB,IAAI,GAAG,IAAI,CAAC9H,eAAe,EAAE;QAC7B,IAAI,CAACrI,MAAM,CAAW;QACtBmQ,IAAI,GAAG,IAAI,CAACu/B,eAAe,CAACp5D,QAAQ,EAAE65B,IAAI,CAAC;QAE3C,MAAMmmC,cAAc,GAAG,IAAI,CAACr+D,KAAK,CAAC3B,QAAQ;QAC1CrF,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACyvD,4BAA4B,CAACnyB,IAAI,CAAC;QACzD,IACE,IAAI,CAACp7B,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,KAC1D,KAAK,IACP9D,IAAI,CAAC4B,UAAU,KAAKs9B,IAAI,EACxB;UACA,IAAI,CAACh5B,KAAK,CAACzG,MAAM,CAAC9L,oCAAoC,EAAE;YACtDwS,EAAE,EAAEk/D;UACN,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLnmC,IAAI,GAAG,IAAI,CAACxH,eAAe,CAAC,KAAK,CAAC;QAElC,OAAO,IAAI,CAACxS,GAAG,IAAQ,EAAE;UACvB,MAAMllB,IAAI,GAAG,IAAI,CAAC6xB,WAAW,CAACxsB,QAAQ,CAAC;UACvCrF,IAAI,CAACzQ,MAAM,GAAG2vC,IAAI;UAClB,IAAI,IAAI,CAACxc,KAAK,KAAgB,EAAE;YAC9B,IAAI,CAAC5c,UAAU,CAACC,cAAc,CAC5B,IAAI,CAACiB,KAAK,CAACtX,KAAK,EAChB,IAAI,CAACsX,KAAK,CAAC3B,QAAQ,CACpB;YACDrF,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAAClsB,gBAAgB,EAAE;UACzC,CAAC,MAAM;YACL7D,IAAI,CAAC+vB,QAAQ,GAAG,IAAI,CAAC2H,eAAe,CAAC,IAAI,CAAC;UAC5C;UACA13B,IAAI,CAAC0E,QAAQ,GAAG,KAAK;UACrBw6B,IAAI,GAAG,IAAI,CAACv6B,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;QAClD;QAEAA,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACyvD,4BAA4B,CAACnyB,IAAI,CAAC;MAC3D;IACF,CAAC,MAAM;MACLl/B,IAAI,CAAC4B,UAAU,GAAG,IAAI,CAACo6D,mBAAmB,EAAE;IAC9C;IACA,OAAO,IAAI,CAACr3D,UAAU,CAAC3E,IAAI,EAAE,WAAW,CAAC;EAC3C;EAEAqxD,4BAA4B,CAAenyB,IAAkB,EAAgB;IAC3E,IAAI,IAAI,CAACha,GAAG,IAAW,EAAE;MACvB,MAAMllB,IAAI,GAAG,IAAI,CAAC8H,eAAe,CAACo3B,IAAI,CAAC;MACvCl/B,IAAI,CAACuG,MAAM,GAAG24B,IAAI;MAClBl/B,IAAI,CAACyG,SAAS,GAAG,IAAI,CAACw/B,4BAA4B,KAAY,KAAK,CAAC;MACpE,IAAI,CAAClE,gBAAgB,CAAC/hC,IAAI,CAACyG,SAAS,CAAC;MACrC,OAAO,IAAI,CAAC9B,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;IAChD;IAEA,OAAOk/B,IAAI;EACb;EAUA8kC,2BAA2B,CACzBhkE,IAAoD,EACpDm0D,OAAgB,EACwB;IACxC,IAAI,CAACn+C,IAAI,EAAE;IAEX,IAAI,IAAI,CAAC4Y,gBAAgB,EAAE,EAAE;MAC3B5uB,IAAI,CAACmJ,KAAK,GAAG,IAAI;IACnB,CAAC,MAAM;MACLnJ,IAAI,CAACmJ,KAAK,GAAG,IAAI,CAACuuB,eAAe,EAAE;MACnC,IAAI,CAAC7I,SAAS,EAAE;IAClB;IAEA,IAAI,CAACqlC,mBAAmB,CAACl0D,IAAI,EAAEm0D,OAAO,CAAC;IAEvC,OAAO,IAAI,CAACxvD,UAAU,CACpB3E,IAAI,EACJm0D,OAAO,GAAG,gBAAgB,GAAG,mBAAmB,CACjD;EACH;EAEAD,mBAAmB,CACjBl0D,IAAoD,EACpDm0D,OAAgB,EAChB;IACA,IAAIvkE,CAAC;IACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACoX,KAAK,CAAC4Y,MAAM,CAACxwB,MAAM,EAAE,EAAEQ,CAAC,EAAE;MAC7C,MAAM01E,GAAG,GAAG,IAAI,CAACt+D,KAAK,CAAC4Y,MAAM,CAAChwB,CAAC,CAAC;MAChC,IAAIoQ,IAAI,CAACmJ,KAAK,IAAI,IAAI,IAAIm8D,GAAG,CAACptE,IAAI,KAAK8H,IAAI,CAACmJ,KAAK,CAACjR,IAAI,EAAE;QACtD,IAAIotE,GAAG,CAAC5yE,IAAI,IAAI,IAAI,KAAKyhE,OAAO,IAAImR,GAAG,CAAC5yE,IAAI,KAAK,MAAM,CAAC,EAAE;QAC1D,IAAIsN,IAAI,CAACmJ,KAAK,IAAIgrD,OAAO,EAAE;MAC7B;IACF;IACA,IAAIvkE,CAAC,KAAK,IAAI,CAACoX,KAAK,CAAC4Y,MAAM,CAACxwB,MAAM,EAAE;MAClC,MAAMkD,IAAI,GAAG6hE,OAAO,GAAG,gBAAgB,GAAG,mBAAmB;MAC7D,IAAI,CAACjuD,KAAK,CAACzG,MAAM,CAACtK,oBAAoB,EAAE;QAAEgR,EAAE,EAAEnG,IAAI;QAAE1N;MAAK,CAAC,CAAC;IAC7D;EACF;EAEA2xE,sBAAsB,CACpBjkE,IAAiC,EACZ;IACrB,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAAC6Y,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAulE,qBAAqB,GAA6B;IAChD,IAAI,CAACx2C,MAAM,CAAW;IACtB,MAAMpO,GAAG,GAAG,IAAI,CAACyW,eAAe,EAAE;IAClC,IAAI,CAACrI,MAAM,CAAW;IACtB,OAAOpO,GAAG;EACZ;EAGAujD,qBAAqB,CAEnBlkE,IAAgC,EACZ;IACpB,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAAChP,KAAK,CAAC4Y,MAAM,CAAChc,IAAI,CAACy9D,SAAS,CAAC;IAGjCrhE,IAAI,CAACmD,IAAI,GAIP,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAAC+C,cAAc,EAAE,CACtB;IAEH,IAAI,CAAC78D,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IAEvB,IAAI,CAAC2a,MAAM,CAAW;IACtB/uB,IAAI,CAAC8U,IAAI,GAAG,IAAI,CAACywD,qBAAqB,EAAE;IACxC,IAAI,CAACrgD,GAAG,CAAS;IACjB,OAAO,IAAI,CAACvgB,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAUAmkE,iBAAiB,CAEfnkE,IAAwC,EAC7B;IACX,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,CAAChP,KAAK,CAAC4Y,MAAM,CAAChc,IAAI,CAACy9D,SAAS,CAAC;IAEjC,IAAImE,OAAO,GAAG,IAAI;IAElB,IAAI,IAAI,CAAC/J,cAAc,EAAE,IAAI,IAAI,CAACltC,aAAa,IAAW,EAAE;MAC1Di3C,OAAO,GAAG,IAAI,CAACx+D,KAAK,CAACC,eAAe;IACtC;IACA,IAAI,CAACwT,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;IAC7B,IAAI,CAAC2Y,MAAM,CAAW;IAEtB,IAAI,IAAI,CAACrM,KAAK,IAAS,EAAE;MACvB,IAAI8iD,OAAO,KAAK,IAAI,EAAE;QACpB,IAAI,CAACtuE,UAAU,CAACsuE,OAAO,CAAC;MAC1B;MACA,OAAO,IAAI,CAACC,QAAQ,CAACzlE,IAAI,EAA4B,IAAI,CAAC;IAC5D;IAEA,MAAM0lE,aAAa,GAAG,IAAI,CAACz3C,YAAY,CAAS;IAChD,MAAM03C,eAAe,GACnB,IAAI,CAAC13C,YAAY,CAAW,QAAI,CAAC,IAAI,CAACU,qBAAqB,EAAE;IAC/D,MAAMi3C,YAAY,GACfF,aAAa,IAAI,IAAI,CAACrC,uBAAuB,EAAE,IAC/CsC,eAAe,IACd,IAAI,CAACnC,6BAA6B,EAAE,IACpC,IAAI,CAACC,gBAAgB,EAAG;IAC5B,IAAI,IAAI,CAAC/gD,KAAK,CAAS,OAAI,IAAI,CAACA,KAAK,IAAW,IAAIkjD,YAAY,EAAE;MAChE,MAAMC,QAAQ,GAAG,IAAI,CAACphE,SAAS,EAAyB;MACxD,MAAM/R,IAAI,GAAG,IAAI,CAACsU,KAAK,CAACtX,KAAK;MAC7B,IAAI,CAACsmB,IAAI,EAAE;MACX,IAAI,CAAC8vD,QAAQ,CAACD,QAAQ,EAAE,IAAI,EAAEnzE,IAAI,CAAC;MACnC,MAAM0tB,IAAI,GAAG,IAAI,CAACzb,UAAU,CAACkhE,QAAQ,EAAE,qBAAqB,CAAC;MAE7D,MAAME,OAAO,GAAG,IAAI,CAACrjD,KAAK,CAAQ;MAClC,IAAIqjD,OAAO,IAAIJ,eAAe,EAAE;QAC9B,IAAI,CAACz/D,KAAK,CAACzG,MAAM,CAAC1K,UAAU,EAAE;UAAEoR,EAAE,EAAEia;QAAK,CAAC,CAAC;MAC7C;MACA,IACE,CAAC2lD,OAAO,IAAI,IAAI,CAAC93C,YAAY,KAAQ,KACrC7N,IAAI,CAAC+uC,YAAY,CAAC//D,MAAM,KAAK,CAAC,EAC9B;QACA,OAAO,IAAI,CAAC42E,UAAU,CAAChmE,IAAI,EAAuBogB,IAAI,EAAEolD,OAAO,CAAC;MAClE;MACA,IAAIA,OAAO,KAAK,IAAI,EAAE;QACpB,IAAI,CAACtuE,UAAU,CAACsuE,OAAO,CAAC;MAC1B;MACA,OAAO,IAAI,CAACC,QAAQ,CAACzlE,IAAI,EAA4BogB,IAAI,CAAC;IAC5D;IAIA,MAAM6lD,eAAe,GAAG,IAAI,CAACh4C,YAAY,CAAW;IAEpD,MAAM3oB,mBAAmB,GAAG,IAAIwrB,gBAAgB,EAAE;IAClD,MAAM1Q,IAAI,GAAG,IAAI,CAACgX,eAAe,CAAC,IAAI,EAAE9xB,mBAAmB,CAAC;IAC5D,MAAM4gE,OAAO,GAAG,IAAI,CAACj4C,YAAY,CAAQ;IACzC,IAAIi4C,OAAO,EAAE;MAEX,IAAIR,aAAa,EAAE;QACjB,IAAI,CAACx/D,KAAK,CAACzG,MAAM,CAACxK,QAAQ,EAAE;UAAEkR,EAAE,EAAEia;QAAK,CAAC,CAAC;MAC3C;MAEA,IAEEolD,OAAO,KAAK,IAAI,IAChBS,eAAe,IACf7lD,IAAI,CAAC9tB,IAAI,KAAK,YAAY,EAC1B;QAKA,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAACzK,UAAU,EAAE;UAAEmR,EAAE,EAAEia;QAAK,CAAC,CAAC;MAC7C;IACF;IACA,IAAI8lD,OAAO,IAAI,IAAI,CAACxjD,KAAK,IAAQ,EAAE;MACjC,IAAI,CAACmO,yBAAyB,CAACvrB,mBAAmB,CAAC;MACnD,IAAI,CAACM,YAAY,CAACwa,IAAI,EAAc,IAAI,CAAC;MACzC,MAAM9tB,IAAI,GAAG4zE,OAAO,GAAG,gBAAgB,GAAG,gBAAgB;MAC1D,IAAI,CAAC1N,SAAS,CAACp4C,IAAI,EAAE;QAAEq4C,EAAE,EAAE;UAAEnmE;QAAK;MAAE,CAAC,CAAC;MACtC,OAAO,IAAI,CAAC0zE,UAAU,CACpBhmE,IAAI,EAEJogB,IAAI,EACJolD,OAAO,CACR;IACH,CAAC,MAAM;MACL,IAAI,CAACj2C,qBAAqB,CAACjqB,mBAAmB,EAAE,IAAI,CAAC;IACvD;IACA,IAAIkgE,OAAO,KAAK,IAAI,EAAE;MACpB,IAAI,CAACtuE,UAAU,CAACsuE,OAAO,CAAC;IAC1B;IACA,OAAO,IAAI,CAACC,QAAQ,CAACzlE,IAAI,EAA4BogB,IAAI,CAAC;EAC5D;EAGAmsC,sBAAsB,CAEpBvsD,IAAmC,EACnCmC,OAAgB,EAChBgkE,oBAA6B,EACN;IACvB,IAAI,CAACnwD,IAAI,EAAE;IACX,OAAO,IAAI,CAACkoD,aAAa,CACvBl+D,IAAI,EACJuhE,iBAAiB,CAACE,WAAW,IAC1B0E,oBAAoB,GAAG5E,iBAAiB,CAACG,kBAAkB,GAAG,CAAC,CAAC,IAChEv/D,OAAO,GAAGo/D,iBAAiB,CAACK,KAAK,GAAG,CAAC,CAAC,CAC1C;EACH;EAGAwC,gBAAgB,CAAepkE,IAA2B,EAAE;IAC1D,IAAI,CAACgW,IAAI,EAAE;IACXhW,IAAI,CAAC8U,IAAI,GAAG,IAAI,CAACywD,qBAAqB,EAAE;IAGxCvlE,IAAI,CAACy/B,UAAU,GAAG,IAAI,CAAC20B,mCAAmC,CAExD,IAAI,CACL;IACDp0D,IAAI,CAAC8/B,SAAS,GAAG,IAAI,CAAC5a,GAAG,IAAU,GAC/B,IAAI,CAACkvC,mCAAmC,CAAC,IAAI,CAAC,GAC9C,IAAI;IACR,OAAO,IAAI,CAACzvD,UAAU,CAAC3E,IAAI,EAAE,aAAa,CAAC;EAC7C;EAEAqkE,oBAAoB,CAAerkE,IAA+B,EAAE;IAClE,IAAI,CAAC,IAAI,CAACwwB,SAAS,CAAC5C,SAAS,IAAI,CAAC,IAAI,CAACvtB,OAAO,CAAC+2D,0BAA0B,EAAE;MACzE,IAAI,CAAClxD,KAAK,CAACzG,MAAM,CAACpK,aAAa,EAAE;QAAE8Q,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IAC/D;IAEA,IAAI,CAAC2Q,IAAI,EAAE;IAMX,IAAI,IAAI,CAAC4Y,gBAAgB,EAAE,EAAE;MAC3B5uB,IAAI,CAAChB,QAAQ,GAAG,IAAI;IACtB,CAAC,MAAM;MACLgB,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACo4B,eAAe,EAAE;MACtC,IAAI,CAACvI,SAAS,EAAE;IAClB;IAEA,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAGAskE,oBAAoB,CAAetkE,IAA+B,EAAE;IAClE,IAAI,CAACgW,IAAI,EAAE;IACXhW,IAAI,CAAComE,YAAY,GAAG,IAAI,CAACb,qBAAqB,EAAE;IAChD,MAAMc,KAAiC,GAAIrmE,IAAI,CAACqmE,KAAK,GAAG,EAAG;IAC3D,IAAI,CAACt3C,MAAM,CAAW;IACtB,IAAI,CAAC/nB,KAAK,CAAC4Y,MAAM,CAAChc,IAAI,CAAC09D,WAAW,CAAC;IACnC,IAAI,CAAC7mD,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;IAM7B,IAAIkwD,GAAG;IACP,KAAK,IAAIC,UAAU,EAAE,CAAC,IAAI,CAAC7jD,KAAK,GAAW,GAAI;MAC7C,IAAI,IAAI,CAACA,KAAK,IAAU,IAAI,IAAI,CAACA,KAAK,IAAa,EAAE;QACnD,MAAM8jD,MAAM,GAAG,IAAI,CAAC9jD,KAAK,CAAU;QACnC,IAAI4jD,GAAG,EAAE,IAAI,CAAC3hE,UAAU,CAAC2hE,GAAG,EAAE,YAAY,CAAC;QAE3CD,KAAK,CAACziE,IAAI,CAAE0iE,GAAG,GAAG,IAAI,CAAC7hE,SAAS,EAAE,CAAE;QACpC6hE,GAAG,CAAC7mC,UAAU,GAAG,EAAE;QACnB,IAAI,CAACzpB,IAAI,EAAE;QACX,IAAIwwD,MAAM,EAAE;UACVF,GAAG,CAACxxD,IAAI,GAAG,IAAI,CAACsiB,eAAe,EAAE;QACnC,CAAC,MAAM;UACL,IAAImvC,UAAU,EAAE;YACd,IAAI,CAACrgE,KAAK,CAACzG,MAAM,CAACzG,wBAAwB,EAAE;cAC1CmN,EAAE,EAAE,IAAI,CAACa,KAAK,CAACC;YACjB,CAAC,CAAC;UACJ;UACAs/D,UAAU,GAAG,IAAI;UACjBD,GAAG,CAACxxD,IAAI,GAAG,IAAI;QACjB;QACA,IAAI,CAACia,MAAM,CAAU;MACvB,CAAC,MAAM;QACL,IAAIu3C,GAAG,EAAE;UACPA,GAAG,CAAC7mC,UAAU,CAAC77B,IAAI,CAAC,IAAI,CAAC+/D,sBAAsB,EAAE,CAAC;QACpD,CAAC,MAAM;UACL,IAAI,CAACzsE,UAAU,EAAE;QACnB;MACF;IACF;IACA,IAAI,CAACujB,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI8rD,GAAG,EAAE,IAAI,CAAC3hE,UAAU,CAAC2hE,GAAG,EAAE,YAAY,CAAC;IAC3C,IAAI,CAACtwD,IAAI,EAAE;IACX,IAAI,CAAChP,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IACvB,OAAO,IAAI,CAACzP,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;EACjD;EAEAukE,mBAAmB,CAAevkE,IAA8B,EAAE;IAChE,IAAI,CAACgW,IAAI,EAAE;IACX,IAAI,IAAI,CAAC0Y,qBAAqB,EAAE,EAAE;MAChC,IAAI,CAACxoB,KAAK,CAACzG,MAAM,CAACxG,iBAAiB,EAAE;QAAEkN,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB;MAAc,CAAC,CAAC;IACxE;IACArI,IAAI,CAAChB,QAAQ,GAAG,IAAI,CAACo4B,eAAe,EAAE;IACtC,IAAI,CAACvI,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEA4xD,qBAAqB,GAA0B;IAC7C,MAAMrzB,KAAK,GAAG,IAAI,CAAC+F,gBAAgB,EAAE;IAErC,MAAMmiC,MAAM,GAAGloC,KAAK,CAACjsC,IAAI,KAAK,YAAY;IAC1C,IAAI,CAACmoB,KAAK,CAACF,KAAK,CAACksD,MAAM,GAAGjwD,kBAAkB,GAAG,CAAC,CAAC;IACjD,IAAI,CAACgiD,SAAS,CAACj6B,KAAK,EAAE;MACpBk6B,EAAE,EAAE;QAAEnmE,IAAI,EAAE;OAAe;MAC3BmT,OAAO,EAAEmS,YAAY;MACrB+gD,wBAAwB,EAAE;IAC5B,CAAC,CAAC;IAEF,OAAOp6B,KAAK;EACd;EAEAimC,iBAAiB,CAEfxkE,IAA4B,EACZ;IAChB,IAAI,CAACgW,IAAI,EAAE;IAEXhW,IAAI,CAAC0mE,KAAK,GAAG,IAAI,CAACrS,UAAU,EAAE;IAC9Br0D,IAAI,CAAC2mE,OAAO,GAAG,IAAI;IAEnB,IAAI,IAAI,CAACjkD,KAAK,IAAW,EAAE;MACzB,MAAMkkD,MAAM,GAAG,IAAI,CAACniE,SAAS,EAAiB;MAC9C,IAAI,CAACuR,IAAI,EAAE;MACX,IAAI,IAAI,CAAC0M,KAAK,IAAW,EAAE;QACzB,IAAI,CAACqM,MAAM,CAAW;QACtB63C,MAAM,CAACroC,KAAK,GAAG,IAAI,CAACqzB,qBAAqB,EAAE;QAC3C,IAAI,CAAC7iC,MAAM,CAAW;MACxB,CAAC,MAAM;QACL63C,MAAM,CAACroC,KAAK,GAAG,IAAI;QACnB,IAAI,CAAC9jB,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;MAC/B;MAGAwwD,MAAM,CAACzjE,IAAI,GAGT,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAACzM,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,CAC9B;MAEH,IAAI,CAAC55C,KAAK,CAACD,IAAI,EAAE;MACjBxa,IAAI,CAAC2mE,OAAO,GAAG,IAAI,CAAChiE,UAAU,CAACiiE,MAAM,EAAE,aAAa,CAAC;IACvD;IAEA5mE,IAAI,CAAC6mE,SAAS,GAAG,IAAI,CAAC3hD,GAAG,CAAa,MAAG,IAAI,CAACmvC,UAAU,EAAE,GAAG,IAAI;IAEjE,IAAI,CAACr0D,IAAI,CAAC2mE,OAAO,IAAI,CAAC3mE,IAAI,CAAC6mE,SAAS,EAAE;MACpC,IAAI,CAAC3gE,KAAK,CAACzG,MAAM,CAACvG,gBAAgB,EAAE;QAAEiN,EAAE,EAAEnG;MAAK,CAAC,CAAC;IACnD;IAEA,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAIAysD,iBAAiB,CAEfzsD,IAAmC,EACnCtN,IAAuC,EAEhB;IAAA,IADvBw8D,uBAAgC,uEAAG,KAAK;IAExC,IAAI,CAACl5C,IAAI,EAAE;IACX,IAAI,CAAC8vD,QAAQ,CAAC9lE,IAAI,EAAE,KAAK,EAAEtN,IAAI,EAAEw8D,uBAAuB,CAAC;IACzD,IAAI,CAACrgC,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAGAykE,mBAAmB,CAEjBzkE,IAA8B,EACZ;IAClB,IAAI,CAACgW,IAAI,EAAE;IACXhW,IAAI,CAAC8U,IAAI,GAAG,IAAI,CAACywD,qBAAqB,EAAE;IACxC,IAAI,CAACv+D,KAAK,CAAC4Y,MAAM,CAAChc,IAAI,CAACy9D,SAAS,CAAC;IAGjCrhE,IAAI,CAACmD,IAAI,GAIP,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAAC+C,cAAc,EAAE,CACtB;IAEH,IAAI,CAAC78D,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACzP,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEA0kE,kBAAkB,CAEhB1kE,IAA6B,EACZ;IACjB,IAAI,IAAI,CAACgH,KAAK,CAACkO,MAAM,EAAE;MACrB,IAAI,CAAChP,KAAK,CAACzG,MAAM,CAAClC,UAAU,EAAE;QAAE4I,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IAC5D;IACA,IAAI,CAAC2Q,IAAI,EAAE;IACXhW,IAAI,CAACzQ,MAAM,GAAG,IAAI,CAACg2E,qBAAqB,EAAE;IAG1CvlE,IAAI,CAACmD,IAAI,GAKP,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAAC+C,cAAc,EAAE,CACtB;IAEH,OAAO,IAAI,CAACl/D,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEA2kE,mBAAmB,CAAC3kE,IAA8B,EAAoB;IACpE,IAAI,CAACgW,IAAI,EAAE;IACX,OAAO,IAAI,CAACrR,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAGA+kE,qBAAqB,CAEnB/kE,IAAgC,EAChC8kE,SAAiB,EACjB5lC,IAAkB,EAClBz+B,KAAyB,EACL;IACpB,KAAK,MAAM0I,KAAK,IAAI,IAAI,CAACnC,KAAK,CAAC4Y,MAAM,EAAE;MACrC,IAAIzW,KAAK,CAACjR,IAAI,KAAK4sE,SAAS,EAAE;QAC5B,IAAI,CAAC5+D,KAAK,CAACzG,MAAM,CAACjI,kBAAkB,EAAE;UACpC2O,EAAE,EAAE+4B,IAAI;UACRznC,SAAS,EAAEqtE;QACb,CAAC,CAAC;MACJ;IACF;IAEA,MAAMpyE,IAAI,GAAG6gB,WAAW,CAAC,IAAI,CAACvM,KAAK,CAAC1U,IAAI,CAAC,GACrC,MAAM,GACN,IAAI,CAACowB,KAAK,IAAY,GACtB,QAAQ,GACR,IAAI;IACR,KAAK,IAAI9yB,CAAC,GAAG,IAAI,CAACoX,KAAK,CAAC4Y,MAAM,CAACxwB,MAAM,GAAG,CAAC,EAAEQ,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MACtD,MAAMuZ,KAAK,GAAG,IAAI,CAACnC,KAAK,CAAC4Y,MAAM,CAAChwB,CAAC,CAAC;MAClC,IAAIuZ,KAAK,CAAC29D,cAAc,KAAK9mE,IAAI,CAACzR,KAAK,EAAE;QACvC4a,KAAK,CAAC29D,cAAc,GAAG,IAAI,CAAC9/D,KAAK,CAACzY,KAAK;QACvC4a,KAAK,CAACzW,IAAI,GAAGA,IAAI;MACnB,CAAC,MAAM;QACL;MACF;IACF;IAEA,IAAI,CAACsU,KAAK,CAAC4Y,MAAM,CAAChc,IAAI,CAAC;MACrB1L,IAAI,EAAE4sE,SAAS;MACfpyE,IAAI,EAAEA,IAAI;MACVo0E,cAAc,EAAE,IAAI,CAAC9/D,KAAK,CAACzY;IAC7B,CAAC,CAAC;IAEFyR,IAAI,CAACmD,IAAI,GACP1C,KAAK,GAAGohE,kBAAkB,CAACK,oBAAoB,GAC3C,IAAI,CAAC9N,mCAAmC,CAAC,KAAK,CAAC,GAC/C,IAAI,CAACyP,cAAc,EAAE;IAE3B,IAAI,CAAC78D,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IACvBpU,IAAI,CAACmJ,KAAK,GAAG+1B,IAAI;IACjB,OAAO,IAAI,CAACv6B,UAAU,CAAC3E,IAAI,EAAE,kBAAkB,CAAC;EAClD;EAEAi/B,wBAAwB,CACtBj/B,IAAmC,EACnCk/B,IAAkB,EAElBp4B,UAAgC,EAChC;IACA9G,IAAI,CAAC4B,UAAU,GAAGs9B,IAAI;IACtB,IAAI,CAACrQ,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,qBAAqB,CAAC;EACrD;EAMAq0D,UAAU,GAKU;IAAA,IAHlBxxD,eAAwB,uEAAG,KAAK;IAAA,IAChCyxD,qBAA8B,uEAAG,IAAI;IAAA,IACrCvxD,eAA2D;IAE3D,MAAM/C,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAoB;IAC/C,IAAI5B,eAAe,EAAE;MACnB,IAAI,CAACmE,KAAK,CAACkZ,YAAY,CAACgG,KAAK,EAAE;IACjC;IACA,IAAI,CAAC6I,MAAM,CAAW;IACtB,IAAIulC,qBAAqB,EAAE;MACzB,IAAI,CAAC75C,KAAK,CAACF,KAAK,CAACnE,WAAW,CAAC;IAC/B;IACA,IAAI,CAACxT,cAAc,CACjB5C,IAAI,EACJ6C,eAAe,EACf,KAAK,EAELE,kBAAe,CAChB;IACD,IAAIuxD,qBAAqB,EAAE;MACzB,IAAI,CAAC75C,KAAK,CAACD,IAAI,EAAE;IACnB;IACA,OAAO,IAAI,CAAC7V,UAAU,CAAC3E,IAAI,EAAE,gBAAgB,CAAC;EAChD;EAEAyC,gBAAgB,CAACT,IAAiB,EAAW;IAC3C,OACEA,IAAI,CAAC1P,IAAI,KAAK,qBAAqB,IACnC0P,IAAI,CAACJ,UAAU,CAACtP,IAAI,KAAK,eAAe,IACxC,CAAC0P,IAAI,CAACJ,UAAU,CAACE,KAAK,CAACa,aAAa;EAExC;EAEAC,cAAc,CAEZ5C,IAAkC,EAClC6C,eAA2C,EAC3CC,QAAiB,EACjBtU,GAAc,EACduU,eAA2D,EACrD;IACN,MAAMI,IAAkC,GAAInD,IAAI,CAACmD,IAAI,GAAG,EAAG;IAC3D,MAAMF,UAA8C,GAAIjD,IAAI,CAACiD,UAAU,GACrE,EAAG;IACL,IAAI,CAACooD,2BAA2B,CAC9BloD,IAAI,EACJN,eAAe,GAAGI,UAAU,GAAGmZ,SAAS,EACxCtZ,QAAQ,EACRtU,GAAG,EACHuU,eAAe,CAChB;EACH;EAKAsoD,2BAA2B,CAEzBloD,IAAmB,EACnBF,UAA4C,EAC5CH,QAAiB,EACjBtU,GAAc,EACduU,eAA2D,EACrD;IACN,MAAM0xD,SAAS,GAAG,IAAI,CAACztD,KAAK,CAACkO,MAAM;IACnC,IAAIgrD,sBAAsB,GAAG,KAAK;IAClC,IAAI6G,kBAAkB,GAAG,KAAK;IAE9B,OAAO,CAAC,IAAI,CAACrkD,KAAK,CAACl0B,GAAG,CAAC,EAAE;MACvB,MAAMwT,IAAI,GAAGc,QAAQ,GACjB,IAAI,CAAC4gE,eAAe,EAAE,GACtB,IAAI,CAACC,sBAAsB,EAAE;MAEjC,IAAI1gE,UAAU,IAAI,CAAC8jE,kBAAkB,EAAE;QACrC,IAAI,IAAI,CAACtkE,gBAAgB,CAACT,IAAI,CAAC,EAAE;UAC/B,MAAML,SAAS,GAAG,IAAI,CAACwhE,eAAe,CAACnhE,IAAI,CAAC;UAC5CiB,UAAU,CAACW,IAAI,CAACjC,SAAS,CAAC;UAE1B,IACE,CAACu+D,sBAAsB,IACvBv+D,SAAS,CAACjS,KAAK,CAACA,KAAK,KAAK,YAAY,EACtC;YACAwwE,sBAAsB,GAAG,IAAI;YAC7B,IAAI,CAACn6C,SAAS,CAAC,IAAI,CAAC;UACtB;UAEA;QACF;QACAghD,kBAAkB,GAAG,IAAI;QAEzB,IAAI,CAAC//D,KAAK,CAACkZ,YAAY,CAACgG,KAAK,EAAE;MACjC;MACA/iB,IAAI,CAACS,IAAI,CAAC5B,IAAI,CAAC;IACjB;IAEA,IAAIe,eAAe,EAAE;MACnBA,eAAe,CAAC4hC,IAAI,CAAC,IAAI,EAAEu7B,sBAAsB,CAAC;IACpD;IAEA,IAAI,CAACzL,SAAS,EAAE;MACd,IAAI,CAAC1uC,SAAS,CAAC,KAAK,CAAC;IACvB;IAEA,IAAI,CAAC/P,IAAI,EAAE;EACb;EAMAyvD,QAAQ,CAENzlE,IAA4B,EAC5BogB,IAAkD,EAClC;IAChBpgB,IAAI,CAACogB,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACyO,SAAS,CAAgB,KAAK,CAAC;IACpC7uB,IAAI,CAAC8U,IAAI,GAAG,IAAI,CAAC4N,KAAK,CAAS,MAAG,IAAI,GAAG,IAAI,CAAC0U,eAAe,EAAE;IAC/D,IAAI,CAACvI,SAAS,CAAgB,KAAK,CAAC;IACpC7uB,IAAI,CAAC27D,MAAM,GAAG,IAAI,CAACj5C,KAAK,CAAW,MAAG,IAAI,GAAG,IAAI,CAAC0U,eAAe,EAAE;IACnE,IAAI,CAACrI,MAAM,CAAW;IAGtB/uB,IAAI,CAACmD,IAAI,GAIP,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAAC+C,cAAc,EAAE,CACtB;IAEH,IAAI,CAACppD,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxT,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACzP,UAAU,CAAC3E,IAAI,EAAE,cAAc,CAAC;EAC9C;EAKAgmE,UAAU,CAERhmE,IAAuB,EACvBogB,IAAiD,EACjDolD,OAAyB,EACd;IACX,MAAMO,OAAO,GAAG,IAAI,CAACrjD,KAAK,CAAQ;IAClC,IAAI,CAAC1M,IAAI,EAAE;IAEX,IAAI+vD,OAAO,EAAE;MACX,IAAIP,OAAO,KAAK,IAAI,EAAE,IAAI,CAACtuE,UAAU,CAACsuE,OAAO,CAAC;IAChD,CAAC,MAAM;MACLxlE,IAAI,CAACgnE,KAAK,GAAGxB,OAAO,KAAK,IAAI;IAC/B;IAEA,IACEplD,IAAI,CAAC9tB,IAAI,KAAK,qBAAqB,IACnC8tB,IAAI,CAAC+uC,YAAY,CAAC,CAAC,CAAC,CAAC/uC,IAAI,IAAI,IAAI,KAChC,CAAC2lD,OAAO,IACP,IAAI,CAAC/+D,KAAK,CAACkO,MAAM,IACjBkL,IAAI,CAAC1tB,IAAI,KAAK,KAAK,IACnB0tB,IAAI,CAAC+uC,YAAY,CAAC,CAAC,CAAC,CAAClrD,EAAE,CAAC3R,IAAI,KAAK,YAAY,CAAC,EAChD;MACA,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC3K,sBAAsB,EAAE;QACxCqR,EAAE,EAAEia,IAAI;QACR9tB,IAAI,EAAEyzE,OAAO,GAAG,gBAAgB,GAAG;MACrC,CAAC,CAAC;IACJ;IAEA,IAAI3lD,IAAI,CAAC9tB,IAAI,KAAK,mBAAmB,EAAE;MACrC,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC7I,UAAU,EAAE;QAC5BuP,EAAE,EAAEia,IAAI;QACRvpB,QAAQ,EAAE;UAAEvE,IAAI,EAAE;QAAe;MACnC,CAAC,CAAC;IACJ;IAEA0N,IAAI,CAAC6hC,IAAI,GAAGzhB,IAAI;IAChBpgB,IAAI,CAAC06B,KAAK,GAAGqrC,OAAO,GAChB,IAAI,CAAC3uC,eAAe,EAAE,GACtB,IAAI,CAAC4I,uBAAuB,EAAE;IAClC,IAAI,CAACjR,MAAM,CAAW;IAGtB/uB,IAAI,CAACmD,IAAI,GAIP,IAAI,CAAC29D,kCAAkC,CAAC,MAEtC,IAAI,CAAC+C,cAAc,EAAE,CACtB;IAEH,IAAI,CAACppD,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxT,KAAK,CAAC4Y,MAAM,CAACxL,GAAG,EAAE;IAEvB,OAAO,IAAI,CAACzP,UAAU,CAAC3E,IAAI,EAAE+lE,OAAO,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;EAC7E;EAIAD,QAAQ,CAEN9lE,IAAmC,EACnCinE,KAAc,EACdv0E,IAAuC,EAER;IAAA,IAD/Bw8D,uBAAgC,uEAAG,KAAK;IAExC,MAAMC,YAAoC,GAAInvD,IAAI,CAACmvD,YAAY,GAAG,EAAG;IACrEnvD,IAAI,CAACtN,IAAI,GAAGA,IAAI;IAChB,SAAS;MACP,MAAMkuC,IAAI,GAAG,IAAI,CAACn8B,SAAS,EAAwB;MACnD,IAAI,CAACggC,UAAU,CAAC7D,IAAI,EAAEluC,IAAI,CAAC;MAC3BkuC,IAAI,CAACxgB,IAAI,GAAG,CAAC,IAAI,CAAC8E,GAAG,IAAO,GACxB,IAAI,GACJ+hD,KAAK,GACL,IAAI,CAACnN,0BAA0B,EAAE,GACjC,IAAI,CAAC95B,uBAAuB,EAAE;MAElC,IAAIY,IAAI,CAACxgB,IAAI,KAAK,IAAI,IAAI,CAAC8uC,uBAAuB,EAAE;QAClD,IACEtuB,IAAI,CAAC38B,EAAE,CAAC3R,IAAI,KAAK,YAAY,IAC7B,EAAE20E,KAAK,KAAK,IAAI,CAACvkD,KAAK,IAAQ,IAAI,IAAI,CAACuL,YAAY,KAAQ,CAAC,CAAC,EAC7D;UACA,IAAI,CAAC/nB,KAAK,CAACzG,MAAM,CAAC/L,6BAA6B,EAAE;YAC/CyS,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB,aAAa;YAC5B3V,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,MAAM,IACLA,IAAI,KAAK,OAAO,IAChB,EAAE,IAAI,CAACgwB,KAAK,IAAQ,IAAI,IAAI,CAACuL,YAAY,KAAQ,CAAC,EAClD;UACA,IAAI,CAAC/nB,KAAK,CAACzG,MAAM,CAAC/L,6BAA6B,EAAE;YAC/CyS,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB,aAAa;YAC5B3V,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF;MACAy8D,YAAY,CAACvrD,IAAI,CAAC,IAAI,CAACe,UAAU,CAACi8B,IAAI,EAAE,oBAAoB,CAAC,CAAC;MAC9D,IAAI,CAAC,IAAI,CAAC1b,GAAG,IAAU,EAAE;IAC3B;IACA,OAAOllB,IAAI;EACb;EAEAykC,UAAU,CAER7D,IAAkC,EAClCluC,IAAuC,EACjC;IACN,MAAMuR,EAAE,GAAG,IAAI,CAACqgC,gBAAgB,EAAE;IAClC,IAAI,CAACk0B,SAAS,CAACv0D,EAAE,EAAE;MACjBw0D,EAAE,EAAE;QAAEnmE,IAAI,EAAE;OAAsB;MAClCmT,OAAO,EAAE/S,IAAI,KAAK,KAAK,GAAGmlB,QAAQ,GAAGD;IACvC,CAAC,CAAC;IACFgpB,IAAI,CAAC38B,EAAE,GAAGA,EAAE;EACd;EAGAu5D,4BAA4B,CAE1Bx9D,IAAkC,EACZ;IACtB,OAAO,IAAI,CAACk+D,aAAa,CAACl+D,IAAI,EAAEuhE,iBAAiB,CAACK,KAAK,CAAC;EAC1D;EAKA1D,aAAa,CAEXl+D,IAAe,EAEZ;IAAA,IADHS,KAAwB,uEAAG8gE,iBAAiB,CAACC,UAAU;IAEvD,MAAM0F,kBAAkB,GAAGzmE,KAAK,GAAG8gE,iBAAiB,CAACG,kBAAkB;IACvE,MAAMyF,aAAa,GAAG,CAAC,EAAE1mE,KAAK,GAAG8gE,iBAAiB,CAACE,WAAW,CAAC;IAC/D,MAAMjN,SAAS,GAAG2S,aAAa,IAAI,EAAE1mE,KAAK,GAAG8gE,iBAAiB,CAACI,UAAU,CAAC;IAC1E,MAAMx/D,OAAO,GAAG,CAAC,EAAE1B,KAAK,GAAG8gE,iBAAiB,CAACK,KAAK,CAAC;IAEnD,IAAI,CAAC1/D,YAAY,CAAClC,IAAI,EAAEmC,OAAO,CAAC;IAEhC,IAAI,IAAI,CAACugB,KAAK,IAAS,EAAE;MACvB,IAAIwkD,kBAAkB,EAAE;QACtB,IAAI,CAAChhE,KAAK,CAACzG,MAAM,CAACvK,iCAAiC,EAAE;UACnDiR,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACA,IAAI,CAAC2Q,IAAI,EAAE;MACXhW,IAAI,CAACggE,SAAS,GAAG,IAAI;IACvB;IAEA,IAAImH,aAAa,EAAE;MACjBnnE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACswD,eAAe,CAACC,SAAS,CAAC;IAC3C;IAEA,MAAMvH,yBAAyB,GAAG,IAAI,CAACjmD,KAAK,CAACgY,sBAAsB;IACnE,IAAI,CAAChY,KAAK,CAACgY,sBAAsB,GAAG,KAAK;IACzC,IAAI,CAACvE,KAAK,CAACF,KAAK,CAACjE,cAAc,CAAC;IAChC,IAAI,CAACka,SAAS,CAACjW,KAAK,CAACuT,aAAa,CAAC3rB,OAAO,EAAEnC,IAAI,CAACggE,SAAS,CAAC,CAAC;IAE5D,IAAI,CAACmH,aAAa,EAAE;MAClBnnE,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACswD,eAAe,EAAE;IAClC;IAEA,IAAI,CAAChwB,mBAAmB,CAACvkC,IAAI,EAAuB,KAAK,CAAC;IAK1D,IAAI,CAAC8gE,kCAAkC,CAAC,MAAM;MAE5C,IAAI,CAAChiC,0BAA0B,CAC7B9+B,IAAI,EACJmnE,aAAa,GAAG,qBAAqB,GAAG,oBAAoB,CAC7D;IACH,CAAC,CAAC;IAEF,IAAI,CAAC32C,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IAEjB,IAAI2sD,aAAa,IAAI,CAACD,kBAAkB,EAAE;MAIxC,IAAI,CAACtZ,2BAA2B,CAAC5tD,IAAI,CAAM;IAC7C;IAEA,IAAI,CAACgH,KAAK,CAACgY,sBAAsB,GAAGiuC,yBAAyB;IAC7D,OAAOjtD,IAAI;EACb;EAEAu0D,eAAe,CAACC,SAAmB,EAAmC;IACpE,OAAOA,SAAS,IAAIzhD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,GAClD,IAAI,CAAColC,eAAe,EAAE,GACtB,IAAI;EACV;EAEA6M,mBAAmB,CAEjBvkC,IAAwB,EACxBwkC,cAAwB,EAClB;IACN,IAAI,CAACzV,MAAM,CAAW;IACtB,IAAI,CAAC2B,eAAe,CAACnW,KAAK,CAACuS,4BAA4B,EAAE,CAAC;IAC1D9sB,IAAI,CAACwC,MAAM,GAAG,IAAI,CAAC0iD,gBAAgB,CAGhB,aAAK,EACtB1gB,cAAc,CACf;IAED,IAAI,CAAC9T,eAAe,CAAClW,IAAI,EAAE;EAC7B;EAEAozC,2BAA2B,CAAC5tD,IAAgB,EAAQ;IAClD,IAAI,CAACA,IAAI,CAACiE,EAAE,EAAE;IAMd,IAAI,CAACwW,KAAK,CAACC,WAAW,CACpB1a,IAAI,CAACiE,EAAE,CAAC/L,IAAI,EACZ,IAAI,CAAC8O,KAAK,CAACkO,MAAM,IAAIlV,IAAI,CAACggE,SAAS,IAAIhgE,IAAI,CAACqlC,KAAK,GAC7C,IAAI,CAAC5qB,KAAK,CAACL,mBAAmB,GAC5BvC,QAAQ,GACRD,YAAY,GACdE,aAAa,EACjB9X,IAAI,CAACiE,EAAE,CAACvF,GAAG,CAACnQ,KAAK,CAClB;EACH;EAKAi+D,UAAU,CAERxsD,IAAe,EACfqhC,WAAiD,EACjDC,UAAoB,EACjB;IACH,IAAI,CAACtrB,IAAI,EAAE;IAGX,MAAMy+C,SAAS,GAAG,IAAI,CAACztD,KAAK,CAACkO,MAAM;IACnC,IAAI,CAAClO,KAAK,CAACkO,MAAM,GAAG,IAAI;IAExB,IAAI,CAACksB,YAAY,CAACphC,IAAI,EAAEqhC,WAAW,EAAEC,UAAU,CAAC;IAChD,IAAI,CAACsB,eAAe,CAAC5iC,IAAI,CAAC;IAE1BA,IAAI,CAACmD,IAAI,GAAG,IAAI,CAACuxD,cAAc,CAAC,CAAC,CAAC10D,IAAI,CAACC,UAAU,EAAEw0D,SAAS,CAAC;IAE7D,OAAO,IAAI,CAAC9vD,UAAU,CACpB3E,IAAI,EACJqhC,WAAW,GAAG,kBAAkB,GAAG,iBAAiB,CACrD;EACH;EAEAmB,eAAe,GAAY;IACzB,OAAO,IAAI,CAAC9f,KAAK,IAAO,IAAI,IAAI,CAACA,KAAK,CAAS,OAAI,IAAI,CAACA,KAAK,CAAW;EAC1E;EAEA6f,aAAa,GAAY;IACvB,OAAO,IAAI,CAAC7f,KAAK,CAAW;EAC9B;EAEA+f,sBAAsB,CAAClgC,MAAuC,EAAW;IACvE,OACE,CAACA,MAAM,CAACmC,QAAQ,IAChB,CAACnC,MAAM,CAACu5B,MAAM,KACbv5B,MAAM,CAAC/S,GAAG,CAAC0I,IAAI,KAAK,aAAa,IAChCqK,MAAM,CAAC/S,GAAG,CAACE,KAAK,KAAK,aAAa,CAAC;EAEzC;EAGAglE,cAAc,CAEZ/E,aAAsB,EACtB8E,SAAkB,EACL;IACb,IAAI,CAAC3uD,UAAU,CAACyU,KAAK,EAAE;IAEvB,MAAMvT,KAA8B,GAAG;MACrCogE,cAAc,EAAE,KAAK;MACrBzX;KACD;IACD,IAAI7oD,UAAyB,GAAG,EAAE;IAClC,MAAMxD,SAAS,GAAG,IAAI,CAACmB,SAAS,EAAe;IAC/CnB,SAAS,CAACH,IAAI,GAAG,EAAE;IAEnB,IAAI,CAAC4rB,MAAM,CAAW;IAItB,IAAI,CAAC+xC,kCAAkC,CAAC,MAAM;MAE5C,OAAO,CAAC,IAAI,CAACp+C,KAAK,GAAW,EAAE;QAC7B,IAAI,IAAI,CAACwC,GAAG,IAAS,EAAE;UACrB,IAAIpe,UAAU,CAAC1X,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAC1L,kBAAkB,EAAE;cAC1CoS,EAAE,EAAE,IAAI,CAACa,KAAK,CAACqB;YACjB,CAAC,CAAC;UACJ;UACA;QACF;QAEA,IAAI,IAAI,CAACqa,KAAK,IAAO,EAAE;UACrB5b,UAAU,CAAClD,IAAI,CAAC,IAAI,CAACw0D,cAAc,EAAE,CAAC;UACtC;QACF;QAEA,MAAM52B,MAAM,GAAG,IAAI,CAAC/8B,SAAS,EAAiB;QAG9C,IAAIqC,UAAU,CAAC1X,MAAM,EAAE;UAErBoyC,MAAM,CAAC16B,UAAU,GAAGA,UAAU;UAC9B,IAAI,CAACgrB,0BAA0B,CAAC0P,MAAM,EAAE16B,UAAU,CAAC,CAAC,CAAC,CAAC;UACtDA,UAAU,GAAG,EAAE;QACjB;QAEA,IAAI,CAACy6B,gBAAgB,CAACj+B,SAAS,EAAEk+B,MAAM,EAAEx6B,KAAK,CAAC;QAE/C,IAEEw6B,MAAM,CAAC9uC,IAAI,KAAK,aAAa,IAE7B8uC,MAAM,CAAC16B,UAAU,IAEjB06B,MAAM,CAAC16B,UAAU,CAAC1X,MAAM,GAAG,CAAC,EAC5B;UACA,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAC5L,oBAAoB,EAAE;YAAEsS,EAAE,EAAEq7B;UAAO,CAAC,CAAC;QACzD;MACF;IACF,CAAC,CAAC;IAEF,IAAI,CAACx6B,KAAK,CAACkO,MAAM,GAAGu/C,SAAS;IAE7B,IAAI,CAACz+C,IAAI,EAAE;IAEX,IAAIlP,UAAU,CAAC1X,MAAM,EAAE;MACrB,MAAM,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAClF,iBAAiB,EAAE;QAAE4L,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IACzE;IAEA,IAAI,CAACS,UAAU,CAAC0U,IAAI,EAAE;IAEtB,OAAO,IAAI,CAAC7V,UAAU,CAACrB,SAAS,EAAE,WAAW,CAAC;EAChD;EAIAm+B,4BAA4B,CAE1Bn+B,SAA8B,EAC9Bk+B,MAA6B,EACpB;IACT,MAAMhyC,GAAG,GAAG,IAAI,CAACkoC,eAAe,CAAC,IAAI,CAAC;IAEtC,IAAI,IAAI,CAAC6K,aAAa,EAAE,EAAE;MACxB,MAAMhgC,MAAqB,GAAGi/B,MAAa;MAG3Cj/B,MAAM,CAAC7P,IAAI,GAAG,QAAQ;MACtB6P,MAAM,CAACmC,QAAQ,GAAG,KAAK;MACvBnC,MAAM,CAAC/S,GAAG,GAAGA,GAAG;MAChB+S,MAAM,CAACu5B,MAAM,GAAG,KAAK;MACrB,IAAI,CAACz4B,eAAe,CAClBC,SAAS,EACTf,MAAM,EACN,KAAK,EACL,KAAK,EACe,KAAK,EACzB,KAAK,CACN;MACD,OAAO,IAAI;IACb,CAAC,MAAM,IAAI,IAAI,CAACigC,eAAe,EAAE,EAAE;MACjC,MAAMx9B,IAAqB,GAAGw8B,MAAa;MAG3Cx8B,IAAI,CAACN,QAAQ,GAAG,KAAK;MACrBM,IAAI,CAACxV,GAAG,GAAGA,GAAG;MACdwV,IAAI,CAAC82B,MAAM,GAAG,KAAK;MACnBx4B,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC,IAAI,CAACgB,kBAAkB,CAACI,IAAI,CAAC,CAAC;MAClD,OAAO,IAAI;IACb;IACA,IAAI,CAACgZ,iCAAiC,CAACxuB,GAAG,CAAC;IAC3C,OAAO,KAAK;EACd;EAEA+xC,gBAAgB,CAEdj+B,SAA8B,EAC9Bk+B,MAA6B,EAC7Bx6B,KAA8B,EACxB;IACN,MAAM60B,QAAQ,GAAG,IAAI,CAAC5N,YAAY,CAAY;IAE9C,IAAI4N,QAAQ,EAAE;MACZ,IAAI,IAAI,CAAC4F,4BAA4B,CAACn+B,SAAS,EAAEk+B,MAAM,CAAC,EAAE;QAExD;MACF;MACA,IAAI,IAAI,CAACtc,GAAG,GAAW,EAAE;QACvB,IAAI,CAACuqC,qBAAqB,CAACnsD,SAAS,EAAEk+B,MAAM,CAAyB;QACrE;MACF;IACF;IAEA,IAAI,CAACkuB,4BAA4B,CAACpsD,SAAS,EAAEk+B,MAAM,EAAEx6B,KAAK,EAAE60B,QAAQ,CAAC;EACvE;EAEA6zB,4BAA4B,CAE1BpsD,SAA8B,EAC9Bk+B,MAA6B,EAC7Bx6B,KAA8B,EAC9B60B,QAAiB,EACjB;IACA,MAAMwrC,YAAY,GAAG7lC,MAAuB;IAC5C,MAAM8lC,aAAa,GAAG9lC,MAA8B;IACpD,MAAM+lC,UAAU,GAAG/lC,MAAyB;IAC5C,MAAMgmC,WAAW,GAAGhmC,MAAgC;IACpD,MAAMimC,YAAY,GAAGjmC,MAAiC;IAEtD,MAAMj/B,MAAkD,GAAG8kE,YAAY;IACvE,MAAMK,YAAqD,GAAGL,YAAY;IAE1E7lC,MAAM,CAAC1F,MAAM,GAAGD,QAAQ;IACxB,IAAI,CAACmH,+BAA+B,CAACxB,MAAM,CAAC;IAE5C,IAAI,IAAI,CAACtc,GAAG,IAAS,EAAE;MAErB3iB,MAAM,CAAC7P,IAAI,GAAG,QAAQ;MACtB,MAAMwR,aAAa,GAAG,IAAI,CAACwe,KAAK,CAAgB;MAChD,IAAI,CAACilD,qBAAqB,CAACplE,MAAM,CAAC;MAElC,IAAI2B,aAAa,EAAE;QAEjB,IAAI,CAACy+B,sBAAsB,CAACr/B,SAAS,EAAEgkE,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC;QAClE;MACF;MAEA,IAAI,IAAI,CAAC7kC,sBAAsB,CAAC4kC,YAAY,CAAC,EAAE;QAC7C,IAAI,CAACnhE,KAAK,CAACzG,MAAM,CAAChM,sBAAsB,EAAE;UACxC0S,EAAE,EAAEkhE,YAAY,CAAC73E;QACnB,CAAC,CAAC;MACJ;MAEA,IAAI,CAAC6T,eAAe,CAClBC,SAAS,EACT+jE,YAAY,EACZ,IAAI,EACJ,KAAK,EACe,KAAK,EACzB,KAAK,CACN;MAED;IACF;IAEA,MAAMp5C,YAAY,GAChBlb,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAW;IAC/D,MAAM4nD,SAAS,GAAG,IAAI,CAACllD,KAAK,CAAgB;IAC5C,MAAMlzB,GAAG,GAAG,IAAI,CAACm4E,qBAAqB,CAACnmC,MAAM,CAAC;IAC9C,MAAMqmC,0BAA0B,GAAG,IAAI,CAAC7gE,KAAK,CAAC3B,QAAQ;IAEtD,IAAI,CAACuqD,4BAA4B,CAAC8X,YAAY,CAAC;IAE/C,IAAI,IAAI,CAACnlC,aAAa,EAAE,EAAE;MACxBhgC,MAAM,CAAC7P,IAAI,GAAG,QAAQ;MAEtB,IAAIk1E,SAAS,EAAE;QACb,IAAI,CAACjlC,sBAAsB,CAACr/B,SAAS,EAAEgkE,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;QACnE;MACF;MAGA,MAAM9jE,aAAa,GAAG,IAAI,CAACi/B,sBAAsB,CAAC4kC,YAAY,CAAC;MAC/D,IAAI5jE,iBAAiB,GAAG,KAAK;MAC7B,IAAID,aAAa,EAAE;QACjB6jE,YAAY,CAAC30E,IAAI,GAAG,aAAa;QAGjC,IAAIsU,KAAK,CAACogE,cAAc,IAAI,CAAC,IAAI,CAAC1gE,SAAS,CAAC,YAAY,CAAC,EAAE;UACzD,IAAI,CAACR,KAAK,CAACzG,MAAM,CAACtL,oBAAoB,EAAE;YAAEgS,EAAE,EAAE3W;UAAI,CAAC,CAAC;QACtD;QACA,IAAIgU,aAAa,IAAI,IAAI,CAACkD,SAAS,CAAC,YAAY,CAAC,IAAI86B,MAAM,CAAC8rB,QAAQ,EAAE;UACpE,IAAI,CAACpnD,KAAK,CAACzG,MAAM,CAACjG,qBAAqB,EAAE;YAAE2M,EAAE,EAAE3W;UAAI,CAAC,CAAC;QACvD;QACAwX,KAAK,CAACogE,cAAc,GAAG,IAAI;QAC3B3jE,iBAAiB,GAAGuD,KAAK,CAAC2oD,aAAa;MACzC;MAEA,IAAI,CAACtsD,eAAe,CAClBC,SAAS,EACT+jE,YAAY,EACZ,KAAK,EACL,KAAK,EACL7jE,aAAa,EACbC,iBAAiB,CAClB;IACH,CAAC,MAAM,IAAI,IAAI,CAAC++B,eAAe,EAAE,EAAE;MACjC,IAAIolC,SAAS,EAAE;QACb,IAAI,CAACE,wBAAwB,CAACxkE,SAAS,EAAEkkE,WAAW,CAAC;MACvD,CAAC,MAAM;QACL,IAAI,CAACO,iBAAiB,CAACzkE,SAAS,EAAEikE,UAAU,CAAC;MAC/C;IACF,CAAC,MAAM,IACLt5C,YAAY,IACZz+B,GAAG,CAAC0I,IAAI,KAAK,OAAO,IACpB,CAAC,IAAI,CAAC02B,gBAAgB,EAAE,EACxB;MAEA,IAAI,CAAC5Q,iCAAiC,CAACxuB,GAAG,CAAC;MAC3C,MAAM+T,WAAW,GAAG,IAAI,CAAC2hB,GAAG,CAAS;MAErC,IAAIwiD,YAAY,CAACphE,QAAQ,EAAE;QACzB,IAAI,CAACpP,UAAU,CAAC2wE,0BAA0B,CAAC;MAC7C;MAEAtlE,MAAM,CAAC7P,IAAI,GAAG,QAAQ;MAEtB,MAAMk1E,SAAS,GAAG,IAAI,CAACllD,KAAK,CAAgB;MAC5C,IAAI,CAACilD,qBAAqB,CAACplE,MAAM,CAAC;MAClC,IAAI,CAACqtD,4BAA4B,CAAC8X,YAAY,CAAC;MAE/C,IAAIE,SAAS,EAAE;QAEb,IAAI,CAACjlC,sBAAsB,CACzBr/B,SAAS,EACTgkE,aAAa,EACb/jE,WAAW,EACX,IAAI,CACL;MACH,CAAC,MAAM;QACL,IAAI,IAAI,CAACk/B,sBAAsB,CAAC4kC,YAAY,CAAC,EAAE;UAC7C,IAAI,CAACnhE,KAAK,CAACzG,MAAM,CAACjM,kBAAkB,EAAE;YAAE2S,EAAE,EAAEkhE,YAAY,CAAC73E;UAAI,CAAC,CAAC;QACjE;QAEA,IAAI,CAAC6T,eAAe,CAClBC,SAAS,EACT+jE,YAAY,EACZ9jE,WAAW,EACX,IAAI,EACgB,KAAK,EACzB,KAAK,CACN;MACH;IACF,CAAC,MAAM,IACL0qB,YAAY,KACXz+B,GAAG,CAAC0I,IAAI,KAAK,KAAK,IAAI1I,GAAG,CAAC0I,IAAI,KAAK,KAAK,CAAC,IAC1C,EAAE,IAAI,CAACwqB,KAAK,IAAS,IAAI,IAAI,CAACkM,gBAAgB,EAAE,CAAC,EACjD;MAGA,IAAI,CAAC5Q,iCAAiC,CAACxuB,GAAG,CAAC;MAC3C+S,MAAM,CAAC7P,IAAI,GAAGlD,GAAG,CAAC0I,IAAI;MAEtB,MAAM0vE,SAAS,GAAG,IAAI,CAACllD,KAAK,CAAgB;MAC5C,IAAI,CAACilD,qBAAqB,CAACN,YAAY,CAAC;MAExC,IAAIO,SAAS,EAAE;QAEb,IAAI,CAACjlC,sBAAsB,CAACr/B,SAAS,EAAEgkE,aAAa,EAAE,KAAK,EAAE,KAAK,CAAC;MACrE,CAAC,MAAM;QACL,IAAI,IAAI,CAAC7kC,sBAAsB,CAAC4kC,YAAY,CAAC,EAAE;UAC7C,IAAI,CAACnhE,KAAK,CAACzG,MAAM,CAAClM,qBAAqB,EAAE;YAAE4S,EAAE,EAAEkhE,YAAY,CAAC73E;UAAI,CAAC,CAAC;QACpE;QACA,IAAI,CAAC6T,eAAe,CAClBC,SAAS,EACT+jE,YAAY,EACZ,KAAK,EACL,KAAK,EACe,KAAK,EACzB,KAAK,CACN;MACH;MAEA,IAAI,CAACtkC,uBAAuB,CAACskC,YAAY,CAAC;IAC5C,CAAC,MAAM,IACLp5C,YAAY,IACZz+B,GAAG,CAAC0I,IAAI,KAAK,UAAU,IACvB,CAAC,IAAI,CAAC02B,gBAAgB,EAAE,EACxB;MACA,IAAI,CAAC1H,YAAY,CAAC,wBAAwB,CAAC;MAC3C,IAAI,CAAClJ,iCAAiC,CAACxuB,GAAG,CAAC;MAG3C,MAAMo4E,SAAS,GAAG,IAAI,CAACllD,KAAK,CAAgB;MAC5C,IAAI,CAACilD,qBAAqB,CAACJ,UAAU,CAAC;MACtC,IAAI,CAACS,yBAAyB,CAAC1kE,SAAS,EAAEmkE,YAAY,EAAEG,SAAS,CAAC;IACpE,CAAC,MAAM,IAAI,IAAI,CAACh5C,gBAAgB,EAAE,EAAE;MAElC,IAAIg5C,SAAS,EAAE;QACb,IAAI,CAACE,wBAAwB,CAACxkE,SAAS,EAAEkkE,WAAW,CAAC;MACvD,CAAC,MAAM;QACL,IAAI,CAACO,iBAAiB,CAACzkE,SAAS,EAAEikE,UAAU,CAAC;MAC/C;IACF,CAAC,MAAM;MACL,IAAI,CAACrwE,UAAU,EAAE;IACnB;EACF;EAGAywE,qBAAqB,CAEnBnmC,MAA6B,EACA;IAC7B,MAAM;MAAElvC,IAAI;MAAE5C;KAAO,GAAG,IAAI,CAACsX,KAAK;IAClC,IACE,CAAC1U,IAAI,KAAY,OAAIA,IAAI,KAAc,QACvCkvC,MAAM,CAAC1F,MAAM,IACbpsC,KAAK,KAAK,WAAW,EACrB;MACA,IAAI,CAACwW,KAAK,CAACzG,MAAM,CAACrF,eAAe,EAAE;QAAE+L,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MAAS,CAAC,CAAC;IACjE;IAEA,IAAI/S,IAAI,QAAmB,EAAE;MAC3B,IAAI5C,KAAK,KAAK,aAAa,EAAE;QAC3B,IAAI,CAACwW,KAAK,CAACzG,MAAM,CAACnM,4BAA4B,EAAE;UAC9C6S,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACA,MAAM7V,GAAG,GAAG,IAAI,CAACqU,gBAAgB,EAAE;MACnC29B,MAAM,CAAChyC,GAAG,GAAGA,GAAG;MAChB,OAAOA,GAAG;IACZ;IAEA,OAAO,IAAI,CAACw2D,iBAAiB,CAACxkB,MAAM,CAAC;EACvC;EAEAiuB,qBAAqB,CAEnBnsD,SAA8B,EAC9Bk+B,MAIC,EACD;IAAA;IAEA,IAAI,CAAC/mB,KAAK,CAACF,KAAK,CAAC5D,WAAW,GAAGC,kBAAkB,GAAGH,WAAW,CAAC;IAEhE,MAAMwZ,SAAS,GAAG,IAAI,CAACjpB,KAAK,CAAC4Y,MAAM;IACnC,IAAI,CAAC5Y,KAAK,CAAC4Y,MAAM,GAAG,EAAE;IAGtB,IAAI,CAAC4Q,SAAS,CAACjW,KAAK,CAAC2S,KAAK,CAAC;IAC3B,MAAM/pB,IAAc,GAAIq+B,MAAM,CAACr+B,IAAI,GAAG,EAAG;IACzC,IAAI,CAACkoD,2BAA2B,CAACloD,IAAI,EAAEiZ,SAAS,EAAE,KAAK,EAAY;IACnE,IAAI,CAACoU,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;IACjB,IAAI,CAACxT,KAAK,CAAC4Y,MAAM,GAAGqQ,SAAS;IAC7B3sB,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC,IAAI,CAACe,UAAU,CAAgB68B,MAAM,EAAE,aAAa,CAAC,CAAC;IAC1E,0BAAIA,MAAM,CAAC16B,UAAU,KAAjB,2BAAmB1X,MAAM,EAAE;MAC7B,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAACzL,oBAAoB,EAAE;QAAEmS,EAAE,EAAEq7B;MAAO,CAAC,CAAC;IACzD;EACF;EAEAumC,iBAAiB,CAEfzkE,SAA8B,EAC9B0B,IAAqB,EACrB;IACA,IACE,CAACA,IAAI,CAACN,QAAQ,KACbM,IAAI,CAACxV,GAAG,CAAC0I,IAAI,KAAK,aAAa,IAAI8M,IAAI,CAACxV,GAAG,CAACE,KAAK,KAAK,aAAa,CAAC,EACrE;MAGA,IAAI,CAACwW,KAAK,CAACzG,MAAM,CAACpM,qBAAqB,EAAE;QAAE8S,EAAE,EAAEnB,IAAI,CAACxV;MAAI,CAAC,CAAC;IAC5D;IAEA8T,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC,IAAI,CAACgB,kBAAkB,CAACI,IAAI,CAAC,CAAC;EACpD;EAEA8iE,wBAAwB,CAEtBxkE,SAA8B,EAC9B0B,IAAoC,EACpC;IACA,MAAMhF,IAAI,GAAG,IAAI,CAAC8E,yBAAyB,CAACE,IAAI,CAAC;IACjD1B,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC5D,IAAI,CAAC;IAEzB,IAAI,CAAC8F,UAAU,CAAColB,kBAAkB,CAChC,IAAI,CAAClnB,gBAAgB,CAAChE,IAAI,CAACxQ,GAAG,CAAC,EAC/BypB,mBAAmB,EACnBjZ,IAAI,CAACxQ,GAAG,CAACkP,GAAG,CAACnQ,KAAK,CACnB;EACH;EAEAy5E,yBAAyB,CAEvB1kE,SAA8B,EAC9B0B,IAA6B,EAC7B4iE,SAAkB,EAClB;IACA,IAAI,CAACA,SAAS,IAAI,CAAC5iE,IAAI,CAACN,QAAQ,EAAE;MAEhC,MAAMlV,GAAG,GAAGwV,IAAI,CAACxV,GAAmB;MAEpC,IAAIA,GAAG,CAAC0I,IAAI,KAAK,aAAa,IAAI1I,GAAG,CAACE,KAAK,KAAK,aAAa,EAAE;QAG7D,IAAI,CAACwW,KAAK,CAACzG,MAAM,CAACpM,qBAAqB,EAAE;UAAE8S,EAAE,EAAE3W;QAAI,CAAC,CAAC;MACvD;IACF;IAEA,MAAMwQ,IAAI,GAAG,IAAI,CAACkwD,0BAA0B,CAAClrD,IAAI,CAAC;IAClD1B,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC5D,IAAI,CAAC;IAEzB,IAAI4nE,SAAS,EAAE;MACb,IAAI,CAAC9hE,UAAU,CAAColB,kBAAkB,CAChC,IAAI,CAAClnB,gBAAgB,CAAChE,IAAI,CAACxQ,GAAG,CAAC,EAC/BypB,mBAAmB,EACnBjZ,IAAI,CAACxQ,GAAG,CAACkP,GAAG,CAACnQ,KAAK,CACnB;IACH;EACF;EAEA8U,eAAe,CAEbC,SAA8B,EAC9Bf,MAA6B,EAC7BgB,WAAoB,EACpBpB,OAAgB,EAChBqB,aAAsB,EACtBC,iBAA0B,EACpB;IACNH,SAAS,CAACH,IAAI,CAACS,IAAI,CACjB,IAAI,CAACF,WAAW,CACdnB,MAAM,EACNgB,WAAW,EACXpB,OAAO,EACPqB,aAAa,EACbC,iBAAiB,EACjB,aAAa,EACb,IAAI,CACL,CACF;EACH;EAEAk/B,sBAAsB,CAEpBr/B,SAA8B,EAC9Bf,MAAoC,EACpCgB,WAAoB,EACpBpB,OAAgB,EACV;IACN,MAAMnC,IAAI,GAAG,IAAI,CAAC0D,WAAW,CAC3BnB,MAAM,EACNgB,WAAW,EACXpB,OAAO,EACa,KAAK,EACzB,KAAK,EACL,oBAAoB,EACpB,IAAI,CACL;IACDmB,SAAS,CAACH,IAAI,CAACS,IAAI,CAAC5D,IAAI,CAAC;IAEzB,MAAMtN,IAAI,GACRsN,IAAI,CAACtN,IAAI,KAAK,KAAK,GACfsN,IAAI,CAAC87B,MAAM,GACTjjB,2BAA2B,GAC3BE,6BAA6B,GAC/B/Y,IAAI,CAACtN,IAAI,KAAK,KAAK,GACnBsN,IAAI,CAAC87B,MAAM,GACThjB,2BAA2B,GAC3BE,6BAA6B,GAC/BC,mBAAmB;IACzB,IAAI,CAACk3C,gCAAgC,CAACnwD,IAAI,EAAEtN,IAAI,CAAC;EACnD;EAEAy9D,gCAAgC,CAC9BnwD,IAEC,EACDtN,IAAY,EACZ;IACA,IAAI,CAACoT,UAAU,CAAColB,kBAAkB,CAChC,IAAI,CAAClnB,gBAAgB,CAAChE,IAAI,CAACxQ,GAAG,CAAC,EAC/BkD,IAAI,EACJsN,IAAI,CAACxQ,GAAG,CAACkP,GAAG,CAACnQ,KAAK,CACnB;EACH;EAGAqhE,4BAA4B,CAE1BC,YAAqD,EAC/C;EAGR/qD,yBAAyB,CAEvB9E,IAAoC,EACZ;IACxB,IAAI,CAACioE,gBAAgB,CAACjoE,IAAI,CAAC;IAC3B,IAAI,CAAC6uB,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;EACtD;EAGA4E,kBAAkB,CAAe5E,IAAqB,EAAmB;IACvE,IAAI,CAACioE,gBAAgB,CAACjoE,IAAI,CAAC;IAC3B,IAAI,CAAC6uB,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,eAAe,CAAC;EAC/C;EAEAkwD,0BAA0B,CAExBlwD,IAA6B,EACJ;IACzB,IAAI,CAACioE,gBAAgB,CAACjoE,IAAI,CAAC;IAC3B,IAAI,CAAC6uB,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,uBAAuB,CAAC;EACvD;EAGAioE,gBAAgB,CAEdjoE,IAEC,EACK;IACN,IAAI,CAACya,KAAK,CAACF,KAAK,CAAC5D,WAAW,GAAGF,WAAW,CAAC;IAC3C,IAAI,CAACia,eAAe,CAACnW,KAAK,CAAC0S,kBAAkB,EAAE,CAAC;IAChD,IAAI,CAACuD,SAAS,CAACjW,KAAK,CAAC2S,KAAK,CAAC;IAC3BltB,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAACw1B,GAAG,CAAO,MAAG,IAAI,CAAC8a,uBAAuB,EAAE,GAAG,IAAI;IACpE,IAAI,CAACtP,eAAe,CAAClW,IAAI,EAAE;IAC3B,IAAI,CAACgW,SAAS,CAAChW,IAAI,EAAE;IACrB,IAAI,CAACC,KAAK,CAACD,IAAI,EAAE;EACnB;EAEA4mB,YAAY,CACVphC,IAAqB,EACrBqhC,WAAoB,EACpBC,UAA2B,EAErB;IAAA,IADN3mB,WAAyB,uEAAGhD,UAAU;IAEtC,IAAI5E,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,EAAE;MACtC0N,IAAI,CAACiE,EAAE,GAAG,IAAI,CAACyzB,eAAe,EAAE;MAChC,IAAI2J,WAAW,EAAE;QACf,IAAI,CAAC83B,yBAAyB,CAACn5D,IAAI,CAACiE,EAAE,EAAE0W,WAAW,CAAC;MACtD;IACF,CAAC,MAAM;MACL,IAAI2mB,UAAU,IAAI,CAACD,WAAW,EAAE;QAC9BrhC,IAAI,CAACiE,EAAE,GAAG,IAAI;MAChB,CAAC,MAAM;QACL,MAAM,IAAI,CAACiC,KAAK,CAACzG,MAAM,CAAC5H,gBAAgB,EAAE;UAAEsO,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QAAS,CAAC,CAAC;MACxE;IACF;EACF;EAGAu9B,eAAe,CAAe5iC,IAAqB,EAAQ;IACzDA,IAAI,CAACC,UAAU,GAAG,IAAI,CAACilB,GAAG,CAAa,MAAG,IAAI,CAAC82C,mBAAmB,EAAE,GAAG,IAAI;EAC7E;EAKAn1D,WAAW,CAET7G,IAIC,EACD8G,UAAgC,EACnB;IACb,MAAMohE,UAAU,GAAG,IAAI,CAACtT,gCAAgC,CAEtD50D,IAAI,CACL;IACD,MAAMmoE,iBAAiB,GAAG,CAACD,UAAU,IAAI,IAAI,CAAChjD,GAAG,CAAU;IAC3D,MAAMkjD,OAAO,GACXD,iBAAiB,IACjB,IAAI,CAAClnC,aAAa,CAEhBjhC,IAAI,CACL;IACH,MAAMmhC,YAAY,GAChBinC,OAAO,IACP,IAAI,CAAClnC,kCAAkC,CAErClhC,IAAI,CACL;IACH,MAAMqoE,mBAAmB,GACvBF,iBAAiB,KAAK,CAAChnC,YAAY,IAAI,IAAI,CAACjc,GAAG,IAAU,CAAC;IAC5D,MAAMojD,cAAc,GAAGJ,UAAU,IAAIE,OAAO;IAE5C,IAAIA,OAAO,IAAI,CAACjnC,YAAY,EAAE;MAC5B,IAAI+mC,UAAU,EAAE,IAAI,CAAChxE,UAAU,EAAE;MACjC,IAAI4P,UAAU,EAAE;QACd,MAAM,IAAI,CAACZ,KAAK,CAACzG,MAAM,CAAC5D,0BAA0B,EAAE;UAAEsK,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACnE;MACA,IAAI,CAACghC,eAAe,CAAChhC,IAAI,EAAsC,IAAI,CAAC;MAEpE,OAAO,IAAI,CAAC2E,UAAU,CAAC3E,IAAI,EAAE,sBAAsB,CAAC;IACtD;IAEA,MAAMuoE,aAAa,GAAG,IAAI,CAACC,+BAA+B,CAExDxoE,IAAI,CACL;IAED,IACGkoE,UAAU,IAAIC,iBAAiB,IAAI,CAACC,OAAO,IAAI,CAACG,aAAa,IAC7DpnC,YAAY,IAAIknC,mBAAmB,IAAI,CAACE,aAAc,EACvD;MACA,MAAM,IAAI,CAACrxE,UAAU,CAAC,IAAI,EAAY;IACxC;IAEA,IAAIuxE,cAAc;IAClB,IAAIH,cAAc,IAAIC,aAAa,EAAE;MACnCE,cAAc,GAAG,KAAK;MACtB,IAAI3hE,UAAU,EAAE;QACd,MAAM,IAAI,CAACZ,KAAK,CAACzG,MAAM,CAAC5D,0BAA0B,EAAE;UAAEsK,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACnE;MACA,IAAI,CAACghC,eAAe,CAClBhhC,IAAI,EACJsoE,cAAc,CACf;IACH,CAAC,MAAM;MACLG,cAAc,GAAG,IAAI,CAACC,2BAA2B,CAC/C1oE,IAAI,CACL;IACH;IAEA,IAAIsoE,cAAc,IAAIC,aAAa,IAAIE,cAAc,EAAE;MAAA;MACrD,MAAMtrC,KAAK,GAAGn9B,IAAwC;MACtD,IAAI,CAAC60D,WAAW,CAAC13B,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAACA,KAAK,CAAC32B,MAAM,CAAC;MACpD,IAAI,4BAAK,CAACY,WAAW,qBAAjBuhE,kBAAmBr2E,KAAI,MAAK,kBAAkB,EAAE;QAClD,IAAI,CAACy/D,mBAAmB,CAACjrD,UAAU,EAAEq2B,KAAK,CAAC/1B,WAAW,EAAE+1B,KAAK,CAAC;OAC/D,MAAM,IAAIr2B,UAAU,EAAE;QACrB,MAAM,IAAI,CAACZ,KAAK,CAACzG,MAAM,CAAC5D,0BAA0B,EAAE;UAAEsK,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACnE;MACA,OAAO,IAAI,CAAC2E,UAAU,CAACw4B,KAAK,EAAE,wBAAwB,CAAC;IACzD;IAEA,IAAI,IAAI,CAACjY,GAAG,IAAa,EAAE;MACzB,MAAMiY,KAAK,GAAGn9B,IAA0C;MAExD,MAAM4gC,IAAI,GAAG,IAAI,CAACvB,4BAA4B,EAAE;MAChDlC,KAAK,CAAC/1B,WAAW,GAAGw5B,IAAI;MAExB,IAAIA,IAAI,CAACtuC,IAAI,KAAK,kBAAkB,EAAE;QACpC,IAAI,CAACy/D,mBAAmB,CAACjrD,UAAU,EAAE85B,IAAI,EAAwBzD,KAAK,CAAC;OACxE,MAAM,IAAIr2B,UAAU,EAAE;QACrB,MAAM,IAAI,CAACZ,KAAK,CAACzG,MAAM,CAAC5D,0BAA0B,EAAE;UAAEsK,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACnE;MAEA,IAAI,CAAC60D,WAAW,CAAC13B,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;MAEnC,OAAO,IAAI,CAACx4B,UAAU,CAACw4B,KAAK,EAAE,0BAA0B,CAAC;IAC3D;IAEA,MAAM,IAAI,CAACjmC,UAAU,CAAC,IAAI,EAAY;EACxC;EAGA+pC,aAAa,CAACjhC,IAAY,EAAW;IACnC,OAAO,IAAI,CAACklB,GAAG,CAAS;EAC1B;EAEA0vC,gCAAgC,CAAC50D,IAAY,EAAW;IACtD,IAAI,IAAI,CAACo/B,wBAAwB,EAAE,EAAE;MAEnC,IAAI,CAAClY,YAAY,CAAC,mBAAmB,CAAC;MACtC,MAAMsc,SAAS,GAAG,IAAI,CAAC/+B,SAAS,EAAE;MAClC++B,SAAS,CAACt8B,QAAQ,GAAG,IAAI,CAACwwB,eAAe,CAAC,IAAI,CAAC;MAC/C13B,IAAI,CAACmH,UAAU,GAAG,CAAC,IAAI,CAACxC,UAAU,CAAC6+B,SAAS,EAAE,wBAAwB,CAAC,CAAC;MACxE,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAtC,kCAAkC,CAAClhC,IAAY,EAAW;IACxD,IAAI,IAAI,CAACiuB,YAAY,IAAQ,EAAE;MAC7B,IAAI,CAACjuB,IAAI,CAACmH,UAAU,EAAEnH,IAAI,CAACmH,UAAU,GAAG,EAAE;MAE1C,MAAMq8B,SAAS,GAAG,IAAI,CAAC3R,WAAW,CAAC,IAAI,CAAC7qB,KAAK,CAACC,eAAe,CAAC;MAE9D,IAAI,CAAC+O,IAAI,EAAE;MAEXwtB,SAAS,CAACt8B,QAAQ,GAAG,IAAI,CAAC+rD,qBAAqB,EAAE;MACjDjzD,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAClB,IAAI,CAACe,UAAU,CAAC6+B,SAAS,EAAE,0BAA0B,CAAC,CACvD;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAglC,+BAA+B,CAACxoE,IAAY,EAAW;IACrD,IAAI,IAAI,CAAC0iB,KAAK,GAAW,EAAE;MACzB,IAAI,CAAC1iB,IAAI,CAACmH,UAAU,EAAEnH,IAAI,CAACmH,UAAU,GAAG,EAAE;MAC1C,MAAMyhE,YAAY,GAAG5oE,IAAI,CAACm5B,UAAU,KAAK,MAAM;MAC/Cn5B,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAAC,GAAG,IAAI,CAACm9B,qBAAqB,CAAC6nC,YAAY,CAAC,CAAC;MAEjE5oE,IAAI,CAACwG,MAAM,GAAG,IAAI;MAClBxG,IAAI,CAACoH,WAAW,GAAG,IAAI;MACvB,IAAI,IAAI,CAACV,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACtC1G,IAAI,CAAC6oE,UAAU,GAAG,EAAE;MACtB;MAEA,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAH,2BAA2B,CAEzB1oE,IAAsC,EAC7B;IACT,IAAI,IAAI,CAACm/B,4BAA4B,EAAE,EAAE;MACvCn/B,IAAI,CAACmH,UAAU,GAAG,EAAE;MACpBnH,IAAI,CAACwG,MAAM,GAAG,IAAI;MAClB,IAAI,IAAI,CAACE,SAAS,CAAC,kBAAkB,CAAC,EAAE;QACtC1G,IAAI,CAAC6oE,UAAU,GAAG,EAAE;MACtB;MACA7oE,IAAI,CAACoH,WAAW,GAAG,IAAI,CAACy5B,sBAAsB,CAAC7gC,IAAI,CAAC;MACpD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEA6kE,eAAe,GAAY;IACzB,IAAI,CAAC,IAAI,CAAC52C,YAAY,CAAW,KAAE,OAAO,KAAK;IAC/C,MAAMjY,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,OACE,CAACtH,SAAS,CAACpJ,IAAI,CAAC,IAAI,CAAC+I,KAAK,CAAC+C,KAAK,CAAC,IAAI,CAAC5Z,KAAK,CAAClI,GAAG,EAAEkX,IAAI,CAAC,CAAC,IACvD,IAAI,CAACkY,oBAAoB,CAAClY,IAAI,EAAE,UAAU,CAAC;EAE/C;EAEAqpB,4BAA4B,GAA6C;IACvE,MAAMH,IAAI,GAAG,IAAI,CAACz6B,SAAS,EAAE;IAE7B,IAAI,IAAI,CAACie,KAAK,IAAc,EAAE;MAC5B,IAAI,CAAC1M,IAAI,EAAE;MACX,OAAO,IAAI,CAACkoD,aAAa,CACvBh/B,IAAI,EACJqiC,iBAAiB,CAACE,WAAW,GAAGF,iBAAiB,CAACI,UAAU,CAC7D;IACH,CAAC,MAAM,IAAI,IAAI,CAACkD,eAAe,EAAE,EAAE;MACjC,IAAI,CAAC7uD,IAAI,EAAE;MACX,IAAI,CAACA,IAAI,EAAE;MACX,OAAO,IAAI,CAACkoD,aAAa,CACvBh/B,IAAI,EACJqiC,iBAAiB,CAACE,WAAW,GAC3BF,iBAAiB,CAACI,UAAU,GAC5BJ,iBAAiB,CAACK,KAAK,CAC1B;IACH;IAEA,IAAI,IAAI,CAACl/C,KAAK,IAAW,EAAE;MACzB,OAAO,IAAI,CAAC8pC,UAAU,CAACttB,IAAI,EAA+B,IAAI,EAAE,IAAI,CAAC;IACvE;IAEA,IAAI,IAAI,CAACxc,KAAK,IAAO,EAAE;MACrB,IACE,IAAI,CAAChc,SAAS,CAAC,YAAY,CAAC,IAC5B,IAAI,CAAC5C,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,EAC5D;QACA,IAAI,CAACoC,KAAK,CAACzG,MAAM,CAAC7L,qBAAqB,EAAE;UAAEuS,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QAAS,CAAC,CAAC;MACvE;MACA,OAAO,IAAI,CAACmnD,UAAU,CACpB,IAAI,CAACuF,mBAAmB,CACtB,IAAI,CAACmL,eAAe,CAAC,KAAK,CAAC,EAC3B,IAAI,CAACz4D,SAAS,EAAsB,CACrC,EACD,IAAI,EACJ,IAAI,CACL;IACH;IAEA,IAAI,IAAI,CAACie,KAAK,IAAW,IAAI,IAAI,CAACA,KAAK,IAAS,IAAI,IAAI,CAACwW,KAAK,EAAE,EAAE;MAChE,MAAM,IAAI,CAAChzB,KAAK,CAACzG,MAAM,CAAC3D,wBAAwB,EAAE;QAChDqK,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;MACjB,CAAC,CAAC;IACJ;IAEA,MAAM0c,GAAG,GAAG,IAAI,CAACie,uBAAuB,EAAE;IAC1C,IAAI,CAACnR,SAAS,EAAE;IAChB,OAAO9M,GAAG;EACZ;EAGA8e,sBAAsB,CAGpB7gC,IAAsC,EACJ;IAClC,IAAI,IAAI,CAAC0iB,KAAK,IAAW,EAAE;MACzB,MAAM1iB,IAAI,GAAG,IAAI,CAACwsD,UAAU,CAC1B,IAAI,CAAC/nD,SAAS,EAAsB,EACpC,IAAI,EACJ,KAAK,CACN;MACD,OAAOzE,IAAI;IACb;IACA,OAAO,IAAI,CAAC2jE,sBAAsB,EAAE;EACtC;EAEAvkC,wBAAwB,GAAY;IAClC,MAAM;MAAE9sC;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAI+L,iBAAiB,CAACzgB,IAAI,CAAC,EAAE;MAC3B,IAAKA,IAAI,OAAc,IAAI,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAW,IAAK1tB,IAAI,OAAY,EAAE;QACvE,OAAO,KAAK;MACd;MACA,IACE,CAACA,IAAI,KAAa,OAAIA,IAAI,QAAkB,KAC5C,CAAC,IAAI,CAAC0U,KAAK,CAACgZ,WAAW,EACvB;QACA,MAAM;UAAE1tB,IAAI,EAAEw2E;QAAS,CAAC,GAAG,IAAI,CAACzjD,SAAS,EAAE;QAK3C,IACGtS,iBAAiB,CAAC+1D,QAAQ,CAAC,IAAIA,QAAQ,KAAa,MACrDA,QAAQ,MAAc,EACtB;UACA,IAAI,CAACv+C,eAAe,CAAC,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;UAC5C,OAAO,KAAK;QACd;MACF;IACF,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC7H,KAAK,IAAa,EAAE;MACnC,OAAO,KAAK;IACd;IAEA,MAAM1M,IAAI,GAAG,IAAI,CAACwP,cAAc,EAAE;IAClC,MAAMujD,OAAO,GAAG,IAAI,CAAC76C,oBAAoB,CAAClY,IAAI,EAAE,MAAM,CAAC;IACvD,IACE,IAAI,CAAC6H,KAAK,CAACC,UAAU,CAAC9H,IAAI,CAAC,KAAoB,MAC9CjD,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC,IAAIy2E,OAAQ,EAC/C;MACA,OAAO,IAAI;IACb;IAEA,IAAI,IAAI,CAACrmD,KAAK,CAAa,OAAIqmD,OAAO,EAAE;MACtC,MAAMC,aAAa,GAAG,IAAI,CAACnrD,KAAK,CAACC,UAAU,CACzC,IAAI,CAAC2H,mBAAmB,CAACzP,IAAI,GAAG,CAAC,CAAC,CACnC;MACD,OACEgzD,aAAa,OAA4B,IACzCA,aAAa,KAAyB;IAE1C;IACA,OAAO,KAAK;EACd;EAEAhoC,eAAe,CAEbhhC,IAAsC,EACtC+uB,MAAgB,EACV;IACN,IAAI,IAAI,CAACR,aAAa,IAAU,EAAE;MAChCvuB,IAAI,CAACwG,MAAM,GAAG,IAAI,CAACyuD,iBAAiB,EAAE;MACtC,IAAI,CAACJ,WAAW,CAAC70D,IAAI,CAAC;MACtB,MAAM6oE,UAAU,GAAG,IAAI,CAACI,0BAA0B,EAAE;MACpD,IAAIJ,UAAU,EAAE;QACd7oE,IAAI,CAAC6oE,UAAU,GAAGA,UAAU;QAC5B,IAAI,CAACK,qBAAqB,CAAClpE,IAAI,CAAC;MAClC;KACD,MAAM,IAAI+uB,MAAM,EAAE;MACjB,IAAI,CAAC73B,UAAU,EAAE;IACnB;IAEA,IAAI,CAAC23B,SAAS,EAAE;EAClB;EAEAsQ,4BAA4B,GAAY;IACtC,MAAM;MAAE7sC;KAAM,GAAG,IAAI,CAAC0U,KAAK;IAC3B,IAAI1U,IAAI,OAAU,EAAE;MAClB,IAAI,CAACi4B,eAAe,CAAC,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;MACzD,IAAI,IAAI,CAAC7jB,SAAS,CAAC,YAAY,CAAC,EAAE;QAChC,IAAI,IAAI,CAAC5C,eAAe,CAAC,YAAY,EAAE,wBAAwB,CAAC,EAAE;UAChE,MAAM,IAAI,CAACoC,KAAK,CAACzG,MAAM,CAAC7L,qBAAqB,EAAE;YAC7CuS,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QAEA,OAAO,IAAI;MACb;IACF;IAEA,OACE/S,IAAI,OAAY,IAChBA,IAAI,OAAc,IAClBA,IAAI,OAAiB,IACrBA,IAAI,OAAc,IAClB,IAAI,CAAC4mC,KAAK,EAAE,IACZ,IAAI,CAAC2rC,eAAe,EAAE;EAE1B;EAEAhQ,WAAW,CACT70D,IAAmE,EACnEmpE,UAAoB,EACpBC,SAAmB,EACnBC,MAAgB,EACV;IACN,IAAIF,UAAU,EAAE;MAEd,IAAIC,SAAS,EAAE;QAEb,IAAI,CAACva,qBAAqB,CAAC7uD,IAAI,EAAE,SAAS,CAAC;QAC3C,IAAI,IAAI,CAAC0G,SAAS,CAAC,mBAAmB,CAAC,EAAE;UAAA;UACvC,MAAMU,WAAW,GAAIpH,IAAI,CACtBoH,WAAW;UACd,IACEA,WAAW,CAAC9U,IAAI,KAAK,YAAY,IACjC8U,WAAW,CAAClP,IAAI,KAAK,MAAM,IAC3BkP,WAAW,CAAC5Y,GAAG,GAAG4Y,WAAW,CAAC7Y,KAAK,KAAK,CAAC,IACzC,EAAC6Y,iCAAW,CAACtF,KAAK,KAAjB,2BAAmBa,aAAa,CACjC;YACA,IAAI,CAACuD,KAAK,CAACzG,MAAM,CAAC5K,6BAA6B,EAAE;cAC/CsR,EAAE,EAAEiB;YACN,CAAC,CAAC;UACJ;QACF;OAED,MAAM,IAAIpH,IAAI,CAACmH,UAAU,IAAInH,IAAI,CAACmH,UAAU,CAAC/X,MAAM,EAAE;QAGpD,KAAK,MAAMo0C,SAAS,IAAIxjC,IAAI,CAACmH,UAAU,EAAE;UACvC,MAAM;YAAED;UAAS,CAAC,GAAGs8B,SAAS;UAC9B,MAAMlvC,UAAU,GACd4S,QAAQ,CAAC5U,IAAI,KAAK,YAAY,GAAG4U,QAAQ,CAAChP,IAAI,GAAGgP,QAAQ,CAACxX,KAAK;UACjE,IAAI,CAACm/D,qBAAqB,CAACrrB,SAAS,EAAElvC,UAAU,CAAC;UACjD,IAAI,CAAC+0E,MAAM,IAAI7lC,SAAS,CAACC,KAAK,EAAE;YAC9B,MAAM;cAAEA;YAAM,CAAC,GAAGD,SAAS;YAC3B,IAAIC,KAAK,CAACnxC,IAAI,KAAK,YAAY,EAAE;cAC/B,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC9K,qBAAqB,EAAE;gBACvCwR,EAAE,EAAEq9B,SAAS;gBACb5uC,SAAS,EAAE6uC,KAAK,CAAC/zC,KAAK;gBACtB4E;cACF,CAAC,CAAC;YACJ,CAAC,MAAM;cAEL,IAAI,CAAC+vC,iBAAiB,CAACZ,KAAK,CAACvrC,IAAI,EAAEurC,KAAK,CAAC/kC,GAAG,CAACnQ,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC;cAEhE,IAAI,CAACksB,KAAK,CAACS,gBAAgB,CAACuoB,KAAK,CAAC;YACpC;UACF;QACF;MACF,CAAC,MAAM,IAAIzjC,IAAI,CAACoH,WAAW,EAAE;QAE3B,IACEpH,IAAI,CAACoH,WAAW,CAAC9U,IAAI,KAAK,qBAAqB,IAC/C0N,IAAI,CAACoH,WAAW,CAAC9U,IAAI,KAAK,kBAAkB,EAC5C;UACA,MAAM2R,EAAE,GAAGjE,IAAI,CAACoH,WAAW,CAACnD,EAAE;UAC9B,IAAI,CAACA,EAAE,EAAE,MAAM,IAAI4yB,KAAK,CAAC,mBAAmB,CAAC;UAE7C,IAAI,CAACg4B,qBAAqB,CAAC7uD,IAAI,EAAEiE,EAAE,CAAC/L,IAAI,CAAC;SAC1C,MAAM,IAAI8H,IAAI,CAACoH,WAAW,CAAC9U,IAAI,KAAK,qBAAqB,EAAE;UAC1D,KAAK,MAAM8U,WAAW,IAAIpH,IAAI,CAACoH,WAAW,CAAC+nD,YAAY,EAAE;YACvD,IAAI,CAAC/sD,gBAAgB,CAACgF,WAAW,CAACnD,EAAE,CAAC;UACvC;QACF;MACF;IACF;EACF;EAEA7B,gBAAgB,CAACpC,IAAkC,EAAQ;IACzD,IAAIA,IAAI,CAAC1N,IAAI,KAAK,YAAY,EAAE;MAC9B,IAAI,CAACu8D,qBAAqB,CAAC7uD,IAAI,EAAEA,IAAI,CAAC9H,IAAI,CAAC;IAC7C,CAAC,MAAM,IAAI8H,IAAI,CAAC1N,IAAI,KAAK,eAAe,EAAE;MACxC,KAAK,MAAM0S,IAAI,IAAIhF,IAAI,CAAClQ,UAAU,EAAE;QAClC,IAAI,CAACsS,gBAAgB,CAAC4C,IAAI,CAAC;MAC7B;IACF,CAAC,MAAM,IAAIhF,IAAI,CAAC1N,IAAI,KAAK,cAAc,EAAE;MACvC,KAAK,MAAM4sE,IAAI,IAAIl/D,IAAI,CAAC2c,QAAQ,EAAE;QAChC,IAAIuiD,IAAI,EAAE;UACR,IAAI,CAAC98D,gBAAgB,CAAC88D,IAAI,CAAC;QAC7B;MACF;IACF,CAAC,MAAM,IAAIl/D,IAAI,CAAC1N,IAAI,KAAK,gBAAgB,EAAE;MAEzC,IAAI,CAAC8P,gBAAgB,CAACpC,IAAI,CAACtQ,KAAK,CAAC;IACnC,CAAC,MAAM,IAAIsQ,IAAI,CAAC1N,IAAI,KAAK,aAAa,EAAE;MACtC,IAAI,CAAC8P,gBAAgB,CAACpC,IAAI,CAAChB,QAAQ,CAAC;IACtC,CAAC,MAAM,IAAIgB,IAAI,CAAC1N,IAAI,KAAK,mBAAmB,EAAE;MAC5C,IAAI,CAAC8P,gBAAgB,CAACpC,IAAI,CAAC6hC,IAAI,CAAC;IAClC;EACF;EAEAgtB,qBAAqB,CACnB7uD,IAMC,EACD1L,UAAkB,EACZ;IACN,IAAI,IAAI,CAAC67B,mBAAmB,CAACza,GAAG,CAACphB,UAAU,CAAC,EAAE;MAC5C,IAAIA,UAAU,KAAK,SAAS,EAAE;QAC5B,IAAI,CAAC4R,KAAK,CAACzG,MAAM,CAACrL,sBAAsB,EAAE;UAAE+R,EAAE,EAAEnG;QAAK,CAAC,CAAC;MACzD,CAAC,MAAM;QACL,IAAI,CAACkG,KAAK,CAACzG,MAAM,CAACpL,eAAe,EAAE;UAAE8R,EAAE,EAAEnG,IAAI;UAAE1L;QAAW,CAAC,CAAC;MAC9D;IACF;IACA,IAAI,CAAC67B,mBAAmB,CAACtV,GAAG,CAACvmB,UAAU,CAAC;EAC1C;EAIAysC,qBAAqB,CAACsxB,cAAuB,EAA4B;IACvE,MAAMiX,KAAK,GAAG,EAAE;IAChB,IAAI7rC,KAAK,GAAG,IAAI;IAGhB,IAAI,CAAC1O,MAAM,CAAW;IAEtB,OAAO,CAAC,IAAI,CAAC7J,GAAG,GAAW,EAAE;MAC3B,IAAIuY,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QACL,IAAI,CAAC1O,MAAM,CAAU;QACrB,IAAI,IAAI,CAAC7J,GAAG,GAAW,EAAE;MAC3B;MACA,MAAM6e,eAAe,GAAG,IAAI,CAAC9V,YAAY,CAAU;MACnD,MAAMmkC,QAAQ,GAAG,IAAI,CAAC1vC,KAAK,CAAW;MACtC,MAAM1iB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7BzE,IAAI,CAACyjC,KAAK,GAAG,IAAI,CAACwvB,qBAAqB,EAAE;MACzCqW,KAAK,CAAC1lE,IAAI,CACR,IAAI,CAACuuD,oBAAoB,CACvBnyD,IAAI,EACJoyD,QAAQ,EACRC,cAAc,EACdtuB,eAAe,CAChB,CACF;IACH;IAEA,OAAOulC,KAAK;EACd;EAEAnX,oBAAoB,CAClBnyD,IAAS,EACToyD,QAAiB,EAEjBC,cAAuB,EACvBtuB,eAAwB,EAEL;IACnB,IAAI,IAAI,CAACxV,aAAa,IAAQ,EAAE;MAC9BvuB,IAAI,CAACkH,QAAQ,GAAG,IAAI,CAAC+rD,qBAAqB,EAAE;KAC7C,MAAM,IAAIb,QAAQ,EAAE;MACnBpyD,IAAI,CAACkH,QAAQ,GAAGyqB,kBAAkB,CAAC3xB,IAAI,CAACyjC,KAAK,CAAC;IAChD,CAAC,MAAM,IAAI,CAACzjC,IAAI,CAACkH,QAAQ,EAAE;MACzBlH,IAAI,CAACkH,QAAQ,GAAGqqB,eAAe,CAACvxB,IAAI,CAACyjC,KAAK,CAAC;IAC7C;IACA,OAAO,IAAI,CAAC9+B,UAAU,CAAoB3E,IAAI,EAAE,iBAAiB,CAAC;EACpE;EAGAizD,qBAAqB,GAAmC;IACtD,IAAI,IAAI,CAACvwC,KAAK,KAAW,EAAE;MACzB,MAAM8d,MAAM,GAAG,IAAI,CAACl/B,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;MACxD,MAAM65E,SAAS,GAAG/oC,MAAM,CAAC9wC,KAAK,CAACgzB,KAAK,CAACy/C,aAAa,CAAC;MACnD,IAAIoH,SAAS,EAAE;QACb,IAAI,CAACrjE,KAAK,CAACzG,MAAM,CAAC7G,gCAAgC,EAAE;UAClDuN,EAAE,EAAEq6B,MAAM;UACV3nC,iBAAiB,EAAE0wE,SAAS,CAAC,CAAC,CAAC,CAACzrD,UAAU,CAAC,CAAC;QAC9C,CAAC,CAAC;MACJ;MACA,OAAO0iB,MAAM;IACf;IACA,OAAO,IAAI,CAAC9I,eAAe,CAAC,IAAI,CAAC;EACnC;EAEA8xC,kBAAkB,CAChBxpE,IAEC,EACQ;IACT,IAAIA,IAAI,CAAC6oE,UAAU,IAAI,IAAI,EAAE;MAC3B,OAAO7oE,IAAI,CAAC6oE,UAAU,CAACp+C,IAAI,CAAC,UAAoB;QAAA,IAAnB;UAAEj7B,GAAG;UAAEE;QAAM,CAAC;QACzC,OACEA,KAAK,CAACA,KAAK,KAAK,MAAM,KACrBF,GAAG,CAAC8C,IAAI,KAAK,YAAY,GACtB9C,GAAG,CAAC0I,IAAI,KAAK,MAAM,GACnB1I,GAAG,CAACE,KAAK,KAAK,MAAM,CAAC;MAE7B,CAAC,CAAC;IACJ;IACA,OAAO,KAAK;EACd;EAEA2zC,qBAAqB,CAACrjC,IAAiC,EAAE;IACvD,IAAIA,IAAI,CAACsjC,MAAM,EAAE;MAAA;MACf,IACEtjC,IAAI,CAACmH,UAAU,CAAC/X,MAAM,KAAK,CAAC,IAC5B4Q,IAAI,CAACmH,UAAU,CAAC,CAAC,CAAC,CAAC7U,IAAI,KAAK,wBAAwB,EACpD;QACA,IAAI,CAAC4T,KAAK,CAACzG,MAAM,CAAC1J,0BAA0B,EAAE;UAC5CoQ,EAAE,EAAEnG,IAAI,CAACmH,UAAU,CAAC,CAAC,CAAC,CAACzI,GAAG,CAACnQ;QAC7B,CAAC,CAAC;MACJ;MACA,IAAI,yBAAI,CAACs6E,UAAU,qBAAfY,gBAAiBr6E,OAAM,IAAG,CAAC,EAAE;QAC/B,IAAI,CAAC8W,KAAK,CAACzG,MAAM,CAAC3J,4BAA4B,EAAE;UAC9CqQ,EAAE,EAAEnG,IAAI,CAACmH,UAAU,CAAC,CAAC,CAAC,CAACzI,GAAG,CAACnQ;QAC7B,CAAC,CAAC;MACJ;IACF;EACF;EAEA26E,qBAAqB,CACnBlpE,IAEC,EACD;IAEA,IAAI,IAAI,CAACwpE,kBAAkB,CAACxpE,IAAI,CAAC,IAAIA,IAAI,CAAC1N,IAAI,KAAK,sBAAsB,EAAE;MAEzE,MAAM;QAAE6U;MAAW,CAAC,GAAGnH,IAAI;MAC3B,IAAImH,UAAU,IAAI,IAAI,EAAE;QAEtB,MAAMuiE,wBAAwB,GAAGviE,UAAU,CAAC2uD,IAAI,CAACtyB,SAAS,IAAI;UAC5D,IAAIS,QAAQ;UACZ,IAAIT,SAAS,CAAClxC,IAAI,KAAK,iBAAiB,EAAE;YACxC2xC,QAAQ,GAAGT,SAAS,CAACC,KAAK;UAC5B,CAAC,MAAM,IAAID,SAAS,CAAClxC,IAAI,KAAK,iBAAiB,EAAE;YAC/C2xC,QAAQ,GAAGT,SAAS,CAACS,QAAQ;UAC/B;UACA,IAAIA,QAAQ,KAAK7nB,SAAS,EAAE;YAC1B,OAAO6nB,QAAQ,CAAC3xC,IAAI,KAAK,YAAY,GACjC2xC,QAAQ,CAAC/rC,IAAI,KAAK,SAAS,GAC3B+rC,QAAQ,CAACv0C,KAAK,KAAK,SAAS;UAClC;QACF,CAAC,CAAC;QACF,IAAIg6E,wBAAwB,KAAKttD,SAAS,EAAE;UAC1C,IAAI,CAAClW,KAAK,CAACzG,MAAM,CAAC5J,2BAA2B,EAAE;YAC7CsQ,EAAE,EAAEujE,wBAAwB,CAAChrE,GAAG,CAACnQ;UACnC,CAAC,CAAC;QACJ;MACF;IACF;EACF;EAEAo7E,0BAA0B,CAAC3pE,IAAiC,EAAE;IAC5D,IAAI4pE,kBAAkB,GAAG,KAAK;IAC9B,IAAI,IAAI,CAAC37C,YAAY,KAAY,EAAE;MACjC,MAAM5I,SAAS,GAAG,IAAI,CAACA,SAAS,EAAE;MAClC,MAAMyjD,QAAQ,GAAGzjD,SAAS,CAAC/yB,IAAI;MAC/B,IAAIygB,iBAAiB,CAAC+1D,QAAQ,CAAC,EAAE;QAC/B,IAAIA,QAAQ,OAAa,EAAE;UAEzBc,kBAAkB,GAAG,IAAI;QAC3B,CAAC,MAAM;UACL,MAAMC,sBAAsB,GAAG,IAAI,CAAChsD,KAAK,CAACC,UAAU,CAClD,IAAI,CAAC2H,mBAAmB,CAACJ,SAAS,CAAC72B,GAAG,CAAC,CACxC;UACD,IAAIq7E,sBAAsB,QAAyB,EAAE;YAEnDD,kBAAkB,GAAG,IAAI;UAC3B;QACF;MACF,CAAC,MAAM,IAAId,QAAQ,OAAa,EAAE;QAKhCc,kBAAkB,GAAG,IAAI;MAC3B;IACF;IACA,IAAIA,kBAAkB,EAAE;MACtB,IAAI,CAAC1iD,YAAY,CAAC,kBAAkB,CAAC;MACrC,IAAI,CAAClR,IAAI,EAAE;MACXhW,IAAI,CAACsjC,MAAM,GAAG,IAAI;KACnB,MAAM,IAAI,IAAI,CAAC58B,SAAS,CAAC,kBAAkB,CAAC,EAAE;MAC7C1G,IAAI,CAACsjC,MAAM,GAAG,KAAK;IACrB;EACF;EAKAvK,WAAW,CAAe/4B,IAAiC,EAAe;IAExEA,IAAI,CAACmH,UAAU,GAAG,EAAE;IACpB,IAAI,CAAC,IAAI,CAACub,KAAK,KAAW,EAAE;MAC1B,IAAI,CAACinD,0BAA0B,CAAC3pE,IAAI,CAAC;MAGrC,MAAMkoE,UAAU,GAAG,IAAI,CAACvkC,gCAAgC,CAAC3jC,IAAI,CAAC;MAO9D,MAAM8pE,SAAS,GAAG,CAAC5B,UAAU,IAAI,IAAI,CAAChjD,GAAG,CAAU;MAGnD,MAAMkjD,OAAO,GAAG0B,SAAS,IAAI,IAAI,CAAC/U,6BAA6B,CAAC/0D,IAAI,CAAC;MAGrE,IAAI8pE,SAAS,IAAI,CAAC1B,OAAO,EAAE,IAAI,CAACpT,0BAA0B,CAACh1D,IAAI,CAAC;MAChE,IAAI,CAACwuB,gBAAgB,CAAU;IACjC;IACAxuB,IAAI,CAACwG,MAAM,GAAG,IAAI,CAACyuD,iBAAiB,EAAE;IAItC,MAAM4T,UAAU,GAAG,IAAI,CAACI,0BAA0B,EAAE;IACpD,IAAIJ,UAAU,EAAE;MACd7oE,IAAI,CAAC6oE,UAAU,GAAGA,UAAU;IAC9B,CAAC,MAAyC;MACxC,MAAMliE,UAAU,GAAG,IAAI,CAACojE,0BAA0B,EAAE;MACpD,IAAIpjE,UAAU,EAAE;QAEd3G,IAAI,CAAC2G,UAAU,GAAGA,UAAU;MAC9B;IACF;IACA,IAAI,CAAC08B,qBAAqB,CAACrjC,IAAI,CAAC;IAChC,IAAI,CAACkpE,qBAAqB,CAAClpE,IAAI,CAAC;IAEhC,IAAI,CAAC6uB,SAAS,EAAE;IAChB,OAAO,IAAI,CAAClqB,UAAU,CAAC3E,IAAI,EAAE,mBAAmB,CAAC;EACnD;EAEAi1D,iBAAiB,GAAgC;IAC/C,IAAI,CAAC,IAAI,CAACvyC,KAAK,KAAW,EAAE,IAAI,CAACxrB,UAAU,EAAE;IAC7C,OAAO,IAAI,CAAC2hC,aAAa,EAAE;EAC7B;EAGAuK,wBAAwB,CAACpjC,IAAiC,EAAW;IACnE,OAAO+S,iBAAiB,CAAC,IAAI,CAAC/L,KAAK,CAAC1U,IAAI,CAAC;EAC3C;EAEAixC,yBAAyB,CAMvBvjC,IAAiC,EACjCwjC,SAAoB,EACpBlxC,IAAe,EACT;IACNkxC,SAAS,CAACC,KAAK,GAAG,IAAI,CAAC/L,eAAe,EAAE;IACxC13B,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAAC,IAAI,CAAC8/B,qBAAqB,CAACF,SAAS,EAAElxC,IAAI,CAAC,CAAC;EACnE;EAEAoxC,qBAAqB,CAKnBF,SAAoB,EAAElxC,IAAe,EAA8B;IAAA,IAA5BqoB,WAAW,uEAAG/C,YAAY;IACjE,IAAI,CAAC4gD,SAAS,CAACh1B,SAAS,CAACC,KAAK,EAAE;MAE9Bg1B,EAAE,EAAEj1B,SAAS;MACb/9B,OAAO,EAAEkV;IACX,CAAC,CAAC;IACF,OAAO,IAAI,CAAChW,UAAU,CAAC6+B,SAAS,EAAElxC,IAAI,CAAC;EACzC;EAOA03E,kBAAkB,GAAwB;IACxC,MAAMC,KAAK,GAAG,EAAE;IAChB,MAAMC,SAAS,GAAG,IAAIzsE,GAAG,EAAE;IAE3B,GAAG;MACD,IAAI,IAAI,CAACilB,KAAK,GAAW,EAAE;QACzB;MACF;MAEA,MAAM1iB,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAqB;MAGhD,MAAMo7D,OAAO,GAAG,IAAI,CAAC74D,KAAK,CAACtX,KAAK;MAIhC,IAAIw6E,SAAS,CAACx0D,GAAG,CAACmqD,OAAO,CAAC,EAAE;QAC1B,IAAI,CAAC35D,KAAK,CAACzG,MAAM,CAAC9G,iCAAiC,EAAE;UACnDwN,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B,QAAQ;UACvB7V,GAAG,EAAEqwE;QACP,CAAC,CAAC;MACJ;MACAqK,SAAS,CAACrvD,GAAG,CAACglD,OAAO,CAAC;MACtB,IAAI,IAAI,CAACn9C,KAAK,KAAW,EAAE;QACzB1iB,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAAC8R,kBAAkB,CAACu+D,OAAO,CAAC;MAC7C,CAAC,MAAM;QACL7/D,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACkoC,eAAe,CAAC,IAAI,CAAC;MACvC;MACA,IAAI,CAAC3I,MAAM,CAAU;MAErB,IAAI,CAAC,IAAI,CAACrM,KAAK,KAAW,EAAE;QAC1B,MAAM,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAAC/G,2BAA2B,EAAE;UACnDyN,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACArF,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAAC4R,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;MACtDu6E,KAAK,CAACrmE,IAAI,CAAC,IAAI,CAACe,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC,CAAC;IACtD,CAAC,QAAQ,IAAI,CAACklB,GAAG,CAAU;IAE3B,OAAO+kD,KAAK;EACd;EAMAF,0BAA0B,GAAG;IAC3B,IAAI,IAAI,CAACrnD,KAAK,CAAU,OAAI,CAAC,IAAI,CAACgM,qBAAqB,EAAE,EAAE;MACzD,IAAI,CAACxH,YAAY,CAAC,kBAAkB,CAAC;MACrC,IAAI,CAAClR,IAAI,EAAE;IACb,CAAC,MAAM;MACL,IAAI,IAAI,CAACtP,SAAS,CAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE;MACjD,OAAO,IAAI;IACb;IACA,MAAMujE,KAAK,GAAG,EAAE;IAChB,MAAMtjE,UAAU,GAAG,IAAIlJ,GAAG,EAAE;IAC5B,GAAG;MACD,MAAMuC,IAAI,GAAG,IAAI,CAACyE,SAAS,EAAE;MAC7BzE,IAAI,CAACxQ,GAAG,GAAG,IAAI,CAACkoC,eAAe,CAAC,IAAI,CAAC;MAErC,IAAI13B,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,KAAK,MAAM,EAAE;QAC5B,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAAChH,gCAAgC,EAAE;UAClD0N,EAAE,EAAEnG,IAAI,CAACxQ;QACX,CAAC,CAAC;MACJ;MAEA,IAAImX,UAAU,CAAC+O,GAAG,CAAC1V,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,CAAC,EAAE;QACjC,IAAI,CAACgO,KAAK,CAACzG,MAAM,CAAC9G,iCAAiC,EAAE;UACnDwN,EAAE,EAAEnG,IAAI,CAACxQ,GAAG;UACZA,GAAG,EAAEwQ,IAAI,CAACxQ,GAAG,CAAC0I;QAChB,CAAC,CAAC;MACJ;MACAyO,UAAU,CAACkU,GAAG,CAAC7a,IAAI,CAACxQ,GAAG,CAAC0I,IAAI,CAAC;MAC7B,IAAI,CAAC62B,MAAM,CAAU;MACrB,IAAI,CAAC,IAAI,CAACrM,KAAK,KAAW,EAAE;QAC1B,MAAM,IAAI,CAACxc,KAAK,CAACzG,MAAM,CAAC/G,2BAA2B,EAAE;UACnDyN,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;QACjB,CAAC,CAAC;MACJ;MACArF,IAAI,CAACtQ,KAAK,GAAG,IAAI,CAAC4R,kBAAkB,CAAC,IAAI,CAAC0F,KAAK,CAACtX,KAAK,CAAC;MACtD,IAAI,CAACiV,UAAU,CAAC3E,IAAI,EAAE,iBAAiB,CAAC;MACxCiqE,KAAK,CAACrmE,IAAI,CAAC5D,IAAI,CAAC;IAClB,CAAC,QAAQ,IAAI,CAACklB,GAAG,CAAU;IAE3B,OAAO+kD,KAAK;EACd;EAEAhB,0BAA0B,GAAG;IAE3B,IAAI,IAAI,CAACh7C,YAAY,CAAY,OAAI,CAAC,IAAI,CAACS,qBAAqB,EAAE,EAAE;MAClE,IAAI,CAACxH,YAAY,CAAC,kBAAkB,CAAC;MACrC,IAAI,CAAClR,IAAI,EAAE;IACb,CAAC,MAAM;MACL,IAAI,IAAI,CAACtP,SAAS,CAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE;MACjD,OAAO,IAAI;IACb;IAEA,IAAI,CAACwe,GAAG,CAAW;IACnB,MAAM+kD,KAAK,GAAG,IAAI,CAACD,kBAAkB,EAAE;IACvC,IAAI,CAAC9kD,GAAG,CAAW;IAEnB,OAAO+kD,KAAK;EACd;EAEAtmC,gCAAgC,CAAC3jC,IAAiC,EAAW;IAC3E,IAAI,IAAI,CAACojC,wBAAwB,CAACpjC,IAAI,CAAC,EAAE;MAEvC,IAAI,CAACujC,yBAAyB,CAC5BvjC,IAAI,EACJ,IAAI,CAACyE,SAAS,EAA4B,EAC1C,wBAAwB,CACzB;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAswD,6BAA6B,CAAC/0D,IAAiC,EAAW;IACxE,IAAI,IAAI,CAAC0iB,KAAK,IAAS,EAAE;MACvB,MAAM8gB,SAAS,GAAG,IAAI,CAAC/+B,SAAS,EAA8B;MAC9D,IAAI,CAACuR,IAAI,EAAE;MACX,IAAI,CAACwY,gBAAgB,CAAQ;MAE7B,IAAI,CAAC+U,yBAAyB,CAC5BvjC,IAAI,EACJwjC,SAAS,EACT,0BAA0B,CAC3B;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;EAEAwxB,0BAA0B,CAACh1D,IAAiC,EAAE;IAC5D,IAAIy9B,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC1O,MAAM,CAAW;IACtB,OAAO,CAAC,IAAI,CAAC7J,GAAG,GAAW,EAAE;MAC3B,IAAIuY,KAAK,EAAE;QACTA,KAAK,GAAG,KAAK;MACf,CAAC,MAAM;QAEL,IAAI,IAAI,CAACvY,GAAG,IAAU,EAAE;UACtB,MAAM,IAAI,CAAChf,KAAK,CAACzG,MAAM,CAACvL,sBAAsB,EAAE;YAC9CiS,EAAE,EAAE,IAAI,CAACa,KAAK,CAAC3B;UACjB,CAAC,CAAC;QACJ;QAEA,IAAI,CAAC0pB,MAAM,CAAU;QACrB,IAAI,IAAI,CAAC7J,GAAG,GAAW,EAAE;MAC3B;MAEA,MAAMse,SAAS,GAAG,IAAI,CAAC/+B,SAAS,EAAqB;MACrD,MAAMo/B,gBAAgB,GAAG,IAAI,CAACnhB,KAAK,CAAW;MAC9C,MAAMqhB,eAAe,GAAG,IAAI,CAAC9V,YAAY,CAAU;MACnDuV,SAAS,CAACS,QAAQ,GAAG,IAAI,CAACgvB,qBAAqB,EAAE;MACjD,MAAMkX,eAAe,GAAG,IAAI,CAACvmC,oBAAoB,CAC/CJ,SAAS,EACTK,gBAAgB,EAChB7jC,IAAI,CAAC41B,UAAU,KAAK,MAAM,IAAI51B,IAAI,CAAC41B,UAAU,KAAK,QAAQ,EAC1DmO,eAAe,EACf3nB,SAAS,CACV;MACDpc,IAAI,CAACmH,UAAU,CAACvD,IAAI,CAACumE,eAAe,CAAC;IACvC;EACF;EAGAvmC,oBAAoB,CAClBJ,SAAoC,EACpCK,gBAAyB,EAEzBC,kBAA2B,EAC3BC,eAAwB,EACxBppB,WAAqC,EAElB;IACnB,IAAI,IAAI,CAAC4T,aAAa,IAAQ,EAAE;MAC9BiV,SAAS,CAACC,KAAK,GAAG,IAAI,CAAC/L,eAAe,EAAE;IAC1C,CAAC,MAAM;MACL,MAAM;QAAEuM;MAAS,CAAC,GAAGT,SAAS;MAC9B,IAAIK,gBAAgB,EAAE;QACpB,MAAM,IAAI,CAAC39B,KAAK,CAACzG,MAAM,CAACnK,qBAAqB,EAAE;UAC7C6Q,EAAE,EAAEq9B,SAAS;UACbjuC,UAAU,EAAG0uC,QAAQ,CAAqBv0C;QAC5C,CAAC,CAAC;MACJ;MACA,IAAI,CAAC20C,iBAAiB,CACnBJ,QAAQ,CAAkB/rC,IAAI,EAC/BsrC,SAAS,CAAC9kC,GAAG,CAACnQ,KAAK,EACnB,IAAI,EACJ,IAAI,CACL;MACD,IAAI,CAACi1C,SAAS,CAACC,KAAK,EAAE;QACpBD,SAAS,CAACC,KAAK,GAAGlS,eAAe,CAAC0S,QAAQ,CAAC;MAC7C;IACF;IACA,OAAO,IAAI,CAACP,qBAAqB,CAC/BF,SAAS,EACT,iBAAiB,EACjB7oB,WAAW,CACZ;EACH;EAIA+nB,WAAW,CACTnE,KAAuD,EAC9C;IACT,OAAOA,KAAK,CAACjsC,IAAI,KAAK,YAAY,IAAIisC,KAAK,CAACrmC,IAAI,KAAK,MAAM;EAC7D;AACF;AChmGe,MAAMkyE,MAAM,SAASrH,eAAe,CAAC;EAOlD90E,WAAW,CAACoS,OAAmC,EAAEwd,KAAa,EAAE;IAC9Dxd,OAAO,GAAGo3D,UAAU,CAACp3D,OAAO,CAAC;IAC7B,KAAK,CAACA,OAAO,EAAEwd,KAAK,CAAC;IAErB,IAAI,CAACxd,OAAO,GAAGA,OAAO;IACtB,IAAI,CAAC2vB,gBAAgB,EAAE;IACvB,IAAI,CAACrU,OAAO,GAAG0uD,UAAU,CAAC,IAAI,CAAChqE,OAAO,CAACsb,OAAO,CAAC;IAC/C,IAAI,CAACltB,QAAQ,GAAG4R,OAAO,CAAC62D,cAAc;EACxC;EAGA5mC,eAAe,GAEb;IACA,OAAOhX,YAAY;EACrB;EAEAnZ,KAAK,GAAW;IACd,IAAI,CAACwwB,kBAAkB,EAAE;IACzB,MAAMvwB,IAAI,GAAG,IAAI,CAACqE,SAAS,EAAY;IACvC,MAAMiiC,OAAO,GAAG,IAAI,CAACjiC,SAAS,EAAe;IAC7C,IAAI,CAACwgB,SAAS,EAAE;IAChB7kB,IAAI,CAACwe,MAAM,GAAG,IAAI;IAClB,IAAI,CAAC6nB,aAAa,CAACrmC,IAAI,EAAEsmC,OAAO,CAAC;IACjCtmC,IAAI,CAACwe,MAAM,GAAG,IAAI,CAAC5X,KAAK,CAAC4X,MAAM;IAC/B,OAAOxe,IAAI;EACb;AACF;AAEA,SAASiqE,UAAU,CAAC1uD,OAAmB,EAAc;EACnD,MAAM2uD,SAAqB,GAAG,IAAI7gE,GAAG,EAAE;EACvC,KAAK,MAAMsS,MAAM,IAAIJ,OAAO,EAAE;IAC5B,MAAM,CAACzjB,IAAI,EAAEmI,OAAO,CAAC,GAAGnB,KAAK,CAACC,OAAO,CAAC4c,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,EAAE,EAAE,CAAC;IACrE,IAAI,CAACuuD,SAAS,CAAC50D,GAAG,CAACxd,IAAI,CAAC,EAAEoyE,SAAS,CAAC76E,GAAG,CAACyI,IAAI,EAAEmI,OAAO,IAAI,EAAE,CAAC;EAC9D;EACA,OAAOiqE,SAAS;AAClB;AC/BO,SAASnqE,KAAK,CAAC0d,KAAa,EAAExd,OAAiB,EAAQ;EAAA;EAC5D,IAAI,oBAAO,qBAAPkqE,SAASjqD,UAAU,MAAK,aAAa,EAAE;IACzCjgB,OAAO,qBACFA,OAAO,CACX;IACD,IAAI;MACFA,OAAO,CAACigB,UAAU,GAAG,QAAQ;MAC7B,MAAM/G,MAAM,GAAGixD,SAAS,CAACnqE,OAAO,EAAEwd,KAAK,CAAC;MACxC,MAAM4sD,GAAG,GAAGlxD,MAAM,CAACpZ,KAAK,EAAE;MAE1B,IAAIoZ,MAAM,CAACiC,iBAAiB,EAAE;QAC5B,OAAOivD,GAAG;MACZ;MAEA,IAAIlxD,MAAM,CAACkC,2BAA2B,EAAE;QAMtC,IAAI;UACFpb,OAAO,CAACigB,UAAU,GAAG,QAAQ;UAC7B,OAAOkqD,SAAS,CAACnqE,OAAO,EAAEwd,KAAK,CAAC,CAAC1d,KAAK,EAAE;SACzC,CAAC,gBAAM;MACV,CAAC,MAAM;QAGLsqE,GAAG,CAAC/jC,OAAO,CAACpmB,UAAU,GAAG,QAAQ;MACnC;MAEA,OAAOmqD,GAAG;KACX,CAAC,OAAOC,WAAW,EAAE;MACpB,IAAI;QACFrqE,OAAO,CAACigB,UAAU,GAAG,QAAQ;QAC7B,OAAOkqD,SAAS,CAACnqE,OAAO,EAAEwd,KAAK,CAAC,CAAC1d,KAAK,EAAE;OACzC,CAAC,iBAAM;MAER,MAAMuqE,WAAW;IACnB;EACF,CAAC,MAAM;IACL,OAAOF,SAAS,CAACnqE,OAAO,EAAEwd,KAAK,CAAC,CAAC1d,KAAK,EAAE;EAC1C;AACF;AAEO,SAASi3B,eAAe,CAACvZ,KAAa,EAAExd,OAAiB,EAAc;EAC5E,MAAMkZ,MAAM,GAAGixD,SAAS,CAACnqE,OAAO,EAAEwd,KAAK,CAAC;EACxC,IAAItE,MAAM,CAAClZ,OAAO,CAACggB,UAAU,EAAE;IAC7B9G,MAAM,CAACvS,KAAK,CAACkO,MAAM,GAAG,IAAI;EAC5B;EACA,OAAOqE,MAAM,CAAC24C,aAAa,EAAE;AAC/B;AAEA,SAASyY,0BAA0B,CACjCC,kBAAsC,EACH;EACnC,MAAM9gE,UAA6C,GAAG,EAAE;EACxD,KAAK,MAAM05C,QAAQ,IAAIxzD,MAAM,CAACd,IAAI,CAChC07E,kBAAkB,CACnB,EAAkC;IACjC9gE,UAAU,CAAC05C,QAAQ,CAAC,GAAGtvC,gBAAgB,CAAC02D,kBAAkB,CAACpnB,QAAQ,CAAC,CAAC;EACvE;EACA,OAAO15C,UAAU;AACnB;MAEa+gE,QAAQ,GAAGF,0BAA0B,CAACC,EAAkB;AAErE,SAASJ,SAAS,CAACnqE,OAAmC,EAAEwd,KAAa,EAAU;EAC7E,IAAIoxC,GAAG,GAAGmb,MAAM;EAChB,IAAI/pE,OAAO,YAAPA,OAAO,CAAEsb,OAAO,EAAE;IACpBu6C,eAAe,CAAC71D,OAAO,CAACsb,OAAO,CAAC;IAChCszC,GAAG,GAAG6b,cAAc,CAACzqE,OAAO,CAACsb,OAAO,CAAC;EACvC;EAEA,OAAO,IAAIszC,GAAG,CAAC5uD,OAAO,EAAEwd,KAAK,CAAC;AAChC;AAEA,MAAMktD,gBAAmE,GAAG,EAAE;AAG9E,SAASD,cAAc,CAACE,kBAA8B,EAEpD;EACA,MAAMC,UAAU,GAAGjU,gBAAgB,CAAC9mE,MAAM,CAACgI,IAAI,IAC7CwO,SAAS,CAACskE,kBAAkB,EAAE9yE,IAAI,CAAC,CACpC;EAED,MAAM1I,GAAG,GAAGy7E,UAAU,CAAC5yE,IAAI,CAAC,GAAG,CAAC;EAChC,IAAI42D,GAAG,GAAG8b,gBAAgB,CAACv7E,GAAG,CAAC;EAC/B,IAAI,CAACy/D,GAAG,EAAE;IACRA,GAAG,GAAGmb,MAAM;IACZ,KAAK,MAAMruD,MAAM,IAAIkvD,UAAU,EAAE;MAE/Bhc,GAAG,GAAG0H,YAAY,CAAC56C,MAAM,CAAC,CAACkzC,GAAG,CAAC;IACjC;IACA8b,gBAAgB,CAACv7E,GAAG,CAAC,GAAGy/D,GAAG;EAC7B;EACA,OAAOA,GAAG;AACZ","names":["Position","constructor","line","col","index","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","keys","last","length","get","reduce","object","key","set","value","item","i","instantiate","properties","descriptors","Object","map","filter","descriptor","enumerable","split","instance","defineProperty","configurable","assign","ImportMetaOutsideModule","message","code","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","type","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForInUsing","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","ImportReflectionHasAssertion","ImportReflectionNotBinding","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","name","JSON","stringify","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","expected","UnexpectedTokenUnaryExponentiation","UnexpectedUsingDeclaration","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","target","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","UsingDeclarationHasBindingPattern","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","Array","isArray","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","node","superClass","ESTreeParserMixin","parse","file","options","tokens","parseRegExpLiteral","pattern","flags","regex","RegExp","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","push","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","arguments","hasPlugin","attributes","toReferencedArguments","parseExport","decorators","exportStartLoc","state","lastTokStartLoc","exported","specifiers","declaration","_declaration$decorato","resetStartLocation","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","label","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_using","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_satisfies","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","context","pop","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inTopLevel","currentScope","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","plugins","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","skipArrays","val","slice","isDigit","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","startPos","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","prev","numericSeparatorInEscapeSequence","Number","isNaN","unexpectedNumericSeparator","_isDigit","invalidDigit","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","forEach","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","replace","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","error","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParameterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","Node","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportReflectionHasImportType","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","FlowParserMixin","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatementLike","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","trailingCommaLoc","checkParams","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","checkImportReflection","module","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","_jsx","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","_jsx3","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","JSXParserMixin","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","AccessorCannotBeOptional","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","TypeScriptParserMixin","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","bind","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","parseExprOp","leftStartLoc","minPrec","isSatisfies","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","isValidAmbientConstInitializer","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","parseClassAccessorProperty","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","_typeCast","_typeCast2","_typeCast3","_node$extra","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSSatisfiesExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","maybeTakeDecorators","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isPossiblyLiteralEnum","expressions","isUncomputedMemberExpressionChain","estree","isNumber","isNegativeNumber","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","PlaceholdersParserMixin","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","chStartsBindingIdentifier","verifyBreakContinue","isBreak","parseStatementOrFunctionDeclaration","parseBlock","createNewLexicalScope","parseFunctionId","requireId","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","V8IntrinsicMixin","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","ParseErrorClass","isParenthesizedExpression","nextAncestor","child","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","startIndex","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseAsyncFunctionExpression","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","parseFunction","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","args","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","ParseFunctionFlag","Expression","Declaration","HangingDeclaration","NullableId","Async","ParseStatementFlag","StatementOnly","AllowImportExport","AllowDeclaration","AllowFunctionDeclaration","AllowLabeledFunction","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","finishedProgram","stmtToDirective","directiveLiteral","hasFollowingBindingAtom","endCh","chStartsBindingPattern","hasFollowingBindingIdentifier","startsUsingForOf","parseModuleItem","parseStatementListItem","disallowLabeledFunction","parseStatement","allowDeclaration","allowFunctionDeclaration","parseBreakContinueStatement","parseDebuggerStatement","parseDoWhileStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","decoratorsEnabledBeforeExport","maybeDecorators","classNode","exportNode","allowExport","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","startsWithUsing","isLetOrUsing","initNode","parseVar","isForIn","parseForIn","startsWithAsync","isForOf","isHangingDeclaration","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","await","isFor","hangingDeclaration","isDeclaration","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","_node2$declaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","nodes","surrogate","isJSONModuleImport","_node$assertions","nonDefaultNamedSpecifier","parseMaybeImportReflection","isImportReflection","nextNextTokenFirstChar","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/location.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/credentials.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/module-errors.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/to-node-description.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/standard-errors.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/strict-mode-errors.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error/pipeline-operator-errors.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parse-error.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/estree.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/tokenizer/context.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/tokenizer/types.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/babel-helper-validator-identifier/src/identifier.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/babel-helper-validator-identifier/src/keyword.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/identifier.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/scopeflags.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/scope.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/flow/scope.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/base.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/comments.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/whitespace.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/tokenizer/state.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/babel-helper-string-parser/src/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/tokenizer/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/class-scope.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/expression-scope.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/util/production-parameter.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/util.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/node.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/flow/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/jsx/xhtml.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/jsx/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/typescript/scope.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/typescript/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/placeholders.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugins/v8intrinsic.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/plugin-utils.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/options.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/lval.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/expression.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/statement.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/parser/index.ts","/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/parser/src/index.ts"],"sourcesContent":["export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accessor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accessor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accessor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n  ForInUsing: \"For-in loop may not start with 'using' declaration.\",\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  ImportReflectionHasAssertion: \"`import module x` cannot have assertions.\",\n  ImportReflectionNotBinding:\n    'Only `import module x from \"./module\"` is valid.',\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnexpectedUsingDeclaration:\n    \"Using declaration cannot appear in the top level when source type is `script`.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  UsingDeclarationHasBindingPattern:\n    \"Using declaration cannot have destructuring patterns.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails extends object>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(\n      unfinished: Undone<N.AnyExport>,\n      decorators: N.Decorator[] | null,\n    ) {\n      const exportStartLoc = this.state.lastTokStartLoc;\n      const node = super.parseExport(unfinished, decorators);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n        // fallthrough\n        case \"ExportDefaultDeclaration\":\n          {\n            const { declaration } = node;\n            if (\n              declaration?.type === \"ClassDeclaration\" &&\n              declaration.decorators?.length > 0 &&\n              // decorator comes before export\n              declaration.start === node.start\n            ) {\n              this.resetStartLocation(\n                node,\n                // For compatibility with ESLint's keyword-spacing rule, which assumes that an\n                // export declaration must start with export.\n                // https://github.com/babel/babel/issues/15085\n                // Here we reset export declaration's start to be the start of the export token\n                exportStartLoc,\n              );\n            }\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(base, startLoc, noCalls, state);\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, startLoc: Position) {\n      super.resetStartLocation(node, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = typeof tt;\n\nexport const tt = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _using: createKeywordLike(\"using\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  _satisfies: createKeywordLike(\"satisfies\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n} as const;\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_STATIC_BLOCK | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inTopLevel() {\n    return (this.currentScope().flags & SCOPE_PROGRAM) > 0;\n  }\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n */\nexport type CommentWhitespace = {\n  /**\n   * the start of the whitespace token.\n   */\n  start: number;\n  /**\n   * the end of the whitespace token.\n   */\n  end: number;\n  /**\n   * the containing comments\n   */\n  comments: Array<Comment>;\n  /**\n   * the immediately preceding AST node of the whitespace token\n   */\n  leadingNode: Node | null;\n  /**\n   * the immediately following AST node of the whitespace token\n   */\n  trailingNode: Node | null;\n  /**\n   * the innermost AST node containing the whitespace with minimal size (|end - start|)\n   */\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /* eslint-disable no-irregular-whitespace */\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing\n   * ```\n   * async /* 1 *​/ function f() {}\n   * ```\n   * the comment whitespace `/* 1 *​/` has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark `/* 1 *​/` as\n   * inner comments. So `/* 1 *​/` should be detached from the Identifier node.\n   *\n   * @param node the last finished AST node _before_ current token\n   */\n  /* eslint-enable no-irregular-whitespace */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n  // These boolean properties are not initialized in createLookaheadState()\n  // instead they will only be set by the tokenizer\n  containsEsc?: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  // Skips a block comment, whose end is marked by commentEnd.\n  // *-/ is used by the Flow plugin, when parsing block comments nested\n  // inside Flow comments.\n  skipBlockComment(commentEnd: \"*/\" | \"*-/\"): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(commentEnd, start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + commentEnd.length;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + commentEnd.length,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment(\"*/\");\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n  e.g. we don't know if `async({ x })` is a call expression or an async arrow\n  function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   */\n  recordArrowParameterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /**\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /**\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /**\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional parameter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, loc.index, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, startLoc: Position): void {\n    node.start = startLoc.index;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = startLoc.index;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` or `typeof` keyword.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n            /* decorators */ null,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startLoc ??= this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatementLike(flags: ParseStatementFlag): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatementLike(flags);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      const decl = super.parseExport(node, decorators);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(FlowErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startLoc.index) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort => this.parseAsyncArrowWithTypeParameters(startLoc) || abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(startLoc);\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      return super.skipBlockComment(this.state.hasFlowComment ? \"*-/\" : \"*/\");\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(this.state.lastTokEndLoc);\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(startLoc: Position): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(startLoc: Position): N.JSXClosingElement {\n      const node = this.startNodeAt(startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(startLoc);\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport type { ParseStatementFlag } from \"../../parser/statement\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  AccessorCannotBeOptional:\n    \"An 'accessor' property cannot be declared optional.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  ImportReflectionHasImportType:\n    \"An `import module` declaration can not use `type` modifier\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  // TODO: Accesor -> Accessor\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startLoc = this.state.startLoc;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startLoc.index);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            thisTypePredicate.asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      node.typeAnnotation = this.tsInType(() => {\n        this.next(); // \"<\"\n        return this.match(tt._const)\n          ? this.tsParseTypeReference()\n          : this.tsParseType();\n      });\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* isHangingDeclaration */ false,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n            /* decorators */ null,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n        /* decorators */ null,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(\n            node,\n            expr.name,\n            /* next */ false,\n            decorators,\n          );\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n      decorators: N.Decorator[] | null,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node, decorators);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location to include modifiers in range\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression =\n          this.startNodeAt<N.TsNonNullExpression>(startLoc);\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn =\n              this.tsTryParseGenericAsyncArrowFunction(startLoc);\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(startLoc);\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      let isSatisfies: boolean;\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        (this.isContextual(tt._as) ||\n          (isSatisfies = this.isContextual(tt._satisfies)))\n      ) {\n        const node = this.startNodeAt<\n          N.TsAsExpression | N.TsSatisfiesExpression\n        >(leftStartLoc);\n        node.expression = left;\n        node.typeAnnotation = this.tsInType(() => {\n          this.next(); // \"as\" or \"satisfies\"\n          if (this.match(tt._const)) {\n            if (isSatisfies) {\n              this.raise(Errors.UnexpectedKeyword, {\n                at: this.state.startLoc,\n                keyword: \"const\",\n              });\n            }\n            return this.tsParseTypeReference();\n          }\n\n          return this.tsParseType();\n        });\n        this.finishNode(\n          node,\n          isSatisfies ? \"TSSatisfiesExpression\" : \"TSAsExpression\",\n        );\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    checkImportReflection(node: Undone<N.ImportDeclaration>) {\n      super.checkImportReflection(node);\n      if (node.module && node.importKind !== \"value\") {\n        this.raise(TSErrors.ImportReflectionHasImportType, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(\n      node: Undone<N.Node>,\n      decorators: N.Decorator[] | null,\n    ): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n          decorators,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          !isValidAmbientConstInitializer(init, this.hasPlugin(\"estree\"))\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      flags: ParseStatementFlag,\n      decorators?: N.Decorator[] | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(flags, decorators);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(classBody, member as N.StaticBlock);\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n      decorators: N.Decorator[] | null,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr, decorators)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr, decorators);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty,\n    ): void {\n      if (!node.optional) {\n        if (this.eat(tt.bang)) {\n          node.definite = true;\n        } else if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    parseClassAccessorProperty(\n      node: N.ClassAccessorProperty,\n    ): N.ClassAccessorProperty {\n      this.parseClassPropertyAnnotation(node);\n      if (node.optional) {\n        this.raise(TSErrors.AccessorCannotBeOptional, { at: node });\n      }\n      return super.parseClassAccessorProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\" | \"using\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParameterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSSatisfiesExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSSatisfiesExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSSatisfiesExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n      decorators: N.Decorator[] | null,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.maybeTakeDecorators(\n          decorators,\n          this.parseClass<N.ClassDeclaration>(\n            node as N.ClassDeclaration,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          ),\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\n// If a const declaration has no type annotation and is initiailized to\n// a string literal, numeric literal, or enum reference, then it is\n// allowed. In an ideal world, we'd check whether init was *actually* an\n// enum reference, but we allow anything that \"could be\" a literal enum\n// in `isPossiblyLiteralEnum` since we don't have all the information\n// that the typescript compiler has.\nfunction isValidAmbientConstInitializer(\n  expression: N.Expression,\n  estree: boolean,\n): boolean {\n  const { type } = expression;\n  if (expression.extra?.parenthesized) {\n    return false;\n  }\n  if (estree) {\n    if (type === \"Literal\") {\n      const { value } = expression;\n      if (typeof value === \"string\" || typeof value === \"boolean\") {\n        return true;\n      }\n    }\n  } else {\n    if (type === \"StringLiteral\" || type === \"BooleanLiteral\") {\n      return true;\n    }\n  }\n  if (isNumber(expression, estree) || isNegativeNumber(expression, estree)) {\n    return true;\n  }\n  if (type === \"TemplateLiteral\" && expression.expressions.length === 0) {\n    return true;\n  }\n  if (isPossiblyLiteralEnum(expression)) {\n    return true;\n  }\n  return false;\n}\n\nfunction isNumber(expression: N.Expression, estree: boolean): boolean {\n  if (estree) {\n    return (\n      expression.type === \"Literal\" &&\n      (typeof expression.value === \"number\" || \"bigint\" in expression)\n    );\n  } else {\n    return (\n      expression.type === \"NumericLiteral\" ||\n      expression.type === \"BigIntLiteral\"\n    );\n  }\n}\n\nfunction isNegativeNumber(expression: N.Expression, estree: boolean): boolean {\n  if (expression.type === \"UnaryExpression\") {\n    const { operator, argument } = expression as N.UnaryExpression;\n    if (operator === \"-\" && isNumber(argument, estree)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholders = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholders;\n\ntype NodeOf<T extends keyof PossiblePlaceholders> = PossiblePlaceholders[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    chStartsBindingIdentifier(ch: number, pos: number): boolean {\n      if (super.chStartsBindingIdentifier(ch, pos)) {\n        return true;\n      }\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatementOrFunctionDeclaration(false);\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node, decorators: N.Decorator[] | null): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node, decorators);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node, decorators);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName();\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n   *\n   * - Parenthesized Destructuring patterns\n   * - RestElement is not the last element\n   * - Missing `=` in assignment pattern\n   *\n   * NOTE: There is a corresponding \"isAssignable\" method.\n   * When this one is updated, please check if also that one needs to be updated.\n   *\n   * @param node The expression atom\n   * @param isLHS Whether we are parsing a LeftHandSideExpression.\n   *              If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *              If isLHS is `false`, we are in an arrow function parameters list.\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParameterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc ??= this.state.startLoc;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param type A Node `type` string\n   * @param isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param expression The expression in question to check.\n   * @param options A set of options described below.\n   * @param options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param options.binding\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param options.checkClashes\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param options.allowingSloppyLetBinding\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param options.strictModeChanged\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param options.hasParenthesizedAncestor\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport {\n  type Position,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        const startIndex = startLoc.index;\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startIndex\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startIndex\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startIndex\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(finishedNode, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(base, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n    let decorators: N.Decorator[] | null = null;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        decorators = this.parseDecorators();\n      // fall through\n      case tt._class:\n        return this.parseClass(\n          this.maybeTakeDecorators(decorators, this.startNode()),\n          false,\n        );\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseAsyncFunctionExpression(\n                this.startNodeAtNode(id),\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(this.parseRestBinding(), spreadNodeStartLoc),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(startLoc: Position, expression: N.Expression): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startLoc.index);\n\n      this.takeSurroundingComments(\n        expression,\n        startLoc.index,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression =\n      this.startNodeAt<N.ParenthesizedExpression>(startLoc);\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(this: Parser, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``, await of []\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      (type === tt._of && !this.state.containsEsc) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr: N.Expression, startLoc: Position) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(startLoc);\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(startLoc);\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    if (!this.match(tt.braceL)) {\n      this.unexpected(null, tt.braceL);\n    }\n    // start program node immediately after `{`\n    const program = this.startNodeAt<N.Program>(this.state.endLoc);\n    this.next(); // eat `{`\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nexport const enum ParseFunctionFlag {\n  Expression = 0b0000,\n  Declaration = 0b0001,\n  HangingDeclaration = 0b0010,\n  NullableId = 0b0100,\n  Async = 0b1000,\n}\n\nexport const enum ParseStatementFlag {\n  StatementOnly = 0b0000,\n  AllowImportExport = 0b0001,\n  AllowDeclaration = 0b0010,\n  AllowFunctionDeclaration = 0b0100,\n  AllowLabeledFunction = 0b1000,\n}\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    let finishedProgram: N.Program;\n    if (end === tt.eof) {\n      // finish at eof for top level program\n      finishedProgram = this.finishNode(program, \"Program\");\n    } else {\n      // finish immediately before the end token\n      finishedProgram = this.finishNodeAt(\n        program,\n        \"Program\",\n        createPositionWithColumnOffset(this.state.startLoc, -1),\n      );\n    }\n    return finishedProgram;\n  }\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.hasFollowingBindingAtom();\n  }\n\n  chStartsBindingIdentifier(ch: number, pos: number) {\n    if (isIdentifierStart(ch)) {\n      keywordRelationalOperator.lastIndex = pos;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    } else if (ch === charCodes.backslash) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  chStartsBindingPattern(ch: number) {\n    return (\n      ch === charCodes.leftSquareBracket || ch === charCodes.leftCurlyBrace\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `let` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingAtom(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return (\n      this.chStartsBindingPattern(nextCh) ||\n      this.chStartsBindingIdentifier(nextCh, next)\n    );\n  }\n\n  /**\n   * Assuming we have seen a contextual `using` and declaration is allowed, check if it\n   * starts a variable declaration so that it should be interpreted as a keyword.\n   */\n  hasFollowingBindingIdentifier(): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    return this.chStartsBindingIdentifier(nextCh, next);\n  }\n\n  startsUsingForOf(): boolean {\n    const lookahead = this.lookahead();\n    if (lookahead.type === tt._of && !lookahead.containsEsc) {\n      // `using of` must start a for-lhs-of statement\n      return false;\n    } else {\n      this.expectPlugin(\"explicitResourceManagement\");\n      return true;\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleItem\n  parseModuleItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowImportExport |\n        ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-StatementListItem\n  parseStatementListItem(this: Parser) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowDeclaration |\n        ParseStatementFlag.AllowFunctionDeclaration |\n        ParseStatementFlag.AllowLabeledFunction,\n    );\n  }\n\n  parseStatementOrFunctionDeclaration(\n    this: Parser,\n    disallowLabeledFunction: boolean,\n  ) {\n    return this.parseStatementLike(\n      ParseStatementFlag.AllowFunctionDeclaration |\n        (disallowLabeledFunction ? 0 : ParseStatementFlag.AllowLabeledFunction),\n    );\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  parseStatement(this: Parser) {\n    return this.parseStatementLike(ParseStatementFlag.StatementOnly);\n  }\n\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatementLike(\n    this: Parser,\n    flags: ParseStatementFlag,\n  ):\n    | N.Statement\n    | N.Declaration\n    | N.ImportDeclaration\n    | N.ExportDefaultDeclaration\n    | N.ExportNamedDeclaration\n    | N.ExportAllDeclaration {\n    let decorators: N.Decorator[] | null = null;\n\n    if (this.match(tt.at)) {\n      decorators = this.parseDecorators(true);\n    }\n    return this.parseStatementContent(flags, decorators);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    flags: ParseStatementFlag,\n    decorators?: N.Decorator[] | null,\n  ): N.Statement {\n    const starttype = this.state.type;\n    const node = this.startNode();\n    const allowDeclaration = !!(flags & ParseStatementFlag.AllowDeclaration);\n    const allowFunctionDeclaration = !!(\n      flags & ParseStatementFlag.AllowFunctionDeclaration\n    );\n    const topLevel = flags & ParseStatementFlag.AllowImportExport;\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoWhileStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (!allowDeclaration) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (!allowFunctionDeclaration) {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !allowDeclaration && allowFunctionDeclaration,\n        );\n      case tt._class:\n        if (!allowDeclaration) this.unexpected();\n        return this.parseClass(\n          this.maybeTakeDecorators(\n            decorators,\n            node as Undone<N.ClassDeclaration>,\n          ),\n          true,\n        );\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._using:\n        // using [no LineTerminator here] BindingList[+Using]\n        if (\n          this.hasFollowingLineBreak() ||\n          this.state.containsEsc ||\n          !this.hasFollowingBindingIdentifier()\n        ) {\n          break;\n        }\n        this.expectPlugin(\"explicitResourceManagement\");\n        if (!this.scope.inModule && this.scope.inTopLevel) {\n          this.raise(Errors.UnexpectedUsingDeclaration, {\n            at: this.state.startLoc,\n          });\n        } else if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          \"using\",\n        );\n      case tt._let: {\n        if (this.state.containsEsc) {\n          break;\n        }\n        // `let [` is an explicit negative lookahead for\n        // ExpressionStatement, so special-case it first.\n        const next = this.nextTokenStart();\n        const nextCh = this.codePointAtPos(next);\n        if (nextCh !== charCodes.leftSquareBracket) {\n          if (!allowDeclaration && this.hasFollowingLineBreak()) break;\n          if (\n            !this.chStartsBindingIdentifier(nextCh, next) &&\n            nextCh !== charCodes.leftCurlyBrace\n          ) {\n            break;\n          }\n        }\n      }\n      // fall through\n      case tt._const: {\n        if (!allowDeclaration) {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n      }\n      // fall through\n      case tt._var: {\n        const kind = this.state.value;\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n      }\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n            decorators,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (!allowDeclaration) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next(); // eat 'async'\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !allowDeclaration && allowFunctionDeclaration,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        flags,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n        decorators,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  decoratorsEnabledBeforeExport(): boolean {\n    if (this.hasPlugin(\"decorators-legacy\")) return true;\n    return (\n      this.hasPlugin(\"decorators\") &&\n      !!this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n    );\n  }\n\n  // Attach the decorators to the given class.\n  // NOTE: This method changes the .start location of the class, and thus\n  // can affect comment attachment. Calling it before or after finalizing\n  // the class node (and thus finalizing its comments) changes how comments\n  // before the `class` keyword or before the final .start location of the\n  // class are attached.\n  maybeTakeDecorators<T extends Undone<N.Class>>(\n    maybeDecorators: N.Decorator[] | null,\n    classNode: T,\n    exportNode?: Undone<N.ExportDefaultDeclaration | N.ExportNamedDeclaration>,\n  ): T {\n    if (maybeDecorators) {\n      classNode.decorators = maybeDecorators;\n      this.resetStartLocationFromNode(classNode, maybeDecorators[0]);\n      if (exportNode) this.resetStartLocationFromNode(exportNode, classNode);\n    }\n    return classNode;\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): N.Decorator[] {\n    const decorators = [];\n    do {\n      decorators.push(this.parseDecorator());\n    } while (this.match(tt.at));\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (!this.decoratorsEnabledBeforeExport()) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n\n    return decorators;\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  // https://tc39.es/ecma262/#prod-DoWhileStatement\n  parseDoWhileStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const startsWithUsing =\n      this.isContextual(tt._using) && !this.hasFollowingLineBreak();\n    const isLetOrUsing =\n      (startsWithLet && this.hasFollowingBindingAtom()) ||\n      (startsWithUsing &&\n        this.hasFollowingBindingIdentifier() &&\n        this.startsUsingForOf());\n    if (this.match(tt._var) || this.match(tt._const) || isLetOrUsing) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      const isForIn = this.match(tt._in);\n      if (isForIn && startsWithUsing) {\n        this.raise(Errors.ForInUsing, { at: init });\n      }\n      if (\n        (isForIn || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  // https://tc39.es/ecma262/#prod-HoistableDeclaration\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync: boolean,\n    isHangingDeclaration: boolean,\n  ): N.FunctionDeclaration {\n    this.next(); // eat 'function'\n    return this.parseFunction(\n      node,\n      ParseFunctionFlag.Declaration |\n        (isHangingDeclaration ? ParseFunctionFlag.HangingDeclaration : 0) |\n        (isAsync ? ParseFunctionFlag.Async : 0),\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-IfStatement\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    // Annex B.3.3\n    // https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses\n    node.consequent = this.parseStatementOrFunctionDeclaration(\n      // https://tc39.es/ecma262/#sec-if-statement-static-semantics-early-errors\n      true,\n    );\n    node.alternate = this.eat(tt._else)\n      ? this.parseStatementOrFunctionDeclaration(true)\n      : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-SwitchStatement\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatementListItem());\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-VariableStatement\n  // https://tc39.es/ecma262/#prod-LexicalDeclaration\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  // https://tc39.es/ecma262/#prod-WhileStatement\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-LabelledStatement\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    flags: ParseStatementFlag,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    // https://tc39.es/ecma262/#prod-LabelledItem\n    node.body =\n      flags & ParseStatementFlag.AllowLabeledFunction\n        ? this.parseStatementOrFunctionDeclaration(false)\n        : this.parseStatement();\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n    /* eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    decorators: N.Decorator[] | null,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = topLevel\n        ? this.parseModuleItem()\n        : this.parseStatementListItem();\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\" | \"using\",\n  ): void {\n    const id = this.parseBindingAtom();\n    this.checkLVal(id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n    decl.id = id;\n  }\n\n  // https://tc39.es/ecma262/#prod-AsyncFunctionExpression\n  parseAsyncFunctionExpression(\n    this: Parser,\n    node: Undone<N.FunctionExpression>,\n  ): N.FunctionExpression {\n    return this.parseFunction(node, ParseFunctionFlag.Async);\n  }\n\n  // Parse a function declaration or expression (depending on the\n  // ParseFunctionFlag.Declaration flag).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    flags: ParseFunctionFlag = ParseFunctionFlag.Expression,\n  ): T {\n    const hangingDeclaration = flags & ParseFunctionFlag.HangingDeclaration;\n    const isDeclaration = !!(flags & ParseFunctionFlag.Declaration);\n    const requireId = isDeclaration && !(flags & ParseFunctionFlag.NullableId);\n    const isAsync = !!(flags & ParseFunctionFlag.Async);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star)) {\n      if (hangingDeclaration) {\n        this.raise(Errors.GeneratorInSingleStatementContext, {\n          at: this.state.startLoc,\n        });\n      }\n      this.next(); // eat *\n      node.generator = true;\n    }\n\n    if (isDeclaration) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isDeclaration) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isDeclaration ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isDeclaration && !hangingDeclaration) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next(); // 'class'\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n    decorators: N.Decorator[] | null,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      const node2 = node as Undone<N.ExportNamedDeclaration>;\n      this.checkExport(node2, true, false, !!node2.source);\n      if (node2.declaration?.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, node2.declaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n      return this.finishNode(node2, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      const node2 = node as Undone<N.ExportDefaultDeclaration>;\n      // export default ...\n      const decl = this.parseExportDefaultExpression();\n      node2.declaration = decl;\n\n      if (decl.type === \"ClassDeclaration\") {\n        this.maybeTakeDecorators(decorators, decl as N.ClassDeclaration, node2);\n      } else if (decorators) {\n        throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n      }\n\n      this.checkExport(node2, true, true);\n\n      return this.finishNode(node2, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(this.state.lastTokStartLoc);\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    if (this.match(tt._function)) {\n      this.next();\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration | ParseFunctionFlag.NullableId,\n      );\n    } else if (this.isAsyncFunction()) {\n      this.next(); // eat 'async'\n      this.next(); // eat 'function'\n      return this.parseFunction(\n        expr as Undone<N.FunctionDeclaration>,\n        ParseFunctionFlag.Declaration |\n          ParseFunctionFlag.NullableId |\n          ParseFunctionFlag.Async,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      return this.parseClass(\n        this.maybeTakeDecorators(\n          this.parseDecorators(false),\n          this.startNode<N.ClassDeclaration>(),\n        ),\n        true,\n        true,\n      );\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    if (this.match(tt._class)) {\n      const node = this.parseClass(\n        this.startNode<N.ClassDeclaration>(),\n        true,\n        false,\n      );\n      return node;\n    }\n    return this.parseStatementListItem() as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkImportReflection(node: Undone<N.ImportDeclaration>) {\n    if (node.module) {\n      if (\n        node.specifiers.length !== 1 ||\n        node.specifiers[0].type !== \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(Errors.ImportReflectionNotBinding, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n      if (node.assertions?.length > 0) {\n        this.raise(Errors.ImportReflectionHasAssertion, {\n          at: node.specifiers[0].loc.start,\n        });\n      }\n    }\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  parseMaybeImportReflection(node: Undone<N.ImportDeclaration>) {\n    let isImportReflection = false;\n    if (this.isContextual(tt._module)) {\n      const lookahead = this.lookahead();\n      const nextType = lookahead.type;\n      if (tokenIsIdentifier(nextType)) {\n        if (nextType !== tt._from) {\n          // import module x\n          isImportReflection = true;\n        } else {\n          const nextNextTokenFirstChar = this.input.charCodeAt(\n            this.nextTokenStartSince(lookahead.end),\n          );\n          if (nextNextTokenFirstChar === charCodes.lowercaseF) {\n            // import module from from ...\n            isImportReflection = true;\n          }\n        }\n      } else if (nextType !== tt.comma) {\n        // import module { x } ...\n        // import module \"foo\"\n        // They are invalid, we will continue parsing and throw\n        // a recoverable error later\n        isImportReflection = true;\n      }\n    }\n    if (isImportReflection) {\n      this.expectPlugin(\"importReflection\");\n      this.next(); // eat tt._module;\n      node.module = true;\n    } else if (this.hasPlugin(\"importReflection\")) {\n      node.module = false;\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      this.parseMaybeImportReflection(node);\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkImportReflection(node);\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries AssertEntries}\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(\n    internalTokenTypes,\n  ) as (keyof InternalTokenTypes)[]) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}