{"ast":null,"code":"import shallowEqual from \"./shallowEqual\";\nimport { deserializeUrlNameMap } from \"./urlName\";\nlet cachedSearchString;\nlet cachedUrlNameMapString;\nlet cachedSearchStringToObjectFn;\nlet cachedParsedQuery = {};\nconst memoSearchStringToObject = (searchStringToObject, searchString, urlNameMapStr) => {\n  if (cachedSearchString === searchString && cachedSearchStringToObjectFn === searchStringToObject && cachedUrlNameMapString === urlNameMapStr) {\n    return cachedParsedQuery;\n  }\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString != null ? searchString : \"\");\n  cachedUrlNameMapString = urlNameMapStr;\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    if (urlNameMap == null ? void 0 : urlNameMap[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\nexport { memoSearchStringToObject };","map":{"version":3,"mappings":"AACA,OAAOA,kBAAkB;AACzB,SAASC,6BAA6B;AAEtC,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAGJ,IAAIC,oBAAkC,CAAC;AAKhC,MAAMC,2BAA2B,CACtCC,sBACAC,cAIAC,kBACG;EAEH,IACEP,uBAAuBM,gBACvBJ,iCAAiCG,wBACjCJ,2BAA2BM,eAC3B;IACA,OAAOJ;EACT;EAEAH,qBAAqBM;EACrBJ,+BAA+BG;EAC/B,MAAMG,iBAAiBH,qBAAqBC,sCAAgB,EAAE;EAC9DL,yBAAyBM;EAEzB,MAAME,aAAaV,sBAAsBQ,aAAa;EAGtD,SAAS,CAACG,KAAKC,KAAK,KAAKC,OAAOC,QAAQL,cAAc,GAAG;IAEvD,IAAIC,yCAAaC,MAAM;MACrB,OAAOF,eAAeE;MACtBA,MAAMD,WAAWC;MACjBF,eAAeE,OAAOC;IACxB;IAEA,MAAMG,WAAWX,kBAAkBO;IACnC,IAAIZ,aAAaa,OAAOG,QAAQ,GAAG;MACjCN,eAAeE,OAAOI;IACxB;EACF;EAEAX,oBAAoBK;EACpB,OAAOA;AACT","names":["shallowEqual","deserializeUrlNameMap","cachedSearchString","cachedUrlNameMapString","cachedSearchStringToObjectFn","cachedParsedQuery","memoSearchStringToObject","searchStringToObject","searchString","urlNameMapStr","newParsedQuery","urlNameMap","key","value","Object","entries","oldValue"],"sources":["/Users/elahehaslani/Documents/GitHub/movie-ticket-booking/node_modules/use-query-params/src/memoSearchStringToObject.ts"],"sourcesContent":["import { EncodedQuery } from 'serialize-query-params';\nimport shallowEqual from './shallowEqual';\nimport { deserializeUrlNameMap } from './urlName';\n\nlet cachedSearchString: string | undefined;\nlet cachedUrlNameMapString: string | undefined;\nlet cachedSearchStringToObjectFn:\n  | ((searchString: string) => EncodedQuery)\n  | undefined;\nlet cachedParsedQuery: EncodedQuery = {};\n\n/**\n * cached conversion of ?foo=1&bar=2 to { foo: '1', bar: '2' }\n */\nexport const memoSearchStringToObject = (\n  searchStringToObject: (searchString: string) => EncodedQuery,\n  searchString?: string | undefined,\n  /** optionally provide a mapping string to handle renames via `urlName`\n   * mapping are separated by \\n and mappings are urlName\\0paramName\n   */\n  urlNameMapStr?: string | undefined\n) => {\n  // if we have a cached version, just return it\n  if (\n    cachedSearchString === searchString &&\n    cachedSearchStringToObjectFn === searchStringToObject &&\n    cachedUrlNameMapString === urlNameMapStr\n  ) {\n    return cachedParsedQuery;\n  }\n\n  cachedSearchString = searchString;\n  cachedSearchStringToObjectFn = searchStringToObject;\n  const newParsedQuery = searchStringToObject(searchString ?? '');\n  cachedUrlNameMapString = urlNameMapStr;\n\n  const urlNameMap = deserializeUrlNameMap(urlNameMapStr);\n\n  // keep old values for keys if they are the same\n  for (let [key, value] of Object.entries(newParsedQuery)) {\n    // handle url name mapping\n    if (urlNameMap?.[key]) {\n      delete newParsedQuery[key];\n      key = urlNameMap[key];\n      newParsedQuery[key] = value;\n    }\n\n    const oldValue = cachedParsedQuery[key];\n    if (shallowEqual(value, oldValue)) {\n      newParsedQuery[key] = oldValue;\n    }\n  }\n\n  cachedParsedQuery = newParsedQuery;\n  return newParsedQuery;\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}