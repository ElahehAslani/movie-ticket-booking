{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = filterItems;\nexports.isRequired = isRequired;\nexports.targetsSupported = targetsSupported;\nvar _semver = require(\"semver\");\nvar _plugins = require(\"@babel/compat-data/plugins\");\nvar _utils = require(\"./utils\");\nfunction targetsSupported(target, support) {\n  const targetEnvironments = Object.keys(target);\n  if (targetEnvironments.length === 0) {\n    return false;\n  }\n  const unsupportedEnvironments = targetEnvironments.filter(environment => {\n    const lowestImplementedVersion = (0, _utils.getLowestImplementedVersion)(support, environment);\n    if (!lowestImplementedVersion) {\n      return true;\n    }\n    const lowestTargetedVersion = target[environment];\n    if ((0, _utils.isUnreleasedVersion)(lowestTargetedVersion, environment)) {\n      return false;\n    }\n    if ((0, _utils.isUnreleasedVersion)(lowestImplementedVersion, environment)) {\n      return true;\n    }\n    if (!_semver.valid(lowestTargetedVersion.toString())) {\n      throw new Error(`Invalid version passed for target \"${environment}\": \"${lowestTargetedVersion}\". ` + \"Versions must be in semver format (major.minor.patch)\");\n    }\n    return _semver.gt((0, _utils.semverify)(lowestImplementedVersion), lowestTargetedVersion.toString());\n  });\n  return unsupportedEnvironments.length === 0;\n}\nfunction isRequired(name, targets) {\n  let {\n    compatData = _plugins,\n    includes,\n    excludes\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (excludes != null && excludes.has(name)) return false;\n  if (includes != null && includes.has(name)) return true;\n  return !targetsSupported(targets, compatData[name]);\n}\nfunction filterItems(list, includes, excludes, targets, defaultIncludes, defaultExcludes, pluginSyntaxMap) {\n  const result = new Set();\n  const options = {\n    compatData: list,\n    includes,\n    excludes\n  };\n  for (const item in list) {\n    if (isRequired(item, targets, options)) {\n      result.add(item);\n    } else if (pluginSyntaxMap) {\n      const shippedProposalsSyntax = pluginSyntaxMap.get(item);\n      if (shippedProposalsSyntax) {\n        result.add(shippedProposalsSyntax);\n      }\n    }\n  }\n  if (defaultIncludes) {\n    defaultIncludes.forEach(item => !excludes.has(item) && result.add(item));\n  }\n  if (defaultExcludes) {\n    defaultExcludes.forEach(item => !includes.has(item) && result.delete(item));\n  }\n  return result;\n}","map":{"version":3,"mappings":"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","names":["targetsSupported","target","support","targetEnvironments","Object","keys","length","unsupportedEnvironments","filter","environment","lowestImplementedVersion","lowestTargetedVersion","semver","valid","toString","Error","gt","isRequired","name","targets","compatData","pluginsCompatData","includes","excludes","has","filterItems","list","defaultIncludes","defaultExcludes","pluginSyntaxMap","result","Set","options","item","add","shippedProposalsSyntax","get","forEach","delete"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/helper-compilation-targets/src/filter-items.ts"],"sourcesContent":["import semver from \"semver\";\n\nimport pluginsCompatData from \"@babel/compat-data/plugins\";\n\nimport type { Targets } from \"./types\";\nimport {\n  getLowestImplementedVersion,\n  isUnreleasedVersion,\n  semverify,\n} from \"./utils\";\n\nexport function targetsSupported(target: Targets, support: Targets) {\n  const targetEnvironments = Object.keys(target) as Array<keyof Targets>;\n\n  if (targetEnvironments.length === 0) {\n    return false;\n  }\n\n  const unsupportedEnvironments = targetEnvironments.filter(environment => {\n    const lowestImplementedVersion = getLowestImplementedVersion(\n      support,\n      environment,\n    );\n\n    // Feature is not implemented in that environment\n    if (!lowestImplementedVersion) {\n      return true;\n    }\n\n    const lowestTargetedVersion = target[environment];\n\n    // If targets has unreleased value as a lowest version, then don't require a plugin.\n    if (isUnreleasedVersion(lowestTargetedVersion, environment)) {\n      return false;\n    }\n\n    // Include plugin if it is supported in the unreleased environment, which wasn't specified in targets\n    if (isUnreleasedVersion(lowestImplementedVersion, environment)) {\n      return true;\n    }\n\n    if (!semver.valid(lowestTargetedVersion.toString())) {\n      throw new Error(\n        `Invalid version passed for target \"${environment}\": \"${lowestTargetedVersion}\". ` +\n          \"Versions must be in semver format (major.minor.patch)\",\n      );\n    }\n\n    return semver.gt(\n      semverify(lowestImplementedVersion),\n      lowestTargetedVersion.toString(),\n    );\n  });\n\n  return unsupportedEnvironments.length === 0;\n}\n\nexport function isRequired(\n  name: string,\n  targets: Targets,\n  {\n    compatData = pluginsCompatData,\n    includes,\n    excludes,\n  }: {\n    compatData?: { [feature: string]: Targets };\n    includes?: Set<string>;\n    excludes?: Set<string>;\n  } = {},\n) {\n  if (excludes?.has(name)) return false;\n  if (includes?.has(name)) return true;\n  return !targetsSupported(targets, compatData[name]);\n}\n\nexport default function filterItems(\n  list: { [feature: string]: Targets },\n  includes: Set<string>,\n  excludes: Set<string>,\n  targets: Targets,\n  defaultIncludes: Array<string> | null,\n  defaultExcludes?: Array<string> | null,\n  pluginSyntaxMap?: Map<string, string | null>,\n) {\n  const result = new Set<string>();\n  const options = { compatData: list, includes, excludes };\n\n  for (const item in list) {\n    if (isRequired(item, targets, options)) {\n      result.add(item);\n    } else if (pluginSyntaxMap) {\n      const shippedProposalsSyntax = pluginSyntaxMap.get(item);\n\n      if (shippedProposalsSyntax) {\n        result.add(shippedProposalsSyntax);\n      }\n    }\n  }\n\n  if (defaultIncludes) {\n    defaultIncludes.forEach(item => !excludes.has(item) && result.add(item));\n  }\n\n  if (defaultExcludes) {\n    defaultExcludes.forEach(item => !includes.has(item) && result.delete(item));\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}