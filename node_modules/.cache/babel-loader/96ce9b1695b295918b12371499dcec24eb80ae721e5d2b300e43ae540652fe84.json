{"ast":null,"code":"import * as React from \"react\";\nimport { mergeOptions, defaultOptions } from \"./options\";\nconst providerlessContextValue = {\n  adapter: {},\n  options: defaultOptions\n};\nconst QueryParamContext = React.createContext(providerlessContextValue);\nfunction useQueryParamContext() {\n  const value = React.useContext(QueryParamContext);\n  if (value === void 0 || value === providerlessContextValue) {\n    throw new Error(\"useQueryParams must be used within a QueryParamProvider\");\n  }\n  return value;\n}\nfunction QueryParamProviderInner(_ref) {\n  let {\n    children,\n    adapter,\n    options\n  } = _ref;\n  const {\n    adapter: parentAdapter,\n    options: parentOptions\n  } = React.useContext(QueryParamContext);\n  const value = React.useMemo(() => {\n    return {\n      adapter: adapter != null ? adapter : parentAdapter,\n      options: mergeOptions(parentOptions, options)\n    };\n  }, [adapter, options, parentAdapter, parentOptions]);\n  return /* @__PURE__ */React.createElement(QueryParamContext.Provider, {\n    value\n  }, children);\n}\nfunction QueryParamProvider(_ref2) {\n  let {\n    children,\n    adapter,\n    options\n  } = _ref2;\n  const Adapter = adapter;\n  return Adapter ? /* @__PURE__ */React.createElement(Adapter, null, adapter2 => /* @__PURE__ */React.createElement(QueryParamProviderInner, {\n    adapter: adapter2,\n    options\n  }, children)) : /* @__PURE__ */React.createElement(QueryParamProviderInner, {\n    options\n  }, children);\n}\nvar QueryParamProvider_default = QueryParamProvider;\nexport { QueryParamContext, QueryParamProvider, QueryParamProvider_default as default, useQueryParamContext };","map":{"version":3,"mappings":"AAAA,YAAYA,WAAW;AACvB,SACEC,cACAC,sBAGK;AAYP,MAAMC,2BAAmD;EACvDC,SAAS,CAAC;EACVC,SAASH;AACX;AAEO,MAAMI,oBAAoBN,MAAMO,cACrCJ,yBACF;AAEO,SAASK,uBAAuB;EACrC,MAAMC,QAAQT,MAAMU,WAAWJ,iBAAiB;EAChD,IAEGG,UAAU,UAAaA,UAAUN,0BAClC;IACA,MAAM,IAAIQ,MAAM,yDAAyD;EAC3E;EAEA,OAAOF;AACT;AAwBA,SAASG,8BAQN;EAAA,IAR8B;IAC/BC;IACAT;IACAC;EACF;EAME,MAAM;IAAED,SAASU;IAAeT,SAASU;EAAc,IACrDf,MAAMU,WAAWJ,iBAAiB;EAEpC,MAAMG,QAAQT,MAAMgB,QAAQ,MAAM;IAChC,OAAO;MACLZ,SAASA,4BAAWU;MACpBT,SAASJ,aACPc,eACAV;IAEJ;EACF,GAAG,CAACD,SAASC,SAASS,eAAeC,aAAa,CAAC;EAEnD,OACE,mCAACT,kBAAkBW,UAAlB;IAA2BR;EAAA,GACzBI,QACH;AAEJ;AAMO,SAASK,0BAIY;EAAA,IAJO;IACjCL;IACAT;IACAC;EACF;EACE,MAAMc,UAAUf;EAChB,OAAOe,UACL,mCAACA,eACGf,YACA,mCAACQ;IAAwBR,SAASA;IAASC;EAAA,GACxCQ,QACH,CAEJ,IAEA,mCAACD;IAAwBP;EAAA,GACtBQ,QACH;AAEJ;AAEA,IAAOO,6BAAQF","names":["React","mergeOptions","defaultOptions","providerlessContextValue","adapter","options","QueryParamContext","createContext","useQueryParamContext","value","useContext","Error","QueryParamProviderInner","children","parentAdapter","parentOptions","useMemo","Provider","QueryParamProvider","Adapter","QueryParamProvider_default"],"sources":["/Users/elahehaslani/Documents/GitHub/movie-ticket-booking/node_modules/use-query-params/src/QueryParamProvider.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  mergeOptions,\n  defaultOptions,\n  QueryParamOptions,\n  QueryParamOptionsWithRequired,\n} from './options';\nimport { QueryParamAdapter, QueryParamAdapterComponent } from './types';\n\n/**\n * Shape of the QueryParamContext, which the hooks consume to read and\n * update the URL state.\n */\ntype QueryParamContextValue = {\n  adapter: QueryParamAdapter;\n  options: QueryParamOptionsWithRequired;\n};\n\nconst providerlessContextValue: QueryParamContextValue = {\n  adapter: {} as QueryParamAdapter,\n  options: defaultOptions,\n};\n\nexport const QueryParamContext = React.createContext<QueryParamContextValue>(\n  providerlessContextValue\n);\n\nexport function useQueryParamContext() {\n  const value = React.useContext(QueryParamContext);\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    (value === undefined || value === providerlessContextValue)\n  ) {\n    throw new Error('useQueryParams must be used within a QueryParamProvider');\n  }\n\n  return value;\n}\n\n/**\n * Props for the Provider component, used to hook the active routing\n * system into our controls. Note only the root provider requires\n * `adapter`. We try to encourage that via intellisense by writing\n * the types this way (you must provide at least one of adapter or options,\n * default intellisense suggests adapter required.)\n */\ntype QueryParamProviderProps = {\n  /** Main app goes here */\n  children: React.ReactNode;\n} & (\n  | {\n      adapter?: never;\n      options: QueryParamOptions;\n    }\n  | {\n      /** required for the root provider but not for nested ones */\n      adapter: QueryParamAdapterComponent;\n      options?: QueryParamOptions;\n    }\n);\n\nfunction QueryParamProviderInner({\n  children,\n  adapter,\n  options,\n}: {\n  children: React.ReactNode;\n  adapter?: QueryParamAdapter | undefined;\n  options?: QueryParamOptions;\n}) {\n  // allow merging in parent options\n  const { adapter: parentAdapter, options: parentOptions } =\n    React.useContext(QueryParamContext);\n\n  const value = React.useMemo(() => {\n    return {\n      adapter: adapter ?? parentAdapter,\n      options: mergeOptions(\n        parentOptions,\n        options\n      ) as QueryParamOptionsWithRequired,\n    };\n  }, [adapter, options, parentAdapter, parentOptions]);\n\n  return (\n    <QueryParamContext.Provider value={value}>\n      {children}\n    </QueryParamContext.Provider>\n  );\n}\n\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\nexport function QueryParamProvider({\n  children,\n  adapter,\n  options,\n}: QueryParamProviderProps) {\n  const Adapter = adapter;\n  return Adapter ? (\n    <Adapter>\n      {(adapter) => (\n        <QueryParamProviderInner adapter={adapter} options={options}>\n          {children}\n        </QueryParamProviderInner>\n      )}\n    </Adapter>\n  ) : (\n    <QueryParamProviderInner options={options}>\n      {children}\n    </QueryParamProviderInner>\n  );\n}\n\nexport default QueryParamProvider;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}