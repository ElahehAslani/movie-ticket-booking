{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"TargetNames\", {\n  enumerable: true,\n  get: function () {\n    return _options.TargetNames;\n  }\n});\nexports.default = getTargets;\nObject.defineProperty(exports, \"filterItems\", {\n  enumerable: true,\n  get: function () {\n    return _filterItems.default;\n  }\n});\nObject.defineProperty(exports, \"getInclusionReasons\", {\n  enumerable: true,\n  get: function () {\n    return _debug.getInclusionReasons;\n  }\n});\nexports.isBrowsersQueryValid = isBrowsersQueryValid;\nObject.defineProperty(exports, \"isRequired\", {\n  enumerable: true,\n  get: function () {\n    return _filterItems.isRequired;\n  }\n});\nObject.defineProperty(exports, \"prettifyTargets\", {\n  enumerable: true,\n  get: function () {\n    return _pretty.prettifyTargets;\n  }\n});\nObject.defineProperty(exports, \"unreleasedLabels\", {\n  enumerable: true,\n  get: function () {\n    return _targets.unreleasedLabels;\n  }\n});\nvar _browserslist = require(\"browserslist\");\nvar _helperValidatorOption = require(\"@babel/helper-validator-option\");\nvar _nativeModules = require(\"@babel/compat-data/native-modules\");\nvar _lruCache = require(\"lru-cache\");\nvar _utils = require(\"./utils\");\nvar _targets = require(\"./targets\");\nvar _options = require(\"./options\");\nvar _pretty = require(\"./pretty\");\nvar _debug = require(\"./debug\");\nvar _filterItems = require(\"./filter-items\");\nconst ESM_SUPPORT = _nativeModules[\"es6.module\"];\nconst v = new _helperValidatorOption.OptionValidator(\"@babel/helper-compilation-targets\");\nfunction validateTargetNames(targets) {\n  const validTargets = Object.keys(_options.TargetNames);\n  for (const target of Object.keys(targets)) {\n    if (!(target in _options.TargetNames)) {\n      throw new Error(v.formatMessage(`'${target}' is not a valid target\n- Did you mean '${(0, _helperValidatorOption.findSuggestion)(target, validTargets)}'?`));\n    }\n  }\n  return targets;\n}\nfunction isBrowsersQueryValid(browsers) {\n  return typeof browsers === \"string\" || Array.isArray(browsers) && browsers.every(b => typeof b === \"string\");\n}\nfunction validateBrowsers(browsers) {\n  v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), `'${String(browsers)}' is not a valid browserslist query`);\n  return browsers;\n}\nfunction getLowestVersions(browsers) {\n  return browsers.reduce((all, browser) => {\n    const [browserName, browserVersion] = browser.split(\" \");\n    const target = _targets.browserNameMap[browserName];\n    if (!target) {\n      return all;\n    }\n    try {\n      const splitVersion = browserVersion.split(\"-\")[0].toLowerCase();\n      const isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, target);\n      if (!all[target]) {\n        all[target] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);\n        return all;\n      }\n      const version = all[target];\n      const isUnreleased = (0, _utils.isUnreleasedVersion)(version, target);\n      if (isUnreleased && isSplitUnreleased) {\n        all[target] = (0, _utils.getLowestUnreleased)(version, splitVersion, target);\n      } else if (isUnreleased) {\n        all[target] = (0, _utils.semverify)(splitVersion);\n      } else if (!isUnreleased && !isSplitUnreleased) {\n        const parsedBrowserVersion = (0, _utils.semverify)(splitVersion);\n        all[target] = (0, _utils.semverMin)(version, parsedBrowserVersion);\n      }\n    } catch (e) {}\n    return all;\n  }, {});\n}\nfunction outputDecimalWarning(decimalTargets) {\n  if (!decimalTargets.length) {\n    return;\n  }\n  console.warn(\"Warning, the following targets are using a decimal version:\\n\");\n  decimalTargets.forEach(_ref => {\n    let {\n      target,\n      value\n    } = _ref;\n    return console.warn(`  ${target}: ${value}`);\n  });\n  console.warn(`\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\ngetting parsed as 6.1, which can lead to unexpected behavior.\n`);\n}\nfunction semverifyTarget(target, value) {\n  try {\n    return (0, _utils.semverify)(value);\n  } catch (error) {\n    throw new Error(v.formatMessage(`'${value}' is not a valid value for 'targets.${target}'.`));\n  }\n}\nfunction nodeTargetParser(value) {\n  const parsed = value === true || value === \"current\" ? process.versions.node : semverifyTarget(\"node\", value);\n  return [\"node\", parsed];\n}\nfunction defaultTargetParser(target, value) {\n  const version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);\n  return [target, version];\n}\nfunction generateTargets(inputTargets) {\n  const input = Object.assign({}, inputTargets);\n  delete input.esmodules;\n  delete input.browsers;\n  return input;\n}\nfunction resolveTargets(queries, env) {\n  const resolved = _browserslist(queries, {\n    mobileToDesktop: true,\n    env\n  });\n  return getLowestVersions(resolved);\n}\nconst targetsCache = new _lruCache({\n  max: 64\n});\nfunction resolveTargetsCached(queries, env) {\n  const cacheKey = typeof queries === \"string\" ? queries : queries.join() + env;\n  let cached = targetsCache.get(cacheKey);\n  if (!cached) {\n    cached = resolveTargets(queries, env);\n    targetsCache.set(cacheKey, cached);\n  }\n  return Object.assign({}, cached);\n}\nfunction getTargets() {\n  let inputTargets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _browsers, _browsers2;\n  let {\n    browsers,\n    esmodules\n  } = inputTargets;\n  const {\n    configPath = \".\"\n  } = options;\n  validateBrowsers(browsers);\n  const input = generateTargets(inputTargets);\n  let targets = validateTargetNames(input);\n  const shouldParseBrowsers = !!browsers;\n  const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;\n  const shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;\n  if (!browsers && shouldSearchForConfig) {\n    browsers = _browserslist.loadConfig({\n      config: options.configFile,\n      path: configPath,\n      env: options.browserslistEnv\n    });\n    if (browsers == null) {\n      {\n        browsers = [];\n      }\n    }\n  }\n  if (esmodules && (esmodules !== \"intersect\" || !((_browsers = browsers) != null && _browsers.length))) {\n    browsers = Object.keys(ESM_SUPPORT).map(browser => `${browser} >= ${ESM_SUPPORT[browser]}`).join(\", \");\n    esmodules = false;\n  }\n  if ((_browsers2 = browsers) != null && _browsers2.length) {\n    const queryBrowsers = resolveTargetsCached(browsers, options.browserslistEnv);\n    if (esmodules === \"intersect\") {\n      for (const browser of Object.keys(queryBrowsers)) {\n        const version = queryBrowsers[browser];\n        const esmSupportVersion = ESM_SUPPORT[browser];\n        if (esmSupportVersion) {\n          queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(esmSupportVersion), browser);\n        } else {\n          delete queryBrowsers[browser];\n        }\n      }\n    }\n    targets = Object.assign(queryBrowsers, targets);\n  }\n  const result = {};\n  const decimalWarnings = [];\n  for (const target of Object.keys(targets).sort()) {\n    const value = targets[target];\n    if (typeof value === \"number\" && value % 1 !== 0) {\n      decimalWarnings.push({\n        target,\n        value\n      });\n    }\n    const [parsedTarget, parsedValue] = target === \"node\" ? nodeTargetParser(value) : defaultTargetParser(target, value);\n    if (parsedValue) {\n      result[parsedTarget] = parsedValue;\n    }\n  }\n  outputDecimalWarning(decimalWarnings);\n  return result;\n}","map":{"version":3,"mappings":"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","names":["ESM_SUPPORT","browserModulesData","v","OptionValidator","validateTargetNames","targets","validTargets","Object","keys","TargetNames","target","Error","formatMessage","isBrowsersQueryValid","browsers","Array","isArray","every","b","validateBrowsers","invariant","undefined","String","getLowestVersions","reduce","all","browser","browserName","browserVersion","split","browserNameMap","splitVersion","toLowerCase","isSplitUnreleased","version","isUnreleased","parsedBrowserVersion","e","outputDecimalWarning","decimalTargets","length","console","warn","forEach","value","semverifyTarget","error","nodeTargetParser","parsed","process","versions","node","defaultTargetParser","generateTargets","inputTargets","input","esmodules","resolveTargets","queries","env","resolved","browserslist","mobileToDesktop","targetsCache","LruCache","max","resolveTargetsCached","cacheKey","join","cached","get","set","getTargets","options","configPath","shouldParseBrowsers","hasTargets","shouldSearchForConfig","ignoreBrowserslistConfig","loadConfig","config","configFile","path","browserslistEnv","_browsers","map","_browsers2","queryBrowsers","esmSupportVersion","assign","result","decimalWarnings","sort","push","parsedTarget","parsedValue"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/helper-compilation-targets/src/index.ts"],"sourcesContent":["import browserslist from \"browserslist\";\nimport { findSuggestion } from \"@babel/helper-validator-option\";\nimport browserModulesData from \"@babel/compat-data/native-modules\";\nimport LruCache from \"lru-cache\";\n\nimport {\n  semverify,\n  semverMin,\n  isUnreleasedVersion,\n  getLowestUnreleased,\n  getHighestUnreleased,\n} from \"./utils\";\nimport { OptionValidator } from \"@babel/helper-validator-option\";\nimport { browserNameMap } from \"./targets\";\nimport { TargetNames } from \"./options\";\nimport type {\n  Target,\n  Targets,\n  InputTargets,\n  Browsers,\n  BrowserslistBrowserName,\n  TargetsTuple,\n} from \"./types\";\n\nexport type { Target, Targets, InputTargets };\n\nexport { prettifyTargets } from \"./pretty\";\nexport { getInclusionReasons } from \"./debug\";\nexport { default as filterItems, isRequired } from \"./filter-items\";\nexport { unreleasedLabels } from \"./targets\";\nexport { TargetNames };\n\nconst ESM_SUPPORT = browserModulesData[\"es6.module\"];\n\ndeclare const PACKAGE_JSON: { name: string; version: string };\nconst v = new OptionValidator(PACKAGE_JSON.name);\n\nfunction validateTargetNames(targets: Targets): TargetsTuple {\n  const validTargets = Object.keys(TargetNames);\n  for (const target of Object.keys(targets)) {\n    if (!(target in TargetNames)) {\n      throw new Error(\n        v.formatMessage(`'${target}' is not a valid target\n- Did you mean '${findSuggestion(target, validTargets)}'?`),\n      );\n    }\n  }\n\n  return targets;\n}\n\nexport function isBrowsersQueryValid(browsers: unknown): boolean {\n  return (\n    typeof browsers === \"string\" ||\n    (Array.isArray(browsers) && browsers.every(b => typeof b === \"string\"))\n  );\n}\n\nfunction validateBrowsers(browsers: Browsers | undefined) {\n  v.invariant(\n    browsers === undefined || isBrowsersQueryValid(browsers),\n    `'${String(browsers)}' is not a valid browserslist query`,\n  );\n\n  return browsers;\n}\n\nfunction getLowestVersions(browsers: Array<string>): Targets {\n  return browsers.reduce((all, browser) => {\n    const [browserName, browserVersion] = browser.split(\" \") as [\n      BrowserslistBrowserName,\n      string,\n    ];\n    const target = browserNameMap[browserName];\n\n    if (!target) {\n      return all;\n    }\n\n    try {\n      // Browser version can return as \"10.0-10.2\"\n      const splitVersion = browserVersion.split(\"-\")[0].toLowerCase();\n      const isSplitUnreleased = isUnreleasedVersion(splitVersion, target);\n\n      if (!all[target]) {\n        all[target] = isSplitUnreleased\n          ? splitVersion\n          : semverify(splitVersion);\n        return all;\n      }\n\n      const version = all[target];\n      const isUnreleased = isUnreleasedVersion(version, target);\n\n      if (isUnreleased && isSplitUnreleased) {\n        all[target] = getLowestUnreleased(version, splitVersion, target);\n      } else if (isUnreleased) {\n        all[target] = semverify(splitVersion);\n      } else if (!isUnreleased && !isSplitUnreleased) {\n        const parsedBrowserVersion = semverify(splitVersion);\n\n        all[target] = semverMin(version, parsedBrowserVersion);\n      }\n    } catch (e) {}\n\n    return all;\n  }, {} as Record<Target, string>);\n}\n\nfunction outputDecimalWarning(\n  decimalTargets: Array<{ target: string; value: number }>,\n) {\n  if (!decimalTargets.length) {\n    return;\n  }\n\n  console.warn(\"Warning, the following targets are using a decimal version:\\n\");\n  decimalTargets.forEach(({ target, value }) =>\n    console.warn(`  ${target}: ${value}`),\n  );\n  console.warn(`\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\ngetting parsed as 6.1, which can lead to unexpected behavior.\n`);\n}\n\nfunction semverifyTarget(target: Target, value: string) {\n  try {\n    return semverify(value);\n  } catch (error) {\n    throw new Error(\n      v.formatMessage(\n        `'${value}' is not a valid value for 'targets.${target}'.`,\n      ),\n    );\n  }\n}\n\n// Parse `node: true` and `node: \"current\"` to version\nfunction nodeTargetParser(value: true | string) {\n  const parsed =\n    value === true || value === \"current\"\n      ? process.versions.node\n      : semverifyTarget(\"node\", value);\n  return [\"node\", parsed] as const;\n}\n\nfunction defaultTargetParser(\n  target: Exclude<Target, \"node\">,\n  value: string,\n): readonly [Exclude<Target, \"node\">, string] {\n  const version = isUnreleasedVersion(value, target)\n    ? value.toLowerCase()\n    : semverifyTarget(target, value);\n  return [target, version] as const;\n}\n\nfunction generateTargets(inputTargets: InputTargets): Targets {\n  const input = { ...inputTargets };\n  delete input.esmodules;\n  delete input.browsers;\n  return input;\n}\n\nfunction resolveTargets(queries: Browsers, env?: string): Targets {\n  const resolved = browserslist(queries, {\n    mobileToDesktop: true,\n    env,\n  });\n  return getLowestVersions(resolved);\n}\n\nconst targetsCache = new LruCache({ max: 64 });\n\nfunction resolveTargetsCached(queries: Browsers, env?: string): Targets {\n  const cacheKey = typeof queries === \"string\" ? queries : queries.join() + env;\n  let cached = targetsCache.get(cacheKey) as Targets | undefined;\n  if (!cached) {\n    cached = resolveTargets(queries, env);\n    targetsCache.set(cacheKey, cached);\n  }\n  return { ...cached };\n}\n\ntype GetTargetsOption = {\n  // This is not the path of the config file, but the path where start searching it from\n  configPath?: string;\n  // The path of the config file\n  configFile?: string;\n  // The env to pass to browserslist\n  browserslistEnv?: string;\n  // true to disable config loading\n  ignoreBrowserslistConfig?: boolean;\n};\n\nexport default function getTargets(\n  inputTargets: InputTargets = {},\n  options: GetTargetsOption = {},\n): Targets {\n  let { browsers, esmodules } = inputTargets;\n  const { configPath = \".\" } = options;\n\n  validateBrowsers(browsers);\n\n  const input = generateTargets(inputTargets);\n  let targets = validateTargetNames(input);\n\n  const shouldParseBrowsers = !!browsers;\n  const hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;\n  const shouldSearchForConfig =\n    !options.ignoreBrowserslistConfig && !hasTargets;\n\n  if (!browsers && shouldSearchForConfig) {\n    browsers = browserslist.loadConfig({\n      config: options.configFile,\n      path: configPath,\n      env: options.browserslistEnv,\n    });\n    if (browsers == null) {\n      if (process.env.BABEL_8_BREAKING) {\n        // In Babel 8, if no targets are passed, we use browserslist's defaults\n        // and exclude IE 11.\n        browsers = [\"defaults, not ie 11\"];\n      } else {\n        // If no targets are passed, we need to overwrite browserslist's defaults\n        // so that we enable all transforms (acting like the now deprecated\n        // preset-latest).\n        browsers = [];\n      }\n    }\n  }\n\n  // `esmodules` as a target indicates the specific set of browsers supporting ES Modules.\n  // These values OVERRIDE the `browsers` field.\n  if (esmodules && (esmodules !== \"intersect\" || !browsers?.length)) {\n    browsers = Object.keys(ESM_SUPPORT)\n      .map(\n        (browser: keyof typeof ESM_SUPPORT) =>\n          `${browser} >= ${ESM_SUPPORT[browser]}`,\n      )\n      .join(\", \");\n    esmodules = false;\n  }\n\n  // If current value of `browsers` is undefined (`ignoreBrowserslistConfig` should be `false`)\n  // or an empty array (without any user config, use default config),\n  // we don't need to call `resolveTargets` to execute the related methods of `browserslist` library.\n  if (browsers?.length) {\n    const queryBrowsers = resolveTargetsCached(\n      browsers,\n      options.browserslistEnv,\n    );\n\n    if (esmodules === \"intersect\") {\n      for (const browser of Object.keys(queryBrowsers) as Target[]) {\n        const version = queryBrowsers[browser];\n        const esmSupportVersion =\n          // @ts-expect-error ie is not in ESM_SUPPORT\n          ESM_SUPPORT[browser];\n\n        if (esmSupportVersion) {\n          queryBrowsers[browser] = getHighestUnreleased(\n            version,\n            semverify(esmSupportVersion),\n            browser,\n          );\n        } else {\n          delete queryBrowsers[browser];\n        }\n      }\n    }\n\n    targets = Object.assign(queryBrowsers, targets);\n  }\n\n  // Parse remaining targets\n  const result: Targets = {};\n  const decimalWarnings = [];\n  for (const target of Object.keys(targets).sort() as Target[]) {\n    const value = targets[target];\n\n    // Warn when specifying minor/patch as a decimal\n    if (typeof value === \"number\" && value % 1 !== 0) {\n      decimalWarnings.push({ target, value });\n    }\n\n    const [parsedTarget, parsedValue] =\n      target === \"node\"\n        ? nodeTargetParser(value)\n        : defaultTargetParser(target, value as string);\n\n    if (parsedValue) {\n      // Merge (lowest wins)\n      result[parsedTarget] = parsedValue;\n    }\n  }\n\n  outputDecimalWarning(decimalWarnings);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}