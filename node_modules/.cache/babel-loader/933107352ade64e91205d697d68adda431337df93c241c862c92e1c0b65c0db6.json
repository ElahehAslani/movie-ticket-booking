{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n  _parser = function () {\n    return data;\n  };\n  return data;\n}\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n  _codeFrame = function () {\n    return data;\n  };\n  return data;\n}\nvar _missingPluginHelper = require(\"./util/missing-plugin-helper\");\nfunction parser(pluginPasses, _ref, code) {\n  let {\n    parserOpts,\n    highlightCode = true,\n    filename = \"unknown\"\n  } = _ref;\n  return function* () {\n    try {\n      const results = [];\n      for (const plugins of pluginPasses) {\n        for (const plugin of plugins) {\n          const {\n            parserOverride\n          } = plugin;\n          if (parserOverride) {\n            const ast = parserOverride(code, parserOpts, _parser().parse);\n            if (ast !== undefined) results.push(ast);\n          }\n        }\n      }\n      if (results.length === 0) {\n        return (0, _parser().parse)(code, parserOpts);\n      } else if (results.length === 1) {\n        yield* [];\n        if (typeof results[0].then === \"function\") {\n          throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n        }\n        return results[0];\n      }\n      throw new Error(\"More than one plugin attempted to override parsing.\");\n    } catch (err) {\n      if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n        err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n      }\n      const {\n        loc,\n        missingPlugin\n      } = err;\n      if (loc) {\n        const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n          start: {\n            line: loc.line,\n            column: loc.column + 1\n          }\n        }, {\n          highlightCode\n        });\n        if (missingPlugin) {\n          err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n        } else {\n          err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n        }\n        err.code = \"BABEL_PARSE_ERROR\";\n      }\n      throw err;\n    }\n  }();\n}\n0 && 0;","map":{"version":3,"mappings":";;;;;;AACA;EAAA;EAAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAAC;IAAA;EAAA;EAAA;AAAA;AACA;AAKe,SAAUC,MAAM,CAC7BC,YAA0B,QAE1BC,IAAY;EAAA,IADZ;IAAEC,UAAU;IAAEC,aAAa,GAAG,IAAI;IAAEC,QAAQ,GAAG;EAAe,CAAC;EAAA,oBAEzC;IACtB,IAAI;MACF,MAAMC,OAAO,GAAG,EAAE;MAClB,KAAK,MAAMC,OAAO,IAAIN,YAAY,EAAE;QAClC,KAAK,MAAMO,MAAM,IAAID,OAAO,EAAE;UAC5B,MAAM;YAAEE;UAAe,CAAC,GAAGD,MAAM;UACjC,IAAIC,cAAc,EAAE;YAClB,MAAMC,GAAG,GAAGD,cAAc,CAACP,IAAI,EAAEC,UAAU,EAAEQ,eAAK,CAAC;YAEnD,IAAID,GAAG,KAAKE,SAAS,EAAEN,OAAO,CAACO,IAAI,CAACH,GAAG,CAAC;UAC1C;QACF;MACF;MAEA,IAAIJ,OAAO,CAACQ,MAAM,KAAK,CAAC,EAAE;QACxB,OAAO,mBAAK,EAACZ,IAAI,EAAEC,UAAU,CAAC;MAChC,CAAC,MAAM,IAAIG,OAAO,CAACQ,MAAM,KAAK,CAAC,EAAE;QAE/B,OAAO,EAAE;QACT,IAAI,OAAOR,OAAO,CAAC,CAAC,CAAC,CAACS,IAAI,KAAK,UAAU,EAAE;UACzC,MAAM,IAAIC,KAAK,CACZ,iDAAgD,GAC9C,wDAAuD,GACvD,8DAA6D,GAC7D,2BAA0B,CAC9B;QACH;QACA,OAAOV,OAAO,CAAC,CAAC,CAAC;MACnB;MAEA,MAAM,IAAIU,KAAK,CAAC,qDAAqD,CAAC;IACxE,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,IAAIA,GAAG,CAACf,IAAI,KAAK,yCAAyC,EAAE;QAC1De,GAAG,CAACC,OAAO,IACT,uEAAuE,GACvE,+DAA+D;MAEnE;MAEA,MAAM;QAAEC,GAAG;QAAEC;MAAc,CAAC,GAAGH,GAAG;MAClC,IAAIE,GAAG,EAAE;QACP,MAAME,SAAS,GAAG,iCAAgB,EAChCnB,IAAI,EACJ;UACEoB,KAAK,EAAE;YACLC,IAAI,EAAEJ,GAAG,CAACI,IAAI;YACdC,MAAM,EAAEL,GAAG,CAACK,MAAM,GAAG;UACvB;QACF,CAAC,EACD;UACEpB;QACF,CAAC,CACF;QACD,IAAIgB,aAAa,EAAE;UACjBH,GAAG,CAACC,OAAO,GACR,GAAEb,QAAS,IAAG,GACf,gCAA4B,EAACe,aAAa,CAAC,CAAC,CAAC,EAAED,GAAG,EAAEE,SAAS,CAAC;QAClE,CAAC,MAAM;UACLJ,GAAG,CAACC,OAAO,GAAI,GAAEb,QAAS,KAAIY,GAAG,CAACC,OAAQ,MAAK,GAAGG,SAAS;QAC7D;QACAJ,GAAG,CAACf,IAAI,GAAG,mBAAmB;MAChC;MACA,MAAMe,GAAG;IACX;EACF;AAAA;AAAC","names":["_parser","_codeFrame","parser","pluginPasses","code","parserOpts","highlightCode","filename","results","plugins","plugin","parserOverride","ast","parse","undefined","push","length","then","Error","err","message","loc","missingPlugin","codeFrame","start","line","column"],"sources":["/Users/elahehaslani/Work/Sample-Project/ticket-booking/ticket-booking/node_modules/@babel/core/src/parser/index.ts"],"sourcesContent":["import type { Handler } from \"gensync\";\nimport { parse } from \"@babel/parser\";\nimport { codeFrameColumns } from \"@babel/code-frame\";\nimport generateMissingPluginMessage from \"./util/missing-plugin-helper\";\nimport type { PluginPasses } from \"../config\";\n\nexport type ParseResult = ReturnType<typeof parse>;\n\nexport default function* parser(\n  pluginPasses: PluginPasses,\n  { parserOpts, highlightCode = true, filename = \"unknown\" }: any,\n  code: string,\n): Handler<ParseResult> {\n  try {\n    const results = [];\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const { parserOverride } = plugin;\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, parse);\n\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return parse(code, parserOpts);\n    } else if (results.length === 1) {\n      // @ts-expect-error - If we want to allow async parsers\n      yield* [];\n      if (typeof results[0].then === \"function\") {\n        throw new Error(\n          `You appear to be using an async parser plugin, ` +\n            `which your current version of Babel does not support. ` +\n            `If you're using a published plugin, you may need to upgrade ` +\n            `your @babel/core version.`,\n        );\n      }\n      return results[0];\n    }\n    // TODO: Add an error code\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message +=\n        \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" +\n        \"or sourceType:unambiguous in your Babel config for this file.\";\n      // err.code will be changed to BABEL_PARSE_ERROR later.\n    }\n\n    const { loc, missingPlugin } = err;\n    if (loc) {\n      const codeFrame = codeFrameColumns(\n        code,\n        {\n          start: {\n            line: loc.line,\n            column: loc.column + 1,\n          },\n        },\n        {\n          highlightCode,\n        },\n      );\n      if (missingPlugin) {\n        err.message =\n          `${filename}: ` +\n          generateMissingPluginMessage(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n    throw err;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}